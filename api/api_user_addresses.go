/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserAddressesAPIService UserAddressesAPI service
type UserAddressesAPIService service

type ApiCreateUserAddressRequest struct {
	ctx context.Context
	ApiService *UserAddressesAPIService
	userAddressCreate *UserAddressCreate
}

// Parameters that can be defined during user address creation
func (r ApiCreateUserAddressRequest) UserAddressCreate(userAddressCreate UserAddressCreate) ApiCreateUserAddressRequest {
	r.userAddressCreate = &userAddressCreate
	return r
}

func (r ApiCreateUserAddressRequest) Execute() (*CreateUserAddress200Response, *http.Response, error) {
	return r.ApiService.CreateUserAddressExecute(r)
}

/*
CreateUserAddress Creates a user address

Creates a user address.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUserAddressRequest
*/
func (a *UserAddressesAPIService) CreateUserAddress(ctx context.Context) ApiCreateUserAddressRequest {
	return ApiCreateUserAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateUserAddress200Response
func (a *UserAddressesAPIService) CreateUserAddressExecute(r ApiCreateUserAddressRequest) (*CreateUserAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateUserAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAddressesAPIService.CreateUserAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_addresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userAddressCreate == nil {
		return localVarReturnValue, nil, reportError("userAddressCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userAddressCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindUserAddressRequest struct {
	ctx context.Context
	ApiService *UserAddressesAPIService
	pageNumber *int32
	pageSize *int32
	filterCustomerReferenceEq *string
	filterCustomerReferenceContains *string
	filterStreetAddressContains *string
	sort *string
}

// The page number to load.
func (r ApiFindUserAddressRequest) PageNumber(pageNumber int32) ApiFindUserAddressRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiFindUserAddressRequest) PageSize(pageSize int32) ApiFindUserAddressRequest {
	r.pageSize = &pageSize
	return r
}

// Filter addresses via the customer reference set. Matching is not case-sensitive.
func (r ApiFindUserAddressRequest) FilterCustomerReferenceEq(filterCustomerReferenceEq string) ApiFindUserAddressRequest {
	r.filterCustomerReferenceEq = &filterCustomerReferenceEq
	return r
}

// If present, addresses with &lt;code&gt;customer_reference&lt;/code&gt; containing the given value will be returned. Matching is not case-sensitive.
func (r ApiFindUserAddressRequest) FilterCustomerReferenceContains(filterCustomerReferenceContains string) ApiFindUserAddressRequest {
	r.filterCustomerReferenceContains = &filterCustomerReferenceContains
	return r
}

// If present, addresses with &lt;code&gt;street_address&lt;/code&gt; containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.
func (r ApiFindUserAddressRequest) FilterStreetAddressContains(filterStreetAddressContains string) ApiFindUserAddressRequest {
	r.filterStreetAddressContains = &filterStreetAddressContains
	return r
}

// Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the &lt;code&gt; -&lt;/code&gt; prefix.&lt;br/&gt;&lt;br/&gt; That is: &lt;ul&gt;   &lt;li&gt;     &lt;code&gt;street_address&lt;/code&gt;: sorts the result by the     &lt;code&gt;street_address&lt;/code&gt; field in ascending order.   &lt;/li&gt;    &lt;li&gt;     &lt;code&gt;-street_address&lt;/code&gt;: sorts the result by the     &lt;code&gt;street_address&lt;/code&gt; field in descending order.   &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; If not given, results are sorted by &lt;code&gt;created_at&lt;/code&gt; in descending order.
func (r ApiFindUserAddressRequest) Sort(sort string) ApiFindUserAddressRequest {
	r.sort = &sort
	return r
}

func (r ApiFindUserAddressRequest) Execute() (*FindUserAddress200Response, *http.Response, error) {
	return r.ApiService.FindUserAddressExecute(r)
}

/*
FindUserAddress List all user addresses

Returns a list of your user addresses.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindUserAddressRequest
*/
func (a *UserAddressesAPIService) FindUserAddress(ctx context.Context) ApiFindUserAddressRequest {
	return ApiFindUserAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FindUserAddress200Response
func (a *UserAddressesAPIService) FindUserAddressExecute(r ApiFindUserAddressRequest) (*FindUserAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FindUserAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAddressesAPIService.FindUserAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_addresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterCustomerReferenceEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference][eq]", r.filterCustomerReferenceEq, "form", "")
	}
	if r.filterCustomerReferenceContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference][contains]", r.filterCustomerReferenceContains, "form", "")
	}
	if r.filterStreetAddressContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[street_address][contains]", r.filterStreetAddressContains, "form", "")
	} else {
		var defaultValue string = "null"
		r.filterStreetAddressContains = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserAddressRequest struct {
	ctx context.Context
	ApiService *UserAddressesAPIService
	id string
}

func (r ApiGetUserAddressRequest) Execute() (*CreateUserAddress200Response, *http.Response, error) {
	return r.ApiService.GetUserAddressExecute(r)
}

/*
GetUserAddress Retrieve a user address

Retrieves the details of an existing user address.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id user address ID
 @return ApiGetUserAddressRequest
*/
func (a *UserAddressesAPIService) GetUserAddress(ctx context.Context, id string) ApiGetUserAddressRequest {
	return ApiGetUserAddressRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateUserAddress200Response
func (a *UserAddressesAPIService) GetUserAddressExecute(r ApiGetUserAddressRequest) (*CreateUserAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateUserAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAddressesAPIService.GetUserAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_addresses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
