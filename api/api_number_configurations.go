/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NumberConfigurationsAPIService NumberConfigurationsAPI service
type NumberConfigurationsAPIService service

type ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest struct {
	ctx context.Context
	ApiService *NumberConfigurationsAPIService
	bulkMessagingSettingsUpdatePhoneNumbersRequest *BulkMessagingSettingsUpdatePhoneNumbersRequest
}

func (r ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest) BulkMessagingSettingsUpdatePhoneNumbersRequest(bulkMessagingSettingsUpdatePhoneNumbersRequest BulkMessagingSettingsUpdatePhoneNumbersRequest) ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest {
	r.bulkMessagingSettingsUpdatePhoneNumbersRequest = &bulkMessagingSettingsUpdatePhoneNumbersRequest
	return r
}

func (r ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest) Execute() (*RetrieveBulkUpdateMessagingSettingsResponse, *http.Response, error) {
	return r.ApiService.BulkUpdateMessagingSettingsOnPhoneNumbersExecute(r)
}

/*
BulkUpdateMessagingSettingsOnPhoneNumbers Update the messaging profile of multiple phone numbers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest
*/
func (a *NumberConfigurationsAPIService) BulkUpdateMessagingSettingsOnPhoneNumbers(ctx context.Context) ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest {
	return ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RetrieveBulkUpdateMessagingSettingsResponse
func (a *NumberConfigurationsAPIService) BulkUpdateMessagingSettingsOnPhoneNumbersExecute(r ApiBulkUpdateMessagingSettingsOnPhoneNumbersRequest) (*RetrieveBulkUpdateMessagingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveBulkUpdateMessagingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumberConfigurationsAPIService.BulkUpdateMessagingSettingsOnPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_numbers_bulk_updates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkMessagingSettingsUpdatePhoneNumbersRequest == nil {
		return localVarReturnValue, nil, reportError("bulkMessagingSettingsUpdatePhoneNumbersRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkMessagingSettingsUpdatePhoneNumbersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBulkUpdateMessagingSettingsOnPhoneNumbersStatusRequest struct {
	ctx context.Context
	ApiService *NumberConfigurationsAPIService
	orderId string
}

func (r ApiGetBulkUpdateMessagingSettingsOnPhoneNumbersStatusRequest) Execute() (*RetrieveBulkUpdateMessagingSettingsResponse, *http.Response, error) {
	return r.ApiService.GetBulkUpdateMessagingSettingsOnPhoneNumbersStatusExecute(r)
}

/*
GetBulkUpdateMessagingSettingsOnPhoneNumbersStatus Retrieve bulk update status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId Order ID to verify bulk update status.
 @return ApiGetBulkUpdateMessagingSettingsOnPhoneNumbersStatusRequest
*/
func (a *NumberConfigurationsAPIService) GetBulkUpdateMessagingSettingsOnPhoneNumbersStatus(ctx context.Context, orderId string) ApiGetBulkUpdateMessagingSettingsOnPhoneNumbersStatusRequest {
	return ApiGetBulkUpdateMessagingSettingsOnPhoneNumbersStatusRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return RetrieveBulkUpdateMessagingSettingsResponse
func (a *NumberConfigurationsAPIService) GetBulkUpdateMessagingSettingsOnPhoneNumbersStatusExecute(r ApiGetBulkUpdateMessagingSettingsOnPhoneNumbersStatusRequest) (*RetrieveBulkUpdateMessagingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveBulkUpdateMessagingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumberConfigurationsAPIService.GetBulkUpdateMessagingSettingsOnPhoneNumbersStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_numbers_bulk_updates/{order_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"order_id"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhoneNumberMessagingSettingsRequest struct {
	ctx context.Context
	ApiService *NumberConfigurationsAPIService
	id string
}

func (r ApiGetPhoneNumberMessagingSettingsRequest) Execute() (*RetrieveMessagingSettingsResponse, *http.Response, error) {
	return r.ApiService.GetPhoneNumberMessagingSettingsExecute(r)
}

/*
GetPhoneNumberMessagingSettings Retrieve a phone number with messaging settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the type of resource.
 @return ApiGetPhoneNumberMessagingSettingsRequest
*/
func (a *NumberConfigurationsAPIService) GetPhoneNumberMessagingSettings(ctx context.Context, id string) ApiGetPhoneNumberMessagingSettingsRequest {
	return ApiGetPhoneNumberMessagingSettingsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RetrieveMessagingSettingsResponse
func (a *NumberConfigurationsAPIService) GetPhoneNumberMessagingSettingsExecute(r ApiGetPhoneNumberMessagingSettingsRequest) (*RetrieveMessagingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveMessagingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumberConfigurationsAPIService.GetPhoneNumberMessagingSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}/messaging"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPhoneNumbersWithMessagingSettingsRequest struct {
	ctx context.Context
	ApiService *NumberConfigurationsAPIService
	pageNumber *int32
	pageSize *int32
}

// The page number to load.
func (r ApiListPhoneNumbersWithMessagingSettingsRequest) PageNumber(pageNumber int32) ApiListPhoneNumbersWithMessagingSettingsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListPhoneNumbersWithMessagingSettingsRequest) PageSize(pageSize int32) ApiListPhoneNumbersWithMessagingSettingsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListPhoneNumbersWithMessagingSettingsRequest) Execute() (*ListMessagingSettingsResponse, *http.Response, error) {
	return r.ApiService.ListPhoneNumbersWithMessagingSettingsExecute(r)
}

/*
ListPhoneNumbersWithMessagingSettings List phone numbers with messaging settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPhoneNumbersWithMessagingSettingsRequest
*/
func (a *NumberConfigurationsAPIService) ListPhoneNumbersWithMessagingSettings(ctx context.Context) ApiListPhoneNumbersWithMessagingSettingsRequest {
	return ApiListPhoneNumbersWithMessagingSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListMessagingSettingsResponse
func (a *NumberConfigurationsAPIService) ListPhoneNumbersWithMessagingSettingsExecute(r ApiListPhoneNumbersWithMessagingSettingsRequest) (*ListMessagingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListMessagingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumberConfigurationsAPIService.ListPhoneNumbersWithMessagingSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/messaging"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePhoneNumberMessagingSettingsRequest struct {
	ctx context.Context
	ApiService *NumberConfigurationsAPIService
	id string
	updatePhoneNumberMessagingSettingsRequest *UpdatePhoneNumberMessagingSettingsRequest
}

// The new configuration to set for this phone number.  To avoid modifying a value, either omit the field or set its value to &#x60;null&#x60;.
func (r ApiUpdatePhoneNumberMessagingSettingsRequest) UpdatePhoneNumberMessagingSettingsRequest(updatePhoneNumberMessagingSettingsRequest UpdatePhoneNumberMessagingSettingsRequest) ApiUpdatePhoneNumberMessagingSettingsRequest {
	r.updatePhoneNumberMessagingSettingsRequest = &updatePhoneNumberMessagingSettingsRequest
	return r
}

func (r ApiUpdatePhoneNumberMessagingSettingsRequest) Execute() (*RetrieveMessagingSettingsResponse, *http.Response, error) {
	return r.ApiService.UpdatePhoneNumberMessagingSettingsExecute(r)
}

/*
UpdatePhoneNumberMessagingSettings Update the messaging profile and/or messaging product of a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The phone number to update.
 @return ApiUpdatePhoneNumberMessagingSettingsRequest
*/
func (a *NumberConfigurationsAPIService) UpdatePhoneNumberMessagingSettings(ctx context.Context, id string) ApiUpdatePhoneNumberMessagingSettingsRequest {
	return ApiUpdatePhoneNumberMessagingSettingsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RetrieveMessagingSettingsResponse
func (a *NumberConfigurationsAPIService) UpdatePhoneNumberMessagingSettingsExecute(r ApiUpdatePhoneNumberMessagingSettingsRequest) (*RetrieveMessagingSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveMessagingSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NumberConfigurationsAPIService.UpdatePhoneNumberMessagingSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}/messaging"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updatePhoneNumberMessagingSettingsRequest == nil {
		return localVarReturnValue, nil, reportError("updatePhoneNumberMessagingSettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePhoneNumberMessagingSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
