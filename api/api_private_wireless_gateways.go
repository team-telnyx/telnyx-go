/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PrivateWirelessGatewaysAPIService PrivateWirelessGatewaysAPI service
type PrivateWirelessGatewaysAPIService service

type ApiCreatePrivateWirelessGatewayRequest struct {
	ctx context.Context
	ApiService *PrivateWirelessGatewaysAPIService
	createPrivateWirelessGatewayRequest *CreatePrivateWirelessGatewayRequest
}

func (r ApiCreatePrivateWirelessGatewayRequest) CreatePrivateWirelessGatewayRequest(createPrivateWirelessGatewayRequest CreatePrivateWirelessGatewayRequest) ApiCreatePrivateWirelessGatewayRequest {
	r.createPrivateWirelessGatewayRequest = &createPrivateWirelessGatewayRequest
	return r
}

func (r ApiCreatePrivateWirelessGatewayRequest) Execute() (*CreatePrivateWirelessGateway202Response, *http.Response, error) {
	return r.ApiService.CreatePrivateWirelessGatewayExecute(r)
}

/*
CreatePrivateWirelessGateway Create a Private Wireless Gateway

Asynchronously create a Private Wireless Gateway for SIM cards for a previously created network. This operation may take several minutes so you can check the Private Wireless Gateway status at the section Get a Private Wireless Gateway.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePrivateWirelessGatewayRequest
*/
func (a *PrivateWirelessGatewaysAPIService) CreatePrivateWirelessGateway(ctx context.Context) ApiCreatePrivateWirelessGatewayRequest {
	return ApiCreatePrivateWirelessGatewayRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreatePrivateWirelessGateway202Response
func (a *PrivateWirelessGatewaysAPIService) CreatePrivateWirelessGatewayExecute(r ApiCreatePrivateWirelessGatewayRequest) (*CreatePrivateWirelessGateway202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreatePrivateWirelessGateway202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateWirelessGatewaysAPIService.CreatePrivateWirelessGateway")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/private_wireless_gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPrivateWirelessGatewayRequest == nil {
		return localVarReturnValue, nil, reportError("createPrivateWirelessGatewayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPrivateWirelessGatewayRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteWirelessGatewayRequest struct {
	ctx context.Context
	ApiService *PrivateWirelessGatewaysAPIService
	id string
}

func (r ApiDeleteWirelessGatewayRequest) Execute() (*GetPrivateWirelessGateway200Response, *http.Response, error) {
	return r.ApiService.DeleteWirelessGatewayExecute(r)
}

/*
DeleteWirelessGateway Delete a Private Wireless Gateway

Deletes the Private Wireless Gateway.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the private wireless gateway.
 @return ApiDeleteWirelessGatewayRequest
*/
func (a *PrivateWirelessGatewaysAPIService) DeleteWirelessGateway(ctx context.Context, id string) ApiDeleteWirelessGatewayRequest {
	return ApiDeleteWirelessGatewayRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetPrivateWirelessGateway200Response
func (a *PrivateWirelessGatewaysAPIService) DeleteWirelessGatewayExecute(r ApiDeleteWirelessGatewayRequest) (*GetPrivateWirelessGateway200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPrivateWirelessGateway200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateWirelessGatewaysAPIService.DeleteWirelessGateway")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/private_wireless_gateways/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrivateWirelessGatewayRequest struct {
	ctx context.Context
	ApiService *PrivateWirelessGatewaysAPIService
	id string
}

func (r ApiGetPrivateWirelessGatewayRequest) Execute() (*GetPrivateWirelessGateway200Response, *http.Response, error) {
	return r.ApiService.GetPrivateWirelessGatewayExecute(r)
}

/*
GetPrivateWirelessGateway Get a Private Wireless Gateway

Retrieve information about a Private Wireless Gateway.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the private wireless gateway.
 @return ApiGetPrivateWirelessGatewayRequest
*/
func (a *PrivateWirelessGatewaysAPIService) GetPrivateWirelessGateway(ctx context.Context, id string) ApiGetPrivateWirelessGatewayRequest {
	return ApiGetPrivateWirelessGatewayRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetPrivateWirelessGateway200Response
func (a *PrivateWirelessGatewaysAPIService) GetPrivateWirelessGatewayExecute(r ApiGetPrivateWirelessGatewayRequest) (*GetPrivateWirelessGateway200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPrivateWirelessGateway200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateWirelessGatewaysAPIService.GetPrivateWirelessGateway")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/private_wireless_gateways/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrivateWirelessGatewaysRequest struct {
	ctx context.Context
	ApiService *PrivateWirelessGatewaysAPIService
	pageNumber *int32
	pageSize *int32
	filterName *string
	filterIpRange *string
	filterRegionCode *string
	filterCreatedAt *string
	filterUpdatedAt *string
}

// The page number to load.
func (r ApiGetPrivateWirelessGatewaysRequest) PageNumber(pageNumber int32) ApiGetPrivateWirelessGatewaysRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetPrivateWirelessGatewaysRequest) PageSize(pageSize int32) ApiGetPrivateWirelessGatewaysRequest {
	r.pageSize = &pageSize
	return r
}

// The name of the Private Wireless Gateway.
func (r ApiGetPrivateWirelessGatewaysRequest) FilterName(filterName string) ApiGetPrivateWirelessGatewaysRequest {
	r.filterName = &filterName
	return r
}

// The IP address range of the Private Wireless Gateway.
func (r ApiGetPrivateWirelessGatewaysRequest) FilterIpRange(filterIpRange string) ApiGetPrivateWirelessGatewaysRequest {
	r.filterIpRange = &filterIpRange
	return r
}

// The name of the region where the Private Wireless Gateway is deployed.
func (r ApiGetPrivateWirelessGatewaysRequest) FilterRegionCode(filterRegionCode string) ApiGetPrivateWirelessGatewaysRequest {
	r.filterRegionCode = &filterRegionCode
	return r
}

// Private Wireless Gateway resource creation date.
func (r ApiGetPrivateWirelessGatewaysRequest) FilterCreatedAt(filterCreatedAt string) ApiGetPrivateWirelessGatewaysRequest {
	r.filterCreatedAt = &filterCreatedAt
	return r
}

// When the Private Wireless Gateway was last updated.
func (r ApiGetPrivateWirelessGatewaysRequest) FilterUpdatedAt(filterUpdatedAt string) ApiGetPrivateWirelessGatewaysRequest {
	r.filterUpdatedAt = &filterUpdatedAt
	return r
}

func (r ApiGetPrivateWirelessGatewaysRequest) Execute() (*GetPrivateWirelessGateways200Response, *http.Response, error) {
	return r.ApiService.GetPrivateWirelessGatewaysExecute(r)
}

/*
GetPrivateWirelessGateways Get all Private Wireless Gateways

Get all Private Wireless Gateways belonging to the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPrivateWirelessGatewaysRequest
*/
func (a *PrivateWirelessGatewaysAPIService) GetPrivateWirelessGateways(ctx context.Context) ApiGetPrivateWirelessGatewaysRequest {
	return ApiGetPrivateWirelessGatewaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetPrivateWirelessGateways200Response
func (a *PrivateWirelessGatewaysAPIService) GetPrivateWirelessGatewaysExecute(r ApiGetPrivateWirelessGatewaysRequest) (*GetPrivateWirelessGateways200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPrivateWirelessGateways200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateWirelessGatewaysAPIService.GetPrivateWirelessGateways")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/private_wireless_gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name]", r.filterName, "form", "")
	}
	if r.filterIpRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[ip_range]", r.filterIpRange, "form", "")
	}
	if r.filterRegionCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[region_code]", r.filterRegionCode, "form", "")
	}
	if r.filterCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at]", r.filterCreatedAt, "form", "")
	}
	if r.filterUpdatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[updated_at]", r.filterUpdatedAt, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
