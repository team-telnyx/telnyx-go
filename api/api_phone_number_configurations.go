/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PhoneNumberConfigurationsAPIService PhoneNumberConfigurationsAPI service
type PhoneNumberConfigurationsAPIService service

type ApiDeletePhoneNumberRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
}

func (r ApiDeletePhoneNumberRequest) Execute() (*PhoneNumberResponse1, *http.Response, error) {
	return r.ApiService.DeletePhoneNumberExecute(r)
}

/*
DeletePhoneNumber Delete a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiDeletePhoneNumberRequest
*/
func (a *PhoneNumberConfigurationsAPIService) DeletePhoneNumber(ctx context.Context, id string) ApiDeletePhoneNumberRequest {
	return ApiDeletePhoneNumberRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhoneNumberResponse1
func (a *PhoneNumberConfigurationsAPIService) DeletePhoneNumberExecute(r ApiDeletePhoneNumberRequest) (*PhoneNumberResponse1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberResponse1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.DeletePhoneNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnablePhoneNumberEmergencyRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
	phoneNumberEnableEmergencyRequest *PhoneNumberEnableEmergencyRequest
}

func (r ApiEnablePhoneNumberEmergencyRequest) PhoneNumberEnableEmergencyRequest(phoneNumberEnableEmergencyRequest PhoneNumberEnableEmergencyRequest) ApiEnablePhoneNumberEmergencyRequest {
	r.phoneNumberEnableEmergencyRequest = &phoneNumberEnableEmergencyRequest
	return r
}

func (r ApiEnablePhoneNumberEmergencyRequest) Execute() (*PhoneNumberEnableEmergency, *http.Response, error) {
	return r.ApiService.EnablePhoneNumberEmergencyExecute(r)
}

/*
EnablePhoneNumberEmergency Enable emergency for a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiEnablePhoneNumberEmergencyRequest
*/
func (a *PhoneNumberConfigurationsAPIService) EnablePhoneNumberEmergency(ctx context.Context, id string) ApiEnablePhoneNumberEmergencyRequest {
	return ApiEnablePhoneNumberEmergencyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhoneNumberEnableEmergency
func (a *PhoneNumberConfigurationsAPIService) EnablePhoneNumberEmergencyExecute(r ApiEnablePhoneNumberEmergencyRequest) (*PhoneNumberEnableEmergency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberEnableEmergency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.EnablePhoneNumberEmergency")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}/actions/enable_emergency"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumberEnableEmergencyRequest == nil {
		return localVarReturnValue, nil, reportError("phoneNumberEnableEmergencyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumberEnableEmergencyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhoneNumberVoiceSettingsRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
}

func (r ApiGetPhoneNumberVoiceSettingsRequest) Execute() (*RetrievePhoneNumberVoiceResponse, *http.Response, error) {
	return r.ApiService.GetPhoneNumberVoiceSettingsExecute(r)
}

/*
GetPhoneNumberVoiceSettings Retrieve a phone number with voice settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiGetPhoneNumberVoiceSettingsRequest
*/
func (a *PhoneNumberConfigurationsAPIService) GetPhoneNumberVoiceSettings(ctx context.Context, id string) ApiGetPhoneNumberVoiceSettingsRequest {
	return ApiGetPhoneNumberVoiceSettingsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RetrievePhoneNumberVoiceResponse
func (a *PhoneNumberConfigurationsAPIService) GetPhoneNumberVoiceSettingsExecute(r ApiGetPhoneNumberVoiceSettingsRequest) (*RetrievePhoneNumberVoiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrievePhoneNumberVoiceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.GetPhoneNumberVoiceSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}/voice"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPhoneNumbersRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	pageNumber *int32
	pageSize *int32
	filterTag *string
	filterPhoneNumber *string
	filterStatus *string
	filterCountryIsoAlpha2 *ListPhoneNumbersFilterCountryIsoAlpha2Parameter
	filterConnectionId *string
	filterVoiceConnectionNameContains *string
	filterVoiceConnectionNameStartsWith *string
	filterVoiceConnectionNameEndsWith *string
	filterVoiceConnectionNameEq *string
	filterVoiceUsagePaymentMethod *string
	filterBillingGroupId *string
	filterEmergencyAddressId *string
	filterCustomerReference *string
	filterNumberTypeEq *string
	filterSource *string
	sort *string
}

// The page number to load.
func (r ApiListPhoneNumbersRequest) PageNumber(pageNumber int32) ApiListPhoneNumbersRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListPhoneNumbersRequest) PageSize(pageSize int32) ApiListPhoneNumbersRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by phone number tags.
func (r ApiListPhoneNumbersRequest) FilterTag(filterTag string) ApiListPhoneNumbersRequest {
	r.filterTag = &filterTag
	return r
}

// Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned.
func (r ApiListPhoneNumbersRequest) FilterPhoneNumber(filterPhoneNumber string) ApiListPhoneNumbersRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

// Filter by phone number status.
func (r ApiListPhoneNumbersRequest) FilterStatus(filterStatus string) ApiListPhoneNumbersRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter by phone number country ISO alpha-2 code. Can be a single value or an array of values.
func (r ApiListPhoneNumbersRequest) FilterCountryIsoAlpha2(filterCountryIsoAlpha2 ListPhoneNumbersFilterCountryIsoAlpha2Parameter) ApiListPhoneNumbersRequest {
	r.filterCountryIsoAlpha2 = &filterCountryIsoAlpha2
	return r
}

// Filter by connection_id.
func (r ApiListPhoneNumbersRequest) FilterConnectionId(filterConnectionId string) ApiListPhoneNumbersRequest {
	r.filterConnectionId = &filterConnectionId
	return r
}

// Filter contains connection name. Requires at least three characters.
func (r ApiListPhoneNumbersRequest) FilterVoiceConnectionNameContains(filterVoiceConnectionNameContains string) ApiListPhoneNumbersRequest {
	r.filterVoiceConnectionNameContains = &filterVoiceConnectionNameContains
	return r
}

// Filter starts with connection name. Requires at least three characters.
func (r ApiListPhoneNumbersRequest) FilterVoiceConnectionNameStartsWith(filterVoiceConnectionNameStartsWith string) ApiListPhoneNumbersRequest {
	r.filterVoiceConnectionNameStartsWith = &filterVoiceConnectionNameStartsWith
	return r
}

// Filter ends with connection name. Requires at least three characters.
func (r ApiListPhoneNumbersRequest) FilterVoiceConnectionNameEndsWith(filterVoiceConnectionNameEndsWith string) ApiListPhoneNumbersRequest {
	r.filterVoiceConnectionNameEndsWith = &filterVoiceConnectionNameEndsWith
	return r
}

// Filter by connection name.
func (r ApiListPhoneNumbersRequest) FilterVoiceConnectionNameEq(filterVoiceConnectionNameEq string) ApiListPhoneNumbersRequest {
	r.filterVoiceConnectionNameEq = &filterVoiceConnectionNameEq
	return r
}

// Filter by usage_payment_method.
func (r ApiListPhoneNumbersRequest) FilterVoiceUsagePaymentMethod(filterVoiceUsagePaymentMethod string) ApiListPhoneNumbersRequest {
	r.filterVoiceUsagePaymentMethod = &filterVoiceUsagePaymentMethod
	return r
}

// Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;.
func (r ApiListPhoneNumbersRequest) FilterBillingGroupId(filterBillingGroupId string) ApiListPhoneNumbersRequest {
	r.filterBillingGroupId = &filterBillingGroupId
	return r
}

// Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string &#39;null&#39;.
func (r ApiListPhoneNumbersRequest) FilterEmergencyAddressId(filterEmergencyAddressId string) ApiListPhoneNumbersRequest {
	r.filterEmergencyAddressId = &filterEmergencyAddressId
	return r
}

// Filter numbers via the customer_reference set.
func (r ApiListPhoneNumbersRequest) FilterCustomerReference(filterCustomerReference string) ApiListPhoneNumbersRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

// Filter phone numbers by phone number type.
func (r ApiListPhoneNumbersRequest) FilterNumberTypeEq(filterNumberTypeEq string) ApiListPhoneNumbersRequest {
	r.filterNumberTypeEq = &filterNumberTypeEq
	return r
}

// Filter phone numbers by their source. Use &#39;ported&#39; for numbers ported from other carriers, or &#39;purchased&#39; for numbers bought directly from Telnyx.
func (r ApiListPhoneNumbersRequest) FilterSource(filterSource string) ApiListPhoneNumbersRequest {
	r.filterSource = &filterSource
	return r
}

// Specifies the sort order for results. If not given, results are sorted by created_at in descending order.
func (r ApiListPhoneNumbersRequest) Sort(sort string) ApiListPhoneNumbersRequest {
	r.sort = &sort
	return r
}

func (r ApiListPhoneNumbersRequest) Execute() (*ListPhoneNumbersResponse, *http.Response, error) {
	return r.ApiService.ListPhoneNumbersExecute(r)
}

/*
ListPhoneNumbers List phone numbers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPhoneNumbersRequest
*/
func (a *PhoneNumberConfigurationsAPIService) ListPhoneNumbers(ctx context.Context) ApiListPhoneNumbersRequest {
	return ApiListPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPhoneNumbersResponse
func (a *PhoneNumberConfigurationsAPIService) ListPhoneNumbersExecute(r ApiListPhoneNumbersRequest) (*ListPhoneNumbersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPhoneNumbersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.ListPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tag]", r.filterTag, "form", "")
	}
	if r.filterPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCountryIsoAlpha2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_iso_alpha2]", r.filterCountryIsoAlpha2, "form", "")
	}
	if r.filterConnectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_id]", r.filterConnectionId, "form", "")
	}
	if r.filterVoiceConnectionNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][contains]", r.filterVoiceConnectionNameContains, "form", "")
	}
	if r.filterVoiceConnectionNameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][starts_with]", r.filterVoiceConnectionNameStartsWith, "form", "")
	}
	if r.filterVoiceConnectionNameEndsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][ends_with]", r.filterVoiceConnectionNameEndsWith, "form", "")
	}
	if r.filterVoiceConnectionNameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][eq]", r.filterVoiceConnectionNameEq, "form", "")
	}
	if r.filterVoiceUsagePaymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.usage_payment_method]", r.filterVoiceUsagePaymentMethod, "form", "")
	}
	if r.filterBillingGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[billing_group_id]", r.filterBillingGroupId, "form", "")
	}
	if r.filterEmergencyAddressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[emergency_address_id]", r.filterEmergencyAddressId, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	if r.filterNumberTypeEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[number_type][eq]", r.filterNumberTypeEq, "form", "")
	}
	if r.filterSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[source]", r.filterSource, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPhoneNumbersWithVoiceSettingsRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	pageNumber *int32
	pageSize *int32
	filterPhoneNumber *string
	filterConnectionNameContains *string
	filterCustomerReference *string
	filterVoiceUsagePaymentMethod *string
	sort *string
}

// The page number to load.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) PageNumber(pageNumber int32) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) PageSize(pageSize int32) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) FilterPhoneNumber(filterPhoneNumber string) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

// Filter contains connection name. Requires at least three characters.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) FilterConnectionNameContains(filterConnectionNameContains string) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.filterConnectionNameContains = &filterConnectionNameContains
	return r
}

// Filter numbers via the customer_reference set.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) FilterCustomerReference(filterCustomerReference string) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

// Filter by usage_payment_method.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) FilterVoiceUsagePaymentMethod(filterVoiceUsagePaymentMethod string) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.filterVoiceUsagePaymentMethod = &filterVoiceUsagePaymentMethod
	return r
}

// Specifies the sort order for results. If not given, results are sorted by created_at in descending order.
func (r ApiListPhoneNumbersWithVoiceSettingsRequest) Sort(sort string) ApiListPhoneNumbersWithVoiceSettingsRequest {
	r.sort = &sort
	return r
}

func (r ApiListPhoneNumbersWithVoiceSettingsRequest) Execute() (*ListPhoneNumbersWithVoiceSettingsResponse, *http.Response, error) {
	return r.ApiService.ListPhoneNumbersWithVoiceSettingsExecute(r)
}

/*
ListPhoneNumbersWithVoiceSettings List phone numbers with voice settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPhoneNumbersWithVoiceSettingsRequest
*/
func (a *PhoneNumberConfigurationsAPIService) ListPhoneNumbersWithVoiceSettings(ctx context.Context) ApiListPhoneNumbersWithVoiceSettingsRequest {
	return ApiListPhoneNumbersWithVoiceSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPhoneNumbersWithVoiceSettingsResponse
func (a *PhoneNumberConfigurationsAPIService) ListPhoneNumbersWithVoiceSettingsExecute(r ApiListPhoneNumbersWithVoiceSettingsRequest) (*ListPhoneNumbersWithVoiceSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPhoneNumbersWithVoiceSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.ListPhoneNumbersWithVoiceSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/voice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	}
	if r.filterConnectionNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_name][contains]", r.filterConnectionNameContains, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	if r.filterVoiceUsagePaymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.usage_payment_method]", r.filterVoiceUsagePaymentMethod, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPhoneNumberBundleStatusChangeRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
	phoneNumberBundleStatusChangeRequest *PhoneNumberBundleStatusChangeRequest
}

func (r ApiPhoneNumberBundleStatusChangeRequest) PhoneNumberBundleStatusChangeRequest(phoneNumberBundleStatusChangeRequest PhoneNumberBundleStatusChangeRequest) ApiPhoneNumberBundleStatusChangeRequest {
	r.phoneNumberBundleStatusChangeRequest = &phoneNumberBundleStatusChangeRequest
	return r
}

func (r ApiPhoneNumberBundleStatusChangeRequest) Execute() (*PhoneNumberBundleStatusChange, *http.Response, error) {
	return r.ApiService.PhoneNumberBundleStatusChangeExecute(r)
}

/*
PhoneNumberBundleStatusChange Change the bundle status for a phone number (set to being in a bundle or remove from a bundle)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiPhoneNumberBundleStatusChangeRequest
*/
func (a *PhoneNumberConfigurationsAPIService) PhoneNumberBundleStatusChange(ctx context.Context, id string) ApiPhoneNumberBundleStatusChangeRequest {
	return ApiPhoneNumberBundleStatusChangeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhoneNumberBundleStatusChange
func (a *PhoneNumberConfigurationsAPIService) PhoneNumberBundleStatusChangeExecute(r ApiPhoneNumberBundleStatusChangeRequest) (*PhoneNumberBundleStatusChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberBundleStatusChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.PhoneNumberBundleStatusChange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}/actions/bundle_status_change"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumberBundleStatusChangeRequest == nil {
		return localVarReturnValue, nil, reportError("phoneNumberBundleStatusChangeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumberBundleStatusChangeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePhoneNumberRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
}

func (r ApiRetrievePhoneNumberRequest) Execute() (*PhoneNumberResponse, *http.Response, error) {
	return r.ApiService.RetrievePhoneNumberExecute(r)
}

/*
RetrievePhoneNumber Retrieve a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiRetrievePhoneNumberRequest
*/
func (a *PhoneNumberConfigurationsAPIService) RetrievePhoneNumber(ctx context.Context, id string) ApiRetrievePhoneNumberRequest {
	return ApiRetrievePhoneNumberRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhoneNumberResponse
func (a *PhoneNumberConfigurationsAPIService) RetrievePhoneNumberExecute(r ApiRetrievePhoneNumberRequest) (*PhoneNumberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.RetrievePhoneNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSlimListPhoneNumbersRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	pageNumber *int32
	pageSize *int32
	includeConnection *bool
	includeTags *bool
	filterTag *string
	filterPhoneNumber *string
	filterStatus *string
	filterCountryIsoAlpha2 *ListPhoneNumbersFilterCountryIsoAlpha2Parameter
	filterConnectionId *string
	filterVoiceConnectionNameContains *string
	filterVoiceConnectionNameStartsWith *string
	filterVoiceConnectionNameEndsWith *string
	filterVoiceConnectionName *string
	filterVoiceUsagePaymentMethod *string
	filterBillingGroupId *string
	filterEmergencyAddressId *string
	filterCustomerReference *string
	filterNumberTypeEq *string
	filterSource *string
	sort *string
}

// The page number to load.
func (r ApiSlimListPhoneNumbersRequest) PageNumber(pageNumber int32) ApiSlimListPhoneNumbersRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiSlimListPhoneNumbersRequest) PageSize(pageSize int32) ApiSlimListPhoneNumbersRequest {
	r.pageSize = &pageSize
	return r
}

// Include the connection associated with the phone number.
func (r ApiSlimListPhoneNumbersRequest) IncludeConnection(includeConnection bool) ApiSlimListPhoneNumbersRequest {
	r.includeConnection = &includeConnection
	return r
}

// Include the tags associated with the phone number.
func (r ApiSlimListPhoneNumbersRequest) IncludeTags(includeTags bool) ApiSlimListPhoneNumbersRequest {
	r.includeTags = &includeTags
	return r
}

// Filter by phone number tags. (This requires the include_tags param)
func (r ApiSlimListPhoneNumbersRequest) FilterTag(filterTag string) ApiSlimListPhoneNumbersRequest {
	r.filterTag = &filterTag
	return r
}

// Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned.
func (r ApiSlimListPhoneNumbersRequest) FilterPhoneNumber(filterPhoneNumber string) ApiSlimListPhoneNumbersRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

// Filter by phone number status.
func (r ApiSlimListPhoneNumbersRequest) FilterStatus(filterStatus string) ApiSlimListPhoneNumbersRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter by phone number country ISO alpha-2 code. Can be a single value or an array of values.
func (r ApiSlimListPhoneNumbersRequest) FilterCountryIsoAlpha2(filterCountryIsoAlpha2 ListPhoneNumbersFilterCountryIsoAlpha2Parameter) ApiSlimListPhoneNumbersRequest {
	r.filterCountryIsoAlpha2 = &filterCountryIsoAlpha2
	return r
}

// Filter by connection_id.
func (r ApiSlimListPhoneNumbersRequest) FilterConnectionId(filterConnectionId string) ApiSlimListPhoneNumbersRequest {
	r.filterConnectionId = &filterConnectionId
	return r
}

// Filter contains connection name. Requires at least three characters and the include_connection param.
func (r ApiSlimListPhoneNumbersRequest) FilterVoiceConnectionNameContains(filterVoiceConnectionNameContains string) ApiSlimListPhoneNumbersRequest {
	r.filterVoiceConnectionNameContains = &filterVoiceConnectionNameContains
	return r
}

// Filter starts with connection name. Requires at least three characters and the include_connection param.
func (r ApiSlimListPhoneNumbersRequest) FilterVoiceConnectionNameStartsWith(filterVoiceConnectionNameStartsWith string) ApiSlimListPhoneNumbersRequest {
	r.filterVoiceConnectionNameStartsWith = &filterVoiceConnectionNameStartsWith
	return r
}

// Filter ends with connection name. Requires at least three characters and the include_connection param.
func (r ApiSlimListPhoneNumbersRequest) FilterVoiceConnectionNameEndsWith(filterVoiceConnectionNameEndsWith string) ApiSlimListPhoneNumbersRequest {
	r.filterVoiceConnectionNameEndsWith = &filterVoiceConnectionNameEndsWith
	return r
}

// Filter by connection name , requires the include_connection param and the include_connection param.
func (r ApiSlimListPhoneNumbersRequest) FilterVoiceConnectionName(filterVoiceConnectionName string) ApiSlimListPhoneNumbersRequest {
	r.filterVoiceConnectionName = &filterVoiceConnectionName
	return r
}

// Filter by usage_payment_method.
func (r ApiSlimListPhoneNumbersRequest) FilterVoiceUsagePaymentMethod(filterVoiceUsagePaymentMethod string) ApiSlimListPhoneNumbersRequest {
	r.filterVoiceUsagePaymentMethod = &filterVoiceUsagePaymentMethod
	return r
}

// Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;.
func (r ApiSlimListPhoneNumbersRequest) FilterBillingGroupId(filterBillingGroupId string) ApiSlimListPhoneNumbersRequest {
	r.filterBillingGroupId = &filterBillingGroupId
	return r
}

// Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string &#39;null&#39;.
func (r ApiSlimListPhoneNumbersRequest) FilterEmergencyAddressId(filterEmergencyAddressId string) ApiSlimListPhoneNumbersRequest {
	r.filterEmergencyAddressId = &filterEmergencyAddressId
	return r
}

// Filter numbers via the customer_reference set.
func (r ApiSlimListPhoneNumbersRequest) FilterCustomerReference(filterCustomerReference string) ApiSlimListPhoneNumbersRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

// Filter phone numbers by phone number type.
func (r ApiSlimListPhoneNumbersRequest) FilterNumberTypeEq(filterNumberTypeEq string) ApiSlimListPhoneNumbersRequest {
	r.filterNumberTypeEq = &filterNumberTypeEq
	return r
}

// Filter phone numbers by their source. Use &#39;ported&#39; for numbers ported from other carriers, or &#39;purchased&#39; for numbers bought directly from Telnyx.
func (r ApiSlimListPhoneNumbersRequest) FilterSource(filterSource string) ApiSlimListPhoneNumbersRequest {
	r.filterSource = &filterSource
	return r
}

// Specifies the sort order for results. If not given, results are sorted by created_at in descending order.
func (r ApiSlimListPhoneNumbersRequest) Sort(sort string) ApiSlimListPhoneNumbersRequest {
	r.sort = &sort
	return r
}

func (r ApiSlimListPhoneNumbersRequest) Execute() (*ListPhoneNumbersResponse1, *http.Response, error) {
	return r.ApiService.SlimListPhoneNumbersExecute(r)
}

/*
SlimListPhoneNumbers Slim List phone numbers

List phone numbers, This endpoint is a lighter version of the /phone_numbers endpoint having higher performance and rate limit.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSlimListPhoneNumbersRequest
*/
func (a *PhoneNumberConfigurationsAPIService) SlimListPhoneNumbers(ctx context.Context) ApiSlimListPhoneNumbersRequest {
	return ApiSlimListPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPhoneNumbersResponse1
func (a *PhoneNumberConfigurationsAPIService) SlimListPhoneNumbersExecute(r ApiSlimListPhoneNumbersRequest) (*ListPhoneNumbersResponse1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPhoneNumbersResponse1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.SlimListPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/slim"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.includeConnection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_connection", r.includeConnection, "form", "")
	} else {
		var defaultValue bool = false
		r.includeConnection = &defaultValue
	}
	if r.includeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_tags", r.includeTags, "form", "")
	} else {
		var defaultValue bool = false
		r.includeTags = &defaultValue
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tag]", r.filterTag, "form", "")
	}
	if r.filterPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCountryIsoAlpha2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_iso_alpha2]", r.filterCountryIsoAlpha2, "form", "")
	}
	if r.filterConnectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_id]", r.filterConnectionId, "form", "")
	}
	if r.filterVoiceConnectionNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][contains]", r.filterVoiceConnectionNameContains, "form", "")
	}
	if r.filterVoiceConnectionNameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][starts_with]", r.filterVoiceConnectionNameStartsWith, "form", "")
	}
	if r.filterVoiceConnectionNameEndsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][ends_with]", r.filterVoiceConnectionNameEndsWith, "form", "")
	}
	if r.filterVoiceConnectionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name]", r.filterVoiceConnectionName, "form", "")
	}
	if r.filterVoiceUsagePaymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.usage_payment_method]", r.filterVoiceUsagePaymentMethod, "form", "")
	}
	if r.filterBillingGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[billing_group_id]", r.filterBillingGroupId, "form", "")
	}
	if r.filterEmergencyAddressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[emergency_address_id]", r.filterEmergencyAddressId, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	if r.filterNumberTypeEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[number_type][eq]", r.filterNumberTypeEq, "form", "")
	}
	if r.filterSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[source]", r.filterSource, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePhoneNumberRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
	updatePhoneNumberRequest *UpdatePhoneNumberRequest
}

// Updated settings for the phone number.
func (r ApiUpdatePhoneNumberRequest) UpdatePhoneNumberRequest(updatePhoneNumberRequest UpdatePhoneNumberRequest) ApiUpdatePhoneNumberRequest {
	r.updatePhoneNumberRequest = &updatePhoneNumberRequest
	return r
}

func (r ApiUpdatePhoneNumberRequest) Execute() (*PhoneNumberResponse, *http.Response, error) {
	return r.ApiService.UpdatePhoneNumberExecute(r)
}

/*
UpdatePhoneNumber Update a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiUpdatePhoneNumberRequest
*/
func (a *PhoneNumberConfigurationsAPIService) UpdatePhoneNumber(ctx context.Context, id string) ApiUpdatePhoneNumberRequest {
	return ApiUpdatePhoneNumberRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhoneNumberResponse
func (a *PhoneNumberConfigurationsAPIService) UpdatePhoneNumberExecute(r ApiUpdatePhoneNumberRequest) (*PhoneNumberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.UpdatePhoneNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updatePhoneNumberRequest == nil {
		return localVarReturnValue, nil, reportError("updatePhoneNumberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePhoneNumberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePhoneNumberVoiceSettingsRequest struct {
	ctx context.Context
	ApiService *PhoneNumberConfigurationsAPIService
	id string
	updatePhoneNumberVoiceSettingsRequest *UpdatePhoneNumberVoiceSettingsRequest
}

// Updated voice settings for the phone number.
func (r ApiUpdatePhoneNumberVoiceSettingsRequest) UpdatePhoneNumberVoiceSettingsRequest(updatePhoneNumberVoiceSettingsRequest UpdatePhoneNumberVoiceSettingsRequest) ApiUpdatePhoneNumberVoiceSettingsRequest {
	r.updatePhoneNumberVoiceSettingsRequest = &updatePhoneNumberVoiceSettingsRequest
	return r
}

func (r ApiUpdatePhoneNumberVoiceSettingsRequest) Execute() (*RetrievePhoneNumberVoiceResponse, *http.Response, error) {
	return r.ApiService.UpdatePhoneNumberVoiceSettingsExecute(r)
}

/*
UpdatePhoneNumberVoiceSettings Update a phone number with voice settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiUpdatePhoneNumberVoiceSettingsRequest
*/
func (a *PhoneNumberConfigurationsAPIService) UpdatePhoneNumberVoiceSettings(ctx context.Context, id string) ApiUpdatePhoneNumberVoiceSettingsRequest {
	return ApiUpdatePhoneNumberVoiceSettingsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RetrievePhoneNumberVoiceResponse
func (a *PhoneNumberConfigurationsAPIService) UpdatePhoneNumberVoiceSettingsExecute(r ApiUpdatePhoneNumberVoiceSettingsRequest) (*RetrievePhoneNumberVoiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrievePhoneNumberVoiceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberConfigurationsAPIService.UpdatePhoneNumberVoiceSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{id}/voice"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updatePhoneNumberVoiceSettingsRequest == nil {
		return localVarReturnValue, nil, reportError("updatePhoneNumberVoiceSettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePhoneNumberVoiceSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
