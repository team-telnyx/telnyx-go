/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DynamicEmergencyEndpointsAPIService DynamicEmergencyEndpointsAPI service
type DynamicEmergencyEndpointsAPIService service

type ApiCreateDynamicEmergencyEndpointRequest struct {
	ctx context.Context
	ApiService *DynamicEmergencyEndpointsAPIService
	dynamicEmergencyEndpoint *DynamicEmergencyEndpoint
}

func (r ApiCreateDynamicEmergencyEndpointRequest) DynamicEmergencyEndpoint(dynamicEmergencyEndpoint DynamicEmergencyEndpoint) ApiCreateDynamicEmergencyEndpointRequest {
	r.dynamicEmergencyEndpoint = &dynamicEmergencyEndpoint
	return r
}

func (r ApiCreateDynamicEmergencyEndpointRequest) Execute() (*CreateDynamicEmergencyEndpoint201Response, *http.Response, error) {
	return r.ApiService.CreateDynamicEmergencyEndpointExecute(r)
}

/*
CreateDynamicEmergencyEndpoint Create a dynamic emergency endpoint.

Creates a dynamic emergency endpoints.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDynamicEmergencyEndpointRequest
*/
func (a *DynamicEmergencyEndpointsAPIService) CreateDynamicEmergencyEndpoint(ctx context.Context) ApiCreateDynamicEmergencyEndpointRequest {
	return ApiCreateDynamicEmergencyEndpointRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateDynamicEmergencyEndpoint201Response
func (a *DynamicEmergencyEndpointsAPIService) CreateDynamicEmergencyEndpointExecute(r ApiCreateDynamicEmergencyEndpointRequest) (*CreateDynamicEmergencyEndpoint201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateDynamicEmergencyEndpoint201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicEmergencyEndpointsAPIService.CreateDynamicEmergencyEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dynamic_emergency_endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicEmergencyEndpoint == nil {
		return localVarReturnValue, nil, reportError("dynamicEmergencyEndpoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicEmergencyEndpoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDynamicEmergencyEndpointRequest struct {
	ctx context.Context
	ApiService *DynamicEmergencyEndpointsAPIService
	id string
}

func (r ApiDeleteDynamicEmergencyEndpointRequest) Execute() (*CreateDynamicEmergencyEndpoint201Response, *http.Response, error) {
	return r.ApiService.DeleteDynamicEmergencyEndpointExecute(r)
}

/*
DeleteDynamicEmergencyEndpoint Delete a dynamic emergency endpoint

Deletes the dynamic emergency endpoint based on the ID provided

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Dynamic Emergency Endpoint id
 @return ApiDeleteDynamicEmergencyEndpointRequest
*/
func (a *DynamicEmergencyEndpointsAPIService) DeleteDynamicEmergencyEndpoint(ctx context.Context, id string) ApiDeleteDynamicEmergencyEndpointRequest {
	return ApiDeleteDynamicEmergencyEndpointRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateDynamicEmergencyEndpoint201Response
func (a *DynamicEmergencyEndpointsAPIService) DeleteDynamicEmergencyEndpointExecute(r ApiDeleteDynamicEmergencyEndpointRequest) (*CreateDynamicEmergencyEndpoint201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateDynamicEmergencyEndpoint201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicEmergencyEndpointsAPIService.DeleteDynamicEmergencyEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dynamic_emergency_endpoints/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDynamicEmergencyEndpointRequest struct {
	ctx context.Context
	ApiService *DynamicEmergencyEndpointsAPIService
	id string
}

func (r ApiGetDynamicEmergencyEndpointRequest) Execute() (*CreateDynamicEmergencyEndpoint201Response, *http.Response, error) {
	return r.ApiService.GetDynamicEmergencyEndpointExecute(r)
}

/*
GetDynamicEmergencyEndpoint Get a dynamic emergency endpoint

Returns the dynamic emergency endpoint based on the ID provided

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Dynamic Emergency Endpoint id
 @return ApiGetDynamicEmergencyEndpointRequest
*/
func (a *DynamicEmergencyEndpointsAPIService) GetDynamicEmergencyEndpoint(ctx context.Context, id string) ApiGetDynamicEmergencyEndpointRequest {
	return ApiGetDynamicEmergencyEndpointRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateDynamicEmergencyEndpoint201Response
func (a *DynamicEmergencyEndpointsAPIService) GetDynamicEmergencyEndpointExecute(r ApiGetDynamicEmergencyEndpointRequest) (*CreateDynamicEmergencyEndpoint201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateDynamicEmergencyEndpoint201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicEmergencyEndpointsAPIService.GetDynamicEmergencyEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dynamic_emergency_endpoints/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDynamicEmergencyEndpointsRequest struct {
	ctx context.Context
	ApiService *DynamicEmergencyEndpointsAPIService
	filterStatus *string
	filterCountryCode *string
	pageNumber *int32
	pageSize *int32
}

// Filter by status.
func (r ApiListDynamicEmergencyEndpointsRequest) FilterStatus(filterStatus string) ApiListDynamicEmergencyEndpointsRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter by country code.
func (r ApiListDynamicEmergencyEndpointsRequest) FilterCountryCode(filterCountryCode string) ApiListDynamicEmergencyEndpointsRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

// The page number to load.
func (r ApiListDynamicEmergencyEndpointsRequest) PageNumber(pageNumber int32) ApiListDynamicEmergencyEndpointsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListDynamicEmergencyEndpointsRequest) PageSize(pageSize int32) ApiListDynamicEmergencyEndpointsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListDynamicEmergencyEndpointsRequest) Execute() (*ListDynamicEmergencyEndpoints200Response, *http.Response, error) {
	return r.ApiService.ListDynamicEmergencyEndpointsExecute(r)
}

/*
ListDynamicEmergencyEndpoints List dynamic emergency endpoints

Returns the dynamic emergency endpoints according to filters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDynamicEmergencyEndpointsRequest
*/
func (a *DynamicEmergencyEndpointsAPIService) ListDynamicEmergencyEndpoints(ctx context.Context) ApiListDynamicEmergencyEndpointsRequest {
	return ApiListDynamicEmergencyEndpointsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDynamicEmergencyEndpoints200Response
func (a *DynamicEmergencyEndpointsAPIService) ListDynamicEmergencyEndpointsExecute(r ApiListDynamicEmergencyEndpointsRequest) (*ListDynamicEmergencyEndpoints200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDynamicEmergencyEndpoints200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicEmergencyEndpointsAPIService.ListDynamicEmergencyEndpoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dynamic_emergency_endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
