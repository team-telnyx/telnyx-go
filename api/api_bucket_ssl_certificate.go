/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// BucketSSLCertificateAPIService BucketSSLCertificateAPI service
type BucketSSLCertificateAPIService service

type ApiAddStorageSSLCertificateRequest struct {
	ctx context.Context
	ApiService *BucketSSLCertificateAPIService
	bucketName string
	certificate *os.File
	privateKey *os.File
}

// The SSL certificate file
func (r ApiAddStorageSSLCertificateRequest) Certificate(certificate *os.File) ApiAddStorageSSLCertificateRequest {
	r.certificate = certificate
	return r
}

// The private key file
func (r ApiAddStorageSSLCertificateRequest) PrivateKey(privateKey *os.File) ApiAddStorageSSLCertificateRequest {
	r.privateKey = privateKey
	return r
}

func (r ApiAddStorageSSLCertificateRequest) Execute() (*GetStorageSSLCertificates200Response, *http.Response, error) {
	return r.ApiService.AddStorageSSLCertificateExecute(r)
}

/*
AddStorageSSLCertificate Add SSL Certificate

Uploads an SSL certificate and its matching secret so that you can use Telnyxâ€™s storage as your CDN.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The name of the bucket
 @return ApiAddStorageSSLCertificateRequest
*/
func (a *BucketSSLCertificateAPIService) AddStorageSSLCertificate(ctx context.Context, bucketName string) ApiAddStorageSSLCertificateRequest {
	return ApiAddStorageSSLCertificateRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
	}
}

// Execute executes the request
//  @return GetStorageSSLCertificates200Response
func (a *BucketSSLCertificateAPIService) AddStorageSSLCertificateExecute(r ApiAddStorageSSLCertificateRequest) (*GetStorageSSLCertificates200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetStorageSSLCertificates200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BucketSSLCertificateAPIService.AddStorageSSLCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage/buckets/{bucketName}/ssl_certificate"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var certificateLocalVarFormFileName string
	var certificateLocalVarFileName     string
	var certificateLocalVarFileBytes    []byte

	certificateLocalVarFormFileName = "certificate"
	certificateLocalVarFile := r.certificate

	if certificateLocalVarFile != nil {
		fbs, _ := io.ReadAll(certificateLocalVarFile)

		certificateLocalVarFileBytes = fbs
		certificateLocalVarFileName = certificateLocalVarFile.Name()
		certificateLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: certificateLocalVarFileBytes, fileName: certificateLocalVarFileName, formFileName: certificateLocalVarFormFileName})
	}
	var privateKeyLocalVarFormFileName string
	var privateKeyLocalVarFileName     string
	var privateKeyLocalVarFileBytes    []byte

	privateKeyLocalVarFormFileName = "private_key"
	privateKeyLocalVarFile := r.privateKey

	if privateKeyLocalVarFile != nil {
		fbs, _ := io.ReadAll(privateKeyLocalVarFile)

		privateKeyLocalVarFileBytes = fbs
		privateKeyLocalVarFileName = privateKeyLocalVarFile.Name()
		privateKeyLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: privateKeyLocalVarFileBytes, fileName: privateKeyLocalVarFileName, formFileName: privateKeyLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStorageSSLCertificatesRequest struct {
	ctx context.Context
	ApiService *BucketSSLCertificateAPIService
	bucketName string
}

func (r ApiGetStorageSSLCertificatesRequest) Execute() (*GetStorageSSLCertificates200Response, *http.Response, error) {
	return r.ApiService.GetStorageSSLCertificatesExecute(r)
}

/*
GetStorageSSLCertificates Get Bucket SSL Certificate

Returns the stored certificate detail of a bucket, if applicable.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The name of the bucket
 @return ApiGetStorageSSLCertificatesRequest
*/
func (a *BucketSSLCertificateAPIService) GetStorageSSLCertificates(ctx context.Context, bucketName string) ApiGetStorageSSLCertificatesRequest {
	return ApiGetStorageSSLCertificatesRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
	}
}

// Execute executes the request
//  @return GetStorageSSLCertificates200Response
func (a *BucketSSLCertificateAPIService) GetStorageSSLCertificatesExecute(r ApiGetStorageSSLCertificatesRequest) (*GetStorageSSLCertificates200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetStorageSSLCertificates200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BucketSSLCertificateAPIService.GetStorageSSLCertificates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage/buckets/{bucketName}/ssl_certificate"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveStorageSSLCertificateRequest struct {
	ctx context.Context
	ApiService *BucketSSLCertificateAPIService
	bucketName string
}

func (r ApiRemoveStorageSSLCertificateRequest) Execute() (*GetStorageSSLCertificates200Response, *http.Response, error) {
	return r.ApiService.RemoveStorageSSLCertificateExecute(r)
}

/*
RemoveStorageSSLCertificate Remove SSL Certificate

Deletes an SSL certificate and its matching secret.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName Bucket Name
 @return ApiRemoveStorageSSLCertificateRequest
*/
func (a *BucketSSLCertificateAPIService) RemoveStorageSSLCertificate(ctx context.Context, bucketName string) ApiRemoveStorageSSLCertificateRequest {
	return ApiRemoveStorageSSLCertificateRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
	}
}

// Execute executes the request
//  @return GetStorageSSLCertificates200Response
func (a *BucketSSLCertificateAPIService) RemoveStorageSSLCertificateExecute(r ApiRemoveStorageSSLCertificateRequest) (*GetStorageSSLCertificates200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetStorageSSLCertificates200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BucketSSLCertificateAPIService.RemoveStorageSSLCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage/buckets/{bucketName}/ssl_certificate"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
