/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// ProgrammableFaxCommandsAPIService ProgrammableFaxCommandsAPI service
type ProgrammableFaxCommandsAPIService service

type ApiCancelFaxRequest struct {
	ctx context.Context
	ApiService *ProgrammableFaxCommandsAPIService
	id string
}

func (r ApiCancelFaxRequest) Execute() (*SuccessfulResponseUponAcceptingCancelFaxCommand, *http.Response, error) {
	return r.ApiService.CancelFaxExecute(r)
}

/*
CancelFax Cancel a fax

Cancel the outbound fax that is in one of the following states: `queued`, `media.processed`, `originated` or `sending` 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of a fax.
 @return ApiCancelFaxRequest
*/
func (a *ProgrammableFaxCommandsAPIService) CancelFax(ctx context.Context, id string) ApiCancelFaxRequest {
	return ApiCancelFaxRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessfulResponseUponAcceptingCancelFaxCommand
func (a *ProgrammableFaxCommandsAPIService) CancelFaxExecute(r ApiCancelFaxRequest) (*SuccessfulResponseUponAcceptingCancelFaxCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessfulResponseUponAcceptingCancelFaxCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgrammableFaxCommandsAPIService.CancelFax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes/{id}/actions/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResourceNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFaxRequest struct {
	ctx context.Context
	ApiService *ProgrammableFaxCommandsAPIService
	id string
}

func (r ApiDeleteFaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFaxExecute(r)
}

/*
DeleteFax Delete a fax

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of a fax.
 @return ApiDeleteFaxRequest
*/
func (a *ProgrammableFaxCommandsAPIService) DeleteFax(ctx context.Context, id string) ApiDeleteFaxRequest {
	return ApiDeleteFaxRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProgrammableFaxCommandsAPIService) DeleteFaxExecute(r ApiDeleteFaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgrammableFaxCommandsAPIService.DeleteFax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListFaxesRequest struct {
	ctx context.Context
	ApiService *ProgrammableFaxCommandsAPIService
	filterCreatedAtGte *time.Time
	filterCreatedAtGt *time.Time
	filterCreatedAtLte *time.Time
	filterCreatedAtLt *time.Time
	filterDirectionEq *string
	filterFromEq *string
	filterToEq *string
	pageSize *int32
	pageNumber *int32
}

// ISO 8601 date time for filtering faxes created after or on that date
func (r ApiListFaxesRequest) FilterCreatedAtGte(filterCreatedAtGte time.Time) ApiListFaxesRequest {
	r.filterCreatedAtGte = &filterCreatedAtGte
	return r
}

// ISO 8601 date time for filtering faxes created after that date
func (r ApiListFaxesRequest) FilterCreatedAtGt(filterCreatedAtGt time.Time) ApiListFaxesRequest {
	r.filterCreatedAtGt = &filterCreatedAtGt
	return r
}

// ISO 8601 formatted date time for filtering faxes created on or before that date
func (r ApiListFaxesRequest) FilterCreatedAtLte(filterCreatedAtLte time.Time) ApiListFaxesRequest {
	r.filterCreatedAtLte = &filterCreatedAtLte
	return r
}

// ISO 8601 formatted date time for filtering faxes created before that date
func (r ApiListFaxesRequest) FilterCreatedAtLt(filterCreatedAtLt time.Time) ApiListFaxesRequest {
	r.filterCreatedAtLt = &filterCreatedAtLt
	return r
}

// The direction, inbound or outbound, for filtering faxes sent from this account
func (r ApiListFaxesRequest) FilterDirectionEq(filterDirectionEq string) ApiListFaxesRequest {
	r.filterDirectionEq = &filterDirectionEq
	return r
}

// The phone number, in E.164 format for filtering faxes sent from this number
func (r ApiListFaxesRequest) FilterFromEq(filterFromEq string) ApiListFaxesRequest {
	r.filterFromEq = &filterFromEq
	return r
}

// The phone number, in E.164 format for filtering faxes sent to this number
func (r ApiListFaxesRequest) FilterToEq(filterToEq string) ApiListFaxesRequest {
	r.filterToEq = &filterToEq
	return r
}

// Number of fax resourcxes for the single page returned
func (r ApiListFaxesRequest) PageSize(pageSize int32) ApiListFaxesRequest {
	r.pageSize = &pageSize
	return r
}

// Number of the page to be retrieved
func (r ApiListFaxesRequest) PageNumber(pageNumber int32) ApiListFaxesRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListFaxesRequest) Execute() (*ListFaxesResponse, *http.Response, error) {
	return r.ApiService.ListFaxesExecute(r)
}

/*
ListFaxes View a list of faxes



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFaxesRequest
*/
func (a *ProgrammableFaxCommandsAPIService) ListFaxes(ctx context.Context) ApiListFaxesRequest {
	return ApiListFaxesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListFaxesResponse
func (a *ProgrammableFaxCommandsAPIService) ListFaxesExecute(r ApiListFaxesRequest) (*ListFaxesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListFaxesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgrammableFaxCommandsAPIService.ListFaxes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCreatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gte]", r.filterCreatedAtGte, "form", "")
	}
	if r.filterCreatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gt]", r.filterCreatedAtGt, "form", "")
	}
	if r.filterCreatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lte]", r.filterCreatedAtLte, "form", "")
	}
	if r.filterCreatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lt]", r.filterCreatedAtLt, "form", "")
	}
	if r.filterDirectionEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[direction][eq]", r.filterDirectionEq, "form", "")
	}
	if r.filterFromEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[from][eq]", r.filterFromEq, "form", "")
	}
	if r.filterToEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[to][eq]", r.filterToEq, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRefreshFaxRequest struct {
	ctx context.Context
	ApiService *ProgrammableFaxCommandsAPIService
	id string
}

func (r ApiRefreshFaxRequest) Execute() (*RefreshFaxResponse, *http.Response, error) {
	return r.ApiService.RefreshFaxExecute(r)
}

/*
RefreshFax Refresh a fax

Refreshes the inbound fax's media_url when it has expired

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of a fax.
 @return ApiRefreshFaxRequest
*/
func (a *ProgrammableFaxCommandsAPIService) RefreshFax(ctx context.Context, id string) ApiRefreshFaxRequest {
	return ApiRefreshFaxRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RefreshFaxResponse
func (a *ProgrammableFaxCommandsAPIService) RefreshFaxExecute(r ApiRefreshFaxRequest) (*RefreshFaxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RefreshFaxResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgrammableFaxCommandsAPIService.RefreshFax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes/{id}/actions/refresh"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResourceNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendFaxRequest struct {
	ctx context.Context
	ApiService *ProgrammableFaxCommandsAPIService
	sendFaxRequest *SendFaxRequest
}

// Send fax request
func (r ApiSendFaxRequest) SendFaxRequest(sendFaxRequest SendFaxRequest) ApiSendFaxRequest {
	r.sendFaxRequest = &sendFaxRequest
	return r
}

func (r ApiSendFaxRequest) Execute() (*SendFaxResponse, *http.Response, error) {
	return r.ApiService.SendFaxExecute(r)
}

/*
SendFax Send a fax

Send a fax. Files have size limits and page count limit validations. If a file is bigger than 50MB or has more than 350 pages it will fail with `file_size_limit_exceeded` and `page_count_limit_exceeded` respectively. 

**Expected Webhooks:**

- `fax.queued`
- `fax.media.processed`
- `fax.sending.started`
- `fax.delivered`
- `fax.failed`


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSendFaxRequest
*/
func (a *ProgrammableFaxCommandsAPIService) SendFax(ctx context.Context) ApiSendFaxRequest {
	return ApiSendFaxRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SendFaxResponse
func (a *ProgrammableFaxCommandsAPIService) SendFaxExecute(r ApiSendFaxRequest) (*SendFaxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SendFaxResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgrammableFaxCommandsAPIService.SendFax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sendFaxRequest == nil {
		return localVarReturnValue, nil, reportError("sendFaxRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sendFaxRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewFaxRequest struct {
	ctx context.Context
	ApiService *ProgrammableFaxCommandsAPIService
	id string
}

func (r ApiViewFaxRequest) Execute() (*GetFaxResponse, *http.Response, error) {
	return r.ApiService.ViewFaxExecute(r)
}

/*
ViewFax View a fax

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of a fax.
 @return ApiViewFaxRequest
*/
func (a *ProgrammableFaxCommandsAPIService) ViewFax(ctx context.Context, id string) ApiViewFaxRequest {
	return ApiViewFaxRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetFaxResponse
func (a *ProgrammableFaxCommandsAPIService) ViewFaxExecute(r ApiViewFaxRequest) (*GetFaxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetFaxResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgrammableFaxCommandsAPIService.ViewFax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
