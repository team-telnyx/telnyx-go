/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CredentialsAPIService CredentialsAPI service
type CredentialsAPIService service

type ApiCreateTelephonyCredentialRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	telephonyCredentialCreateRequest *TelephonyCredentialCreateRequest
}

// Parameters that can be defined during credential creation
func (r ApiCreateTelephonyCredentialRequest) TelephonyCredentialCreateRequest(telephonyCredentialCreateRequest TelephonyCredentialCreateRequest) ApiCreateTelephonyCredentialRequest {
	r.telephonyCredentialCreateRequest = &telephonyCredentialCreateRequest
	return r
}

func (r ApiCreateTelephonyCredentialRequest) Execute() (*TelephonyCredentialResponse, *http.Response, error) {
	return r.ApiService.CreateTelephonyCredentialExecute(r)
}

/*
CreateTelephonyCredential Create a credential

Create a credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTelephonyCredentialRequest
*/
func (a *CredentialsAPIService) CreateTelephonyCredential(ctx context.Context) ApiCreateTelephonyCredentialRequest {
	return ApiCreateTelephonyCredentialRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TelephonyCredentialResponse
func (a *CredentialsAPIService) CreateTelephonyCredentialExecute(r ApiCreateTelephonyCredentialRequest) (*TelephonyCredentialResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TelephonyCredentialResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.CreateTelephonyCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telephony_credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.telephonyCredentialCreateRequest == nil {
		return localVarReturnValue, nil, reportError("telephonyCredentialCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.telephonyCredentialCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTelephonyCredentialRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	id string
}

func (r ApiDeleteTelephonyCredentialRequest) Execute() (*TelephonyCredentialResponse, *http.Response, error) {
	return r.ApiService.DeleteTelephonyCredentialExecute(r)
}

/*
DeleteTelephonyCredential Delete a credential

Delete an existing credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiDeleteTelephonyCredentialRequest
*/
func (a *CredentialsAPIService) DeleteTelephonyCredential(ctx context.Context, id string) ApiDeleteTelephonyCredentialRequest {
	return ApiDeleteTelephonyCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TelephonyCredentialResponse
func (a *CredentialsAPIService) DeleteTelephonyCredentialExecute(r ApiDeleteTelephonyCredentialRequest) (*TelephonyCredentialResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TelephonyCredentialResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.DeleteTelephonyCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telephony_credentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindTelephonyCredentialsRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	pageNumber *int32
	pageSize *int32
	filterTag *string
	filterName *string
	filterStatus *string
	filterResourceId *string
	filterSipUsername *string
}

// The page number to load.
func (r ApiFindTelephonyCredentialsRequest) PageNumber(pageNumber int32) ApiFindTelephonyCredentialsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiFindTelephonyCredentialsRequest) PageSize(pageSize int32) ApiFindTelephonyCredentialsRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by tag
func (r ApiFindTelephonyCredentialsRequest) FilterTag(filterTag string) ApiFindTelephonyCredentialsRequest {
	r.filterTag = &filterTag
	return r
}

// Filter by name
func (r ApiFindTelephonyCredentialsRequest) FilterName(filterName string) ApiFindTelephonyCredentialsRequest {
	r.filterName = &filterName
	return r
}

// Filter by status
func (r ApiFindTelephonyCredentialsRequest) FilterStatus(filterStatus string) ApiFindTelephonyCredentialsRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter by resource_id
func (r ApiFindTelephonyCredentialsRequest) FilterResourceId(filterResourceId string) ApiFindTelephonyCredentialsRequest {
	r.filterResourceId = &filterResourceId
	return r
}

// Filter by sip_username
func (r ApiFindTelephonyCredentialsRequest) FilterSipUsername(filterSipUsername string) ApiFindTelephonyCredentialsRequest {
	r.filterSipUsername = &filterSipUsername
	return r
}

func (r ApiFindTelephonyCredentialsRequest) Execute() (*GetAllTelephonyCredentialResponse, *http.Response, error) {
	return r.ApiService.FindTelephonyCredentialsExecute(r)
}

/*
FindTelephonyCredentials List all credentials

List all On-demand Credentials.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindTelephonyCredentialsRequest
*/
func (a *CredentialsAPIService) FindTelephonyCredentials(ctx context.Context) ApiFindTelephonyCredentialsRequest {
	return ApiFindTelephonyCredentialsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAllTelephonyCredentialResponse
func (a *CredentialsAPIService) FindTelephonyCredentialsExecute(r ApiFindTelephonyCredentialsRequest) (*GetAllTelephonyCredentialResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAllTelephonyCredentialResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.FindTelephonyCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telephony_credentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tag]", r.filterTag, "form", "")
	}
	if r.filterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name]", r.filterName, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterResourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[resource_id]", r.filterResourceId, "form", "")
	}
	if r.filterSipUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[sip_username]", r.filterSipUsername, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTelephonyCredentialRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	id string
}

func (r ApiGetTelephonyCredentialRequest) Execute() (*TelephonyCredentialResponse, *http.Response, error) {
	return r.ApiService.GetTelephonyCredentialExecute(r)
}

/*
GetTelephonyCredential Get a credential

Get the details of an existing On-demand Credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiGetTelephonyCredentialRequest
*/
func (a *CredentialsAPIService) GetTelephonyCredential(ctx context.Context, id string) ApiGetTelephonyCredentialRequest {
	return ApiGetTelephonyCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TelephonyCredentialResponse
func (a *CredentialsAPIService) GetTelephonyCredentialExecute(r ApiGetTelephonyCredentialRequest) (*TelephonyCredentialResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TelephonyCredentialResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.GetTelephonyCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telephony_credentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTelephonyCredentialRequest struct {
	ctx context.Context
	ApiService *CredentialsAPIService
	id string
	telephonyCredentialUpdateRequest *TelephonyCredentialUpdateRequest
}

// Parameters that can be updated in a credential
func (r ApiUpdateTelephonyCredentialRequest) TelephonyCredentialUpdateRequest(telephonyCredentialUpdateRequest TelephonyCredentialUpdateRequest) ApiUpdateTelephonyCredentialRequest {
	r.telephonyCredentialUpdateRequest = &telephonyCredentialUpdateRequest
	return r
}

func (r ApiUpdateTelephonyCredentialRequest) Execute() (*TelephonyCredentialResponse, *http.Response, error) {
	return r.ApiService.UpdateTelephonyCredentialExecute(r)
}

/*
UpdateTelephonyCredential Update a credential

Update an existing credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiUpdateTelephonyCredentialRequest
*/
func (a *CredentialsAPIService) UpdateTelephonyCredential(ctx context.Context, id string) ApiUpdateTelephonyCredentialRequest {
	return ApiUpdateTelephonyCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TelephonyCredentialResponse
func (a *CredentialsAPIService) UpdateTelephonyCredentialExecute(r ApiUpdateTelephonyCredentialRequest) (*TelephonyCredentialResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TelephonyCredentialResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialsAPIService.UpdateTelephonyCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telephony_credentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.telephonyCredentialUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("telephonyCredentialUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.telephonyCredentialUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
