/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OutboundVoiceProfilesAPIService OutboundVoiceProfilesAPI service
type OutboundVoiceProfilesAPIService service

type ApiCreateVoiceProfileRequest struct {
	ctx context.Context
	ApiService *OutboundVoiceProfilesAPIService
	createOutboundVoiceProfileRequest *CreateOutboundVoiceProfileRequest
}

// Parameters that can be defined when creating an outbound voice profile
func (r ApiCreateVoiceProfileRequest) CreateOutboundVoiceProfileRequest(createOutboundVoiceProfileRequest CreateOutboundVoiceProfileRequest) ApiCreateVoiceProfileRequest {
	r.createOutboundVoiceProfileRequest = &createOutboundVoiceProfileRequest
	return r
}

func (r ApiCreateVoiceProfileRequest) Execute() (*OutboundVoiceProfileResponse, *http.Response, error) {
	return r.ApiService.CreateVoiceProfileExecute(r)
}

/*
CreateVoiceProfile Create an outbound voice profile

Create an outbound voice profile.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateVoiceProfileRequest
*/
func (a *OutboundVoiceProfilesAPIService) CreateVoiceProfile(ctx context.Context) ApiCreateVoiceProfileRequest {
	return ApiCreateVoiceProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OutboundVoiceProfileResponse
func (a *OutboundVoiceProfilesAPIService) CreateVoiceProfileExecute(r ApiCreateVoiceProfileRequest) (*OutboundVoiceProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OutboundVoiceProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutboundVoiceProfilesAPIService.CreateVoiceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outbound_voice_profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOutboundVoiceProfileRequest == nil {
		return localVarReturnValue, nil, reportError("createOutboundVoiceProfileRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOutboundVoiceProfileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOutboundVoiceProfileRequest struct {
	ctx context.Context
	ApiService *OutboundVoiceProfilesAPIService
	id string
}

func (r ApiDeleteOutboundVoiceProfileRequest) Execute() (*OutboundVoiceProfileResponse, *http.Response, error) {
	return r.ApiService.DeleteOutboundVoiceProfileExecute(r)
}

/*
DeleteOutboundVoiceProfile Delete an outbound voice profile

Deletes an existing outbound voice profile.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiDeleteOutboundVoiceProfileRequest
*/
func (a *OutboundVoiceProfilesAPIService) DeleteOutboundVoiceProfile(ctx context.Context, id string) ApiDeleteOutboundVoiceProfileRequest {
	return ApiDeleteOutboundVoiceProfileRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OutboundVoiceProfileResponse
func (a *OutboundVoiceProfilesAPIService) DeleteOutboundVoiceProfileExecute(r ApiDeleteOutboundVoiceProfileRequest) (*OutboundVoiceProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OutboundVoiceProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutboundVoiceProfilesAPIService.DeleteOutboundVoiceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outbound_voice_profiles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOutboundVoiceProfileRequest struct {
	ctx context.Context
	ApiService *OutboundVoiceProfilesAPIService
	id string
}

func (r ApiGetOutboundVoiceProfileRequest) Execute() (*OutboundVoiceProfileResponse, *http.Response, error) {
	return r.ApiService.GetOutboundVoiceProfileExecute(r)
}

/*
GetOutboundVoiceProfile Retrieve an outbound voice profile

Retrieves the details of an existing outbound voice profile.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiGetOutboundVoiceProfileRequest
*/
func (a *OutboundVoiceProfilesAPIService) GetOutboundVoiceProfile(ctx context.Context, id string) ApiGetOutboundVoiceProfileRequest {
	return ApiGetOutboundVoiceProfileRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OutboundVoiceProfileResponse
func (a *OutboundVoiceProfilesAPIService) GetOutboundVoiceProfileExecute(r ApiGetOutboundVoiceProfileRequest) (*OutboundVoiceProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OutboundVoiceProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutboundVoiceProfilesAPIService.GetOutboundVoiceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outbound_voice_profiles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOutboundVoiceProfilesRequest struct {
	ctx context.Context
	ApiService *OutboundVoiceProfilesAPIService
	pageNumber *int32
	pageSize *int32
	filterNameContains *string
	sort *string
}

// The page number to load.
func (r ApiListOutboundVoiceProfilesRequest) PageNumber(pageNumber int32) ApiListOutboundVoiceProfilesRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListOutboundVoiceProfilesRequest) PageSize(pageSize int32) ApiListOutboundVoiceProfilesRequest {
	r.pageSize = &pageSize
	return r
}

// Optional filter on outbound voice profile name.
func (r ApiListOutboundVoiceProfilesRequest) FilterNameContains(filterNameContains string) ApiListOutboundVoiceProfilesRequest {
	r.filterNameContains = &filterNameContains
	return r
}

// Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the &lt;code&gt;-&lt;/code&gt; prefix.&lt;br/&gt;&lt;br/&gt; That is: &lt;ul&gt;   &lt;li&gt;     &lt;code&gt;name&lt;/code&gt;: sorts the result by the     &lt;code&gt;name&lt;/code&gt; field in ascending order.   &lt;/li&gt;    &lt;li&gt;     &lt;code&gt;-name&lt;/code&gt;: sorts the result by the     &lt;code&gt;name&lt;/code&gt; field in descending order.   &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt;
func (r ApiListOutboundVoiceProfilesRequest) Sort(sort string) ApiListOutboundVoiceProfilesRequest {
	r.sort = &sort
	return r
}

func (r ApiListOutboundVoiceProfilesRequest) Execute() (*ListOutboundVoiceProfilesResponse, *http.Response, error) {
	return r.ApiService.ListOutboundVoiceProfilesExecute(r)
}

/*
ListOutboundVoiceProfiles Get all outbound voice profiles

Get all outbound voice profiles belonging to the user that match the given filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOutboundVoiceProfilesRequest
*/
func (a *OutboundVoiceProfilesAPIService) ListOutboundVoiceProfiles(ctx context.Context) ApiListOutboundVoiceProfilesRequest {
	return ApiListOutboundVoiceProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOutboundVoiceProfilesResponse
func (a *OutboundVoiceProfilesAPIService) ListOutboundVoiceProfilesExecute(r ApiListOutboundVoiceProfilesRequest) (*ListOutboundVoiceProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOutboundVoiceProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutboundVoiceProfilesAPIService.ListOutboundVoiceProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outbound_voice_profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name][contains]", r.filterNameContains, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "-created_at"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOutboundVoiceProfileRequest struct {
	ctx context.Context
	ApiService *OutboundVoiceProfilesAPIService
	id string
	updateOutboundVoiceProfileRequest *UpdateOutboundVoiceProfileRequest
}

// Parameters that can be updated on an outbound voice profile
func (r ApiUpdateOutboundVoiceProfileRequest) UpdateOutboundVoiceProfileRequest(updateOutboundVoiceProfileRequest UpdateOutboundVoiceProfileRequest) ApiUpdateOutboundVoiceProfileRequest {
	r.updateOutboundVoiceProfileRequest = &updateOutboundVoiceProfileRequest
	return r
}

func (r ApiUpdateOutboundVoiceProfileRequest) Execute() (*OutboundVoiceProfileResponse, *http.Response, error) {
	return r.ApiService.UpdateOutboundVoiceProfileExecute(r)
}

/*
UpdateOutboundVoiceProfile Updates an existing outbound voice profile.

Updates an existing outbound voice profile.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiUpdateOutboundVoiceProfileRequest
*/
func (a *OutboundVoiceProfilesAPIService) UpdateOutboundVoiceProfile(ctx context.Context, id string) ApiUpdateOutboundVoiceProfileRequest {
	return ApiUpdateOutboundVoiceProfileRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OutboundVoiceProfileResponse
func (a *OutboundVoiceProfilesAPIService) UpdateOutboundVoiceProfileExecute(r ApiUpdateOutboundVoiceProfileRequest) (*OutboundVoiceProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OutboundVoiceProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutboundVoiceProfilesAPIService.UpdateOutboundVoiceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outbound_voice_profiles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateOutboundVoiceProfileRequest == nil {
		return localVarReturnValue, nil, reportError("updateOutboundVoiceProfileRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOutboundVoiceProfileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
