/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagedAccountsAPIService ManagedAccountsAPI service
type ManagedAccountsAPIService service

type ApiCreateManagedAccountRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	createManagedAccountRequest *CreateManagedAccountRequest
}

// Parameters that define the managed account to be created
func (r ApiCreateManagedAccountRequest) CreateManagedAccountRequest(createManagedAccountRequest CreateManagedAccountRequest) ApiCreateManagedAccountRequest {
	r.createManagedAccountRequest = &createManagedAccountRequest
	return r
}

func (r ApiCreateManagedAccountRequest) Execute() (*CreateManagedAccount200Response, *http.Response, error) {
	return r.ApiService.CreateManagedAccountExecute(r)
}

/*
CreateManagedAccount Create a new managed account.

Create a new managed account owned by the authenticated user. You need to be explictly approved by Telnyx in order to become a manager account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateManagedAccountRequest
*/
func (a *ManagedAccountsAPIService) CreateManagedAccount(ctx context.Context) ApiCreateManagedAccountRequest {
	return ApiCreateManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateManagedAccount200Response
func (a *ManagedAccountsAPIService) CreateManagedAccountExecute(r ApiCreateManagedAccountRequest) (*CreateManagedAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateManagedAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.CreateManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createManagedAccountRequest == nil {
		return localVarReturnValue, nil, reportError("createManagedAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createManagedAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CreateManagedAccount422Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDisableManagedAccountRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	id string
}

func (r ApiDisableManagedAccountRequest) Execute() (*CreateManagedAccount200Response, *http.Response, error) {
	return r.ApiService.DisableManagedAccountExecute(r)
}

/*
DisableManagedAccount Disables a managed account

Disables a managed account, forbidding it to use Telnyx services, including sending or receiving phone calls and SMS messages. Ongoing phone calls will not be affected. The managed account and its sub-users will no longer be able to log in via the mission control portal.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Managed Account User ID
 @return ApiDisableManagedAccountRequest
*/
func (a *ManagedAccountsAPIService) DisableManagedAccount(ctx context.Context, id string) ApiDisableManagedAccountRequest {
	return ApiDisableManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateManagedAccount200Response
func (a *ManagedAccountsAPIService) DisableManagedAccountExecute(r ApiDisableManagedAccountRequest) (*CreateManagedAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateManagedAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.DisableManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts/{id}/actions/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CreateManagedAccount422Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnableManagedAccountRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	id string
	enableManagedAccountRequest *EnableManagedAccountRequest
}

// Additional parameters for what to do when enabling the managed account
func (r ApiEnableManagedAccountRequest) EnableManagedAccountRequest(enableManagedAccountRequest EnableManagedAccountRequest) ApiEnableManagedAccountRequest {
	r.enableManagedAccountRequest = &enableManagedAccountRequest
	return r
}

func (r ApiEnableManagedAccountRequest) Execute() (*CreateManagedAccount200Response, *http.Response, error) {
	return r.ApiService.EnableManagedAccountExecute(r)
}

/*
EnableManagedAccount Enables a managed account

Enables a managed account and its sub-users to use Telnyx services.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Managed Account User ID
 @return ApiEnableManagedAccountRequest
*/
func (a *ManagedAccountsAPIService) EnableManagedAccount(ctx context.Context, id string) ApiEnableManagedAccountRequest {
	return ApiEnableManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateManagedAccount200Response
func (a *ManagedAccountsAPIService) EnableManagedAccountExecute(r ApiEnableManagedAccountRequest) (*CreateManagedAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateManagedAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.EnableManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts/{id}/actions/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enableManagedAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CreateManagedAccount422Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAllocatableGlobalOutboundChannelsRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
}

func (r ApiListAllocatableGlobalOutboundChannelsRequest) Execute() (*ListAllocatableGlobalOutboundChannels200Response, *http.Response, error) {
	return r.ApiService.ListAllocatableGlobalOutboundChannelsExecute(r)
}

/*
ListAllocatableGlobalOutboundChannels Display information about allocatable global outbound channels for the current user.

Display information about allocatable global outbound channels for the current user. Only usable by account managers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAllocatableGlobalOutboundChannelsRequest
*/
func (a *ManagedAccountsAPIService) ListAllocatableGlobalOutboundChannels(ctx context.Context) ApiListAllocatableGlobalOutboundChannelsRequest {
	return ApiListAllocatableGlobalOutboundChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAllocatableGlobalOutboundChannels200Response
func (a *ManagedAccountsAPIService) ListAllocatableGlobalOutboundChannelsExecute(r ApiListAllocatableGlobalOutboundChannelsRequest) (*ListAllocatableGlobalOutboundChannels200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAllocatableGlobalOutboundChannels200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.ListAllocatableGlobalOutboundChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts/allocatable_global_outbound_channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListManagedAccountsRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	pageNumber *int32
	pageSize *int32
	filterEmailContains *string
	filterEmailEq *string
	filterOrganizationNameContains *string
	filterOrganizationNameEq *string
	sort *string
	includeCancelledAccounts *bool
}

// The page number to load.
func (r ApiListManagedAccountsRequest) PageNumber(pageNumber int32) ApiListManagedAccountsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListManagedAccountsRequest) PageSize(pageSize int32) ApiListManagedAccountsRequest {
	r.pageSize = &pageSize
	return r
}

// If present, email containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.
func (r ApiListManagedAccountsRequest) FilterEmailContains(filterEmailContains string) ApiListManagedAccountsRequest {
	r.filterEmailContains = &filterEmailContains
	return r
}

// If present, only returns results with the &lt;code&gt;email&lt;/code&gt; matching exactly the value given.
func (r ApiListManagedAccountsRequest) FilterEmailEq(filterEmailEq string) ApiListManagedAccountsRequest {
	r.filterEmailEq = &filterEmailEq
	return r
}

// If present, only returns results with the &lt;code&gt;organization_name&lt;/code&gt; containing the given value. Matching is not case-sensitive. Requires at least three characters.
func (r ApiListManagedAccountsRequest) FilterOrganizationNameContains(filterOrganizationNameContains string) ApiListManagedAccountsRequest {
	r.filterOrganizationNameContains = &filterOrganizationNameContains
	return r
}

// If present, only returns results with the &lt;code&gt;organization_name&lt;/code&gt; matching exactly the value given.
func (r ApiListManagedAccountsRequest) FilterOrganizationNameEq(filterOrganizationNameEq string) ApiListManagedAccountsRequest {
	r.filterOrganizationNameEq = &filterOrganizationNameEq
	return r
}

// Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the &lt;code&gt; -&lt;/code&gt; prefix.&lt;br/&gt;&lt;br/&gt; That is: &lt;ul&gt;   &lt;li&gt;     &lt;code&gt;email&lt;/code&gt;: sorts the result by the     &lt;code&gt;email&lt;/code&gt; field in ascending order.   &lt;/li&gt;    &lt;li&gt;     &lt;code&gt;-email&lt;/code&gt;: sorts the result by the     &lt;code&gt;email&lt;/code&gt; field in descending order.   &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; If not given, results are sorted by &lt;code&gt;created_at&lt;/code&gt; in descending order.
func (r ApiListManagedAccountsRequest) Sort(sort string) ApiListManagedAccountsRequest {
	r.sort = &sort
	return r
}

// Specifies if cancelled accounts should be included in the results.
func (r ApiListManagedAccountsRequest) IncludeCancelledAccounts(includeCancelledAccounts bool) ApiListManagedAccountsRequest {
	r.includeCancelledAccounts = &includeCancelledAccounts
	return r
}

func (r ApiListManagedAccountsRequest) Execute() (*ListManagedAccounts200Response, *http.Response, error) {
	return r.ApiService.ListManagedAccountsExecute(r)
}

/*
ListManagedAccounts Lists accounts managed by the current user.

Lists the accounts managed by the current user. Users need to be explictly approved by Telnyx in order to become manager accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListManagedAccountsRequest
*/
func (a *ManagedAccountsAPIService) ListManagedAccounts(ctx context.Context) ApiListManagedAccountsRequest {
	return ApiListManagedAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListManagedAccounts200Response
func (a *ManagedAccountsAPIService) ListManagedAccountsExecute(r ApiListManagedAccountsRequest) (*ListManagedAccounts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListManagedAccounts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.ListManagedAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterEmailContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[email][contains]", r.filterEmailContains, "form", "")
	} else {
		var defaultValue string = "null"
		r.filterEmailContains = &defaultValue
	}
	if r.filterEmailEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[email][eq]", r.filterEmailEq, "form", "")
	} else {
		var defaultValue string = "null"
		r.filterEmailEq = &defaultValue
	}
	if r.filterOrganizationNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[organization_name][contains]", r.filterOrganizationNameContains, "form", "")
	} else {
		var defaultValue string = "null"
		r.filterOrganizationNameContains = &defaultValue
	}
	if r.filterOrganizationNameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[organization_name][eq]", r.filterOrganizationNameEq, "form", "")
	} else {
		var defaultValue string = "null"
		r.filterOrganizationNameEq = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sort = &defaultValue
	}
	if r.includeCancelledAccounts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_cancelled_accounts", r.includeCancelledAccounts, "form", "")
	} else {
		var defaultValue bool = false
		r.includeCancelledAccounts = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveManagedAccountRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	id string
}

func (r ApiRetrieveManagedAccountRequest) Execute() (*CreateManagedAccount200Response, *http.Response, error) {
	return r.ApiService.RetrieveManagedAccountExecute(r)
}

/*
RetrieveManagedAccount Retrieve a managed account

Retrieves the details of a single managed account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Managed Account User ID
 @return ApiRetrieveManagedAccountRequest
*/
func (a *ManagedAccountsAPIService) RetrieveManagedAccount(ctx context.Context, id string) ApiRetrieveManagedAccountRequest {
	return ApiRetrieveManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateManagedAccount200Response
func (a *ManagedAccountsAPIService) RetrieveManagedAccountExecute(r ApiRetrieveManagedAccountRequest) (*CreateManagedAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateManagedAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.RetrieveManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateManagedAccountRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	id string
	updateManagedAccountRequest *UpdateManagedAccountRequest
}

// Parameters that define the updates to the managed account
func (r ApiUpdateManagedAccountRequest) UpdateManagedAccountRequest(updateManagedAccountRequest UpdateManagedAccountRequest) ApiUpdateManagedAccountRequest {
	r.updateManagedAccountRequest = &updateManagedAccountRequest
	return r
}

func (r ApiUpdateManagedAccountRequest) Execute() (*CreateManagedAccount200Response, *http.Response, error) {
	return r.ApiService.UpdateManagedAccountExecute(r)
}

/*
UpdateManagedAccount Update a managed account

Update a single managed account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Managed Account User ID
 @return ApiUpdateManagedAccountRequest
*/
func (a *ManagedAccountsAPIService) UpdateManagedAccount(ctx context.Context, id string) ApiUpdateManagedAccountRequest {
	return ApiUpdateManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateManagedAccount200Response
func (a *ManagedAccountsAPIService) UpdateManagedAccountExecute(r ApiUpdateManagedAccountRequest) (*CreateManagedAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateManagedAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.UpdateManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateManagedAccountRequest == nil {
		return localVarReturnValue, nil, reportError("updateManagedAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateManagedAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CreateManagedAccount422Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateManagedAccountGlobalChannelLimitRequest struct {
	ctx context.Context
	ApiService *ManagedAccountsAPIService
	id string
	updateManagedAccountGlobalChannelLimitRequest *UpdateManagedAccountGlobalChannelLimitRequest
}

// Parameters that define the changes to the global outbounds channels for the managed account
func (r ApiUpdateManagedAccountGlobalChannelLimitRequest) UpdateManagedAccountGlobalChannelLimitRequest(updateManagedAccountGlobalChannelLimitRequest UpdateManagedAccountGlobalChannelLimitRequest) ApiUpdateManagedAccountGlobalChannelLimitRequest {
	r.updateManagedAccountGlobalChannelLimitRequest = &updateManagedAccountGlobalChannelLimitRequest
	return r
}

func (r ApiUpdateManagedAccountGlobalChannelLimitRequest) Execute() (*UpdateManagedAccountGlobalChannelLimit200Response, *http.Response, error) {
	return r.ApiService.UpdateManagedAccountGlobalChannelLimitExecute(r)
}

/*
UpdateManagedAccountGlobalChannelLimit Update the amount of allocatable global outbound channels allocated to a specific managed account.

Update the amount of allocatable global outbound channels allocated to a specific managed account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Managed Account User ID
 @return ApiUpdateManagedAccountGlobalChannelLimitRequest
*/
func (a *ManagedAccountsAPIService) UpdateManagedAccountGlobalChannelLimit(ctx context.Context, id string) ApiUpdateManagedAccountGlobalChannelLimitRequest {
	return ApiUpdateManagedAccountGlobalChannelLimitRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UpdateManagedAccountGlobalChannelLimit200Response
func (a *ManagedAccountsAPIService) UpdateManagedAccountGlobalChannelLimitExecute(r ApiUpdateManagedAccountGlobalChannelLimitRequest) (*UpdateManagedAccountGlobalChannelLimit200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateManagedAccountGlobalChannelLimit200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedAccountsAPIService.UpdateManagedAccountGlobalChannelLimit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_accounts/{id}/update_global_channel_limit"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateManagedAccountGlobalChannelLimitRequest == nil {
		return localVarReturnValue, nil, reportError("updateManagedAccountGlobalChannelLimitRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateManagedAccountGlobalChannelLimitRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CreateManagedAccount422Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
