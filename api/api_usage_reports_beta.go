/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// UsageReportsBETAAPIService UsageReportsBETAAPI service
type UsageReportsBETAAPIService service

type ApiGetUsageReportsRequest struct {
	ctx context.Context
	ApiService *UsageReportsBETAAPIService
	product *string
	dimensions *[]string
	metrics *[]string
	startDate *string
	endDate *string
	dateRange *string
	filter *string
	managedAccounts *bool
	pageNumber *int32
	pageSize *int32
	sort *[]string
	format *string
	authorizationBearer *string
}

// Telnyx product
func (r ApiGetUsageReportsRequest) Product(product string) ApiGetUsageReportsRequest {
	r.product = &product
	return r
}

// Breakout by specified product dimensions
func (r ApiGetUsageReportsRequest) Dimensions(dimensions []string) ApiGetUsageReportsRequest {
	r.dimensions = &dimensions
	return r
}

// Specified product usage values
func (r ApiGetUsageReportsRequest) Metrics(metrics []string) ApiGetUsageReportsRequest {
	r.metrics = &metrics
	return r
}

// The start date for the time range you are interested in. The maximum time range is 31 days. Format: YYYY-MM-DDTHH:mm:ssZ
func (r ApiGetUsageReportsRequest) StartDate(startDate string) ApiGetUsageReportsRequest {
	r.startDate = &startDate
	return r
}

// The end date for the time range you are interested in. The maximum time range is 31 days. Format: YYYY-MM-DDTHH:mm:ssZ
func (r ApiGetUsageReportsRequest) EndDate(endDate string) ApiGetUsageReportsRequest {
	r.endDate = &endDate
	return r
}

// A more user-friendly way to specify the timespan you want to filter by. More options can be found in the Telnyx API Reference docs.
func (r ApiGetUsageReportsRequest) DateRange(dateRange string) ApiGetUsageReportsRequest {
	r.dateRange = &dateRange
	return r
}

// Filter records on dimensions
func (r ApiGetUsageReportsRequest) Filter(filter string) ApiGetUsageReportsRequest {
	r.filter = &filter
	return r
}

// Return the aggregations for all Managed Accounts under the user making the request.
func (r ApiGetUsageReportsRequest) ManagedAccounts(managedAccounts bool) ApiGetUsageReportsRequest {
	r.managedAccounts = &managedAccounts
	return r
}

func (r ApiGetUsageReportsRequest) PageNumber(pageNumber int32) ApiGetUsageReportsRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiGetUsageReportsRequest) PageSize(pageSize int32) ApiGetUsageReportsRequest {
	r.pageSize = &pageSize
	return r
}

// Specifies the sort order for results
func (r ApiGetUsageReportsRequest) Sort(sort []string) ApiGetUsageReportsRequest {
	r.sort = &sort
	return r
}

// Specify the response format (csv or json). JSON is returned by default, even if not specified.
func (r ApiGetUsageReportsRequest) Format(format string) ApiGetUsageReportsRequest {
	r.format = &format
	return r
}

func (r ApiGetUsageReportsRequest) AuthorizationBearer(authorizationBearer string) ApiGetUsageReportsRequest {
	r.authorizationBearer = &authorizationBearer
	return r
}

func (r ApiGetUsageReportsRequest) Execute() (*UsageReportsResponse, *http.Response, error) {
	return r.ApiService.GetUsageReportsExecute(r)
}

/*
GetUsageReports Get Telnyx product usage data (BETA)

Get Telnyx usage data by product, broken out by the specified dimensions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUsageReportsRequest
*/
func (a *UsageReportsBETAAPIService) GetUsageReports(ctx context.Context) ApiGetUsageReportsRequest {
	return ApiGetUsageReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsageReportsResponse
func (a *UsageReportsBETAAPIService) GetUsageReportsExecute(r ApiGetUsageReportsRequest) (*UsageReportsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsageReportsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageReportsBETAAPIService.GetUsageReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usage_reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.product == nil {
		return localVarReturnValue, nil, reportError("product is required and must be specified")
	}
	if r.dimensions == nil {
		return localVarReturnValue, nil, reportError("dimensions is required and must be specified")
	}
	if r.metrics == nil {
		return localVarReturnValue, nil, reportError("metrics is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "product", r.product, "form", "")
	{
		t := *r.dimensions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dimensions", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dimensions", t, "form", "multi")
		}
	}
	{
		t := *r.metrics
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metrics", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metrics", t, "form", "multi")
		}
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	}
	if r.dateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_range", r.dateRange, "form", "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "form", "")
	}
	if r.managedAccounts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managed_accounts", r.managedAccounts, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorizationBearer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization_bearer", r.authorizationBearer, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsageReportsOptionsRequest struct {
	ctx context.Context
	ApiService *UsageReportsBETAAPIService
	product *string
	authorizationBearer *string
}

// Options (dimensions and metrics) for a given product. If none specified, all products will be returned.
func (r ApiListUsageReportsOptionsRequest) Product(product string) ApiListUsageReportsOptionsRequest {
	r.product = &product
	return r
}

func (r ApiListUsageReportsOptionsRequest) AuthorizationBearer(authorizationBearer string) ApiListUsageReportsOptionsRequest {
	r.authorizationBearer = &authorizationBearer
	return r
}

func (r ApiListUsageReportsOptionsRequest) Execute() (*UsageReportsOptionsResponse, *http.Response, error) {
	return r.ApiService.ListUsageReportsOptionsExecute(r)
}

/*
ListUsageReportsOptions Get Usage Reports query options (BETA)

Get the Usage Reports options for querying usage, including the products available and their respective metrics and dimensions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListUsageReportsOptionsRequest
*/
func (a *UsageReportsBETAAPIService) ListUsageReportsOptions(ctx context.Context) ApiListUsageReportsOptionsRequest {
	return ApiListUsageReportsOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsageReportsOptionsResponse
func (a *UsageReportsBETAAPIService) ListUsageReportsOptionsExecute(r ApiListUsageReportsOptionsRequest) (*UsageReportsOptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsageReportsOptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageReportsBETAAPIService.ListUsageReportsOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usage_reports/options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.product != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product", r.product, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorizationBearer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization_bearer", r.authorizationBearer, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
