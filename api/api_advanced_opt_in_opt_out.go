/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// AdvancedOptInOptOutAPIService AdvancedOptInOptOutAPI service
type AdvancedOptInOptOutAPIService service

type ApiCreateAutorespConfigRequest struct {
	ctx context.Context
	ApiService *AdvancedOptInOptOutAPIService
	profileId string
	autoRespConfigCreateSchema *AutoRespConfigCreateSchema
}

func (r ApiCreateAutorespConfigRequest) AutoRespConfigCreateSchema(autoRespConfigCreateSchema AutoRespConfigCreateSchema) ApiCreateAutorespConfigRequest {
	r.autoRespConfigCreateSchema = &autoRespConfigCreateSchema
	return r
}

func (r ApiCreateAutorespConfigRequest) Execute() (*AutorespConfigResponseSchema, *http.Response, error) {
	return r.ApiService.CreateAutorespConfigExecute(r)
}

/*
CreateAutorespConfig Create Auto-Reponse Setting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ApiCreateAutorespConfigRequest
*/
func (a *AdvancedOptInOptOutAPIService) CreateAutorespConfig(ctx context.Context, profileId string) ApiCreateAutorespConfigRequest {
	return ApiCreateAutorespConfigRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return AutorespConfigResponseSchema
func (a *AdvancedOptInOptOutAPIService) CreateAutorespConfigExecute(r ApiCreateAutorespConfigRequest) (*AutorespConfigResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutorespConfigResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedOptInOptOutAPIService.CreateAutorespConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_profiles/{profile_id}/autoresp_configs"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoRespConfigCreateSchema == nil {
		return localVarReturnValue, nil, reportError("autoRespConfigCreateSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoRespConfigCreateSchema
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAutorespConfigRequest struct {
	ctx context.Context
	ApiService *AdvancedOptInOptOutAPIService
	profileId string
	autorespCfgId string
}

func (r ApiDeleteAutorespConfigRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DeleteAutorespConfigExecute(r)
}

/*
DeleteAutorespConfig Delete Auto-Response Setting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @param autorespCfgId
 @return ApiDeleteAutorespConfigRequest
*/
func (a *AdvancedOptInOptOutAPIService) DeleteAutorespConfig(ctx context.Context, profileId string, autorespCfgId string) ApiDeleteAutorespConfigRequest {
	return ApiDeleteAutorespConfigRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		autorespCfgId: autorespCfgId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *AdvancedOptInOptOutAPIService) DeleteAutorespConfigExecute(r ApiDeleteAutorespConfigRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedOptInOptOutAPIService.DeleteAutorespConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_profiles/{profile_id}/autoresp_configs/{autoresp_cfg_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoresp_cfg_id"+"}", url.PathEscape(parameterValueToString(r.autorespCfgId, "autorespCfgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutorespConfigRequest struct {
	ctx context.Context
	ApiService *AdvancedOptInOptOutAPIService
	profileId string
	autorespCfgId string
}

func (r ApiGetAutorespConfigRequest) Execute() (*AutorespConfigResponseSchema, *http.Response, error) {
	return r.ApiService.GetAutorespConfigExecute(r)
}

/*
GetAutorespConfig Get Auto-Response Setting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @param autorespCfgId
 @return ApiGetAutorespConfigRequest
*/
func (a *AdvancedOptInOptOutAPIService) GetAutorespConfig(ctx context.Context, profileId string, autorespCfgId string) ApiGetAutorespConfigRequest {
	return ApiGetAutorespConfigRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		autorespCfgId: autorespCfgId,
	}
}

// Execute executes the request
//  @return AutorespConfigResponseSchema
func (a *AdvancedOptInOptOutAPIService) GetAutorespConfigExecute(r ApiGetAutorespConfigRequest) (*AutorespConfigResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutorespConfigResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedOptInOptOutAPIService.GetAutorespConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_profiles/{profile_id}/autoresp_configs/{autoresp_cfg_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoresp_cfg_id"+"}", url.PathEscape(parameterValueToString(r.autorespCfgId, "autorespCfgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutorespConfigsRequest struct {
	ctx context.Context
	ApiService *AdvancedOptInOptOutAPIService
	profileId string
	countryCode *string
	createdAtGte *string
	createdAtLte *string
	updatedAtGte *string
	updatedAtLte *string
}

func (r ApiGetAutorespConfigsRequest) CountryCode(countryCode string) ApiGetAutorespConfigsRequest {
	r.countryCode = &countryCode
	return r
}

func (r ApiGetAutorespConfigsRequest) CreatedAtGte(createdAtGte string) ApiGetAutorespConfigsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

func (r ApiGetAutorespConfigsRequest) CreatedAtLte(createdAtLte string) ApiGetAutorespConfigsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

func (r ApiGetAutorespConfigsRequest) UpdatedAtGte(updatedAtGte string) ApiGetAutorespConfigsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

func (r ApiGetAutorespConfigsRequest) UpdatedAtLte(updatedAtLte string) ApiGetAutorespConfigsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

func (r ApiGetAutorespConfigsRequest) Execute() (*AutorespConfigsResponseSchema, *http.Response, error) {
	return r.ApiService.GetAutorespConfigsExecute(r)
}

/*
GetAutorespConfigs List Auto-Response Settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ApiGetAutorespConfigsRequest
*/
func (a *AdvancedOptInOptOutAPIService) GetAutorespConfigs(ctx context.Context, profileId string) ApiGetAutorespConfigsRequest {
	return ApiGetAutorespConfigsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return AutorespConfigsResponseSchema
func (a *AdvancedOptInOptOutAPIService) GetAutorespConfigsExecute(r ApiGetAutorespConfigsRequest) (*AutorespConfigsResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutorespConfigsResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedOptInOptOutAPIService.GetAutorespConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_profiles/{profile_id}/autoresp_configs"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.countryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "country_code", r.countryCode, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at[gte]", r.createdAtGte, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at[lte]", r.createdAtLte, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at[gte]", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at[lte]", r.updatedAtLte, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOptOutsRequest struct {
	ctx context.Context
	ApiService *AdvancedOptInOptOutAPIService
	filterMessagingProfileId *string
	createdAtGte *time.Time
	filterFrom *string
	createdAtLte *time.Time
	redactionEnabled *bool
	pageNumber *int32
	pageSize *int32
}

// The ID of the messaging profile to retrieve opt-outs for
func (r ApiListOptOutsRequest) FilterMessagingProfileId(filterMessagingProfileId string) ApiListOptOutsRequest {
	r.filterMessagingProfileId = &filterMessagingProfileId
	return r
}

// Filter opt-outs created after this date (ISO-8601 format)
func (r ApiListOptOutsRequest) CreatedAtGte(createdAtGte time.Time) ApiListOptOutsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// The sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code) to retrieve opt-outs for
func (r ApiListOptOutsRequest) FilterFrom(filterFrom string) ApiListOptOutsRequest {
	r.filterFrom = &filterFrom
	return r
}

// Filter opt-outs created before this date (ISO-8601 format)
func (r ApiListOptOutsRequest) CreatedAtLte(createdAtLte time.Time) ApiListOptOutsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// If receiving address (+E.164 formatted phone number) should be redacted
func (r ApiListOptOutsRequest) RedactionEnabled(redactionEnabled bool) ApiListOptOutsRequest {
	r.redactionEnabled = &redactionEnabled
	return r
}

// The page number to load.
func (r ApiListOptOutsRequest) PageNumber(pageNumber int32) ApiListOptOutsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListOptOutsRequest) PageSize(pageSize int32) ApiListOptOutsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListOptOutsRequest) Execute() (*OptOutListResponse, *http.Response, error) {
	return r.ApiService.ListOptOutsExecute(r)
}

/*
ListOptOuts List opt-outs

Retrieve a list of opt-out blocks.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOptOutsRequest
*/
func (a *AdvancedOptInOptOutAPIService) ListOptOuts(ctx context.Context) ApiListOptOutsRequest {
	return ApiListOptOutsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OptOutListResponse
func (a *AdvancedOptInOptOutAPIService) ListOptOutsExecute(r ApiListOptOutsRequest) (*OptOutListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OptOutListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedOptInOptOutAPIService.ListOptOuts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_optouts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterMessagingProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[messaging_profile_id]", r.filterMessagingProfileId, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at[gte]", r.createdAtGte, "form", "")
	}
	if r.filterFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[from]", r.filterFrom, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at[lte]", r.createdAtLte, "form", "")
	}
	if r.redactionEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "redaction_enabled", r.redactionEnabled, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAutoRespConfigRequest struct {
	ctx context.Context
	ApiService *AdvancedOptInOptOutAPIService
	profileId string
	autorespCfgId string
	autoRespConfigCreateSchema *AutoRespConfigCreateSchema
}

func (r ApiUpdateAutoRespConfigRequest) AutoRespConfigCreateSchema(autoRespConfigCreateSchema AutoRespConfigCreateSchema) ApiUpdateAutoRespConfigRequest {
	r.autoRespConfigCreateSchema = &autoRespConfigCreateSchema
	return r
}

func (r ApiUpdateAutoRespConfigRequest) Execute() (*AutorespConfigResponseSchema, *http.Response, error) {
	return r.ApiService.UpdateAutoRespConfigExecute(r)
}

/*
UpdateAutoRespConfig Update Auto-Response Setting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @param autorespCfgId
 @return ApiUpdateAutoRespConfigRequest
*/
func (a *AdvancedOptInOptOutAPIService) UpdateAutoRespConfig(ctx context.Context, profileId string, autorespCfgId string) ApiUpdateAutoRespConfigRequest {
	return ApiUpdateAutoRespConfigRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		autorespCfgId: autorespCfgId,
	}
}

// Execute executes the request
//  @return AutorespConfigResponseSchema
func (a *AdvancedOptInOptOutAPIService) UpdateAutoRespConfigExecute(r ApiUpdateAutoRespConfigRequest) (*AutorespConfigResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutorespConfigResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedOptInOptOutAPIService.UpdateAutoRespConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/messaging_profiles/{profile_id}/autoresp_configs/{autoresp_cfg_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoresp_cfg_id"+"}", url.PathEscape(parameterValueToString(r.autorespCfgId, "autorespCfgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoRespConfigCreateSchema == nil {
		return localVarReturnValue, nil, reportError("autoRespConfigCreateSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoRespConfigCreateSchema
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
