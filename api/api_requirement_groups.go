/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RequirementGroupsAPIService RequirementGroupsAPI service
type RequirementGroupsAPIService service

type ApiCreateRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	createRequirementGroupRequest *CreateRequirementGroupRequest
}

func (r ApiCreateRequirementGroupRequest) CreateRequirementGroupRequest(createRequirementGroupRequest CreateRequirementGroupRequest) ApiCreateRequirementGroupRequest {
	r.createRequirementGroupRequest = &createRequirementGroupRequest
	return r
}

func (r ApiCreateRequirementGroupRequest) Execute() (*RequirementGroup, *http.Response, error) {
	return r.ApiService.CreateRequirementGroupExecute(r)
}

/*
CreateRequirementGroup Create a new requirement group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) CreateRequirementGroup(ctx context.Context) ApiCreateRequirementGroupRequest {
	return ApiCreateRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RequirementGroup
func (a *RequirementGroupsAPIService) CreateRequirementGroupExecute(r ApiCreateRequirementGroupRequest) (*RequirementGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequirementGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.CreateRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirement_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createRequirementGroupRequest == nil {
		return localVarReturnValue, nil, reportError("createRequirementGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRequirementGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	id string
}

func (r ApiDeleteRequirementGroupRequest) Execute() (*RequirementGroup, *http.Response, error) {
	return r.ApiService.DeleteRequirementGroupExecute(r)
}

/*
DeleteRequirementGroup Delete a requirement group by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the requirement group
 @return ApiDeleteRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) DeleteRequirementGroup(ctx context.Context, id string) ApiDeleteRequirementGroupRequest {
	return ApiDeleteRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RequirementGroup
func (a *RequirementGroupsAPIService) DeleteRequirementGroupExecute(r ApiDeleteRequirementGroupRequest) (*RequirementGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequirementGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.DeleteRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirement_groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	id string
}

func (r ApiGetRequirementGroupRequest) Execute() (*RequirementGroup, *http.Response, error) {
	return r.ApiService.GetRequirementGroupExecute(r)
}

/*
GetRequirementGroup Get a single requirement group by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the requirement group to retrieve
 @return ApiGetRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) GetRequirementGroup(ctx context.Context, id string) ApiGetRequirementGroupRequest {
	return ApiGetRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RequirementGroup
func (a *RequirementGroupsAPIService) GetRequirementGroupExecute(r ApiGetRequirementGroupRequest) (*RequirementGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequirementGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.GetRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirement_groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRequirementGroupsRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	filterCountryCode *string
	filterPhoneNumberType *string
	filterAction *string
	filterStatus *string
	filterCustomerReference *string
}

// Filter requirement groups by country code (iso alpha 2)
func (r ApiGetRequirementGroupsRequest) FilterCountryCode(filterCountryCode string) ApiGetRequirementGroupsRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

// Filter requirement groups by phone number type.
func (r ApiGetRequirementGroupsRequest) FilterPhoneNumberType(filterPhoneNumberType string) ApiGetRequirementGroupsRequest {
	r.filterPhoneNumberType = &filterPhoneNumberType
	return r
}

// Filter requirement groups by action type
func (r ApiGetRequirementGroupsRequest) FilterAction(filterAction string) ApiGetRequirementGroupsRequest {
	r.filterAction = &filterAction
	return r
}

// Filter requirement groups by status
func (r ApiGetRequirementGroupsRequest) FilterStatus(filterStatus string) ApiGetRequirementGroupsRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter requirement groups by customer reference
func (r ApiGetRequirementGroupsRequest) FilterCustomerReference(filterCustomerReference string) ApiGetRequirementGroupsRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

func (r ApiGetRequirementGroupsRequest) Execute() ([]RequirementGroup, *http.Response, error) {
	return r.ApiService.GetRequirementGroupsExecute(r)
}

/*
GetRequirementGroups List requirement groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRequirementGroupsRequest
*/
func (a *RequirementGroupsAPIService) GetRequirementGroups(ctx context.Context) ApiGetRequirementGroupsRequest {
	return ApiGetRequirementGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RequirementGroup
func (a *RequirementGroupsAPIService) GetRequirementGroupsExecute(r ApiGetRequirementGroupsRequest) ([]RequirementGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RequirementGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.GetRequirementGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirement_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.filterPhoneNumberType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number_type]", r.filterPhoneNumberType, "form", "")
	}
	if r.filterAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[action]", r.filterAction, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubmitRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	id string
}

func (r ApiSubmitRequirementGroupRequest) Execute() (*RequirementGroup, *http.Response, error) {
	return r.ApiService.SubmitRequirementGroupExecute(r)
}

/*
SubmitRequirementGroup Submit a Requirement Group for Approval

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the requirement group to submit
 @return ApiSubmitRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) SubmitRequirementGroup(ctx context.Context, id string) ApiSubmitRequirementGroupRequest {
	return ApiSubmitRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RequirementGroup
func (a *RequirementGroupsAPIService) SubmitRequirementGroupExecute(r ApiSubmitRequirementGroupRequest) (*RequirementGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequirementGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.SubmitRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirement_groups/{id}/submit_for_approval"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	id string
	updateNumberOrderPhoneNumberRequirementGroupRequest *UpdateNumberOrderPhoneNumberRequirementGroupRequest
}

func (r ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest) UpdateNumberOrderPhoneNumberRequirementGroupRequest(updateNumberOrderPhoneNumberRequirementGroupRequest UpdateNumberOrderPhoneNumberRequirementGroupRequest) ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest {
	r.updateNumberOrderPhoneNumberRequirementGroupRequest = &updateNumberOrderPhoneNumberRequirementGroupRequest
	return r
}

func (r ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest) Execute() (*UpdateNumberOrderPhoneNumberRequirementGroup200Response, *http.Response, error) {
	return r.ApiService.UpdateNumberOrderPhoneNumberRequirementGroupExecute(r)
}

/*
UpdateNumberOrderPhoneNumberRequirementGroup Update requirement group for a phone number order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the number order phone number
 @return ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) UpdateNumberOrderPhoneNumberRequirementGroup(ctx context.Context, id string) ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest {
	return ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UpdateNumberOrderPhoneNumberRequirementGroup200Response
func (a *RequirementGroupsAPIService) UpdateNumberOrderPhoneNumberRequirementGroupExecute(r ApiUpdateNumberOrderPhoneNumberRequirementGroupRequest) (*UpdateNumberOrderPhoneNumberRequirementGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateNumberOrderPhoneNumberRequirementGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.UpdateNumberOrderPhoneNumberRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_order_phone_numbers/{id}/requirement_group"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNumberOrderPhoneNumberRequirementGroupRequest == nil {
		return localVarReturnValue, nil, reportError("updateNumberOrderPhoneNumberRequirementGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNumberOrderPhoneNumberRequirementGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	id string
	updateRequirementGroupRequest *UpdateRequirementGroupRequest
}

func (r ApiUpdateRequirementGroupRequest) UpdateRequirementGroupRequest(updateRequirementGroupRequest UpdateRequirementGroupRequest) ApiUpdateRequirementGroupRequest {
	r.updateRequirementGroupRequest = &updateRequirementGroupRequest
	return r
}

func (r ApiUpdateRequirementGroupRequest) Execute() (*RequirementGroup, *http.Response, error) {
	return r.ApiService.UpdateRequirementGroupExecute(r)
}

/*
UpdateRequirementGroup Update requirement values in requirement group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the requirement group
 @return ApiUpdateRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) UpdateRequirementGroup(ctx context.Context, id string) ApiUpdateRequirementGroupRequest {
	return ApiUpdateRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RequirementGroup
func (a *RequirementGroupsAPIService) UpdateRequirementGroupExecute(r ApiUpdateRequirementGroupRequest) (*RequirementGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequirementGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.UpdateRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirement_groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequirementGroupRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequirementGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequirementGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSubNumberOrderRequirementGroupRequest struct {
	ctx context.Context
	ApiService *RequirementGroupsAPIService
	id string
	updateNumberOrderPhoneNumberRequirementGroupRequest *UpdateNumberOrderPhoneNumberRequirementGroupRequest
}

func (r ApiUpdateSubNumberOrderRequirementGroupRequest) UpdateNumberOrderPhoneNumberRequirementGroupRequest(updateNumberOrderPhoneNumberRequirementGroupRequest UpdateNumberOrderPhoneNumberRequirementGroupRequest) ApiUpdateSubNumberOrderRequirementGroupRequest {
	r.updateNumberOrderPhoneNumberRequirementGroupRequest = &updateNumberOrderPhoneNumberRequirementGroupRequest
	return r
}

func (r ApiUpdateSubNumberOrderRequirementGroupRequest) Execute() (*SubNumberOrderRequirementGroupResponse, *http.Response, error) {
	return r.ApiService.UpdateSubNumberOrderRequirementGroupExecute(r)
}

/*
UpdateSubNumberOrderRequirementGroup Update requirement group for a sub number order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the sub number order
 @return ApiUpdateSubNumberOrderRequirementGroupRequest
*/
func (a *RequirementGroupsAPIService) UpdateSubNumberOrderRequirementGroup(ctx context.Context, id string) ApiUpdateSubNumberOrderRequirementGroupRequest {
	return ApiUpdateSubNumberOrderRequirementGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubNumberOrderRequirementGroupResponse
func (a *RequirementGroupsAPIService) UpdateSubNumberOrderRequirementGroupExecute(r ApiUpdateSubNumberOrderRequirementGroupRequest) (*SubNumberOrderRequirementGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubNumberOrderRequirementGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementGroupsAPIService.UpdateSubNumberOrderRequirementGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub_number_orders/{id}/requirement_group"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNumberOrderPhoneNumberRequirementGroupRequest == nil {
		return localVarReturnValue, nil, reportError("updateNumberOrderPhoneNumberRequirementGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNumberOrderPhoneNumberRequirementGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
