/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ClustersAPIService ClustersAPI service
type ClustersAPIService service

type ApiComputeNewClusterPublicTextClustersPostRequest struct {
	ctx context.Context
	ApiService *ClustersAPIService
	publicTextClusteringRequest *PublicTextClusteringRequest
}

func (r ApiComputeNewClusterPublicTextClustersPostRequest) PublicTextClusteringRequest(publicTextClusteringRequest PublicTextClusteringRequest) ApiComputeNewClusterPublicTextClustersPostRequest {
	r.publicTextClusteringRequest = &publicTextClusteringRequest
	return r
}

func (r ApiComputeNewClusterPublicTextClustersPostRequest) Execute() (*TextClusteringResponseData, *http.Response, error) {
	return r.ApiService.ComputeNewClusterPublicTextClustersPostExecute(r)
}

/*
ComputeNewClusterPublicTextClustersPost Compute new clusters

Starts a background task to compute how the data in an [embedded storage bucket](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding) is clustered. This helps identify common themes and patterns in the data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiComputeNewClusterPublicTextClustersPostRequest
*/
func (a *ClustersAPIService) ComputeNewClusterPublicTextClustersPost(ctx context.Context) ApiComputeNewClusterPublicTextClustersPostRequest {
	return ApiComputeNewClusterPublicTextClustersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TextClusteringResponseData
func (a *ClustersAPIService) ComputeNewClusterPublicTextClustersPostExecute(r ApiComputeNewClusterPublicTextClustersPostRequest) (*TextClusteringResponseData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TextClusteringResponseData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClustersAPIService.ComputeNewClusterPublicTextClustersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ai/clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicTextClusteringRequest == nil {
		return localVarReturnValue, nil, reportError("publicTextClusteringRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicTextClusteringRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteClusterByTaskIdPublicTextClustersTaskIdDeleteRequest struct {
	ctx context.Context
	ApiService *ClustersAPIService
	taskId string
}

func (r ApiDeleteClusterByTaskIdPublicTextClustersTaskIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteClusterByTaskIdPublicTextClustersTaskIdDeleteExecute(r)
}

/*
DeleteClusterByTaskIdPublicTextClustersTaskIdDelete Delete a cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId
 @return ApiDeleteClusterByTaskIdPublicTextClustersTaskIdDeleteRequest
*/
func (a *ClustersAPIService) DeleteClusterByTaskIdPublicTextClustersTaskIdDelete(ctx context.Context, taskId string) ApiDeleteClusterByTaskIdPublicTextClustersTaskIdDeleteRequest {
	return ApiDeleteClusterByTaskIdPublicTextClustersTaskIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
func (a *ClustersAPIService) DeleteClusterByTaskIdPublicTextClustersTaskIdDeleteExecute(r ApiDeleteClusterByTaskIdPublicTextClustersTaskIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClustersAPIService.DeleteClusterByTaskIdPublicTextClustersTaskIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ai/clusters/{task_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest struct {
	ctx context.Context
	ApiService *ClustersAPIService
	taskId string
	topNNodes *int32
	showSubclusters *bool
}

// The number of nodes in the cluster to return in the response. Nodes will be sorted by their centrality within the cluster.
func (r ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest) TopNNodes(topNNodes int32) ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest {
	r.topNNodes = &topNNodes
	return r
}

// Whether or not to include subclusters and their nodes in the response.
func (r ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest) ShowSubclusters(showSubclusters bool) ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest {
	r.showSubclusters = &showSubclusters
	return r
}

func (r ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest) Execute() (*ClusteringStatusResponseData, *http.Response, error) {
	return r.ApiService.FetchClusterByTaskIdPublicTextClustersTaskIdGetExecute(r)
}

/*
FetchClusterByTaskIdPublicTextClustersTaskIdGet Fetch a cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId
 @return ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest
*/
func (a *ClustersAPIService) FetchClusterByTaskIdPublicTextClustersTaskIdGet(ctx context.Context, taskId string) ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest {
	return ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return ClusteringStatusResponseData
func (a *ClustersAPIService) FetchClusterByTaskIdPublicTextClustersTaskIdGetExecute(r ApiFetchClusterByTaskIdPublicTextClustersTaskIdGetRequest) (*ClusteringStatusResponseData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusteringStatusResponseData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClustersAPIService.FetchClusterByTaskIdPublicTextClustersTaskIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ai/clusters/{task_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.topNNodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "top_n_nodes", r.topNNodes, "form", "")
	} else {
		var defaultValue int32 = 0
		r.topNNodes = &defaultValue
	}
	if r.showSubclusters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_subclusters", r.showSubclusters, "form", "")
	} else {
		var defaultValue bool = false
		r.showSubclusters = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest struct {
	ctx context.Context
	ApiService *ClustersAPIService
	taskId string
	clusterId *int32
}

func (r ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest) ClusterId(clusterId int32) ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.FetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetExecute(r)
}

/*
FetchClusterImageByTaskIdPublicTextClustersTaskIdImageGet Fetch a cluster visualization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId
 @return ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest
*/
func (a *ClustersAPIService) FetchClusterImageByTaskIdPublicTextClustersTaskIdImageGet(ctx context.Context, taskId string) ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest {
	return ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *ClustersAPIService) FetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetExecute(r ApiFetchClusterImageByTaskIdPublicTextClustersTaskIdImageGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClustersAPIService.FetchClusterImageByTaskIdPublicTextClustersTaskIdImageGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ai/clusters/{task_id}/graph"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAllRequestedClustersPublicTextClustersGetRequest struct {
	ctx context.Context
	ApiService *ClustersAPIService
	pageNumber *int32
	pageSize *int32
}

func (r ApiListAllRequestedClustersPublicTextClustersGetRequest) PageNumber(pageNumber int32) ApiListAllRequestedClustersPublicTextClustersGetRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListAllRequestedClustersPublicTextClustersGetRequest) PageSize(pageSize int32) ApiListAllRequestedClustersPublicTextClustersGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListAllRequestedClustersPublicTextClustersGetRequest) Execute() (*ClusteringRequestInfoData, *http.Response, error) {
	return r.ApiService.ListAllRequestedClustersPublicTextClustersGetExecute(r)
}

/*
ListAllRequestedClustersPublicTextClustersGet List all clusters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAllRequestedClustersPublicTextClustersGetRequest
*/
func (a *ClustersAPIService) ListAllRequestedClustersPublicTextClustersGet(ctx context.Context) ApiListAllRequestedClustersPublicTextClustersGetRequest {
	return ApiListAllRequestedClustersPublicTextClustersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusteringRequestInfoData
func (a *ClustersAPIService) ListAllRequestedClustersPublicTextClustersGetExecute(r ApiListAllRequestedClustersPublicTextClustersGetRequest) (*ClusteringRequestInfoData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusteringRequestInfoData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClustersAPIService.ListAllRequestedClustersPublicTextClustersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ai/clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 0
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
