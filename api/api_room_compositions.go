/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RoomCompositionsAPIService RoomCompositionsAPI service
type RoomCompositionsAPIService service

type ApiCreateRoomCompositionRequest struct {
	ctx context.Context
	ApiService *RoomCompositionsAPIService
	createRoomCompositionRequest *CreateRoomCompositionRequest
}

// Parameters that can be defined during room composition creation.
func (r ApiCreateRoomCompositionRequest) CreateRoomCompositionRequest(createRoomCompositionRequest CreateRoomCompositionRequest) ApiCreateRoomCompositionRequest {
	r.createRoomCompositionRequest = &createRoomCompositionRequest
	return r
}

func (r ApiCreateRoomCompositionRequest) Execute() (*CreateRoomComposition202Response, *http.Response, error) {
	return r.ApiService.CreateRoomCompositionExecute(r)
}

/*
CreateRoomComposition Create a room composition.

Asynchronously create a room composition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRoomCompositionRequest
*/
func (a *RoomCompositionsAPIService) CreateRoomComposition(ctx context.Context) ApiCreateRoomCompositionRequest {
	return ApiCreateRoomCompositionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateRoomComposition202Response
func (a *RoomCompositionsAPIService) CreateRoomCompositionExecute(r ApiCreateRoomCompositionRequest) (*CreateRoomComposition202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateRoomComposition202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomCompositionsAPIService.CreateRoomComposition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_compositions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createRoomCompositionRequest == nil {
		return localVarReturnValue, nil, reportError("createRoomCompositionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRoomCompositionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRoomCompositionRequest struct {
	ctx context.Context
	ApiService *RoomCompositionsAPIService
	roomCompositionId string
}

func (r ApiDeleteRoomCompositionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoomCompositionExecute(r)
}

/*
DeleteRoomComposition Delete a room composition.

Synchronously delete a room composition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomCompositionId The unique identifier of a room composition.
 @return ApiDeleteRoomCompositionRequest
*/
func (a *RoomCompositionsAPIService) DeleteRoomComposition(ctx context.Context, roomCompositionId string) ApiDeleteRoomCompositionRequest {
	return ApiDeleteRoomCompositionRequest{
		ApiService: a,
		ctx: ctx,
		roomCompositionId: roomCompositionId,
	}
}

// Execute executes the request
func (a *RoomCompositionsAPIService) DeleteRoomCompositionExecute(r ApiDeleteRoomCompositionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomCompositionsAPIService.DeleteRoomComposition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_compositions/{room_composition_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"room_composition_id"+"}", url.PathEscape(parameterValueToString(r.roomCompositionId, "roomCompositionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListRoomCompositionsRequest struct {
	ctx context.Context
	ApiService *RoomCompositionsAPIService
	filterDateCreatedAtEq *string
	filterDateCreatedAtGte *string
	filterDateCreatedAtLte *string
	filterSessionId *string
	filterStatus *string
	pageSize *int32
	pageNumber *int32
}

// ISO 8601 date for filtering room compositions created on that date.
func (r ApiListRoomCompositionsRequest) FilterDateCreatedAtEq(filterDateCreatedAtEq string) ApiListRoomCompositionsRequest {
	r.filterDateCreatedAtEq = &filterDateCreatedAtEq
	return r
}

// ISO 8601 date for filtering room compositions created after that date.
func (r ApiListRoomCompositionsRequest) FilterDateCreatedAtGte(filterDateCreatedAtGte string) ApiListRoomCompositionsRequest {
	r.filterDateCreatedAtGte = &filterDateCreatedAtGte
	return r
}

// ISO 8601 date for filtering room compositions created before that date.
func (r ApiListRoomCompositionsRequest) FilterDateCreatedAtLte(filterDateCreatedAtLte string) ApiListRoomCompositionsRequest {
	r.filterDateCreatedAtLte = &filterDateCreatedAtLte
	return r
}

// The session_id for filtering room compositions.
func (r ApiListRoomCompositionsRequest) FilterSessionId(filterSessionId string) ApiListRoomCompositionsRequest {
	r.filterSessionId = &filterSessionId
	return r
}

// The status for filtering room compositions.
func (r ApiListRoomCompositionsRequest) FilterStatus(filterStatus string) ApiListRoomCompositionsRequest {
	r.filterStatus = &filterStatus
	return r
}

// The size of the page.
func (r ApiListRoomCompositionsRequest) PageSize(pageSize int32) ApiListRoomCompositionsRequest {
	r.pageSize = &pageSize
	return r
}

// The page number to load.
func (r ApiListRoomCompositionsRequest) PageNumber(pageNumber int32) ApiListRoomCompositionsRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListRoomCompositionsRequest) Execute() (*ListRoomCompositions200Response, *http.Response, error) {
	return r.ApiService.ListRoomCompositionsExecute(r)
}

/*
ListRoomCompositions View a list of room compositions.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRoomCompositionsRequest
*/
func (a *RoomCompositionsAPIService) ListRoomCompositions(ctx context.Context) ApiListRoomCompositionsRequest {
	return ApiListRoomCompositionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListRoomCompositions200Response
func (a *RoomCompositionsAPIService) ListRoomCompositionsExecute(r ApiListRoomCompositionsRequest) (*ListRoomCompositions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListRoomCompositions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomCompositionsAPIService.ListRoomCompositions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_compositions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDateCreatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_created_at][eq]", r.filterDateCreatedAtEq, "form", "")
	}
	if r.filterDateCreatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_created_at][gte]", r.filterDateCreatedAtGte, "form", "")
	}
	if r.filterDateCreatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_created_at][lte]", r.filterDateCreatedAtLte, "form", "")
	}
	if r.filterSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[session_id]", r.filterSessionId, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewRoomCompositionRequest struct {
	ctx context.Context
	ApiService *RoomCompositionsAPIService
	roomCompositionId string
}

func (r ApiViewRoomCompositionRequest) Execute() (*CreateRoomComposition202Response, *http.Response, error) {
	return r.ApiService.ViewRoomCompositionExecute(r)
}

/*
ViewRoomComposition View a room composition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomCompositionId The unique identifier of a room composition.
 @return ApiViewRoomCompositionRequest
*/
func (a *RoomCompositionsAPIService) ViewRoomComposition(ctx context.Context, roomCompositionId string) ApiViewRoomCompositionRequest {
	return ApiViewRoomCompositionRequest{
		ApiService: a,
		ctx: ctx,
		roomCompositionId: roomCompositionId,
	}
}

// Execute executes the request
//  @return CreateRoomComposition202Response
func (a *RoomCompositionsAPIService) ViewRoomCompositionExecute(r ApiViewRoomCompositionRequest) (*CreateRoomComposition202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateRoomComposition202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomCompositionsAPIService.ViewRoomComposition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_compositions/{room_composition_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"room_composition_id"+"}", url.PathEscape(parameterValueToString(r.roomCompositionId, "roomCompositionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
