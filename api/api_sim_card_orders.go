/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SIMCardOrdersAPIService SIMCardOrdersAPI service
type SIMCardOrdersAPIService service

type ApiCreateSimCardOrderRequest struct {
	ctx context.Context
	ApiService *SIMCardOrdersAPIService
	simCardOrderCreate *SimCardOrderCreate
}

func (r ApiCreateSimCardOrderRequest) SimCardOrderCreate(simCardOrderCreate SimCardOrderCreate) ApiCreateSimCardOrderRequest {
	r.simCardOrderCreate = &simCardOrderCreate
	return r
}

func (r ApiCreateSimCardOrderRequest) Execute() (*CreateSimCardOrder200Response, *http.Response, error) {
	return r.ApiService.CreateSimCardOrderExecute(r)
}

/*
CreateSimCardOrder Create a SIM card order

Creates a new order for SIM cards.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSimCardOrderRequest
*/
func (a *SIMCardOrdersAPIService) CreateSimCardOrder(ctx context.Context) ApiCreateSimCardOrderRequest {
	return ApiCreateSimCardOrderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateSimCardOrder200Response
func (a *SIMCardOrdersAPIService) CreateSimCardOrderExecute(r ApiCreateSimCardOrderRequest) (*CreateSimCardOrder200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSimCardOrder200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardOrdersAPIService.CreateSimCardOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.simCardOrderCreate == nil {
		return localVarReturnValue, nil, reportError("simCardOrderCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.simCardOrderCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimCardOrderRequest struct {
	ctx context.Context
	ApiService *SIMCardOrdersAPIService
	id string
}

func (r ApiGetSimCardOrderRequest) Execute() (*CreateSimCardOrder200Response, *http.Response, error) {
	return r.ApiService.GetSimCardOrderExecute(r)
}

/*
GetSimCardOrder Get a single SIM card order

Get a single SIM card order by its ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the resource.
 @return ApiGetSimCardOrderRequest
*/
func (a *SIMCardOrdersAPIService) GetSimCardOrder(ctx context.Context, id string) ApiGetSimCardOrderRequest {
	return ApiGetSimCardOrderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateSimCardOrder200Response
func (a *SIMCardOrdersAPIService) GetSimCardOrderExecute(r ApiGetSimCardOrderRequest) (*CreateSimCardOrder200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSimCardOrder200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardOrdersAPIService.GetSimCardOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_orders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimCardOrdersRequest struct {
	ctx context.Context
	ApiService *SIMCardOrdersAPIService
	filterCreatedAt *string
	filterUpdatedAt *string
	filterQuantity *int32
	filterCostAmount *string
	filterCostCurrency *string
	filterAddressId *string
	filterAddressStreetAddress *string
	filterAddressExtendedAddress *string
	filterAddressLocality *string
	filterAddressAdministrativeArea *string
	filterAddressCountryCode *string
	filterAddressPostalCode *string
	pageNumber *int32
	pageSize *int32
}

// Filter by ISO 8601 formatted date-time string matching resource creation date-time.
func (r ApiGetSimCardOrdersRequest) FilterCreatedAt(filterCreatedAt string) ApiGetSimCardOrdersRequest {
	r.filterCreatedAt = &filterCreatedAt
	return r
}

// Filter by ISO 8601 formatted date-time string matching resource last update date-time.
func (r ApiGetSimCardOrdersRequest) FilterUpdatedAt(filterUpdatedAt string) ApiGetSimCardOrdersRequest {
	r.filterUpdatedAt = &filterUpdatedAt
	return r
}

// Filter orders by how many SIM cards were ordered.
func (r ApiGetSimCardOrdersRequest) FilterQuantity(filterQuantity int32) ApiGetSimCardOrdersRequest {
	r.filterQuantity = &filterQuantity
	return r
}

// The total monetary amount of the order.
func (r ApiGetSimCardOrdersRequest) FilterCostAmount(filterCostAmount string) ApiGetSimCardOrdersRequest {
	r.filterCostAmount = &filterCostAmount
	return r
}

// Filter by ISO 4217 currency string.
func (r ApiGetSimCardOrdersRequest) FilterCostCurrency(filterCostCurrency string) ApiGetSimCardOrdersRequest {
	r.filterCostCurrency = &filterCostCurrency
	return r
}

// Uniquely identifies the address for the order.
func (r ApiGetSimCardOrdersRequest) FilterAddressId(filterAddressId string) ApiGetSimCardOrdersRequest {
	r.filterAddressId = &filterAddressId
	return r
}

// Returns entries with matching name of the street where the address is located.
func (r ApiGetSimCardOrdersRequest) FilterAddressStreetAddress(filterAddressStreetAddress string) ApiGetSimCardOrdersRequest {
	r.filterAddressStreetAddress = &filterAddressStreetAddress
	return r
}

// Returns entries with matching name of the supplemental field for address information.
func (r ApiGetSimCardOrdersRequest) FilterAddressExtendedAddress(filterAddressExtendedAddress string) ApiGetSimCardOrdersRequest {
	r.filterAddressExtendedAddress = &filterAddressExtendedAddress
	return r
}

// Filter by the name of the city where the address is located.
func (r ApiGetSimCardOrdersRequest) FilterAddressLocality(filterAddressLocality string) ApiGetSimCardOrdersRequest {
	r.filterAddressLocality = &filterAddressLocality
	return r
}

// Filter by state or province where the address is located.
func (r ApiGetSimCardOrdersRequest) FilterAddressAdministrativeArea(filterAddressAdministrativeArea string) ApiGetSimCardOrdersRequest {
	r.filterAddressAdministrativeArea = &filterAddressAdministrativeArea
	return r
}

// Filter by the mobile operator two-character (ISO 3166-1 alpha-2) origin country code.
func (r ApiGetSimCardOrdersRequest) FilterAddressCountryCode(filterAddressCountryCode string) ApiGetSimCardOrdersRequest {
	r.filterAddressCountryCode = &filterAddressCountryCode
	return r
}

// Filter by postal code for the address.
func (r ApiGetSimCardOrdersRequest) FilterAddressPostalCode(filterAddressPostalCode string) ApiGetSimCardOrdersRequest {
	r.filterAddressPostalCode = &filterAddressPostalCode
	return r
}

// The page number to load.
func (r ApiGetSimCardOrdersRequest) PageNumber(pageNumber int32) ApiGetSimCardOrdersRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetSimCardOrdersRequest) PageSize(pageSize int32) ApiGetSimCardOrdersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSimCardOrdersRequest) Execute() (*GetSimCardOrders200Response, *http.Response, error) {
	return r.ApiService.GetSimCardOrdersExecute(r)
}

/*
GetSimCardOrders Get all SIM card orders

Get all SIM card orders according to filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSimCardOrdersRequest
*/
func (a *SIMCardOrdersAPIService) GetSimCardOrders(ctx context.Context) ApiGetSimCardOrdersRequest {
	return ApiGetSimCardOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetSimCardOrders200Response
func (a *SIMCardOrdersAPIService) GetSimCardOrdersExecute(r ApiGetSimCardOrdersRequest) (*GetSimCardOrders200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSimCardOrders200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardOrdersAPIService.GetSimCardOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at]", r.filterCreatedAt, "form", "")
	}
	if r.filterUpdatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[updated_at]", r.filterUpdatedAt, "form", "")
	}
	if r.filterQuantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[quantity]", r.filterQuantity, "form", "")
	}
	if r.filterCostAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[cost.amount]", r.filterCostAmount, "form", "")
	}
	if r.filterCostCurrency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[cost.currency]", r.filterCostCurrency, "form", "")
	}
	if r.filterAddressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.id]", r.filterAddressId, "form", "")
	}
	if r.filterAddressStreetAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.street_address]", r.filterAddressStreetAddress, "form", "")
	}
	if r.filterAddressExtendedAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.extended_address]", r.filterAddressExtendedAddress, "form", "")
	}
	if r.filterAddressLocality != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.locality]", r.filterAddressLocality, "form", "")
	}
	if r.filterAddressAdministrativeArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.administrative_area]", r.filterAddressAdministrativeArea, "form", "")
	}
	if r.filterAddressCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.country_code]", r.filterAddressCountryCode, "form", "")
	}
	if r.filterAddressPostalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[address.postal_code]", r.filterAddressPostalCode, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreviewSimCardOrdersRequest struct {
	ctx context.Context
	ApiService *SIMCardOrdersAPIService
	previewSimCardOrdersRequest *PreviewSimCardOrdersRequest
}

func (r ApiPreviewSimCardOrdersRequest) PreviewSimCardOrdersRequest(previewSimCardOrdersRequest PreviewSimCardOrdersRequest) ApiPreviewSimCardOrdersRequest {
	r.previewSimCardOrdersRequest = &previewSimCardOrdersRequest
	return r
}

func (r ApiPreviewSimCardOrdersRequest) Execute() (*PreviewSimCardOrders202Response, *http.Response, error) {
	return r.ApiService.PreviewSimCardOrdersExecute(r)
}

/*
PreviewSimCardOrders Preview SIM card orders

Preview SIM card order purchases.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPreviewSimCardOrdersRequest
*/
func (a *SIMCardOrdersAPIService) PreviewSimCardOrders(ctx context.Context) ApiPreviewSimCardOrdersRequest {
	return ApiPreviewSimCardOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PreviewSimCardOrders202Response
func (a *SIMCardOrdersAPIService) PreviewSimCardOrdersExecute(r ApiPreviewSimCardOrdersRequest) (*PreviewSimCardOrders202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PreviewSimCardOrders202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardOrdersAPIService.PreviewSimCardOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_order_preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.previewSimCardOrdersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
