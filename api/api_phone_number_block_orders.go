/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PhoneNumberBlockOrdersAPIService PhoneNumberBlockOrdersAPI service
type PhoneNumberBlockOrdersAPIService service

type ApiCreateNumberBlockOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberBlockOrdersAPIService
	createNumberBlockOrderRequest *CreateNumberBlockOrderRequest
}

func (r ApiCreateNumberBlockOrderRequest) CreateNumberBlockOrderRequest(createNumberBlockOrderRequest CreateNumberBlockOrderRequest) ApiCreateNumberBlockOrderRequest {
	r.createNumberBlockOrderRequest = &createNumberBlockOrderRequest
	return r
}

func (r ApiCreateNumberBlockOrderRequest) Execute() (*NumberBlockOrderResponse, *http.Response, error) {
	return r.ApiService.CreateNumberBlockOrderExecute(r)
}

/*
CreateNumberBlockOrder Create a number block order

Creates a phone number block order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNumberBlockOrderRequest
*/
func (a *PhoneNumberBlockOrdersAPIService) CreateNumberBlockOrder(ctx context.Context) ApiCreateNumberBlockOrderRequest {
	return ApiCreateNumberBlockOrderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NumberBlockOrderResponse
func (a *PhoneNumberBlockOrdersAPIService) CreateNumberBlockOrderExecute(r ApiCreateNumberBlockOrderRequest) (*NumberBlockOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberBlockOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberBlockOrdersAPIService.CreateNumberBlockOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_block_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNumberBlockOrderRequest == nil {
		return localVarReturnValue, nil, reportError("createNumberBlockOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNumberBlockOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNumberBlockOrdersRequest struct {
	ctx context.Context
	ApiService *PhoneNumberBlockOrdersAPIService
	filterStatus *string
	filterCreatedAtGt *string
	filterCreatedAtLt *string
	filterPhoneNumbersStartingNumber *string
	pageNumber *int32
	pageSize *int32
}

// Filter number block orders by status.
func (r ApiListNumberBlockOrdersRequest) FilterStatus(filterStatus string) ApiListNumberBlockOrdersRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter number block orders later than this value.
func (r ApiListNumberBlockOrdersRequest) FilterCreatedAtGt(filterCreatedAtGt string) ApiListNumberBlockOrdersRequest {
	r.filterCreatedAtGt = &filterCreatedAtGt
	return r
}

// Filter number block orders earlier than this value.
func (r ApiListNumberBlockOrdersRequest) FilterCreatedAtLt(filterCreatedAtLt string) ApiListNumberBlockOrdersRequest {
	r.filterCreatedAtLt = &filterCreatedAtLt
	return r
}

// Filter number block  orders having these phone numbers.
func (r ApiListNumberBlockOrdersRequest) FilterPhoneNumbersStartingNumber(filterPhoneNumbersStartingNumber string) ApiListNumberBlockOrdersRequest {
	r.filterPhoneNumbersStartingNumber = &filterPhoneNumbersStartingNumber
	return r
}

// The page number to load.
func (r ApiListNumberBlockOrdersRequest) PageNumber(pageNumber int32) ApiListNumberBlockOrdersRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListNumberBlockOrdersRequest) PageSize(pageSize int32) ApiListNumberBlockOrdersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListNumberBlockOrdersRequest) Execute() (*ListNumberBlockOrdersResponse, *http.Response, error) {
	return r.ApiService.ListNumberBlockOrdersExecute(r)
}

/*
ListNumberBlockOrders List number block orders

Get a paginated list of number block orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNumberBlockOrdersRequest
*/
func (a *PhoneNumberBlockOrdersAPIService) ListNumberBlockOrders(ctx context.Context) ApiListNumberBlockOrdersRequest {
	return ApiListNumberBlockOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListNumberBlockOrdersResponse
func (a *PhoneNumberBlockOrdersAPIService) ListNumberBlockOrdersExecute(r ApiListNumberBlockOrdersRequest) (*ListNumberBlockOrdersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListNumberBlockOrdersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberBlockOrdersAPIService.ListNumberBlockOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_block_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCreatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gt]", r.filterCreatedAtGt, "form", "")
	}
	if r.filterCreatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lt]", r.filterCreatedAtLt, "form", "")
	}
	if r.filterPhoneNumbersStartingNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_numbers.starting_number]", r.filterPhoneNumbersStartingNumber, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveNumberBlockOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberBlockOrdersAPIService
	numberBlockOrderId string
}

func (r ApiRetrieveNumberBlockOrderRequest) Execute() (*NumberBlockOrderResponse, *http.Response, error) {
	return r.ApiService.RetrieveNumberBlockOrderExecute(r)
}

/*
RetrieveNumberBlockOrder Retrieve a number block order

Get an existing phone number block order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberBlockOrderId The number block order ID.
 @return ApiRetrieveNumberBlockOrderRequest
*/
func (a *PhoneNumberBlockOrdersAPIService) RetrieveNumberBlockOrder(ctx context.Context, numberBlockOrderId string) ApiRetrieveNumberBlockOrderRequest {
	return ApiRetrieveNumberBlockOrderRequest{
		ApiService: a,
		ctx: ctx,
		numberBlockOrderId: numberBlockOrderId,
	}
}

// Execute executes the request
//  @return NumberBlockOrderResponse
func (a *PhoneNumberBlockOrdersAPIService) RetrieveNumberBlockOrderExecute(r ApiRetrieveNumberBlockOrderRequest) (*NumberBlockOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberBlockOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberBlockOrdersAPIService.RetrieveNumberBlockOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_block_orders/{number_block_order_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"number_block_order_id"+"}", url.PathEscape(parameterValueToString(r.numberBlockOrderId, "numberBlockOrderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
