/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PhoneNumberReservationsAPIService PhoneNumberReservationsAPI service
type PhoneNumberReservationsAPIService service

type ApiCreateNumberReservationRequest struct {
	ctx context.Context
	ApiService *PhoneNumberReservationsAPIService
	createNumberReservationRequest *CreateNumberReservationRequest
}

func (r ApiCreateNumberReservationRequest) CreateNumberReservationRequest(createNumberReservationRequest CreateNumberReservationRequest) ApiCreateNumberReservationRequest {
	r.createNumberReservationRequest = &createNumberReservationRequest
	return r
}

func (r ApiCreateNumberReservationRequest) Execute() (*NumberReservationResponse, *http.Response, error) {
	return r.ApiService.CreateNumberReservationExecute(r)
}

/*
CreateNumberReservation Create a number reservation

Creates a Phone Number Reservation for multiple numbers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNumberReservationRequest
*/
func (a *PhoneNumberReservationsAPIService) CreateNumberReservation(ctx context.Context) ApiCreateNumberReservationRequest {
	return ApiCreateNumberReservationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NumberReservationResponse
func (a *PhoneNumberReservationsAPIService) CreateNumberReservationExecute(r ApiCreateNumberReservationRequest) (*NumberReservationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberReservationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberReservationsAPIService.CreateNumberReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_reservations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNumberReservationRequest == nil {
		return localVarReturnValue, nil, reportError("createNumberReservationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNumberReservationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtendNumberReservationExpiryTimeRequest struct {
	ctx context.Context
	ApiService *PhoneNumberReservationsAPIService
	numberReservationId string
}

func (r ApiExtendNumberReservationExpiryTimeRequest) Execute() (*NumberReservationResponse, *http.Response, error) {
	return r.ApiService.ExtendNumberReservationExpiryTimeExecute(r)
}

/*
ExtendNumberReservationExpiryTime Extend a number reservation

Extends reservation expiry time on all phone numbers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberReservationId The number reservation ID.
 @return ApiExtendNumberReservationExpiryTimeRequest
*/
func (a *PhoneNumberReservationsAPIService) ExtendNumberReservationExpiryTime(ctx context.Context, numberReservationId string) ApiExtendNumberReservationExpiryTimeRequest {
	return ApiExtendNumberReservationExpiryTimeRequest{
		ApiService: a,
		ctx: ctx,
		numberReservationId: numberReservationId,
	}
}

// Execute executes the request
//  @return NumberReservationResponse
func (a *PhoneNumberReservationsAPIService) ExtendNumberReservationExpiryTimeExecute(r ApiExtendNumberReservationExpiryTimeRequest) (*NumberReservationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberReservationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberReservationsAPIService.ExtendNumberReservationExpiryTime")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_reservations/{number_reservation_id}/actions/extend"
	localVarPath = strings.Replace(localVarPath, "{"+"number_reservation_id"+"}", url.PathEscape(parameterValueToString(r.numberReservationId, "numberReservationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNumberReservationsRequest struct {
	ctx context.Context
	ApiService *PhoneNumberReservationsAPIService
	filterStatus *string
	filterCreatedAtGt *string
	filterCreatedAtLt *string
	filterPhoneNumbersPhoneNumber *string
	filterCustomerReference *string
	pageNumber *int32
	pageSize *int32
}

// Filter number reservations by status.
func (r ApiListNumberReservationsRequest) FilterStatus(filterStatus string) ApiListNumberReservationsRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter number reservations later than this value.
func (r ApiListNumberReservationsRequest) FilterCreatedAtGt(filterCreatedAtGt string) ApiListNumberReservationsRequest {
	r.filterCreatedAtGt = &filterCreatedAtGt
	return r
}

// Filter number reservations earlier than this value.
func (r ApiListNumberReservationsRequest) FilterCreatedAtLt(filterCreatedAtLt string) ApiListNumberReservationsRequest {
	r.filterCreatedAtLt = &filterCreatedAtLt
	return r
}

// Filter number reservations having these phone numbers.
func (r ApiListNumberReservationsRequest) FilterPhoneNumbersPhoneNumber(filterPhoneNumbersPhoneNumber string) ApiListNumberReservationsRequest {
	r.filterPhoneNumbersPhoneNumber = &filterPhoneNumbersPhoneNumber
	return r
}

// Filter number reservations via the customer reference set.
func (r ApiListNumberReservationsRequest) FilterCustomerReference(filterCustomerReference string) ApiListNumberReservationsRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

// The page number to load.
func (r ApiListNumberReservationsRequest) PageNumber(pageNumber int32) ApiListNumberReservationsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListNumberReservationsRequest) PageSize(pageSize int32) ApiListNumberReservationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListNumberReservationsRequest) Execute() (*ListNumberReservationsResponse, *http.Response, error) {
	return r.ApiService.ListNumberReservationsExecute(r)
}

/*
ListNumberReservations List number reservations

Gets a paginated list of phone number reservations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNumberReservationsRequest
*/
func (a *PhoneNumberReservationsAPIService) ListNumberReservations(ctx context.Context) ApiListNumberReservationsRequest {
	return ApiListNumberReservationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListNumberReservationsResponse
func (a *PhoneNumberReservationsAPIService) ListNumberReservationsExecute(r ApiListNumberReservationsRequest) (*ListNumberReservationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListNumberReservationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberReservationsAPIService.ListNumberReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_reservations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCreatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gt]", r.filterCreatedAtGt, "form", "")
	}
	if r.filterCreatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lt]", r.filterCreatedAtLt, "form", "")
	}
	if r.filterPhoneNumbersPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_numbers.phone_number]", r.filterPhoneNumbersPhoneNumber, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveNumberReservationRequest struct {
	ctx context.Context
	ApiService *PhoneNumberReservationsAPIService
	numberReservationId string
}

func (r ApiRetrieveNumberReservationRequest) Execute() (*NumberReservationResponse, *http.Response, error) {
	return r.ApiService.RetrieveNumberReservationExecute(r)
}

/*
RetrieveNumberReservation Retrieve a number reservation

Gets a single phone number reservation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberReservationId The number reservation ID.
 @return ApiRetrieveNumberReservationRequest
*/
func (a *PhoneNumberReservationsAPIService) RetrieveNumberReservation(ctx context.Context, numberReservationId string) ApiRetrieveNumberReservationRequest {
	return ApiRetrieveNumberReservationRequest{
		ApiService: a,
		ctx: ctx,
		numberReservationId: numberReservationId,
	}
}

// Execute executes the request
//  @return NumberReservationResponse
func (a *PhoneNumberReservationsAPIService) RetrieveNumberReservationExecute(r ApiRetrieveNumberReservationRequest) (*NumberReservationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberReservationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberReservationsAPIService.RetrieveNumberReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_reservations/{number_reservation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"number_reservation_id"+"}", url.PathEscape(parameterValueToString(r.numberReservationId, "numberReservationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
