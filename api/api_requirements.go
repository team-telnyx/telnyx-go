/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RequirementsAPIService RequirementsAPI service
type RequirementsAPIService service

type ApiListRequirementsRequest struct {
	ctx context.Context
	ApiService *RequirementsAPIService
	filterCountryCode *string
	filterPhoneNumberType *string
	filterAction *string
	sort *string
	pageNumber *int32
	pageSize *int32
}

// Filters results to those applying to a 2-character (ISO 3166-1 alpha-2) country code
func (r ApiListRequirementsRequest) FilterCountryCode(filterCountryCode string) ApiListRequirementsRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

// Filters results to those applying to a specific &#x60;phone_number_type&#x60;
func (r ApiListRequirementsRequest) FilterPhoneNumberType(filterPhoneNumberType string) ApiListRequirementsRequest {
	r.filterPhoneNumberType = &filterPhoneNumberType
	return r
}

// Filters requirements to those applying to a specific action.
func (r ApiListRequirementsRequest) FilterAction(filterAction string) ApiListRequirementsRequest {
	r.filterAction = &filterAction
	return r
}

// Specifies the sort order for results. If you want to sort by a field in ascending order, include it as a sort parameter. If you want to sort in descending order, prepend a &#x60;-&#x60; in front of the field name.
func (r ApiListRequirementsRequest) Sort(sort string) ApiListRequirementsRequest {
	r.sort = &sort
	return r
}

// The page number to load
func (r ApiListRequirementsRequest) PageNumber(pageNumber int32) ApiListRequirementsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page
func (r ApiListRequirementsRequest) PageSize(pageSize int32) ApiListRequirementsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListRequirementsRequest) Execute() (*ListRequirements200Response, *http.Response, error) {
	return r.ApiService.ListRequirementsExecute(r)
}

/*
ListRequirements List all requirements

List all requirements with filtering, sorting, and pagination

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRequirementsRequest
*/
func (a *RequirementsAPIService) ListRequirements(ctx context.Context) ApiListRequirementsRequest {
	return ApiListRequirementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListRequirements200Response
func (a *RequirementsAPIService) ListRequirementsExecute(r ApiListRequirementsRequest) (*ListRequirements200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListRequirements200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementsAPIService.ListRequirements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.filterPhoneNumberType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number_type]", r.filterPhoneNumberType, "form", "")
	}
	if r.filterAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[action]", r.filterAction, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort[]", r.sort, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveDocumentRequirementsRequest struct {
	ctx context.Context
	ApiService *RequirementsAPIService
	id string
}

func (r ApiRetrieveDocumentRequirementsRequest) Execute() (*RetrieveDocumentRequirements200Response, *http.Response, error) {
	return r.ApiService.RetrieveDocumentRequirementsExecute(r)
}

/*
RetrieveDocumentRequirements Retrieve a document requirement

Retrieve a document requirement record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Uniquely identifies the requirement_type record
 @return ApiRetrieveDocumentRequirementsRequest
*/
func (a *RequirementsAPIService) RetrieveDocumentRequirements(ctx context.Context, id string) ApiRetrieveDocumentRequirementsRequest {
	return ApiRetrieveDocumentRequirementsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RetrieveDocumentRequirements200Response
func (a *RequirementsAPIService) RetrieveDocumentRequirementsExecute(r ApiRetrieveDocumentRequirementsRequest) (*RetrieveDocumentRequirements200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveDocumentRequirements200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RequirementsAPIService.RetrieveDocumentRequirements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requirements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
