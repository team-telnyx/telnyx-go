/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// InventoryLevelAPIService InventoryLevelAPI service
type InventoryLevelAPIService service

type ApiCreateInventoryCoverageRequest struct {
	ctx context.Context
	ApiService *InventoryLevelAPIService
	filterGroupBy *string
	filterNpa *int32
	filterNxx *int32
	filterAdministrativeArea *string
	filterPhoneNumberType *string
	filterCountryCode *string
	filterCount *bool
	filterFeatures *[]string
}

func (r ApiCreateInventoryCoverageRequest) FilterGroupBy(filterGroupBy string) ApiCreateInventoryCoverageRequest {
	r.filterGroupBy = &filterGroupBy
	return r
}

func (r ApiCreateInventoryCoverageRequest) FilterNpa(filterNpa int32) ApiCreateInventoryCoverageRequest {
	r.filterNpa = &filterNpa
	return r
}

func (r ApiCreateInventoryCoverageRequest) FilterNxx(filterNxx int32) ApiCreateInventoryCoverageRequest {
	r.filterNxx = &filterNxx
	return r
}

func (r ApiCreateInventoryCoverageRequest) FilterAdministrativeArea(filterAdministrativeArea string) ApiCreateInventoryCoverageRequest {
	r.filterAdministrativeArea = &filterAdministrativeArea
	return r
}

func (r ApiCreateInventoryCoverageRequest) FilterPhoneNumberType(filterPhoneNumberType string) ApiCreateInventoryCoverageRequest {
	r.filterPhoneNumberType = &filterPhoneNumberType
	return r
}

func (r ApiCreateInventoryCoverageRequest) FilterCountryCode(filterCountryCode string) ApiCreateInventoryCoverageRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

func (r ApiCreateInventoryCoverageRequest) FilterCount(filterCount bool) ApiCreateInventoryCoverageRequest {
	r.filterCount = &filterCount
	return r
}

// Filter if the phone number should be used for voice, fax, mms, sms, emergency. Returns features in the response when used.
func (r ApiCreateInventoryCoverageRequest) FilterFeatures(filterFeatures []string) ApiCreateInventoryCoverageRequest {
	r.filterFeatures = &filterFeatures
	return r
}

func (r ApiCreateInventoryCoverageRequest) Execute() (*CreateInventoryCoverage200Response, *http.Response, error) {
	return r.ApiService.CreateInventoryCoverageExecute(r)
}

/*
CreateInventoryCoverage Create an inventory coverage request

Creates an inventory coverage request. If locality, npa or national_destination_code is used in groupBy, and no region or locality filters are used, the whole paginated set is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateInventoryCoverageRequest
*/
func (a *InventoryLevelAPIService) CreateInventoryCoverage(ctx context.Context) ApiCreateInventoryCoverageRequest {
	return ApiCreateInventoryCoverageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateInventoryCoverage200Response
func (a *InventoryLevelAPIService) CreateInventoryCoverageExecute(r ApiCreateInventoryCoverageRequest) (*CreateInventoryCoverage200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateInventoryCoverage200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryLevelAPIService.CreateInventoryCoverage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory_coverage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterGroupBy == nil {
		return localVarReturnValue, nil, reportError("filterGroupBy is required and must be specified")
	}

	if r.filterNpa != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[npa]", r.filterNpa, "form", "")
	}
	if r.filterNxx != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[nxx]", r.filterNxx, "form", "")
	}
	if r.filterAdministrativeArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[administrative_area]", r.filterAdministrativeArea, "form", "")
	}
	if r.filterPhoneNumberType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number_type]", r.filterPhoneNumberType, "form", "")
	}
	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.filterCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[count]", r.filterCount, "form", "")
	}
	if r.filterFeatures != nil {
		t := *r.filterFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[features]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[features]", t, "form", "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[groupBy]", r.filterGroupBy, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
