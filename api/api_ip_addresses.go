/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// IPAddressesAPIService IPAddressesAPI service
type IPAddressesAPIService service

type ApiCreateAccessIpAddressRequest struct {
	ctx context.Context
	ApiService *IPAddressesAPIService
	accessIPAddressPOST *AccessIPAddressPOST
}

func (r ApiCreateAccessIpAddressRequest) AccessIPAddressPOST(accessIPAddressPOST AccessIPAddressPOST) ApiCreateAccessIpAddressRequest {
	r.accessIPAddressPOST = &accessIPAddressPOST
	return r
}

func (r ApiCreateAccessIpAddressRequest) Execute() (*AccessIPAddressResponseSchema, *http.Response, error) {
	return r.ApiService.CreateAccessIpAddressExecute(r)
}

/*
CreateAccessIpAddress Create new Access IP Address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAccessIpAddressRequest
*/
func (a *IPAddressesAPIService) CreateAccessIpAddress(ctx context.Context) ApiCreateAccessIpAddressRequest {
	return ApiCreateAccessIpAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessIPAddressResponseSchema
func (a *IPAddressesAPIService) CreateAccessIpAddressExecute(r ApiCreateAccessIpAddressRequest) (*AccessIPAddressResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPAddressResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAddressesAPIService.CreateAccessIpAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessIPAddressPOST == nil {
		return localVarReturnValue, nil, reportError("accessIPAddressPOST is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessIPAddressPOST
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAccessIpAddressRequest struct {
	ctx context.Context
	ApiService *IPAddressesAPIService
	accessIpAddressId string
}

func (r ApiDeleteAccessIpAddressRequest) Execute() (*AccessIPAddressResponseSchema, *http.Response, error) {
	return r.ApiService.DeleteAccessIpAddressExecute(r)
}

/*
DeleteAccessIpAddress Delete access IP address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessIpAddressId
 @return ApiDeleteAccessIpAddressRequest
*/
func (a *IPAddressesAPIService) DeleteAccessIpAddress(ctx context.Context, accessIpAddressId string) ApiDeleteAccessIpAddressRequest {
	return ApiDeleteAccessIpAddressRequest{
		ApiService: a,
		ctx: ctx,
		accessIpAddressId: accessIpAddressId,
	}
}

// Execute executes the request
//  @return AccessIPAddressResponseSchema
func (a *IPAddressesAPIService) DeleteAccessIpAddressExecute(r ApiDeleteAccessIpAddressRequest) (*AccessIPAddressResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPAddressResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAddressesAPIService.DeleteAccessIpAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_address/{access_ip_address_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"access_ip_address_id"+"}", url.PathEscape(parameterValueToString(r.accessIpAddressId, "accessIpAddressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccessIpAddressRequest struct {
	ctx context.Context
	ApiService *IPAddressesAPIService
	accessIpAddressId string
}

func (r ApiGetAccessIpAddressRequest) Execute() (*AccessIPAddressResponseSchema, *http.Response, error) {
	return r.ApiService.GetAccessIpAddressExecute(r)
}

/*
GetAccessIpAddress Retrieve an access IP address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessIpAddressId
 @return ApiGetAccessIpAddressRequest
*/
func (a *IPAddressesAPIService) GetAccessIpAddress(ctx context.Context, accessIpAddressId string) ApiGetAccessIpAddressRequest {
	return ApiGetAccessIpAddressRequest{
		ApiService: a,
		ctx: ctx,
		accessIpAddressId: accessIpAddressId,
	}
}

// Execute executes the request
//  @return AccessIPAddressResponseSchema
func (a *IPAddressesAPIService) GetAccessIpAddressExecute(r ApiGetAccessIpAddressRequest) (*AccessIPAddressResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPAddressResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAddressesAPIService.GetAccessIpAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_address/{access_ip_address_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"access_ip_address_id"+"}", url.PathEscape(parameterValueToString(r.accessIpAddressId, "accessIpAddressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccessIpAddressesRequest struct {
	ctx context.Context
	ApiService *IPAddressesAPIService
	filterIpSource *string
	filterIpAddress *string
	filterCreatedAtGt *time.Time
	filterCreatedAtLt *time.Time
	pageNumber *int32
	pageSize *int32
}

func (r ApiListAccessIpAddressesRequest) FilterIpSource(filterIpSource string) ApiListAccessIpAddressesRequest {
	r.filterIpSource = &filterIpSource
	return r
}

func (r ApiListAccessIpAddressesRequest) FilterIpAddress(filterIpAddress string) ApiListAccessIpAddressesRequest {
	r.filterIpAddress = &filterIpAddress
	return r
}

func (r ApiListAccessIpAddressesRequest) FilterCreatedAtGt(filterCreatedAtGt time.Time) ApiListAccessIpAddressesRequest {
	r.filterCreatedAtGt = &filterCreatedAtGt
	return r
}

func (r ApiListAccessIpAddressesRequest) FilterCreatedAtLt(filterCreatedAtLt time.Time) ApiListAccessIpAddressesRequest {
	r.filterCreatedAtLt = &filterCreatedAtLt
	return r
}

func (r ApiListAccessIpAddressesRequest) PageNumber(pageNumber int32) ApiListAccessIpAddressesRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListAccessIpAddressesRequest) PageSize(pageSize int32) ApiListAccessIpAddressesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListAccessIpAddressesRequest) Execute() (*AccessIPAddressListResponseSchema, *http.Response, error) {
	return r.ApiService.ListAccessIpAddressesExecute(r)
}

/*
ListAccessIpAddresses List all Access IP Addresses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAccessIpAddressesRequest
*/
func (a *IPAddressesAPIService) ListAccessIpAddresses(ctx context.Context) ApiListAccessIpAddressesRequest {
	return ApiListAccessIpAddressesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessIPAddressListResponseSchema
func (a *IPAddressesAPIService) ListAccessIpAddressesExecute(r ApiListAccessIpAddressesRequest) (*AccessIPAddressListResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPAddressListResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPAddressesAPIService.ListAccessIpAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterIpSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[ip_source]", r.filterIpSource, "form", "")
	}
	if r.filterIpAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[ip_address]", r.filterIpAddress, "form", "")
	}
	if r.filterCreatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gt]", r.filterCreatedAtGt, "form", "")
	}
	if r.filterCreatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lt]", r.filterCreatedAtLt, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
