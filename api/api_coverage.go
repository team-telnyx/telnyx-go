/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CoverageAPIService CoverageAPI service
type CoverageAPIService service

type ApiListNetworkCoverageRequest struct {
	ctx context.Context
	ApiService *CoverageAPIService
	pageNumber *int32
	pageSize *int32
	filtersAvailableServicesContains *AvailableService
	filterLocationRegion *string
	filterLocationSite *string
	filterLocationPop *string
	filterLocationCode *string
}

// The page number to load.
func (r ApiListNetworkCoverageRequest) PageNumber(pageNumber int32) ApiListNetworkCoverageRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListNetworkCoverageRequest) PageSize(pageSize int32) ApiListNetworkCoverageRequest {
	r.pageSize = &pageSize
	return r
}

// The region of associated location to filter on.
func (r ApiListNetworkCoverageRequest) FiltersAvailableServicesContains(filtersAvailableServicesContains AvailableService) ApiListNetworkCoverageRequest {
	r.filtersAvailableServicesContains = &filtersAvailableServicesContains
	return r
}

// The region of associated location to filter on.
func (r ApiListNetworkCoverageRequest) FilterLocationRegion(filterLocationRegion string) ApiListNetworkCoverageRequest {
	r.filterLocationRegion = &filterLocationRegion
	return r
}

// The site of associated location to filter on.
func (r ApiListNetworkCoverageRequest) FilterLocationSite(filterLocationSite string) ApiListNetworkCoverageRequest {
	r.filterLocationSite = &filterLocationSite
	return r
}

// The POP of associated location to filter on.
func (r ApiListNetworkCoverageRequest) FilterLocationPop(filterLocationPop string) ApiListNetworkCoverageRequest {
	r.filterLocationPop = &filterLocationPop
	return r
}

// The code of associated location to filter on.
func (r ApiListNetworkCoverageRequest) FilterLocationCode(filterLocationCode string) ApiListNetworkCoverageRequest {
	r.filterLocationCode = &filterLocationCode
	return r
}

func (r ApiListNetworkCoverageRequest) Execute() (*ListNetworkCoverage200Response, *http.Response, error) {
	return r.ApiService.ListNetworkCoverageExecute(r)
}

/*
ListNetworkCoverage List network coverage locations

List all locations and the interfaces that region supports

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNetworkCoverageRequest
*/
func (a *CoverageAPIService) ListNetworkCoverage(ctx context.Context) ApiListNetworkCoverageRequest {
	return ApiListNetworkCoverageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListNetworkCoverage200Response
func (a *CoverageAPIService) ListNetworkCoverageExecute(r ApiListNetworkCoverageRequest) (*ListNetworkCoverage200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListNetworkCoverage200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoverageAPIService.ListNetworkCoverage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/network_coverage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filtersAvailableServicesContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filters[available_services][contains]", r.filtersAvailableServicesContains, "form", "")
	}
	if r.filterLocationRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[location.region]", r.filterLocationRegion, "form", "")
	}
	if r.filterLocationSite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[location.site]", r.filterLocationSite, "form", "")
	}
	if r.filterLocationPop != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[location.pop]", r.filterLocationPop, "form", "")
	}
	if r.filterLocationCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[location.code]", r.filterLocationCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
