/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
	"reflect"
)


// CDRUsageReportsAPIService CDRUsageReportsAPI service
type CDRUsageReportsAPIService service

type ApiGetCDRUsageReportSyncRequest struct {
	ctx context.Context
	ApiService *CDRUsageReportsAPIService
	aggregationType *string
	productBreakdown *string
	startDate *time.Time
	endDate *time.Time
	connections *[]float32
}

func (r ApiGetCDRUsageReportSyncRequest) AggregationType(aggregationType string) ApiGetCDRUsageReportSyncRequest {
	r.aggregationType = &aggregationType
	return r
}

func (r ApiGetCDRUsageReportSyncRequest) ProductBreakdown(productBreakdown string) ApiGetCDRUsageReportSyncRequest {
	r.productBreakdown = &productBreakdown
	return r
}

func (r ApiGetCDRUsageReportSyncRequest) StartDate(startDate time.Time) ApiGetCDRUsageReportSyncRequest {
	r.startDate = &startDate
	return r
}

func (r ApiGetCDRUsageReportSyncRequest) EndDate(endDate time.Time) ApiGetCDRUsageReportSyncRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetCDRUsageReportSyncRequest) Connections(connections []float32) ApiGetCDRUsageReportSyncRequest {
	r.connections = &connections
	return r
}

func (r ApiGetCDRUsageReportSyncRequest) Execute() (*CdrGetSyncUsageReportResponse, *http.Response, error) {
	return r.ApiService.GetCDRUsageReportSyncExecute(r)
}

/*
GetCDRUsageReportSync Generates and fetches CDR Usage Reports

Generate and fetch voice usage report synchronously. This endpoint will both generate and fetch the voice report over a specified time period. No polling is necessary but the response may take up to a couple of minutes. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCDRUsageReportSyncRequest
*/
func (a *CDRUsageReportsAPIService) GetCDRUsageReportSync(ctx context.Context) ApiGetCDRUsageReportSyncRequest {
	return ApiGetCDRUsageReportSyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CdrGetSyncUsageReportResponse
func (a *CDRUsageReportsAPIService) GetCDRUsageReportSyncExecute(r ApiGetCDRUsageReportSyncRequest) (*CdrGetSyncUsageReportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CdrGetSyncUsageReportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CDRUsageReportsAPIService.GetCDRUsageReportSync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/cdr_usage_reports/sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aggregationType == nil {
		return localVarReturnValue, nil, reportError("aggregationType is required and must be specified")
	}
	if r.productBreakdown == nil {
		return localVarReturnValue, nil, reportError("productBreakdown is required and must be specified")
	}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "aggregation_type", r.aggregationType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "product_breakdown", r.productBreakdown, "form", "")
	if r.connections != nil {
		t := *r.connections
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "connections", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "connections", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
