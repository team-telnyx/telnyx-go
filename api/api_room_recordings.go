/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RoomRecordingsAPIService RoomRecordingsAPI service
type RoomRecordingsAPIService service

type ApiDeleteRoomRecordingRequest struct {
	ctx context.Context
	ApiService *RoomRecordingsAPIService
	roomRecordingId string
}

func (r ApiDeleteRoomRecordingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoomRecordingExecute(r)
}

/*
DeleteRoomRecording Delete a room recording.

Synchronously delete a Room Recording.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomRecordingId The unique identifier of a room recording.
 @return ApiDeleteRoomRecordingRequest
*/
func (a *RoomRecordingsAPIService) DeleteRoomRecording(ctx context.Context, roomRecordingId string) ApiDeleteRoomRecordingRequest {
	return ApiDeleteRoomRecordingRequest{
		ApiService: a,
		ctx: ctx,
		roomRecordingId: roomRecordingId,
	}
}

// Execute executes the request
func (a *RoomRecordingsAPIService) DeleteRoomRecordingExecute(r ApiDeleteRoomRecordingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRecordingsAPIService.DeleteRoomRecording")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_recordings/{room_recording_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"room_recording_id"+"}", url.PathEscape(parameterValueToString(r.roomRecordingId, "roomRecordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRoomRecordingsRequest struct {
	ctx context.Context
	ApiService *RoomRecordingsAPIService
	filterDateEndedAtEq *string
	filterDateEndedAtGte *string
	filterDateEndedAtLte *string
	filterDateStartedAtEq *string
	filterDateStartedAtGte *string
	filterDateStartedAtLte *string
	filterRoomId *string
	filterParticipantId *string
	filterSessionId *string
	filterStatus *string
	filterType *string
	filterDurationSecsEq *int32
	filterDurationSecsLte *int32
	filterDurationSecsGte *int32
	pageSize *int32
	pageNumber *int32
}

// ISO 8601 date for filtering room recordings ended on that date.
func (r ApiDeleteRoomRecordingsRequest) FilterDateEndedAtEq(filterDateEndedAtEq string) ApiDeleteRoomRecordingsRequest {
	r.filterDateEndedAtEq = &filterDateEndedAtEq
	return r
}

// ISO 8601 date for filtering room recordings ended after that date.
func (r ApiDeleteRoomRecordingsRequest) FilterDateEndedAtGte(filterDateEndedAtGte string) ApiDeleteRoomRecordingsRequest {
	r.filterDateEndedAtGte = &filterDateEndedAtGte
	return r
}

// ISO 8601 date for filtering room recordings ended before that date.
func (r ApiDeleteRoomRecordingsRequest) FilterDateEndedAtLte(filterDateEndedAtLte string) ApiDeleteRoomRecordingsRequest {
	r.filterDateEndedAtLte = &filterDateEndedAtLte
	return r
}

// ISO 8601 date for filtering room recordings started on that date.
func (r ApiDeleteRoomRecordingsRequest) FilterDateStartedAtEq(filterDateStartedAtEq string) ApiDeleteRoomRecordingsRequest {
	r.filterDateStartedAtEq = &filterDateStartedAtEq
	return r
}

// ISO 8601 date for filtering room recordings started after that date.
func (r ApiDeleteRoomRecordingsRequest) FilterDateStartedAtGte(filterDateStartedAtGte string) ApiDeleteRoomRecordingsRequest {
	r.filterDateStartedAtGte = &filterDateStartedAtGte
	return r
}

// ISO 8601 date for filtering room recordings started before that date.
func (r ApiDeleteRoomRecordingsRequest) FilterDateStartedAtLte(filterDateStartedAtLte string) ApiDeleteRoomRecordingsRequest {
	r.filterDateStartedAtLte = &filterDateStartedAtLte
	return r
}

// room_id for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterRoomId(filterRoomId string) ApiDeleteRoomRecordingsRequest {
	r.filterRoomId = &filterRoomId
	return r
}

// participant_id for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterParticipantId(filterParticipantId string) ApiDeleteRoomRecordingsRequest {
	r.filterParticipantId = &filterParticipantId
	return r
}

// session_id for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterSessionId(filterSessionId string) ApiDeleteRoomRecordingsRequest {
	r.filterSessionId = &filterSessionId
	return r
}

// status for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterStatus(filterStatus string) ApiDeleteRoomRecordingsRequest {
	r.filterStatus = &filterStatus
	return r
}

// type for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterType(filterType string) ApiDeleteRoomRecordingsRequest {
	r.filterType = &filterType
	return r
}

// duration_secs equal for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterDurationSecsEq(filterDurationSecsEq int32) ApiDeleteRoomRecordingsRequest {
	r.filterDurationSecsEq = &filterDurationSecsEq
	return r
}

// duration_secs less or equal for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterDurationSecsLte(filterDurationSecsLte int32) ApiDeleteRoomRecordingsRequest {
	r.filterDurationSecsLte = &filterDurationSecsLte
	return r
}

// duration_secs greater or equal for filtering room recordings.
func (r ApiDeleteRoomRecordingsRequest) FilterDurationSecsGte(filterDurationSecsGte int32) ApiDeleteRoomRecordingsRequest {
	r.filterDurationSecsGte = &filterDurationSecsGte
	return r
}

// The size of the page.
func (r ApiDeleteRoomRecordingsRequest) PageSize(pageSize int32) ApiDeleteRoomRecordingsRequest {
	r.pageSize = &pageSize
	return r
}

// The page number to load.
func (r ApiDeleteRoomRecordingsRequest) PageNumber(pageNumber int32) ApiDeleteRoomRecordingsRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiDeleteRoomRecordingsRequest) Execute() (*BulkRoomRecordingsDeleteResponse, *http.Response, error) {
	return r.ApiService.DeleteRoomRecordingsExecute(r)
}

/*
DeleteRoomRecordings Delete several room recordings in a bulk.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteRoomRecordingsRequest
*/
func (a *RoomRecordingsAPIService) DeleteRoomRecordings(ctx context.Context) ApiDeleteRoomRecordingsRequest {
	return ApiDeleteRoomRecordingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkRoomRecordingsDeleteResponse
func (a *RoomRecordingsAPIService) DeleteRoomRecordingsExecute(r ApiDeleteRoomRecordingsRequest) (*BulkRoomRecordingsDeleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkRoomRecordingsDeleteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRecordingsAPIService.DeleteRoomRecordings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_recordings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDateEndedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_ended_at][eq]", r.filterDateEndedAtEq, "form", "")
	}
	if r.filterDateEndedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_ended_at][gte]", r.filterDateEndedAtGte, "form", "")
	}
	if r.filterDateEndedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_ended_at][lte]", r.filterDateEndedAtLte, "form", "")
	}
	if r.filterDateStartedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_started_at][eq]", r.filterDateStartedAtEq, "form", "")
	}
	if r.filterDateStartedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_started_at][gte]", r.filterDateStartedAtGte, "form", "")
	}
	if r.filterDateStartedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_started_at][lte]", r.filterDateStartedAtLte, "form", "")
	}
	if r.filterRoomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[room_id]", r.filterRoomId, "form", "")
	}
	if r.filterParticipantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[participant_id]", r.filterParticipantId, "form", "")
	}
	if r.filterSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[session_id]", r.filterSessionId, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[type]", r.filterType, "form", "")
	}
	if r.filterDurationSecsEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[duration_secs][eq]", r.filterDurationSecsEq, "form", "")
	}
	if r.filterDurationSecsLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[duration_secs][lte]", r.filterDurationSecsLte, "form", "")
	}
	if r.filterDurationSecsGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[duration_secs][gte]", r.filterDurationSecsGte, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRoomRecordingsRequest struct {
	ctx context.Context
	ApiService *RoomRecordingsAPIService
	filterDateEndedAtEq *string
	filterDateEndedAtGte *string
	filterDateEndedAtLte *string
	filterDateStartedAtEq *string
	filterDateStartedAtGte *string
	filterDateStartedAtLte *string
	filterRoomId *string
	filterParticipantId *string
	filterSessionId *string
	filterStatus *string
	filterType *string
	filterDurationSecsEq *int32
	filterDurationSecsLte *int32
	filterDurationSecsGte *int32
	pageSize *int32
	pageNumber *int32
}

// ISO 8601 date for filtering room recordings ended on that date.
func (r ApiListRoomRecordingsRequest) FilterDateEndedAtEq(filterDateEndedAtEq string) ApiListRoomRecordingsRequest {
	r.filterDateEndedAtEq = &filterDateEndedAtEq
	return r
}

// ISO 8601 date for filtering room recordings ended after that date.
func (r ApiListRoomRecordingsRequest) FilterDateEndedAtGte(filterDateEndedAtGte string) ApiListRoomRecordingsRequest {
	r.filterDateEndedAtGte = &filterDateEndedAtGte
	return r
}

// ISO 8601 date for filtering room recordings ended before that date.
func (r ApiListRoomRecordingsRequest) FilterDateEndedAtLte(filterDateEndedAtLte string) ApiListRoomRecordingsRequest {
	r.filterDateEndedAtLte = &filterDateEndedAtLte
	return r
}

// ISO 8601 date for filtering room recordings started on that date.
func (r ApiListRoomRecordingsRequest) FilterDateStartedAtEq(filterDateStartedAtEq string) ApiListRoomRecordingsRequest {
	r.filterDateStartedAtEq = &filterDateStartedAtEq
	return r
}

// ISO 8601 date for filtering room recordings started after that date.
func (r ApiListRoomRecordingsRequest) FilterDateStartedAtGte(filterDateStartedAtGte string) ApiListRoomRecordingsRequest {
	r.filterDateStartedAtGte = &filterDateStartedAtGte
	return r
}

// ISO 8601 date for filtering room recordings started before that date.
func (r ApiListRoomRecordingsRequest) FilterDateStartedAtLte(filterDateStartedAtLte string) ApiListRoomRecordingsRequest {
	r.filterDateStartedAtLte = &filterDateStartedAtLte
	return r
}

// room_id for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterRoomId(filterRoomId string) ApiListRoomRecordingsRequest {
	r.filterRoomId = &filterRoomId
	return r
}

// participant_id for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterParticipantId(filterParticipantId string) ApiListRoomRecordingsRequest {
	r.filterParticipantId = &filterParticipantId
	return r
}

// session_id for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterSessionId(filterSessionId string) ApiListRoomRecordingsRequest {
	r.filterSessionId = &filterSessionId
	return r
}

// status for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterStatus(filterStatus string) ApiListRoomRecordingsRequest {
	r.filterStatus = &filterStatus
	return r
}

// type for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterType(filterType string) ApiListRoomRecordingsRequest {
	r.filterType = &filterType
	return r
}

// duration_secs equal for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterDurationSecsEq(filterDurationSecsEq int32) ApiListRoomRecordingsRequest {
	r.filterDurationSecsEq = &filterDurationSecsEq
	return r
}

// duration_secs less or equal for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterDurationSecsLte(filterDurationSecsLte int32) ApiListRoomRecordingsRequest {
	r.filterDurationSecsLte = &filterDurationSecsLte
	return r
}

// duration_secs greater or equal for filtering room recordings.
func (r ApiListRoomRecordingsRequest) FilterDurationSecsGte(filterDurationSecsGte int32) ApiListRoomRecordingsRequest {
	r.filterDurationSecsGte = &filterDurationSecsGte
	return r
}

// The size of the page.
func (r ApiListRoomRecordingsRequest) PageSize(pageSize int32) ApiListRoomRecordingsRequest {
	r.pageSize = &pageSize
	return r
}

// The page number to load.
func (r ApiListRoomRecordingsRequest) PageNumber(pageNumber int32) ApiListRoomRecordingsRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListRoomRecordingsRequest) Execute() (*ListRoomRecordings200Response, *http.Response, error) {
	return r.ApiService.ListRoomRecordingsExecute(r)
}

/*
ListRoomRecordings View a list of room recordings.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRoomRecordingsRequest
*/
func (a *RoomRecordingsAPIService) ListRoomRecordings(ctx context.Context) ApiListRoomRecordingsRequest {
	return ApiListRoomRecordingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListRoomRecordings200Response
func (a *RoomRecordingsAPIService) ListRoomRecordingsExecute(r ApiListRoomRecordingsRequest) (*ListRoomRecordings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListRoomRecordings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRecordingsAPIService.ListRoomRecordings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_recordings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDateEndedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_ended_at][eq]", r.filterDateEndedAtEq, "form", "")
	}
	if r.filterDateEndedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_ended_at][gte]", r.filterDateEndedAtGte, "form", "")
	}
	if r.filterDateEndedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_ended_at][lte]", r.filterDateEndedAtLte, "form", "")
	}
	if r.filterDateStartedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_started_at][eq]", r.filterDateStartedAtEq, "form", "")
	}
	if r.filterDateStartedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_started_at][gte]", r.filterDateStartedAtGte, "form", "")
	}
	if r.filterDateStartedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_started_at][lte]", r.filterDateStartedAtLte, "form", "")
	}
	if r.filterRoomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[room_id]", r.filterRoomId, "form", "")
	}
	if r.filterParticipantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[participant_id]", r.filterParticipantId, "form", "")
	}
	if r.filterSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[session_id]", r.filterSessionId, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[type]", r.filterType, "form", "")
	}
	if r.filterDurationSecsEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[duration_secs][eq]", r.filterDurationSecsEq, "form", "")
	}
	if r.filterDurationSecsLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[duration_secs][lte]", r.filterDurationSecsLte, "form", "")
	}
	if r.filterDurationSecsGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[duration_secs][gte]", r.filterDurationSecsGte, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewRoomRecordingRequest struct {
	ctx context.Context
	ApiService *RoomRecordingsAPIService
	roomRecordingId string
}

func (r ApiViewRoomRecordingRequest) Execute() (*ViewRoomRecording200Response, *http.Response, error) {
	return r.ApiService.ViewRoomRecordingExecute(r)
}

/*
ViewRoomRecording View a room recording.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomRecordingId The unique identifier of a room recording.
 @return ApiViewRoomRecordingRequest
*/
func (a *RoomRecordingsAPIService) ViewRoomRecording(ctx context.Context, roomRecordingId string) ApiViewRoomRecordingRequest {
	return ApiViewRoomRecordingRequest{
		ApiService: a,
		ctx: ctx,
		roomRecordingId: roomRecordingId,
	}
}

// Execute executes the request
//  @return ViewRoomRecording200Response
func (a *RoomRecordingsAPIService) ViewRoomRecordingExecute(r ApiViewRoomRecordingRequest) (*ViewRoomRecording200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewRoomRecording200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRecordingsAPIService.ViewRoomRecording")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_recordings/{room_recording_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"room_recording_id"+"}", url.PathEscape(parameterValueToString(r.roomRecordingId, "roomRecordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
