/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PhoneNumberCampaignsAPIService PhoneNumberCampaignsAPI service
type PhoneNumberCampaignsAPIService service

type ApiCreatePhoneNumberCampaignRequest struct {
	ctx context.Context
	ApiService *PhoneNumberCampaignsAPIService
	phoneNumberCampaignCreate *PhoneNumberCampaignCreate
}

func (r ApiCreatePhoneNumberCampaignRequest) PhoneNumberCampaignCreate(phoneNumberCampaignCreate PhoneNumberCampaignCreate) ApiCreatePhoneNumberCampaignRequest {
	r.phoneNumberCampaignCreate = &phoneNumberCampaignCreate
	return r
}

func (r ApiCreatePhoneNumberCampaignRequest) Execute() (*PhoneNumberCampaign, *http.Response, error) {
	return r.ApiService.CreatePhoneNumberCampaignExecute(r)
}

/*
CreatePhoneNumberCampaign Create New Phone Number Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePhoneNumberCampaignRequest
*/
func (a *PhoneNumberCampaignsAPIService) CreatePhoneNumberCampaign(ctx context.Context) ApiCreatePhoneNumberCampaignRequest {
	return ApiCreatePhoneNumberCampaignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PhoneNumberCampaign
func (a *PhoneNumberCampaignsAPIService) CreatePhoneNumberCampaignExecute(r ApiCreatePhoneNumberCampaignRequest) (*PhoneNumberCampaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberCampaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberCampaignsAPIService.CreatePhoneNumberCampaign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_number_campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumberCampaignCreate == nil {
		return localVarReturnValue, nil, reportError("phoneNumberCampaignCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumberCampaignCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePhoneNumberCampaignRequest struct {
	ctx context.Context
	ApiService *PhoneNumberCampaignsAPIService
	phoneNumber string
}

func (r ApiDeletePhoneNumberCampaignRequest) Execute() (*PhoneNumberCampaign, *http.Response, error) {
	return r.ApiService.DeletePhoneNumberCampaignExecute(r)
}

/*
DeletePhoneNumberCampaign Delete Phone Number Campaign

This endpoint allows you to remove a campaign assignment from the supplied `phoneNumber`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phoneNumber
 @return ApiDeletePhoneNumberCampaignRequest
*/
func (a *PhoneNumberCampaignsAPIService) DeletePhoneNumberCampaign(ctx context.Context, phoneNumber string) ApiDeletePhoneNumberCampaignRequest {
	return ApiDeletePhoneNumberCampaignRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumber: phoneNumber,
	}
}

// Execute executes the request
//  @return PhoneNumberCampaign
func (a *PhoneNumberCampaignsAPIService) DeletePhoneNumberCampaignExecute(r ApiDeletePhoneNumberCampaignRequest) (*PhoneNumberCampaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberCampaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberCampaignsAPIService.DeletePhoneNumberCampaign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_number_campaigns/{phoneNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", url.PathEscape(parameterValueToString(r.phoneNumber, "phoneNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllPhoneNumberCampaignsRequest struct {
	ctx context.Context
	ApiService *PhoneNumberCampaignsAPIService
	recordsPerPage *interface{}
	page *interface{}
	filterTelnyxCampaignId *string
	filterTelnyxBrandId *string
	filterTcrCampaignId *string
	filterTcrBrandId *string
	sort *string
}

func (r ApiGetAllPhoneNumberCampaignsRequest) RecordsPerPage(recordsPerPage interface{}) ApiGetAllPhoneNumberCampaignsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiGetAllPhoneNumberCampaignsRequest) Page(page interface{}) ApiGetAllPhoneNumberCampaignsRequest {
	r.page = &page
	return r
}

// Filter results by the Telnyx Campaign id
func (r ApiGetAllPhoneNumberCampaignsRequest) FilterTelnyxCampaignId(filterTelnyxCampaignId string) ApiGetAllPhoneNumberCampaignsRequest {
	r.filterTelnyxCampaignId = &filterTelnyxCampaignId
	return r
}

// Filter results by the Telnyx Brand id
func (r ApiGetAllPhoneNumberCampaignsRequest) FilterTelnyxBrandId(filterTelnyxBrandId string) ApiGetAllPhoneNumberCampaignsRequest {
	r.filterTelnyxBrandId = &filterTelnyxBrandId
	return r
}

// Filter results by the TCR Campaign id
func (r ApiGetAllPhoneNumberCampaignsRequest) FilterTcrCampaignId(filterTcrCampaignId string) ApiGetAllPhoneNumberCampaignsRequest {
	r.filterTcrCampaignId = &filterTcrCampaignId
	return r
}

// Filter results by the TCR Brand id
func (r ApiGetAllPhoneNumberCampaignsRequest) FilterTcrBrandId(filterTcrBrandId string) ApiGetAllPhoneNumberCampaignsRequest {
	r.filterTcrBrandId = &filterTcrBrandId
	return r
}

// Specifies the sort order for results. If not given, results are sorted by createdAt in descending order.
func (r ApiGetAllPhoneNumberCampaignsRequest) Sort(sort string) ApiGetAllPhoneNumberCampaignsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAllPhoneNumberCampaignsRequest) Execute() (*PhoneNumberCampaignPaginated, *http.Response, error) {
	return r.ApiService.GetAllPhoneNumberCampaignsExecute(r)
}

/*
GetAllPhoneNumberCampaigns Retrieve All Phone Number Campaigns

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllPhoneNumberCampaignsRequest
*/
func (a *PhoneNumberCampaignsAPIService) GetAllPhoneNumberCampaigns(ctx context.Context) ApiGetAllPhoneNumberCampaignsRequest {
	return ApiGetAllPhoneNumberCampaignsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PhoneNumberCampaignPaginated
func (a *PhoneNumberCampaignsAPIService) GetAllPhoneNumberCampaignsExecute(r ApiGetAllPhoneNumberCampaignsRequest) (*PhoneNumberCampaignPaginated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberCampaignPaginated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberCampaignsAPIService.GetAllPhoneNumberCampaigns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_number_campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordsPerPage", r.recordsPerPage, "form", "")
	} else {
		var defaultValue interface{} = 20
		r.recordsPerPage = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue interface{} = 1
		r.page = &defaultValue
	}
	if r.filterTelnyxCampaignId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[telnyx_campaign_id]", r.filterTelnyxCampaignId, "form", "")
	}
	if r.filterTelnyxBrandId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[telnyx_brand_id]", r.filterTelnyxBrandId, "form", "")
	}
	if r.filterTcrCampaignId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tcr_campaign_id]", r.filterTcrCampaignId, "form", "")
	}
	if r.filterTcrBrandId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tcr_brand_id]", r.filterTcrBrandId, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "-createdAt"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSinglePhoneNumberCampaignRequest struct {
	ctx context.Context
	ApiService *PhoneNumberCampaignsAPIService
	phoneNumber string
}

func (r ApiGetSinglePhoneNumberCampaignRequest) Execute() (*PhoneNumberCampaign, *http.Response, error) {
	return r.ApiService.GetSinglePhoneNumberCampaignExecute(r)
}

/*
GetSinglePhoneNumberCampaign Get Single Phone Number Campaign

Retrieve an individual phone number/campaign assignment by `phoneNumber`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phoneNumber
 @return ApiGetSinglePhoneNumberCampaignRequest
*/
func (a *PhoneNumberCampaignsAPIService) GetSinglePhoneNumberCampaign(ctx context.Context, phoneNumber string) ApiGetSinglePhoneNumberCampaignRequest {
	return ApiGetSinglePhoneNumberCampaignRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumber: phoneNumber,
	}
}

// Execute executes the request
//  @return PhoneNumberCampaign
func (a *PhoneNumberCampaignsAPIService) GetSinglePhoneNumberCampaignExecute(r ApiGetSinglePhoneNumberCampaignRequest) (*PhoneNumberCampaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberCampaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberCampaignsAPIService.GetSinglePhoneNumberCampaign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_number_campaigns/{phoneNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", url.PathEscape(parameterValueToString(r.phoneNumber, "phoneNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutPhoneNumberCampaignRequest struct {
	ctx context.Context
	ApiService *PhoneNumberCampaignsAPIService
	phoneNumber string
	phoneNumberCampaignCreate *PhoneNumberCampaignCreate
}

func (r ApiPutPhoneNumberCampaignRequest) PhoneNumberCampaignCreate(phoneNumberCampaignCreate PhoneNumberCampaignCreate) ApiPutPhoneNumberCampaignRequest {
	r.phoneNumberCampaignCreate = &phoneNumberCampaignCreate
	return r
}

func (r ApiPutPhoneNumberCampaignRequest) Execute() (*PhoneNumberCampaign, *http.Response, error) {
	return r.ApiService.PutPhoneNumberCampaignExecute(r)
}

/*
PutPhoneNumberCampaign Create New Phone Number Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phoneNumber
 @return ApiPutPhoneNumberCampaignRequest
*/
func (a *PhoneNumberCampaignsAPIService) PutPhoneNumberCampaign(ctx context.Context, phoneNumber string) ApiPutPhoneNumberCampaignRequest {
	return ApiPutPhoneNumberCampaignRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumber: phoneNumber,
	}
}

// Execute executes the request
//  @return PhoneNumberCampaign
func (a *PhoneNumberCampaignsAPIService) PutPhoneNumberCampaignExecute(r ApiPutPhoneNumberCampaignRequest) (*PhoneNumberCampaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberCampaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberCampaignsAPIService.PutPhoneNumberCampaign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_number_campaigns/{phoneNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", url.PathEscape(parameterValueToString(r.phoneNumber, "phoneNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumberCampaignCreate == nil {
		return localVarReturnValue, nil, reportError("phoneNumberCampaignCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumberCampaignCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
