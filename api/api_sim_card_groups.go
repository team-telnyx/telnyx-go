/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SIMCardGroupsAPIService SIMCardGroupsAPI service
type SIMCardGroupsAPIService service

type ApiCreateSimCardGroupRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	sIMCardGroupCreate *SIMCardGroupCreate
}

func (r ApiCreateSimCardGroupRequest) SIMCardGroupCreate(sIMCardGroupCreate SIMCardGroupCreate) ApiCreateSimCardGroupRequest {
	r.sIMCardGroupCreate = &sIMCardGroupCreate
	return r
}

func (r ApiCreateSimCardGroupRequest) Execute() (*CreateSimCardGroup200Response, *http.Response, error) {
	return r.ApiService.CreateSimCardGroupExecute(r)
}

/*
CreateSimCardGroup Create a SIM card group

Creates a new SIM card group object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSimCardGroupRequest
*/
func (a *SIMCardGroupsAPIService) CreateSimCardGroup(ctx context.Context) ApiCreateSimCardGroupRequest {
	return ApiCreateSimCardGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateSimCardGroup200Response
func (a *SIMCardGroupsAPIService) CreateSimCardGroupExecute(r ApiCreateSimCardGroupRequest) (*CreateSimCardGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSimCardGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.CreateSimCardGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sIMCardGroupCreate == nil {
		return localVarReturnValue, nil, reportError("sIMCardGroupCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sIMCardGroupCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSimCardGroupRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	id string
}

func (r ApiDeleteSimCardGroupRequest) Execute() (*CreateSimCardGroup200Response, *http.Response, error) {
	return r.ApiService.DeleteSimCardGroupExecute(r)
}

/*
DeleteSimCardGroup Delete a SIM card group

Permanently deletes a SIM card group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the SIM group.
 @return ApiDeleteSimCardGroupRequest
*/
func (a *SIMCardGroupsAPIService) DeleteSimCardGroup(ctx context.Context, id string) ApiDeleteSimCardGroupRequest {
	return ApiDeleteSimCardGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateSimCardGroup200Response
func (a *SIMCardGroupsAPIService) DeleteSimCardGroupExecute(r ApiDeleteSimCardGroupRequest) (*CreateSimCardGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSimCardGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.DeleteSimCardGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllSimCardGroupsRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	pageNumber *int32
	pageSize *int32
	filterName *string
	filterPrivateWirelessGatewayId *string
}

// The page number to load.
func (r ApiGetAllSimCardGroupsRequest) PageNumber(pageNumber int32) ApiGetAllSimCardGroupsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetAllSimCardGroupsRequest) PageSize(pageSize int32) ApiGetAllSimCardGroupsRequest {
	r.pageSize = &pageSize
	return r
}

// A valid SIM card group name.
func (r ApiGetAllSimCardGroupsRequest) FilterName(filterName string) ApiGetAllSimCardGroupsRequest {
	r.filterName = &filterName
	return r
}

// A Private Wireless Gateway ID associated with the group.
func (r ApiGetAllSimCardGroupsRequest) FilterPrivateWirelessGatewayId(filterPrivateWirelessGatewayId string) ApiGetAllSimCardGroupsRequest {
	r.filterPrivateWirelessGatewayId = &filterPrivateWirelessGatewayId
	return r
}

func (r ApiGetAllSimCardGroupsRequest) Execute() (*GetAllSimCardGroups200Response, *http.Response, error) {
	return r.ApiService.GetAllSimCardGroupsExecute(r)
}

/*
GetAllSimCardGroups Get all SIM card groups

Get all SIM card groups belonging to the user that match the given filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllSimCardGroupsRequest
*/
func (a *SIMCardGroupsAPIService) GetAllSimCardGroups(ctx context.Context) ApiGetAllSimCardGroupsRequest {
	return ApiGetAllSimCardGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAllSimCardGroups200Response
func (a *SIMCardGroupsAPIService) GetAllSimCardGroupsExecute(r ApiGetAllSimCardGroupsRequest) (*GetAllSimCardGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAllSimCardGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.GetAllSimCardGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name]", r.filterName, "form", "")
	}
	if r.filterPrivateWirelessGatewayId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[private_wireless_gateway_id]", r.filterPrivateWirelessGatewayId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimCardGroupRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	id string
	includeIccids *bool
}

// It includes a list of associated ICCIDs.
func (r ApiGetSimCardGroupRequest) IncludeIccids(includeIccids bool) ApiGetSimCardGroupRequest {
	r.includeIccids = &includeIccids
	return r
}

func (r ApiGetSimCardGroupRequest) Execute() (*CreateSimCardGroup200Response, *http.Response, error) {
	return r.ApiService.GetSimCardGroupExecute(r)
}

/*
GetSimCardGroup Get SIM card group

Returns the details regarding a specific SIM card group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the SIM group.
 @return ApiGetSimCardGroupRequest
*/
func (a *SIMCardGroupsAPIService) GetSimCardGroup(ctx context.Context, id string) ApiGetSimCardGroupRequest {
	return ApiGetSimCardGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateSimCardGroup200Response
func (a *SIMCardGroupsAPIService) GetSimCardGroupExecute(r ApiGetSimCardGroupRequest) (*CreateSimCardGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSimCardGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.GetSimCardGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeIccids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_iccids", r.includeIccids, "form", "")
	} else {
		var defaultValue bool = false
		r.includeIccids = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveSimCardGroupPrivateWirelessGatewayRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	id string
}

func (r ApiRemoveSimCardGroupPrivateWirelessGatewayRequest) Execute() (*GetSimCardGroupAction200Response, *http.Response, error) {
	return r.ApiService.RemoveSimCardGroupPrivateWirelessGatewayExecute(r)
}

/*
RemoveSimCardGroupPrivateWirelessGateway Request Private Wireless Gateway removal from SIM card group

This action will asynchronously remove an existing Private Wireless Gateway definition from a SIM card group. Completing this operation defines that all SIM cards in the SIM card group will get their traffic handled by Telnyx's default mobile network configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the SIM group.
 @return ApiRemoveSimCardGroupPrivateWirelessGatewayRequest
*/
func (a *SIMCardGroupsAPIService) RemoveSimCardGroupPrivateWirelessGateway(ctx context.Context, id string) ApiRemoveSimCardGroupPrivateWirelessGatewayRequest {
	return ApiRemoveSimCardGroupPrivateWirelessGatewayRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetSimCardGroupAction200Response
func (a *SIMCardGroupsAPIService) RemoveSimCardGroupPrivateWirelessGatewayExecute(r ApiRemoveSimCardGroupPrivateWirelessGatewayRequest) (*GetSimCardGroupAction200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSimCardGroupAction200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.RemoveSimCardGroupPrivateWirelessGateway")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups/{id}/actions/remove_private_wireless_gateway"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetPrivateWirelessGatewayForSimCardGroupRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	id string
	setPrivateWirelessGatewayForSimCardGroupRequest *SetPrivateWirelessGatewayForSimCardGroupRequest
}

func (r ApiSetPrivateWirelessGatewayForSimCardGroupRequest) SetPrivateWirelessGatewayForSimCardGroupRequest(setPrivateWirelessGatewayForSimCardGroupRequest SetPrivateWirelessGatewayForSimCardGroupRequest) ApiSetPrivateWirelessGatewayForSimCardGroupRequest {
	r.setPrivateWirelessGatewayForSimCardGroupRequest = &setPrivateWirelessGatewayForSimCardGroupRequest
	return r
}

func (r ApiSetPrivateWirelessGatewayForSimCardGroupRequest) Execute() (*GetSimCardGroupAction200Response, *http.Response, error) {
	return r.ApiService.SetPrivateWirelessGatewayForSimCardGroupExecute(r)
}

/*
SetPrivateWirelessGatewayForSimCardGroup Request Private Wireless Gateway assignment for SIM card group

This action will asynchronously assign a provisioned Private Wireless Gateway to the SIM card group. Completing this operation defines that all SIM cards in the SIM card group will get their traffic controlled by the associated Private Wireless Gateway. This operation will also imply that new SIM cards assigned to a group will inherit its network definitions. If it's moved to a different group that doesn't have a Private Wireless Gateway, it'll use Telnyx's default mobile network configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the SIM group.
 @return ApiSetPrivateWirelessGatewayForSimCardGroupRequest
*/
func (a *SIMCardGroupsAPIService) SetPrivateWirelessGatewayForSimCardGroup(ctx context.Context, id string) ApiSetPrivateWirelessGatewayForSimCardGroupRequest {
	return ApiSetPrivateWirelessGatewayForSimCardGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetSimCardGroupAction200Response
func (a *SIMCardGroupsAPIService) SetPrivateWirelessGatewayForSimCardGroupExecute(r ApiSetPrivateWirelessGatewayForSimCardGroupRequest) (*GetSimCardGroupAction200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSimCardGroupAction200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.SetPrivateWirelessGatewayForSimCardGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups/{id}/actions/set_private_wireless_gateway"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setPrivateWirelessGatewayForSimCardGroupRequest == nil {
		return localVarReturnValue, nil, reportError("setPrivateWirelessGatewayForSimCardGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setPrivateWirelessGatewayForSimCardGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSimCardGroupRequest struct {
	ctx context.Context
	ApiService *SIMCardGroupsAPIService
	id string
	sIMCardGroupPatch *SIMCardGroupPatch
}

func (r ApiUpdateSimCardGroupRequest) SIMCardGroupPatch(sIMCardGroupPatch SIMCardGroupPatch) ApiUpdateSimCardGroupRequest {
	r.sIMCardGroupPatch = &sIMCardGroupPatch
	return r
}

func (r ApiUpdateSimCardGroupRequest) Execute() (*CreateSimCardGroup200Response, *http.Response, error) {
	return r.ApiService.UpdateSimCardGroupExecute(r)
}

/*
UpdateSimCardGroup Update a SIM card group

Updates a SIM card group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the SIM group.
 @return ApiUpdateSimCardGroupRequest
*/
func (a *SIMCardGroupsAPIService) UpdateSimCardGroup(ctx context.Context, id string) ApiUpdateSimCardGroupRequest {
	return ApiUpdateSimCardGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateSimCardGroup200Response
func (a *SIMCardGroupsAPIService) UpdateSimCardGroupExecute(r ApiUpdateSimCardGroupRequest) (*CreateSimCardGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSimCardGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SIMCardGroupsAPIService.UpdateSimCardGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sim_card_groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sIMCardGroupPatch == nil {
		return localVarReturnValue, nil, reportError("sIMCardGroupPatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sIMCardGroupPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
