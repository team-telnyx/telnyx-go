/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PresignedObjectURLsAPIService PresignedObjectURLsAPI service
type PresignedObjectURLsAPIService service

type ApiCreatePresignedObjectUrlRequest struct {
	ctx context.Context
	ApiService *PresignedObjectURLsAPIService
	bucketName string
	objectName string
	presignedObjectUrlParams *PresignedObjectUrlParams
}

func (r ApiCreatePresignedObjectUrlRequest) PresignedObjectUrlParams(presignedObjectUrlParams PresignedObjectUrlParams) ApiCreatePresignedObjectUrlRequest {
	r.presignedObjectUrlParams = &presignedObjectUrlParams
	return r
}

func (r ApiCreatePresignedObjectUrlRequest) Execute() (*PresignedObjectUrl, *http.Response, error) {
	return r.ApiService.CreatePresignedObjectUrlExecute(r)
}

/*
CreatePresignedObjectUrl Create Presigned Object URL

Returns a timed and authenticated URL to get an object. This is the equivalent to AWS S3’s “presigned” URL. Please note that Telnyx performs authentication differently from AWS S3 and you MUST NOT use the presign method of AWS s3api CLI or sdk to generate the presigned URL. 

Refer to: https://developers.telnyx.com/docs/cloud-storage/presigned-urls


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The name of the bucket
 @param objectName The name of the object
 @return ApiCreatePresignedObjectUrlRequest
*/
func (a *PresignedObjectURLsAPIService) CreatePresignedObjectUrl(ctx context.Context, bucketName string, objectName string) ApiCreatePresignedObjectUrlRequest {
	return ApiCreatePresignedObjectUrlRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
		objectName: objectName,
	}
}

// Execute executes the request
//  @return PresignedObjectUrl
func (a *PresignedObjectURLsAPIService) CreatePresignedObjectUrlExecute(r ApiCreatePresignedObjectUrlRequest) (*PresignedObjectUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PresignedObjectUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PresignedObjectURLsAPIService.CreatePresignedObjectUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage/buckets/{bucketName}/{objectName}/presigned_url"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectName"+"}", url.PathEscape(parameterValueToString(r.objectName, "objectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.presignedObjectUrlParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
