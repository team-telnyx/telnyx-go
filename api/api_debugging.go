/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DebuggingAPIService DebuggingAPI service
type DebuggingAPIService service

type ApiListCallEventsRequest struct {
	ctx context.Context
	ApiService *DebuggingAPIService
	filterLegId *string
	filterApplicationSessionId *string
	filterConnectionId *string
	filterProduct *string
	filterFrom *string
	filterTo *string
	filterFailed *bool
	filterType *string
	filterName *string
	filterOccurredAtGt *string
	filterOccurredAtGte *string
	filterOccurredAtLt *string
	filterOccurredAtLte *string
	filterOccurredAtEq *string
	pageNumber *int32
	pageSize *int32
}

// The unique identifier of an individual call leg.
func (r ApiListCallEventsRequest) FilterLegId(filterLegId string) ApiListCallEventsRequest {
	r.filterLegId = &filterLegId
	return r
}

// The unique identifier of the call session. A session may include multiple call leg events.
func (r ApiListCallEventsRequest) FilterApplicationSessionId(filterApplicationSessionId string) ApiListCallEventsRequest {
	r.filterApplicationSessionId = &filterApplicationSessionId
	return r
}

// The unique identifier of the conection.
func (r ApiListCallEventsRequest) FilterConnectionId(filterConnectionId string) ApiListCallEventsRequest {
	r.filterConnectionId = &filterConnectionId
	return r
}

// Filter by product.
func (r ApiListCallEventsRequest) FilterProduct(filterProduct string) ApiListCallEventsRequest {
	r.filterProduct = &filterProduct
	return r
}

// Filter by From number.
func (r ApiListCallEventsRequest) FilterFrom(filterFrom string) ApiListCallEventsRequest {
	r.filterFrom = &filterFrom
	return r
}

// Filter by To number.
func (r ApiListCallEventsRequest) FilterTo(filterTo string) ApiListCallEventsRequest {
	r.filterTo = &filterTo
	return r
}

// Delivery failed or not.
func (r ApiListCallEventsRequest) FilterFailed(filterFailed bool) ApiListCallEventsRequest {
	r.filterFailed = &filterFailed
	return r
}

// Event type
func (r ApiListCallEventsRequest) FilterType(filterType string) ApiListCallEventsRequest {
	r.filterType = &filterType
	return r
}

// Event name
func (r ApiListCallEventsRequest) FilterName(filterName string) ApiListCallEventsRequest {
	r.filterName = &filterName
	return r
}

// Event occurred_at: greater than
func (r ApiListCallEventsRequest) FilterOccurredAtGt(filterOccurredAtGt string) ApiListCallEventsRequest {
	r.filterOccurredAtGt = &filterOccurredAtGt
	return r
}

// Event occurred_at: greater than or equal
func (r ApiListCallEventsRequest) FilterOccurredAtGte(filterOccurredAtGte string) ApiListCallEventsRequest {
	r.filterOccurredAtGte = &filterOccurredAtGte
	return r
}

// Event occurred_at: lower than
func (r ApiListCallEventsRequest) FilterOccurredAtLt(filterOccurredAtLt string) ApiListCallEventsRequest {
	r.filterOccurredAtLt = &filterOccurredAtLt
	return r
}

// Event occurred_at: lower than or equal
func (r ApiListCallEventsRequest) FilterOccurredAtLte(filterOccurredAtLte string) ApiListCallEventsRequest {
	r.filterOccurredAtLte = &filterOccurredAtLte
	return r
}

// Event occurred_at: equal
func (r ApiListCallEventsRequest) FilterOccurredAtEq(filterOccurredAtEq string) ApiListCallEventsRequest {
	r.filterOccurredAtEq = &filterOccurredAtEq
	return r
}

// The page number to load.
func (r ApiListCallEventsRequest) PageNumber(pageNumber int32) ApiListCallEventsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListCallEventsRequest) PageSize(pageSize int32) ApiListCallEventsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListCallEventsRequest) Execute() (*ListCallEventsResponse, *http.Response, error) {
	return r.ApiService.ListCallEventsExecute(r)
}

/*
ListCallEvents List call events

Filters call events by given filter parameters. Events are ordered by `occurred_at`. If filter for `leg_id` or `application_session_id` is not present, it only filters events from the last 24 hours.

**Note**: Only one `filter[occurred_at]` can be passed.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCallEventsRequest
*/
func (a *DebuggingAPIService) ListCallEvents(ctx context.Context) ApiListCallEventsRequest {
	return ApiListCallEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCallEventsResponse
func (a *DebuggingAPIService) ListCallEventsExecute(r ApiListCallEventsRequest) (*ListCallEventsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCallEventsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebuggingAPIService.ListCallEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/call_events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLegId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[leg_id]", r.filterLegId, "form", "")
	}
	if r.filterApplicationSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[application_session_id]", r.filterApplicationSessionId, "form", "")
	}
	if r.filterConnectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_id]", r.filterConnectionId, "form", "")
	}
	if r.filterProduct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[product]", r.filterProduct, "form", "")
	}
	if r.filterFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[from]", r.filterFrom, "form", "")
	}
	if r.filterTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[to]", r.filterTo, "form", "")
	}
	if r.filterFailed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[failed]", r.filterFailed, "form", "")
	}
	if r.filterType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[type]", r.filterType, "form", "")
	}
	if r.filterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name]", r.filterName, "form", "")
	}
	if r.filterOccurredAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[occurred_at][gt]", r.filterOccurredAtGt, "form", "")
	}
	if r.filterOccurredAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[occurred_at][gte]", r.filterOccurredAtGte, "form", "")
	}
	if r.filterOccurredAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[occurred_at][lt]", r.filterOccurredAtLt, "form", "")
	}
	if r.filterOccurredAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[occurred_at][lte]", r.filterOccurredAtLte, "form", "")
	}
	if r.filterOccurredAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[occurred_at][eq]", r.filterOccurredAtEq, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
