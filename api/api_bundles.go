/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// BundlesAPIService BundlesAPI service
type BundlesAPIService service

type ApiGetBillingBundleByIdRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleId string
	authorizationBearer *string
}

// Format: Bearer &lt;TOKEN&gt;
func (r ApiGetBillingBundleByIdRequest) AuthorizationBearer(authorizationBearer string) ApiGetBillingBundleByIdRequest {
	r.authorizationBearer = &authorizationBearer
	return r
}

func (r ApiGetBillingBundleByIdRequest) Execute() (*BillingBundleResponse, *http.Response, error) {
	return r.ApiService.GetBillingBundleByIdExecute(r)
}

/*
GetBillingBundleById Get Bundle By Id

Get a single bundle by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bundleId
 @return ApiGetBillingBundleByIdRequest
*/
func (a *BundlesAPIService) GetBillingBundleById(ctx context.Context, bundleId string) ApiGetBillingBundleByIdRequest {
	return ApiGetBillingBundleByIdRequest{
		ApiService: a,
		ctx: ctx,
		bundleId: bundleId,
	}
}

// Execute executes the request
//  @return BillingBundleResponse
func (a *BundlesAPIService) GetBillingBundleByIdExecute(r ApiGetBillingBundleByIdRequest) (*BillingBundleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingBundleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetBillingBundleById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundle_pricing/billing_bundles/{bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bundle_id"+"}", url.PathEscape(parameterValueToString(r.bundleId, "bundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorizationBearer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization_bearer", r.authorizationBearer, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserBillingBundlesRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	filterCountryIso *[]string
	pageNumber *int32
	pageSize *int32
	authorizationBearer *string
}

// Filter by country code.
func (r ApiGetUserBillingBundlesRequest) FilterCountryIso(filterCountryIso []string) ApiGetUserBillingBundlesRequest {
	r.filterCountryIso = &filterCountryIso
	return r
}

// The page number to load.
func (r ApiGetUserBillingBundlesRequest) PageNumber(pageNumber int32) ApiGetUserBillingBundlesRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetUserBillingBundlesRequest) PageSize(pageSize int32) ApiGetUserBillingBundlesRequest {
	r.pageSize = &pageSize
	return r
}

// Format: Bearer &lt;TOKEN&gt;
func (r ApiGetUserBillingBundlesRequest) AuthorizationBearer(authorizationBearer string) ApiGetUserBillingBundlesRequest {
	r.authorizationBearer = &authorizationBearer
	return r
}

func (r ApiGetUserBillingBundlesRequest) Execute() (*PaginatedBillingBundlesResponse, *http.Response, error) {
	return r.ApiService.GetUserBillingBundlesExecute(r)
}

/*
GetUserBillingBundles Retrieve Bundles

Get all allowed bundles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserBillingBundlesRequest
*/
func (a *BundlesAPIService) GetUserBillingBundles(ctx context.Context) ApiGetUserBillingBundlesRequest {
	return ApiGetUserBillingBundlesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedBillingBundlesResponse
func (a *BundlesAPIService) GetUserBillingBundlesExecute(r ApiGetUserBillingBundlesRequest) (*PaginatedBillingBundlesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedBillingBundlesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.GetUserBillingBundles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bundle_pricing/billing_bundles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCountryIso != nil {
		t := *r.filterCountryIso
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_iso]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_iso]", t, "form", "multi")
		}
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorizationBearer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization_bearer", r.authorizationBearer, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
