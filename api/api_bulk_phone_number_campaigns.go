/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BulkPhoneNumberCampaignsAPIService BulkPhoneNumberCampaignsAPI service
type BulkPhoneNumberCampaignsAPIService service

type ApiGetAssignmentTaskStatusRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberCampaignsAPIService
	taskId string
}

func (r ApiGetAssignmentTaskStatusRequest) Execute() (*AssignmentTaskStatusResponse, *http.Response, error) {
	return r.ApiService.GetAssignmentTaskStatusExecute(r)
}

/*
GetAssignmentTaskStatus Get Assignment Task Status

Check the status of the task associated with assigning all phone numbers on a messaging profile to a campaign by `taskId`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId
 @return ApiGetAssignmentTaskStatusRequest
*/
func (a *BulkPhoneNumberCampaignsAPIService) GetAssignmentTaskStatus(ctx context.Context, taskId string) ApiGetAssignmentTaskStatusRequest {
	return ApiGetAssignmentTaskStatusRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return AssignmentTaskStatusResponse
func (a *BulkPhoneNumberCampaignsAPIService) GetAssignmentTaskStatusExecute(r ApiGetAssignmentTaskStatusRequest) (*AssignmentTaskStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssignmentTaskStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberCampaignsAPIService.GetAssignmentTaskStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phoneNumberAssignmentByProfile/{taskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPhoneNumberStatusRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberCampaignsAPIService
	taskId string
	recordsPerPage *interface{}
	page *interface{}
}

func (r ApiGetPhoneNumberStatusRequest) RecordsPerPage(recordsPerPage interface{}) ApiGetPhoneNumberStatusRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiGetPhoneNumberStatusRequest) Page(page interface{}) ApiGetPhoneNumberStatusRequest {
	r.page = &page
	return r
}

func (r ApiGetPhoneNumberStatusRequest) Execute() (*PhoneNumberStatusResponsePaginated, *http.Response, error) {
	return r.ApiService.GetPhoneNumberStatusExecute(r)
}

/*
GetPhoneNumberStatus Get Phone Number Status

Check the status of the individual phone number/campaign assignments associated with the supplied `taskId`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId
 @return ApiGetPhoneNumberStatusRequest
*/
func (a *BulkPhoneNumberCampaignsAPIService) GetPhoneNumberStatus(ctx context.Context, taskId string) ApiGetPhoneNumberStatusRequest {
	return ApiGetPhoneNumberStatusRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return PhoneNumberStatusResponsePaginated
func (a *BulkPhoneNumberCampaignsAPIService) GetPhoneNumberStatusExecute(r ApiGetPhoneNumberStatusRequest) (*PhoneNumberStatusResponsePaginated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumberStatusResponsePaginated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberCampaignsAPIService.GetPhoneNumberStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phoneNumberAssignmentByProfile/{taskId}/phoneNumbers"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordsPerPage", r.recordsPerPage, "form", "")
	} else {
		var defaultValue interface{} = 20
		r.recordsPerPage = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue interface{} = 1
		r.page = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAssignMessagingProfileToCampaignRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberCampaignsAPIService
	assignProfileToCampaignRequest *AssignProfileToCampaignRequest
}

func (r ApiPostAssignMessagingProfileToCampaignRequest) AssignProfileToCampaignRequest(assignProfileToCampaignRequest AssignProfileToCampaignRequest) ApiPostAssignMessagingProfileToCampaignRequest {
	r.assignProfileToCampaignRequest = &assignProfileToCampaignRequest
	return r
}

func (r ApiPostAssignMessagingProfileToCampaignRequest) Execute() (*ResponseAssignMessagingProfileToCampaignPublicPhonenumberassignmentbyprofilePost, *http.Response, error) {
	return r.ApiService.PostAssignMessagingProfileToCampaignExecute(r)
}

/*
PostAssignMessagingProfileToCampaign Assign Messaging Profile To Campaign

This endpoint allows you to link all phone numbers associated with a Messaging Profile to a campaign. **Please note:** if you want to assign phone numbers to a campaign that you did not create with Telnyx 10DLC services, this endpoint allows that provided that you've shared the campaign with Telnyx. In this case, only provide the parameter, `tcrCampaignId`, and not `campaignId`. In all other cases (where the campaign you're assigning was created with Telnyx 10DLC services), only provide `campaignId`, not `tcrCampaignId`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostAssignMessagingProfileToCampaignRequest
*/
func (a *BulkPhoneNumberCampaignsAPIService) PostAssignMessagingProfileToCampaign(ctx context.Context) ApiPostAssignMessagingProfileToCampaignRequest {
	return ApiPostAssignMessagingProfileToCampaignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseAssignMessagingProfileToCampaignPublicPhonenumberassignmentbyprofilePost
func (a *BulkPhoneNumberCampaignsAPIService) PostAssignMessagingProfileToCampaignExecute(r ApiPostAssignMessagingProfileToCampaignRequest) (*ResponseAssignMessagingProfileToCampaignPublicPhonenumberassignmentbyprofilePost, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseAssignMessagingProfileToCampaignPublicPhonenumberassignmentbyprofilePost
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberCampaignsAPIService.PostAssignMessagingProfileToCampaign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phoneNumberAssignmentByProfile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assignProfileToCampaignRequest == nil {
		return localVarReturnValue, nil, reportError("assignProfileToCampaignRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assignProfileToCampaignRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
