/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// IPRangesAPIService IPRangesAPI service
type IPRangesAPIService service

type ApiAccessIpRangesAccessIpRangeIdDeleteRequest struct {
	ctx context.Context
	ApiService *IPRangesAPIService
	accessIpRangeId string
}

func (r ApiAccessIpRangesAccessIpRangeIdDeleteRequest) Execute() (*AccessIPRangeResponseSchema, *http.Response, error) {
	return r.ApiService.AccessIpRangesAccessIpRangeIdDeleteExecute(r)
}

/*
AccessIpRangesAccessIpRangeIdDelete Delete access IP ranges

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessIpRangeId
 @return ApiAccessIpRangesAccessIpRangeIdDeleteRequest
*/
func (a *IPRangesAPIService) AccessIpRangesAccessIpRangeIdDelete(ctx context.Context, accessIpRangeId string) ApiAccessIpRangesAccessIpRangeIdDeleteRequest {
	return ApiAccessIpRangesAccessIpRangeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accessIpRangeId: accessIpRangeId,
	}
}

// Execute executes the request
//  @return AccessIPRangeResponseSchema
func (a *IPRangesAPIService) AccessIpRangesAccessIpRangeIdDeleteExecute(r ApiAccessIpRangesAccessIpRangeIdDeleteRequest) (*AccessIPRangeResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPRangeResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPRangesAPIService.AccessIpRangesAccessIpRangeIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_ranges/{access_ip_range_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"access_ip_range_id"+"}", url.PathEscape(parameterValueToString(r.accessIpRangeId, "accessIpRangeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAccessIPRangeRequest struct {
	ctx context.Context
	ApiService *IPRangesAPIService
	accessIPRangePOST *AccessIPRangePOST
}

func (r ApiCreateAccessIPRangeRequest) AccessIPRangePOST(accessIPRangePOST AccessIPRangePOST) ApiCreateAccessIPRangeRequest {
	r.accessIPRangePOST = &accessIPRangePOST
	return r
}

func (r ApiCreateAccessIPRangeRequest) Execute() (*AccessIPRangeResponseSchema, *http.Response, error) {
	return r.ApiService.CreateAccessIPRangeExecute(r)
}

/*
CreateAccessIPRange Create new Access IP Range

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAccessIPRangeRequest
*/
func (a *IPRangesAPIService) CreateAccessIPRange(ctx context.Context) ApiCreateAccessIPRangeRequest {
	return ApiCreateAccessIPRangeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessIPRangeResponseSchema
func (a *IPRangesAPIService) CreateAccessIPRangeExecute(r ApiCreateAccessIPRangeRequest) (*AccessIPRangeResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPRangeResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPRangesAPIService.CreateAccessIPRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_ranges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessIPRangePOST == nil {
		return localVarReturnValue, nil, reportError("accessIPRangePOST is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessIPRangePOST
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccessIpRangesRequest struct {
	ctx context.Context
	ApiService *IPRangesAPIService
	filterCidrBlock *string
	filterCidrBlockStartswith *string
	filterCidrBlockEndswith *string
	filterCidrBlockContains *string
	filterCreatedAtGt *time.Time
	filterCreatedAtLt *time.Time
	pageNumber *int32
	pageSize *int32
}

func (r ApiListAccessIpRangesRequest) FilterCidrBlock(filterCidrBlock string) ApiListAccessIpRangesRequest {
	r.filterCidrBlock = &filterCidrBlock
	return r
}

func (r ApiListAccessIpRangesRequest) FilterCidrBlockStartswith(filterCidrBlockStartswith string) ApiListAccessIpRangesRequest {
	r.filterCidrBlockStartswith = &filterCidrBlockStartswith
	return r
}

func (r ApiListAccessIpRangesRequest) FilterCidrBlockEndswith(filterCidrBlockEndswith string) ApiListAccessIpRangesRequest {
	r.filterCidrBlockEndswith = &filterCidrBlockEndswith
	return r
}

func (r ApiListAccessIpRangesRequest) FilterCidrBlockContains(filterCidrBlockContains string) ApiListAccessIpRangesRequest {
	r.filterCidrBlockContains = &filterCidrBlockContains
	return r
}

func (r ApiListAccessIpRangesRequest) FilterCreatedAtGt(filterCreatedAtGt time.Time) ApiListAccessIpRangesRequest {
	r.filterCreatedAtGt = &filterCreatedAtGt
	return r
}

func (r ApiListAccessIpRangesRequest) FilterCreatedAtLt(filterCreatedAtLt time.Time) ApiListAccessIpRangesRequest {
	r.filterCreatedAtLt = &filterCreatedAtLt
	return r
}

func (r ApiListAccessIpRangesRequest) PageNumber(pageNumber int32) ApiListAccessIpRangesRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListAccessIpRangesRequest) PageSize(pageSize int32) ApiListAccessIpRangesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListAccessIpRangesRequest) Execute() (*AccessIPRangeListResponseSchema, *http.Response, error) {
	return r.ApiService.ListAccessIpRangesExecute(r)
}

/*
ListAccessIpRanges List all Access IP Ranges

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAccessIpRangesRequest
*/
func (a *IPRangesAPIService) ListAccessIpRanges(ctx context.Context) ApiListAccessIpRangesRequest {
	return ApiListAccessIpRangesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessIPRangeListResponseSchema
func (a *IPRangesAPIService) ListAccessIpRangesExecute(r ApiListAccessIpRangesRequest) (*AccessIPRangeListResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessIPRangeListResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPRangesAPIService.ListAccessIpRanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access_ip_ranges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCidrBlock != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[cidr_block]", r.filterCidrBlock, "form", "")
	}
	if r.filterCidrBlockStartswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[cidr_block][startswith]", r.filterCidrBlockStartswith, "form", "")
	}
	if r.filterCidrBlockEndswith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[cidr_block][endswith]", r.filterCidrBlockEndswith, "form", "")
	}
	if r.filterCidrBlockContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[cidr_block][contains]", r.filterCidrBlockContains, "form", "")
	}
	if r.filterCreatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gt]", r.filterCreatedAtGt, "form", "")
	}
	if r.filterCreatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lt]", r.filterCreatedAtLt, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
