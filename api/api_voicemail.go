/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VoicemailAPIService VoicemailAPI service
type VoicemailAPIService service

type ApiCreateVoicemailRequest struct {
	ctx context.Context
	ApiService *VoicemailAPIService
	phoneNumberId string
	voicemailRequest *VoicemailRequest
}

// Details to create
func (r ApiCreateVoicemailRequest) VoicemailRequest(voicemailRequest VoicemailRequest) ApiCreateVoicemailRequest {
	r.voicemailRequest = &voicemailRequest
	return r
}

func (r ApiCreateVoicemailRequest) Execute() (*GetVoicemail200Response, *http.Response, error) {
	return r.ApiService.CreateVoicemailExecute(r)
}

/*
CreateVoicemail Create voicemail

Create voicemail settings for a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phoneNumberId The ID of the phone number.
 @return ApiCreateVoicemailRequest
*/
func (a *VoicemailAPIService) CreateVoicemail(ctx context.Context, phoneNumberId string) ApiCreateVoicemailRequest {
	return ApiCreateVoicemailRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumberId: phoneNumberId,
	}
}

// Execute executes the request
//  @return GetVoicemail200Response
func (a *VoicemailAPIService) CreateVoicemailExecute(r ApiCreateVoicemailRequest) (*GetVoicemail200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetVoicemail200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicemailAPIService.CreateVoicemail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{phone_number_id}/voicemail"
	localVarPath = strings.Replace(localVarPath, "{"+"phone_number_id"+"}", url.PathEscape(parameterValueToString(r.phoneNumberId, "phoneNumberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.voicemailRequest == nil {
		return localVarReturnValue, nil, reportError("voicemailRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.voicemailRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVoicemailRequest struct {
	ctx context.Context
	ApiService *VoicemailAPIService
	phoneNumberId string
}

func (r ApiGetVoicemailRequest) Execute() (*GetVoicemail200Response, *http.Response, error) {
	return r.ApiService.GetVoicemailExecute(r)
}

/*
GetVoicemail Get voicemail

Returns the voicemail settings for a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phoneNumberId The ID of the phone number.
 @return ApiGetVoicemailRequest
*/
func (a *VoicemailAPIService) GetVoicemail(ctx context.Context, phoneNumberId string) ApiGetVoicemailRequest {
	return ApiGetVoicemailRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumberId: phoneNumberId,
	}
}

// Execute executes the request
//  @return GetVoicemail200Response
func (a *VoicemailAPIService) GetVoicemailExecute(r ApiGetVoicemailRequest) (*GetVoicemail200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetVoicemail200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicemailAPIService.GetVoicemail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{phone_number_id}/voicemail"
	localVarPath = strings.Replace(localVarPath, "{"+"phone_number_id"+"}", url.PathEscape(parameterValueToString(r.phoneNumberId, "phoneNumberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateVoicemailRequest struct {
	ctx context.Context
	ApiService *VoicemailAPIService
	phoneNumberId string
	voicemailRequest *VoicemailRequest
}

// Details to update
func (r ApiUpdateVoicemailRequest) VoicemailRequest(voicemailRequest VoicemailRequest) ApiUpdateVoicemailRequest {
	r.voicemailRequest = &voicemailRequest
	return r
}

func (r ApiUpdateVoicemailRequest) Execute() (*GetVoicemail200Response, *http.Response, error) {
	return r.ApiService.UpdateVoicemailExecute(r)
}

/*
UpdateVoicemail Update voicemail

Update voicemail settings for a phone number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param phoneNumberId The ID of the phone number.
 @return ApiUpdateVoicemailRequest
*/
func (a *VoicemailAPIService) UpdateVoicemail(ctx context.Context, phoneNumberId string) ApiUpdateVoicemailRequest {
	return ApiUpdateVoicemailRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumberId: phoneNumberId,
	}
}

// Execute executes the request
//  @return GetVoicemail200Response
func (a *VoicemailAPIService) UpdateVoicemailExecute(r ApiUpdateVoicemailRequest) (*GetVoicemail200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetVoicemail200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VoicemailAPIService.UpdateVoicemail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/{phone_number_id}/voicemail"
	localVarPath = strings.Replace(localVarPath, "{"+"phone_number_id"+"}", url.PathEscape(parameterValueToString(r.phoneNumberId, "phoneNumberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.voicemailRequest == nil {
		return localVarReturnValue, nil, reportError("voicemailRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.voicemailRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
