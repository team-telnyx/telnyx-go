/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)


// AudioAPIService AudioAPI service
type AudioAPIService service

type ApiAudioPublicAudioTranscriptionsPostRequest struct {
	ctx context.Context
	ApiService *AudioAPIService
	model *string
	file *os.File
	fileUrl *string
	responseFormat *string
	timestampGranularities *string
}

// ID of the model to use. &#x60;distil-whisper/distil-large-v2&#x60; is lower latency but English-only. &#x60;openai/whisper-large-v3-turbo&#x60; is multi-lingual but slightly higher latency.
func (r ApiAudioPublicAudioTranscriptionsPostRequest) Model(model string) ApiAudioPublicAudioTranscriptionsPostRequest {
	r.model = &model
	return r
}

// The audio file object to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. File uploads are limited to 100 MB. Cannot be used together with &#x60;file_url&#x60;
func (r ApiAudioPublicAudioTranscriptionsPostRequest) File(file *os.File) ApiAudioPublicAudioTranscriptionsPostRequest {
	r.file = file
	return r
}

// Link to audio file in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. Support for hosted files is limited to 100MB. Cannot be used together with &#x60;file&#x60;
func (r ApiAudioPublicAudioTranscriptionsPostRequest) FileUrl(fileUrl string) ApiAudioPublicAudioTranscriptionsPostRequest {
	r.fileUrl = &fileUrl
	return r
}

// The format of the transcript output. Use &#x60;verbose_json&#x60; to take advantage of timestamps.
func (r ApiAudioPublicAudioTranscriptionsPostRequest) ResponseFormat(responseFormat string) ApiAudioPublicAudioTranscriptionsPostRequest {
	r.responseFormat = &responseFormat
	return r
}

// The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set verbose_json to use timestamp granularities. Currently &#x60;segment&#x60; is supported.
func (r ApiAudioPublicAudioTranscriptionsPostRequest) TimestampGranularities(timestampGranularities string) ApiAudioPublicAudioTranscriptionsPostRequest {
	r.timestampGranularities = &timestampGranularities
	return r
}

func (r ApiAudioPublicAudioTranscriptionsPostRequest) Execute() (*AudioTranscriptionResponse, *http.Response, error) {
	return r.ApiService.AudioPublicAudioTranscriptionsPostExecute(r)
}

/*
AudioPublicAudioTranscriptionsPost Transcribe speech to text

Transcribe speech to text. This endpoint is consistent with the [OpenAI Transcription API](https://platform.openai.com/docs/api-reference/audio/createTranscription) and may be used with the OpenAI JS or Python SDK.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAudioPublicAudioTranscriptionsPostRequest
*/
func (a *AudioAPIService) AudioPublicAudioTranscriptionsPost(ctx context.Context) ApiAudioPublicAudioTranscriptionsPostRequest {
	return ApiAudioPublicAudioTranscriptionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AudioTranscriptionResponse
func (a *AudioAPIService) AudioPublicAudioTranscriptionsPostExecute(r ApiAudioPublicAudioTranscriptionsPostRequest) (*AudioTranscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AudioTranscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioAPIService.AudioPublicAudioTranscriptionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ai/audio/transcriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return localVarReturnValue, nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.fileUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "file_url", r.fileUrl, "", "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "model", r.model, "", "")
	if r.responseFormat != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "response_format", r.responseFormat, "", "")
	}
	if r.timestampGranularities != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timestamp_granularities[]", r.timestampGranularities, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
