/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WebhooksAPIService WebhooksAPI service
type WebhooksAPIService service

type ApiGetWebhookDeliveriesRequest struct {
	ctx context.Context
	ApiService *WebhooksAPIService
	filterStatusEq *string
	filterEventType *string
	filterWebhookContains *string
	filterAttemptsContains *string
	filterStartedAtGte *string
	filterStartedAtLte *string
	filterFinishedAtGte *string
	filterFinishedAtLte *string
	pageNumber *int32
	pageSize *int32
}

// Return only webhook_deliveries matching the given &#x60;status&#x60;
func (r ApiGetWebhookDeliveriesRequest) FilterStatusEq(filterStatusEq string) ApiGetWebhookDeliveriesRequest {
	r.filterStatusEq = &filterStatusEq
	return r
}

// Return only webhook_deliveries matching the given value of &#x60;event_type&#x60;. Accepts multiple values separated by a &#x60;,&#x60;.
func (r ApiGetWebhookDeliveriesRequest) FilterEventType(filterEventType string) ApiGetWebhookDeliveriesRequest {
	r.filterEventType = &filterEventType
	return r
}

// Return only webhook deliveries whose &#x60;webhook&#x60; component contains the given text
func (r ApiGetWebhookDeliveriesRequest) FilterWebhookContains(filterWebhookContains string) ApiGetWebhookDeliveriesRequest {
	r.filterWebhookContains = &filterWebhookContains
	return r
}

// Return only webhook_deliveries whose &#x60;attempts&#x60; component contains the given text
func (r ApiGetWebhookDeliveriesRequest) FilterAttemptsContains(filterAttemptsContains string) ApiGetWebhookDeliveriesRequest {
	r.filterAttemptsContains = &filterAttemptsContains
	return r
}

// Return only webhook_deliveries whose delivery started later than or at given ISO 8601 datetime
func (r ApiGetWebhookDeliveriesRequest) FilterStartedAtGte(filterStartedAtGte string) ApiGetWebhookDeliveriesRequest {
	r.filterStartedAtGte = &filterStartedAtGte
	return r
}

// Return only webhook_deliveries whose delivery started earlier than or at given ISO 8601 datetime
func (r ApiGetWebhookDeliveriesRequest) FilterStartedAtLte(filterStartedAtLte string) ApiGetWebhookDeliveriesRequest {
	r.filterStartedAtLte = &filterStartedAtLte
	return r
}

// Return only webhook_deliveries whose delivery finished later than or at given ISO 8601 datetime
func (r ApiGetWebhookDeliveriesRequest) FilterFinishedAtGte(filterFinishedAtGte string) ApiGetWebhookDeliveriesRequest {
	r.filterFinishedAtGte = &filterFinishedAtGte
	return r
}

// Return only webhook_deliveries whose delivery finished earlier than or at given ISO 8601 datetime
func (r ApiGetWebhookDeliveriesRequest) FilterFinishedAtLte(filterFinishedAtLte string) ApiGetWebhookDeliveriesRequest {
	r.filterFinishedAtLte = &filterFinishedAtLte
	return r
}

// The page number to load.
func (r ApiGetWebhookDeliveriesRequest) PageNumber(pageNumber int32) ApiGetWebhookDeliveriesRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetWebhookDeliveriesRequest) PageSize(pageSize int32) ApiGetWebhookDeliveriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetWebhookDeliveriesRequest) Execute() (*GetWebhookDeliveries200Response, *http.Response, error) {
	return r.ApiService.GetWebhookDeliveriesExecute(r)
}

/*
GetWebhookDeliveries List webhook deliveries

Lists webhook_deliveries for the authenticated user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWebhookDeliveriesRequest
*/
func (a *WebhooksAPIService) GetWebhookDeliveries(ctx context.Context) ApiGetWebhookDeliveriesRequest {
	return ApiGetWebhookDeliveriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetWebhookDeliveries200Response
func (a *WebhooksAPIService) GetWebhookDeliveriesExecute(r ApiGetWebhookDeliveriesRequest) (*GetWebhookDeliveries200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetWebhookDeliveries200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhooksAPIService.GetWebhookDeliveries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhook_deliveries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterStatusEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status][eq]", r.filterStatusEq, "form", "")
	}
	if r.filterEventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[event_type]", r.filterEventType, "form", "")
	}
	if r.filterWebhookContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[webhook][contains]", r.filterWebhookContains, "form", "")
	}
	if r.filterAttemptsContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[attempts][contains]", r.filterAttemptsContains, "form", "")
	}
	if r.filterStartedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[started_at][gte]", r.filterStartedAtGte, "form", "")
	}
	if r.filterStartedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[started_at][lte]", r.filterStartedAtLte, "form", "")
	}
	if r.filterFinishedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[finished_at][gte]", r.filterFinishedAtGte, "form", "")
	}
	if r.filterFinishedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[finished_at][lte]", r.filterFinishedAtLte, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWebhookDeliveryRequest struct {
	ctx context.Context
	ApiService *WebhooksAPIService
	id string
}

func (r ApiGetWebhookDeliveryRequest) Execute() (*GetWebhookDelivery200Response, *http.Response, error) {
	return r.ApiService.GetWebhookDeliveryExecute(r)
}

/*
GetWebhookDelivery Find webhook_delivery details by ID

Provides webhook_delivery debug data, such as timestamps, delivery status and attempts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Uniquely identifies the webhook_delivery.
 @return ApiGetWebhookDeliveryRequest
*/
func (a *WebhooksAPIService) GetWebhookDelivery(ctx context.Context, id string) ApiGetWebhookDeliveryRequest {
	return ApiGetWebhookDeliveryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetWebhookDelivery200Response
func (a *WebhooksAPIService) GetWebhookDeliveryExecute(r ApiGetWebhookDeliveryRequest) (*GetWebhookDelivery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetWebhookDelivery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhooksAPIService.GetWebhookDelivery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhook_deliveries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
