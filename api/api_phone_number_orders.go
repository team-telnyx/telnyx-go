/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PhoneNumberOrdersAPIService PhoneNumberOrdersAPI service
type PhoneNumberOrdersAPIService service

type ApiCancelSubNumberOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	subNumberOrderId string
}

func (r ApiCancelSubNumberOrderRequest) Execute() (*SubNumberOrderResponse, *http.Response, error) {
	return r.ApiService.CancelSubNumberOrderExecute(r)
}

/*
CancelSubNumberOrder Cancel a sub number order

Allows you to cancel a sub number order in 'pending' status.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subNumberOrderId The ID of the sub number order.
 @return ApiCancelSubNumberOrderRequest
*/
func (a *PhoneNumberOrdersAPIService) CancelSubNumberOrder(ctx context.Context, subNumberOrderId string) ApiCancelSubNumberOrderRequest {
	return ApiCancelSubNumberOrderRequest{
		ApiService: a,
		ctx: ctx,
		subNumberOrderId: subNumberOrderId,
	}
}

// Execute executes the request
//  @return SubNumberOrderResponse
func (a *PhoneNumberOrdersAPIService) CancelSubNumberOrderExecute(r ApiCancelSubNumberOrderRequest) (*SubNumberOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubNumberOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.CancelSubNumberOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub_number_orders/{sub_number_order_id}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"sub_number_order_id"+"}", url.PathEscape(parameterValueToString(r.subNumberOrderId, "subNumberOrderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCommentRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	comment *Comment
}

func (r ApiCreateCommentRequest) Comment(comment Comment) ApiCreateCommentRequest {
	r.comment = &comment
	return r
}

func (r ApiCreateCommentRequest) Execute() (*CreateComment200Response, *http.Response, error) {
	return r.ApiService.CreateCommentExecute(r)
}

/*
CreateComment Create a comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCommentRequest
*/
func (a *PhoneNumberOrdersAPIService) CreateComment(ctx context.Context) ApiCreateCommentRequest {
	return ApiCreateCommentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateComment200Response
func (a *PhoneNumberOrdersAPIService) CreateCommentExecute(r ApiCreateCommentRequest) (*CreateComment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateComment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.CreateComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.comment == nil {
		return localVarReturnValue, nil, reportError("comment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.comment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNumberOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	createNumberOrderRequest *CreateNumberOrderRequest
}

func (r ApiCreateNumberOrderRequest) CreateNumberOrderRequest(createNumberOrderRequest CreateNumberOrderRequest) ApiCreateNumberOrderRequest {
	r.createNumberOrderRequest = &createNumberOrderRequest
	return r
}

func (r ApiCreateNumberOrderRequest) Execute() (*NumberOrderResponse, *http.Response, error) {
	return r.ApiService.CreateNumberOrderExecute(r)
}

/*
CreateNumberOrder Create a number order

Creates a phone number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNumberOrderRequest
*/
func (a *PhoneNumberOrdersAPIService) CreateNumberOrder(ctx context.Context) ApiCreateNumberOrderRequest {
	return ApiCreateNumberOrderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NumberOrderResponse
func (a *PhoneNumberOrdersAPIService) CreateNumberOrderExecute(r ApiCreateNumberOrderRequest) (*NumberOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.CreateNumberOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNumberOrderRequest == nil {
		return localVarReturnValue, nil, reportError("createNumberOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNumberOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNumberOrderPhoneNumberRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	numberOrderPhoneNumberId string
}

func (r ApiGetNumberOrderPhoneNumberRequest) Execute() (*NumberOrderPhoneNumberResponse, *http.Response, error) {
	return r.ApiService.GetNumberOrderPhoneNumberExecute(r)
}

/*
GetNumberOrderPhoneNumber Retrieve a single phone number within a number order.

Get an existing phone number in number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberOrderPhoneNumberId The number order phone number ID.
 @return ApiGetNumberOrderPhoneNumberRequest
*/
func (a *PhoneNumberOrdersAPIService) GetNumberOrderPhoneNumber(ctx context.Context, numberOrderPhoneNumberId string) ApiGetNumberOrderPhoneNumberRequest {
	return ApiGetNumberOrderPhoneNumberRequest{
		ApiService: a,
		ctx: ctx,
		numberOrderPhoneNumberId: numberOrderPhoneNumberId,
	}
}

// Execute executes the request
//  @return NumberOrderPhoneNumberResponse
func (a *PhoneNumberOrdersAPIService) GetNumberOrderPhoneNumberExecute(r ApiGetNumberOrderPhoneNumberRequest) (*NumberOrderPhoneNumberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberOrderPhoneNumberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.GetNumberOrderPhoneNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_order_phone_numbers/{number_order_phone_number_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"number_order_phone_number_id"+"}", url.PathEscape(parameterValueToString(r.numberOrderPhoneNumberId, "numberOrderPhoneNumberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubNumberOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	subNumberOrderId string
	filterIncludePhoneNumbers *bool
}

// Include the first 50 phone number objects in the results
func (r ApiGetSubNumberOrderRequest) FilterIncludePhoneNumbers(filterIncludePhoneNumbers bool) ApiGetSubNumberOrderRequest {
	r.filterIncludePhoneNumbers = &filterIncludePhoneNumbers
	return r
}

func (r ApiGetSubNumberOrderRequest) Execute() (*SubNumberOrderResponse, *http.Response, error) {
	return r.ApiService.GetSubNumberOrderExecute(r)
}

/*
GetSubNumberOrder Retrieve a sub number order

Get an existing sub number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subNumberOrderId The sub number order ID.
 @return ApiGetSubNumberOrderRequest
*/
func (a *PhoneNumberOrdersAPIService) GetSubNumberOrder(ctx context.Context, subNumberOrderId string) ApiGetSubNumberOrderRequest {
	return ApiGetSubNumberOrderRequest{
		ApiService: a,
		ctx: ctx,
		subNumberOrderId: subNumberOrderId,
	}
}

// Execute executes the request
//  @return SubNumberOrderResponse
func (a *PhoneNumberOrdersAPIService) GetSubNumberOrderExecute(r ApiGetSubNumberOrderRequest) (*SubNumberOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubNumberOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.GetSubNumberOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub_number_orders/{sub_number_order_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sub_number_order_id"+"}", url.PathEscape(parameterValueToString(r.subNumberOrderId, "subNumberOrderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterIncludePhoneNumbers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[include_phone_numbers]", r.filterIncludePhoneNumbers, "form", "")
	} else {
		var defaultValue bool = false
		r.filterIncludePhoneNumbers = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCommentsRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	filterCommentRecordType *string
	filterCommentRecordId *string
}

// Record type that the comment relates to
func (r ApiListCommentsRequest) FilterCommentRecordType(filterCommentRecordType string) ApiListCommentsRequest {
	r.filterCommentRecordType = &filterCommentRecordType
	return r
}

// ID of the record the comments relate to
func (r ApiListCommentsRequest) FilterCommentRecordId(filterCommentRecordId string) ApiListCommentsRequest {
	r.filterCommentRecordId = &filterCommentRecordId
	return r
}

func (r ApiListCommentsRequest) Execute() (*ListComments200Response, *http.Response, error) {
	return r.ApiService.ListCommentsExecute(r)
}

/*
ListComments Retrieve all comments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCommentsRequest
*/
func (a *PhoneNumberOrdersAPIService) ListComments(ctx context.Context) ApiListCommentsRequest {
	return ApiListCommentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListComments200Response
func (a *PhoneNumberOrdersAPIService) ListCommentsExecute(r ApiListCommentsRequest) (*ListComments200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListComments200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.ListComments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterCommentRecordType == nil {
		return localVarReturnValue, nil, reportError("filterCommentRecordType is required and must be specified")
	}
	if r.filterCommentRecordId == nil {
		return localVarReturnValue, nil, reportError("filterCommentRecordId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[comment_record_type]", r.filterCommentRecordType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[comment_record_id]", r.filterCommentRecordId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNumberOrdersRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	filterStatus *string
	filterCreatedAtGt *string
	filterCreatedAtLt *string
	filterPhoneNumbersCount *string
	filterCustomerReference *string
	filterRequirementsMet *bool
	pageNumber *int32
	pageSize *int32
}

// Filter number orders by status.
func (r ApiListNumberOrdersRequest) FilterStatus(filterStatus string) ApiListNumberOrdersRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter number orders later than this value.
func (r ApiListNumberOrdersRequest) FilterCreatedAtGt(filterCreatedAtGt string) ApiListNumberOrdersRequest {
	r.filterCreatedAtGt = &filterCreatedAtGt
	return r
}

// Filter number orders earlier than this value.
func (r ApiListNumberOrdersRequest) FilterCreatedAtLt(filterCreatedAtLt string) ApiListNumberOrdersRequest {
	r.filterCreatedAtLt = &filterCreatedAtLt
	return r
}

// Filter number order with this amount of numbers
func (r ApiListNumberOrdersRequest) FilterPhoneNumbersCount(filterPhoneNumbersCount string) ApiListNumberOrdersRequest {
	r.filterPhoneNumbersCount = &filterPhoneNumbersCount
	return r
}

// Filter number orders via the customer reference set.
func (r ApiListNumberOrdersRequest) FilterCustomerReference(filterCustomerReference string) ApiListNumberOrdersRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

// Filter number orders by requirements met.
func (r ApiListNumberOrdersRequest) FilterRequirementsMet(filterRequirementsMet bool) ApiListNumberOrdersRequest {
	r.filterRequirementsMet = &filterRequirementsMet
	return r
}

// The page number to load.
func (r ApiListNumberOrdersRequest) PageNumber(pageNumber int32) ApiListNumberOrdersRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListNumberOrdersRequest) PageSize(pageSize int32) ApiListNumberOrdersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListNumberOrdersRequest) Execute() (*ListNumberOrdersResponse, *http.Response, error) {
	return r.ApiService.ListNumberOrdersExecute(r)
}

/*
ListNumberOrders List number orders

Get a paginated list of number orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNumberOrdersRequest
*/
func (a *PhoneNumberOrdersAPIService) ListNumberOrders(ctx context.Context) ApiListNumberOrdersRequest {
	return ApiListNumberOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListNumberOrdersResponse
func (a *PhoneNumberOrdersAPIService) ListNumberOrdersExecute(r ApiListNumberOrdersRequest) (*ListNumberOrdersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListNumberOrdersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.ListNumberOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterCreatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gt]", r.filterCreatedAtGt, "form", "")
	}
	if r.filterCreatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lt]", r.filterCreatedAtLt, "form", "")
	}
	if r.filterPhoneNumbersCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_numbers_count]", r.filterPhoneNumbersCount, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	if r.filterRequirementsMet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[requirements_met]", r.filterRequirementsMet, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSubNumberOrdersRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	filterStatus *string
	filterOrderRequestId *string
	filterCountryCode *string
	filterPhoneNumberType *string
	filterPhoneNumbersCount *int32
}

// Filter sub number orders by status.
func (r ApiListSubNumberOrdersRequest) FilterStatus(filterStatus string) ApiListSubNumberOrdersRequest {
	r.filterStatus = &filterStatus
	return r
}

// ID of the number order the sub number order belongs to
func (r ApiListSubNumberOrdersRequest) FilterOrderRequestId(filterOrderRequestId string) ApiListSubNumberOrdersRequest {
	r.filterOrderRequestId = &filterOrderRequestId
	return r
}

// ISO alpha-2 country code.
func (r ApiListSubNumberOrdersRequest) FilterCountryCode(filterCountryCode string) ApiListSubNumberOrdersRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

// Phone Number Type
func (r ApiListSubNumberOrdersRequest) FilterPhoneNumberType(filterPhoneNumberType string) ApiListSubNumberOrdersRequest {
	r.filterPhoneNumberType = &filterPhoneNumberType
	return r
}

// Amount of numbers in the sub number order
func (r ApiListSubNumberOrdersRequest) FilterPhoneNumbersCount(filterPhoneNumbersCount int32) ApiListSubNumberOrdersRequest {
	r.filterPhoneNumbersCount = &filterPhoneNumbersCount
	return r
}

func (r ApiListSubNumberOrdersRequest) Execute() (*ListSubNumberOrdersResponse, *http.Response, error) {
	return r.ApiService.ListSubNumberOrdersExecute(r)
}

/*
ListSubNumberOrders List sub number orders

Get a paginated list of sub number orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSubNumberOrdersRequest
*/
func (a *PhoneNumberOrdersAPIService) ListSubNumberOrders(ctx context.Context) ApiListSubNumberOrdersRequest {
	return ApiListSubNumberOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListSubNumberOrdersResponse
func (a *PhoneNumberOrdersAPIService) ListSubNumberOrdersExecute(r ApiListSubNumberOrdersRequest) (*ListSubNumberOrdersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListSubNumberOrdersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.ListSubNumberOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub_number_orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterOrderRequestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[order_request_id]", r.filterOrderRequestId, "form", "")
	}
	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.filterPhoneNumberType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number_type]", r.filterPhoneNumberType, "form", "")
	}
	if r.filterPhoneNumbersCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_numbers_count]", r.filterPhoneNumbersCount, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkCommentReadRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	id string
}

func (r ApiMarkCommentReadRequest) Execute() (*CreateComment200Response, *http.Response, error) {
	return r.ApiService.MarkCommentReadExecute(r)
}

/*
MarkCommentRead Mark a comment as read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The comment ID.
 @return ApiMarkCommentReadRequest
*/
func (a *PhoneNumberOrdersAPIService) MarkCommentRead(ctx context.Context, id string) ApiMarkCommentReadRequest {
	return ApiMarkCommentReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateComment200Response
func (a *PhoneNumberOrdersAPIService) MarkCommentReadExecute(r ApiMarkCommentReadRequest) (*CreateComment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateComment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.MarkCommentRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}/read"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveCommentRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	id string
}

func (r ApiRetrieveCommentRequest) Execute() (*CreateComment200Response, *http.Response, error) {
	return r.ApiService.RetrieveCommentExecute(r)
}

/*
RetrieveComment Retrieve a comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The comment ID.
 @return ApiRetrieveCommentRequest
*/
func (a *PhoneNumberOrdersAPIService) RetrieveComment(ctx context.Context, id string) ApiRetrieveCommentRequest {
	return ApiRetrieveCommentRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateComment200Response
func (a *PhoneNumberOrdersAPIService) RetrieveCommentExecute(r ApiRetrieveCommentRequest) (*CreateComment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateComment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.RetrieveComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveNumberOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	numberOrderId string
}

func (r ApiRetrieveNumberOrderRequest) Execute() (*NumberOrderResponse, *http.Response, error) {
	return r.ApiService.RetrieveNumberOrderExecute(r)
}

/*
RetrieveNumberOrder Retrieve a number order

Get an existing phone number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberOrderId The number order ID.
 @return ApiRetrieveNumberOrderRequest
*/
func (a *PhoneNumberOrdersAPIService) RetrieveNumberOrder(ctx context.Context, numberOrderId string) ApiRetrieveNumberOrderRequest {
	return ApiRetrieveNumberOrderRequest{
		ApiService: a,
		ctx: ctx,
		numberOrderId: numberOrderId,
	}
}

// Execute executes the request
//  @return NumberOrderResponse
func (a *PhoneNumberOrdersAPIService) RetrieveNumberOrderExecute(r ApiRetrieveNumberOrderRequest) (*NumberOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.RetrieveNumberOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_orders/{number_order_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"number_order_id"+"}", url.PathEscape(parameterValueToString(r.numberOrderId, "numberOrderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveOrderPhoneNumbersRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	filterCountryCode *string
}

// Country code of the order phone number.
func (r ApiRetrieveOrderPhoneNumbersRequest) FilterCountryCode(filterCountryCode string) ApiRetrieveOrderPhoneNumbersRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

func (r ApiRetrieveOrderPhoneNumbersRequest) Execute() (*ListNumberOrderPhoneNumbersResponse, *http.Response, error) {
	return r.ApiService.RetrieveOrderPhoneNumbersExecute(r)
}

/*
RetrieveOrderPhoneNumbers Retrieve a list of phone numbers associated to orders

Get a list of phone numbers associated to orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRetrieveOrderPhoneNumbersRequest
*/
func (a *PhoneNumberOrdersAPIService) RetrieveOrderPhoneNumbers(ctx context.Context) ApiRetrieveOrderPhoneNumbersRequest {
	return ApiRetrieveOrderPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListNumberOrderPhoneNumbersResponse
func (a *PhoneNumberOrdersAPIService) RetrieveOrderPhoneNumbersExecute(r ApiRetrieveOrderPhoneNumbersRequest) (*ListNumberOrderPhoneNumbersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListNumberOrderPhoneNumbersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.RetrieveOrderPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_order_phone_numbers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNumberOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	numberOrderId string
	updateNumberOrderRequest *UpdateNumberOrderRequest
}

func (r ApiUpdateNumberOrderRequest) UpdateNumberOrderRequest(updateNumberOrderRequest UpdateNumberOrderRequest) ApiUpdateNumberOrderRequest {
	r.updateNumberOrderRequest = &updateNumberOrderRequest
	return r
}

func (r ApiUpdateNumberOrderRequest) Execute() (*NumberOrderResponse, *http.Response, error) {
	return r.ApiService.UpdateNumberOrderExecute(r)
}

/*
UpdateNumberOrder Update a number order

Updates a phone number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberOrderId The number order ID.
 @return ApiUpdateNumberOrderRequest
*/
func (a *PhoneNumberOrdersAPIService) UpdateNumberOrder(ctx context.Context, numberOrderId string) ApiUpdateNumberOrderRequest {
	return ApiUpdateNumberOrderRequest{
		ApiService: a,
		ctx: ctx,
		numberOrderId: numberOrderId,
	}
}

// Execute executes the request
//  @return NumberOrderResponse
func (a *PhoneNumberOrdersAPIService) UpdateNumberOrderExecute(r ApiUpdateNumberOrderRequest) (*NumberOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.UpdateNumberOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_orders/{number_order_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"number_order_id"+"}", url.PathEscape(parameterValueToString(r.numberOrderId, "numberOrderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNumberOrderRequest == nil {
		return localVarReturnValue, nil, reportError("updateNumberOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNumberOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNumberOrderPhoneNumberRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	numberOrderPhoneNumberId string
	updateNumberOrderPhoneNumberRequest *UpdateNumberOrderPhoneNumberRequest
}

func (r ApiUpdateNumberOrderPhoneNumberRequest) UpdateNumberOrderPhoneNumberRequest(updateNumberOrderPhoneNumberRequest UpdateNumberOrderPhoneNumberRequest) ApiUpdateNumberOrderPhoneNumberRequest {
	r.updateNumberOrderPhoneNumberRequest = &updateNumberOrderPhoneNumberRequest
	return r
}

func (r ApiUpdateNumberOrderPhoneNumberRequest) Execute() (*NumberOrderPhoneNumberResponse, *http.Response, error) {
	return r.ApiService.UpdateNumberOrderPhoneNumberExecute(r)
}

/*
UpdateNumberOrderPhoneNumber Update requirements for a single phone number within a number order.

Updates requirements for a single phone number within a number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param numberOrderPhoneNumberId The number order phone number ID.
 @return ApiUpdateNumberOrderPhoneNumberRequest
*/
func (a *PhoneNumberOrdersAPIService) UpdateNumberOrderPhoneNumber(ctx context.Context, numberOrderPhoneNumberId string) ApiUpdateNumberOrderPhoneNumberRequest {
	return ApiUpdateNumberOrderPhoneNumberRequest{
		ApiService: a,
		ctx: ctx,
		numberOrderPhoneNumberId: numberOrderPhoneNumberId,
	}
}

// Execute executes the request
//  @return NumberOrderPhoneNumberResponse
func (a *PhoneNumberOrdersAPIService) UpdateNumberOrderPhoneNumberExecute(r ApiUpdateNumberOrderPhoneNumberRequest) (*NumberOrderPhoneNumberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NumberOrderPhoneNumberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.UpdateNumberOrderPhoneNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/number_order_phone_numbers/{number_order_phone_number_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"number_order_phone_number_id"+"}", url.PathEscape(parameterValueToString(r.numberOrderPhoneNumberId, "numberOrderPhoneNumberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNumberOrderPhoneNumberRequest == nil {
		return localVarReturnValue, nil, reportError("updateNumberOrderPhoneNumberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNumberOrderPhoneNumberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSubNumberOrderRequest struct {
	ctx context.Context
	ApiService *PhoneNumberOrdersAPIService
	subNumberOrderId string
	updateSubNumberOrderRequest *UpdateSubNumberOrderRequest
}

func (r ApiUpdateSubNumberOrderRequest) UpdateSubNumberOrderRequest(updateSubNumberOrderRequest UpdateSubNumberOrderRequest) ApiUpdateSubNumberOrderRequest {
	r.updateSubNumberOrderRequest = &updateSubNumberOrderRequest
	return r
}

func (r ApiUpdateSubNumberOrderRequest) Execute() (*SubNumberOrderResponse, *http.Response, error) {
	return r.ApiService.UpdateSubNumberOrderExecute(r)
}

/*
UpdateSubNumberOrder Update a sub number order's requirements

Updates a sub number order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subNumberOrderId The sub number order ID.
 @return ApiUpdateSubNumberOrderRequest
*/
func (a *PhoneNumberOrdersAPIService) UpdateSubNumberOrder(ctx context.Context, subNumberOrderId string) ApiUpdateSubNumberOrderRequest {
	return ApiUpdateSubNumberOrderRequest{
		ApiService: a,
		ctx: ctx,
		subNumberOrderId: subNumberOrderId,
	}
}

// Execute executes the request
//  @return SubNumberOrderResponse
func (a *PhoneNumberOrdersAPIService) UpdateSubNumberOrderExecute(r ApiUpdateSubNumberOrderRequest) (*SubNumberOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubNumberOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhoneNumberOrdersAPIService.UpdateSubNumberOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub_number_orders/{sub_number_order_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sub_number_order_id"+"}", url.PathEscape(parameterValueToString(r.subNumberOrderId, "subNumberOrderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSubNumberOrderRequest == nil {
		return localVarReturnValue, nil, reportError("updateSubNumberOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateSubNumberOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
