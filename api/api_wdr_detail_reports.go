/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// WDRDetailReportsAPIService WDRDetailReportsAPI service
type WDRDetailReportsAPIService service

type ApiGetPaginatedWdrsRequest struct {
	ctx context.Context
	ApiService *WDRDetailReportsAPIService
	startDate *string
	endDate *string
	id *string
	mcc *string
	mnc *string
	imsi *string
	simGroupName *string
	simGroupId *string
	simCardId *string
	phoneNumber *string
	pageNumber *int32
	pageSize *int32
	sort *[]string
}

// Start date
func (r ApiGetPaginatedWdrsRequest) StartDate(startDate string) ApiGetPaginatedWdrsRequest {
	r.startDate = &startDate
	return r
}

// End date
func (r ApiGetPaginatedWdrsRequest) EndDate(endDate string) ApiGetPaginatedWdrsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetPaginatedWdrsRequest) Id(id string) ApiGetPaginatedWdrsRequest {
	r.id = &id
	return r
}

func (r ApiGetPaginatedWdrsRequest) Mcc(mcc string) ApiGetPaginatedWdrsRequest {
	r.mcc = &mcc
	return r
}

func (r ApiGetPaginatedWdrsRequest) Mnc(mnc string) ApiGetPaginatedWdrsRequest {
	r.mnc = &mnc
	return r
}

func (r ApiGetPaginatedWdrsRequest) Imsi(imsi string) ApiGetPaginatedWdrsRequest {
	r.imsi = &imsi
	return r
}

func (r ApiGetPaginatedWdrsRequest) SimGroupName(simGroupName string) ApiGetPaginatedWdrsRequest {
	r.simGroupName = &simGroupName
	return r
}

func (r ApiGetPaginatedWdrsRequest) SimGroupId(simGroupId string) ApiGetPaginatedWdrsRequest {
	r.simGroupId = &simGroupId
	return r
}

func (r ApiGetPaginatedWdrsRequest) SimCardId(simCardId string) ApiGetPaginatedWdrsRequest {
	r.simCardId = &simCardId
	return r
}

func (r ApiGetPaginatedWdrsRequest) PhoneNumber(phoneNumber string) ApiGetPaginatedWdrsRequest {
	r.phoneNumber = &phoneNumber
	return r
}

// Page number
func (r ApiGetPaginatedWdrsRequest) PageNumber(pageNumber int32) ApiGetPaginatedWdrsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Size of the page
func (r ApiGetPaginatedWdrsRequest) PageSize(pageSize int32) ApiGetPaginatedWdrsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetPaginatedWdrsRequest) Sort(sort []string) ApiGetPaginatedWdrsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetPaginatedWdrsRequest) Execute() (*ExternalWdrGetDetailResponse, *http.Response, error) {
	return r.ApiService.GetPaginatedWdrsExecute(r)
}

/*
GetPaginatedWdrs Fetches all Wdr records

Fetch all Wdr records 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPaginatedWdrsRequest
*/
func (a *WDRDetailReportsAPIService) GetPaginatedWdrs(ctx context.Context) ApiGetPaginatedWdrsRequest {
	return ApiGetPaginatedWdrsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalWdrGetDetailResponse
func (a *WDRDetailReportsAPIService) GetPaginatedWdrsExecute(r ApiGetPaginatedWdrsRequest) (*ExternalWdrGetDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalWdrGetDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WDRDetailReportsAPIService.GetPaginatedWdrs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/wdrs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.mcc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mcc", r.mcc, "form", "")
	}
	if r.mnc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mnc", r.mnc, "form", "")
	}
	if r.imsi != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imsi", r.imsi, "form", "")
	}
	if r.simGroupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sim_group_name", r.simGroupName, "form", "")
	}
	if r.simGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sim_group_id", r.simGroupId, "form", "")
	}
	if r.simCardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sim_card_id", r.simCardId, "form", "")
	}
	if r.phoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phone_number", r.phoneNumber, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	} else {
		var defaultValue []string = ["created_at"]
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
