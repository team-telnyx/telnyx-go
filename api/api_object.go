/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// ObjectAPIService ObjectAPI service
type ObjectAPIService service

type ApiDeleteObjectRequest struct {
	ctx context.Context
	ApiService *ObjectAPIService
	bucketName string
	objectName string
}

func (r ApiDeleteObjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteObjectExecute(r)
}

/*
DeleteObject DeleteObject

Delete an object from a given bucket.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The bucket name.
 @param objectName The object name.
 @return ApiDeleteObjectRequest
*/
func (a *ObjectAPIService) DeleteObject(ctx context.Context, bucketName string, objectName string) ApiDeleteObjectRequest {
	return ApiDeleteObjectRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
		objectName: objectName,
	}
}

// Execute executes the request
func (a *ObjectAPIService) DeleteObjectExecute(r ApiDeleteObjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAPIService.DeleteObject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{bucketName}/{objectName}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectName"+"}", url.PathEscape(parameterValueToString(r.objectName, "objectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.objectName) < 1 {
		return nil, reportError("objectName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteObjectsRequest struct {
	ctx context.Context
	ApiService *ObjectAPIService
	bucketName string
	delete *bool
	deleteObjectsRequestInner *[]DeleteObjectsRequestInner
}

func (r ApiDeleteObjectsRequest) Delete(delete bool) ApiDeleteObjectsRequest {
	r.delete = &delete
	return r
}

func (r ApiDeleteObjectsRequest) DeleteObjectsRequestInner(deleteObjectsRequestInner []DeleteObjectsRequestInner) ApiDeleteObjectsRequest {
	r.deleteObjectsRequestInner = &deleteObjectsRequestInner
	return r
}

func (r ApiDeleteObjectsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteObjectsExecute(r)
}

/*
DeleteObjects DeleteObjects

Deletes one or multiple objects from a given bucket.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The bucket name.
 @return ApiDeleteObjectsRequest
*/
func (a *ObjectAPIService) DeleteObjects(ctx context.Context, bucketName string) ApiDeleteObjectsRequest {
	return ApiDeleteObjectsRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ObjectAPIService) DeleteObjectsExecute(r ApiDeleteObjectsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAPIService.DeleteObjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{bucketName}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.delete == nil {
		return localVarReturnValue, nil, reportError("delete is required and must be specified")
	}
	if r.deleteObjectsRequestInner == nil {
		return localVarReturnValue, nil, reportError("deleteObjectsRequestInner is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "delete", r.delete, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteObjectsRequestInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetObjectRequest struct {
	ctx context.Context
	ApiService *ObjectAPIService
	bucketName string
	objectName string
	uploadId *string
}

func (r ApiGetObjectRequest) UploadId(uploadId string) ApiGetObjectRequest {
	r.uploadId = &uploadId
	return r
}

func (r ApiGetObjectRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetObjectExecute(r)
}

/*
GetObject GetObject

Retrieves an object from a given bucket.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The bucket name.
 @param objectName The object name.
 @return ApiGetObjectRequest
*/
func (a *ObjectAPIService) GetObject(ctx context.Context, bucketName string, objectName string) ApiGetObjectRequest {
	return ApiGetObjectRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
		objectName: objectName,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ObjectAPIService) GetObjectExecute(r ApiGetObjectRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAPIService.GetObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{bucketName}/{objectName}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectName"+"}", url.PathEscape(parameterValueToString(r.objectName, "objectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.objectName) < 1 {
		return localVarReturnValue, nil, reportError("objectName must have at least 1 elements")
	}

	if r.uploadId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uploadId", r.uploadId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHeadObjectRequest struct {
	ctx context.Context
	ApiService *ObjectAPIService
	bucketName string
	objectName string
}

func (r ApiHeadObjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadObjectExecute(r)
}

/*
HeadObject HeadObject

Retrieves metadata from an object without returning the object itself.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The bucket name.
 @param objectName The object name.
 @return ApiHeadObjectRequest
*/
func (a *ObjectAPIService) HeadObject(ctx context.Context, bucketName string, objectName string) ApiHeadObjectRequest {
	return ApiHeadObjectRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
		objectName: objectName,
	}
}

// Execute executes the request
func (a *ObjectAPIService) HeadObjectExecute(r ApiHeadObjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAPIService.HeadObject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{bucketName}/{objectName}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectName"+"}", url.PathEscape(parameterValueToString(r.objectName, "objectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.objectName) < 1 {
		return nil, reportError("objectName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListObjectsRequest struct {
	ctx context.Context
	ApiService *ObjectAPIService
	bucketName string
	listType *int32
}

func (r ApiListObjectsRequest) ListType(listType int32) ApiListObjectsRequest {
	r.listType = &listType
	return r
}

func (r ApiListObjectsRequest) Execute() (*ListObjectsResponse, *http.Response, error) {
	return r.ApiService.ListObjectsExecute(r)
}

/*
ListObjects ListObjectsV2

List all objects contained in a given bucket.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The name of the bucket.
 @return ApiListObjectsRequest
*/
func (a *ObjectAPIService) ListObjects(ctx context.Context, bucketName string) ApiListObjectsRequest {
	return ApiListObjectsRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
	}
}

// Execute executes the request
//  @return ListObjectsResponse
func (a *ObjectAPIService) ListObjectsExecute(r ApiListObjectsRequest) (*ListObjectsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListObjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAPIService.ListObjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{bucketName}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.bucketName) < 4 {
		return localVarReturnValue, nil, reportError("bucketName must have at least 4 elements")
	}
	if strlen(r.bucketName) > 64 {
		return localVarReturnValue, nil, reportError("bucketName must have less than 64 elements")
	}

	if r.listType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "list-type", r.listType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutObjectRequest struct {
	ctx context.Context
	ApiService *ObjectAPIService
	bucketName string
	objectName string
	body *os.File
	contentType *string
	partNumber *string
	uploadId *string
}

func (r ApiPutObjectRequest) Body(body *os.File) ApiPutObjectRequest {
	r.body = body
	return r
}

func (r ApiPutObjectRequest) ContentType(contentType string) ApiPutObjectRequest {
	r.contentType = &contentType
	return r
}

func (r ApiPutObjectRequest) PartNumber(partNumber string) ApiPutObjectRequest {
	r.partNumber = &partNumber
	return r
}

func (r ApiPutObjectRequest) UploadId(uploadId string) ApiPutObjectRequest {
	r.uploadId = &uploadId
	return r
}

func (r ApiPutObjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutObjectExecute(r)
}

/*
PutObject PutObject

Add an object to a bucket.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bucketName The bucket name.
 @param objectName The object name.
 @return ApiPutObjectRequest
*/
func (a *ObjectAPIService) PutObject(ctx context.Context, bucketName string, objectName string) ApiPutObjectRequest {
	return ApiPutObjectRequest{
		ApiService: a,
		ctx: ctx,
		bucketName: bucketName,
		objectName: objectName,
	}
}

// Execute executes the request
func (a *ObjectAPIService) PutObjectExecute(r ApiPutObjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAPIService.PutObject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{bucketName}/{objectName}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketName"+"}", url.PathEscape(parameterValueToString(r.bucketName, "bucketName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectName"+"}", url.PathEscape(parameterValueToString(r.objectName, "objectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.objectName) < 1 {
		return nil, reportError("objectName must have at least 1 elements")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.partNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partNumber", r.partNumber, "form", "")
	}
	if r.uploadId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uploadId", r.uploadId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-type", r.contentType, "simple", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
