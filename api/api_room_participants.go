/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RoomParticipantsAPIService RoomParticipantsAPI service
type RoomParticipantsAPIService service

type ApiListRoomParticipantsRequest struct {
	ctx context.Context
	ApiService *RoomParticipantsAPIService
	filterDateJoinedAtEq *string
	filterDateJoinedAtGte *string
	filterDateJoinedAtLte *string
	filterDateUpdatedAtEq *string
	filterDateUpdatedAtGte *string
	filterDateUpdatedAtLte *string
	filterDateLeftAtEq *string
	filterDateLeftAtGte *string
	filterDateLeftAtLte *string
	filterContext *string
	filterSessionId *string
	pageSize *int32
	pageNumber *int32
}

// ISO 8601 date for filtering room participants that joined on that date.
func (r ApiListRoomParticipantsRequest) FilterDateJoinedAtEq(filterDateJoinedAtEq string) ApiListRoomParticipantsRequest {
	r.filterDateJoinedAtEq = &filterDateJoinedAtEq
	return r
}

// ISO 8601 date for filtering room participants that joined after that date.
func (r ApiListRoomParticipantsRequest) FilterDateJoinedAtGte(filterDateJoinedAtGte string) ApiListRoomParticipantsRequest {
	r.filterDateJoinedAtGte = &filterDateJoinedAtGte
	return r
}

// ISO 8601 date for filtering room participants that joined before that date.
func (r ApiListRoomParticipantsRequest) FilterDateJoinedAtLte(filterDateJoinedAtLte string) ApiListRoomParticipantsRequest {
	r.filterDateJoinedAtLte = &filterDateJoinedAtLte
	return r
}

// ISO 8601 date for filtering room participants updated on that date.
func (r ApiListRoomParticipantsRequest) FilterDateUpdatedAtEq(filterDateUpdatedAtEq string) ApiListRoomParticipantsRequest {
	r.filterDateUpdatedAtEq = &filterDateUpdatedAtEq
	return r
}

// ISO 8601 date for filtering room participants updated after that date.
func (r ApiListRoomParticipantsRequest) FilterDateUpdatedAtGte(filterDateUpdatedAtGte string) ApiListRoomParticipantsRequest {
	r.filterDateUpdatedAtGte = &filterDateUpdatedAtGte
	return r
}

// ISO 8601 date for filtering room participants updated before that date.
func (r ApiListRoomParticipantsRequest) FilterDateUpdatedAtLte(filterDateUpdatedAtLte string) ApiListRoomParticipantsRequest {
	r.filterDateUpdatedAtLte = &filterDateUpdatedAtLte
	return r
}

// ISO 8601 date for filtering room participants that left on that date.
func (r ApiListRoomParticipantsRequest) FilterDateLeftAtEq(filterDateLeftAtEq string) ApiListRoomParticipantsRequest {
	r.filterDateLeftAtEq = &filterDateLeftAtEq
	return r
}

// ISO 8601 date for filtering room participants that left after that date.
func (r ApiListRoomParticipantsRequest) FilterDateLeftAtGte(filterDateLeftAtGte string) ApiListRoomParticipantsRequest {
	r.filterDateLeftAtGte = &filterDateLeftAtGte
	return r
}

// ISO 8601 date for filtering room participants that left before that date.
func (r ApiListRoomParticipantsRequest) FilterDateLeftAtLte(filterDateLeftAtLte string) ApiListRoomParticipantsRequest {
	r.filterDateLeftAtLte = &filterDateLeftAtLte
	return r
}

// Filter room participants based on the context.
func (r ApiListRoomParticipantsRequest) FilterContext(filterContext string) ApiListRoomParticipantsRequest {
	r.filterContext = &filterContext
	return r
}

// Session_id for filtering room participants.
func (r ApiListRoomParticipantsRequest) FilterSessionId(filterSessionId string) ApiListRoomParticipantsRequest {
	r.filterSessionId = &filterSessionId
	return r
}

// The size of the page.
func (r ApiListRoomParticipantsRequest) PageSize(pageSize int32) ApiListRoomParticipantsRequest {
	r.pageSize = &pageSize
	return r
}

// The page number to load.
func (r ApiListRoomParticipantsRequest) PageNumber(pageNumber int32) ApiListRoomParticipantsRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiListRoomParticipantsRequest) Execute() (*ListRoomParticipants200Response, *http.Response, error) {
	return r.ApiService.ListRoomParticipantsExecute(r)
}

/*
ListRoomParticipants View a list of room participants.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRoomParticipantsRequest
*/
func (a *RoomParticipantsAPIService) ListRoomParticipants(ctx context.Context) ApiListRoomParticipantsRequest {
	return ApiListRoomParticipantsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListRoomParticipants200Response
func (a *RoomParticipantsAPIService) ListRoomParticipantsExecute(r ApiListRoomParticipantsRequest) (*ListRoomParticipants200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListRoomParticipants200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomParticipantsAPIService.ListRoomParticipants")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_participants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDateJoinedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_joined_at][eq]", r.filterDateJoinedAtEq, "form", "")
	}
	if r.filterDateJoinedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_joined_at][gte]", r.filterDateJoinedAtGte, "form", "")
	}
	if r.filterDateJoinedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_joined_at][lte]", r.filterDateJoinedAtLte, "form", "")
	}
	if r.filterDateUpdatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_updated_at][eq]", r.filterDateUpdatedAtEq, "form", "")
	}
	if r.filterDateUpdatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_updated_at][gte]", r.filterDateUpdatedAtGte, "form", "")
	}
	if r.filterDateUpdatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_updated_at][lte]", r.filterDateUpdatedAtLte, "form", "")
	}
	if r.filterDateLeftAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_left_at][eq]", r.filterDateLeftAtEq, "form", "")
	}
	if r.filterDateLeftAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_left_at][gte]", r.filterDateLeftAtGte, "form", "")
	}
	if r.filterDateLeftAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_left_at][lte]", r.filterDateLeftAtLte, "form", "")
	}
	if r.filterContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[context]", r.filterContext, "form", "")
	}
	if r.filterSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[session_id]", r.filterSessionId, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewRoomParticipantRequest struct {
	ctx context.Context
	ApiService *RoomParticipantsAPIService
	roomParticipantId string
}

func (r ApiViewRoomParticipantRequest) Execute() (*ViewRoomParticipant200Response, *http.Response, error) {
	return r.ApiService.ViewRoomParticipantExecute(r)
}

/*
ViewRoomParticipant View a room participant.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomParticipantId The unique identifier of a room participant.
 @return ApiViewRoomParticipantRequest
*/
func (a *RoomParticipantsAPIService) ViewRoomParticipant(ctx context.Context, roomParticipantId string) ApiViewRoomParticipantRequest {
	return ApiViewRoomParticipantRequest{
		ApiService: a,
		ctx: ctx,
		roomParticipantId: roomParticipantId,
	}
}

// Execute executes the request
//  @return ViewRoomParticipant200Response
func (a *RoomParticipantsAPIService) ViewRoomParticipantExecute(r ApiViewRoomParticipantRequest) (*ViewRoomParticipant200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViewRoomParticipant200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomParticipantsAPIService.ViewRoomParticipant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/room_participants/{room_participant_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"room_participant_id"+"}", url.PathEscape(parameterValueToString(r.roomParticipantId, "roomParticipantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
