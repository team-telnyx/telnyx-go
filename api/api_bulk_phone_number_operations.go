/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BulkPhoneNumberOperationsAPIService BulkPhoneNumberOperationsAPI service
type BulkPhoneNumberOperationsAPIService service

type ApiCreateDeletePhoneNumbersJobRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberOperationsAPIService
	phoneNumbersJobDeletePhoneNumbersRequest *PhoneNumbersJobDeletePhoneNumbersRequest
}

func (r ApiCreateDeletePhoneNumbersJobRequest) PhoneNumbersJobDeletePhoneNumbersRequest(phoneNumbersJobDeletePhoneNumbersRequest PhoneNumbersJobDeletePhoneNumbersRequest) ApiCreateDeletePhoneNumbersJobRequest {
	r.phoneNumbersJobDeletePhoneNumbersRequest = &phoneNumbersJobDeletePhoneNumbersRequest
	return r
}

func (r ApiCreateDeletePhoneNumbersJobRequest) Execute() (*PhoneNumbersJobDeletePhoneNumbers, *http.Response, error) {
	return r.ApiService.CreateDeletePhoneNumbersJobExecute(r)
}

/*
CreateDeletePhoneNumbersJob Delete a batch of numbers

Creates a new background job to delete a batch of numbers. At most one thousand numbers can be updated per API call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDeletePhoneNumbersJobRequest
*/
func (a *BulkPhoneNumberOperationsAPIService) CreateDeletePhoneNumbersJob(ctx context.Context) ApiCreateDeletePhoneNumbersJobRequest {
	return ApiCreateDeletePhoneNumbersJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PhoneNumbersJobDeletePhoneNumbers
func (a *BulkPhoneNumberOperationsAPIService) CreateDeletePhoneNumbersJobExecute(r ApiCreateDeletePhoneNumbersJobRequest) (*PhoneNumbersJobDeletePhoneNumbers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumbersJobDeletePhoneNumbers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberOperationsAPIService.CreateDeletePhoneNumbersJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/jobs/delete_phone_numbers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumbersJobDeletePhoneNumbersRequest == nil {
		return localVarReturnValue, nil, reportError("phoneNumbersJobDeletePhoneNumbersRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumbersJobDeletePhoneNumbersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberOperationsAPIService
	phoneNumbersJobUpdateEmergencySettingsRequest *PhoneNumbersJobUpdateEmergencySettingsRequest
}

func (r ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest) PhoneNumbersJobUpdateEmergencySettingsRequest(phoneNumbersJobUpdateEmergencySettingsRequest PhoneNumbersJobUpdateEmergencySettingsRequest) ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest {
	r.phoneNumbersJobUpdateEmergencySettingsRequest = &phoneNumbersJobUpdateEmergencySettingsRequest
	return r
}

func (r ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest) Execute() (*PhoneNumbersEnableEmergency, *http.Response, error) {
	return r.ApiService.CreatePhoneNumbersJobUpdateEmergencySettingsExecute(r)
}

/*
CreatePhoneNumbersJobUpdateEmergencySettings Update the emergency settings from a batch of numbers

Creates a background job to update the emergency settings of a collection of phone numbers. At most one thousand numbers can be updated per API call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest
*/
func (a *BulkPhoneNumberOperationsAPIService) CreatePhoneNumbersJobUpdateEmergencySettings(ctx context.Context) ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest {
	return ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PhoneNumbersEnableEmergency
func (a *BulkPhoneNumberOperationsAPIService) CreatePhoneNumbersJobUpdateEmergencySettingsExecute(r ApiCreatePhoneNumbersJobUpdateEmergencySettingsRequest) (*PhoneNumbersEnableEmergency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumbersEnableEmergency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberOperationsAPIService.CreatePhoneNumbersJobUpdateEmergencySettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/jobs/update_emergency_settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumbersJobUpdateEmergencySettingsRequest == nil {
		return localVarReturnValue, nil, reportError("phoneNumbersJobUpdateEmergencySettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumbersJobUpdateEmergencySettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUpdatePhoneNumbersJobRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberOperationsAPIService
	phoneNumbersJobUpdatePhoneNumbersRequest *PhoneNumbersJobUpdatePhoneNumbersRequest
	filterHasBundle *string
	filterTag *string
	filterConnectionId *string
	filterPhoneNumber *string
	filterStatus *string
	filterVoiceConnectionNameContains *string
	filterVoiceUsagePaymentMethod *string
	filterBillingGroupId *string
	filterEmergencyAddressId *string
	filterCustomerReference *string
}

func (r ApiCreateUpdatePhoneNumbersJobRequest) PhoneNumbersJobUpdatePhoneNumbersRequest(phoneNumbersJobUpdatePhoneNumbersRequest PhoneNumbersJobUpdatePhoneNumbersRequest) ApiCreateUpdatePhoneNumbersJobRequest {
	r.phoneNumbersJobUpdatePhoneNumbersRequest = &phoneNumbersJobUpdatePhoneNumbersRequest
	return r
}

// Filter by phone number that have bundles.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterHasBundle(filterHasBundle string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterHasBundle = &filterHasBundle
	return r
}

// Filter by phone number tags.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterTag(filterTag string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterTag = &filterTag
	return r
}

// Filter by connection_id.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterConnectionId(filterConnectionId string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterConnectionId = &filterConnectionId
	return r
}

// Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterPhoneNumber(filterPhoneNumber string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

// Filter by phone number status.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterStatus(filterStatus string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter contains connection name. Requires at least three characters.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterVoiceConnectionNameContains(filterVoiceConnectionNameContains string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterVoiceConnectionNameContains = &filterVoiceConnectionNameContains
	return r
}

// Filter by usage_payment_method.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterVoiceUsagePaymentMethod(filterVoiceUsagePaymentMethod string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterVoiceUsagePaymentMethod = &filterVoiceUsagePaymentMethod
	return r
}

// Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterBillingGroupId(filterBillingGroupId string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterBillingGroupId = &filterBillingGroupId
	return r
}

// Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string &#39;null&#39;.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterEmergencyAddressId(filterEmergencyAddressId string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterEmergencyAddressId = &filterEmergencyAddressId
	return r
}

// Filter numbers via the customer_reference set.
func (r ApiCreateUpdatePhoneNumbersJobRequest) FilterCustomerReference(filterCustomerReference string) ApiCreateUpdatePhoneNumbersJobRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

func (r ApiCreateUpdatePhoneNumbersJobRequest) Execute() (*PhoneNumbersJobUpdatePhoneNumbers, *http.Response, error) {
	return r.ApiService.CreateUpdatePhoneNumbersJobExecute(r)
}

/*
CreateUpdatePhoneNumbersJob Update a batch of numbers

Creates a new background job to update a batch of numbers. At most one thousand numbers can be updated per API call. At least one of the updateable fields must be submitted. IMPORTANT: You must either specify filters (using the filter parameters) or specific phone numbers (using the phone_numbers parameter in the request body). If you specify filters, ALL phone numbers that match the given filters (up to 1000 at a time) will be updated. If you want to update only specific numbers, you must use the phone_numbers parameter in the request body. When using the phone_numbers parameter, ensure you follow the correct format as shown in the example (either phone number IDs or phone numbers in E164 format).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUpdatePhoneNumbersJobRequest
*/
func (a *BulkPhoneNumberOperationsAPIService) CreateUpdatePhoneNumbersJob(ctx context.Context) ApiCreateUpdatePhoneNumbersJobRequest {
	return ApiCreateUpdatePhoneNumbersJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PhoneNumbersJobUpdatePhoneNumbers
func (a *BulkPhoneNumberOperationsAPIService) CreateUpdatePhoneNumbersJobExecute(r ApiCreateUpdatePhoneNumbersJobRequest) (*PhoneNumbersJobUpdatePhoneNumbers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumbersJobUpdatePhoneNumbers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberOperationsAPIService.CreateUpdatePhoneNumbersJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/jobs/update_phone_numbers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phoneNumbersJobUpdatePhoneNumbersRequest == nil {
		return localVarReturnValue, nil, reportError("phoneNumbersJobUpdatePhoneNumbersRequest is required and must be specified")
	}

	if r.filterHasBundle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[has_bundle]", r.filterHasBundle, "form", "")
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tag]", r.filterTag, "form", "")
	}
	if r.filterConnectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_id]", r.filterConnectionId, "form", "")
	}
	if r.filterPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterVoiceConnectionNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][contains]", r.filterVoiceConnectionNameContains, "form", "")
	}
	if r.filterVoiceUsagePaymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.usage_payment_method]", r.filterVoiceUsagePaymentMethod, "form", "")
	}
	if r.filterBillingGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[billing_group_id]", r.filterBillingGroupId, "form", "")
	}
	if r.filterEmergencyAddressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[emergency_address_id]", r.filterEmergencyAddressId, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.phoneNumbersJobUpdatePhoneNumbersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPhoneNumbersJobsRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberOperationsAPIService
	filterType *string
	pageNumber *int32
	pageSize *int32
	sort *string
}

// Filter the phone number jobs by type.
func (r ApiListPhoneNumbersJobsRequest) FilterType(filterType string) ApiListPhoneNumbersJobsRequest {
	r.filterType = &filterType
	return r
}

// The page number to load.
func (r ApiListPhoneNumbersJobsRequest) PageNumber(pageNumber int32) ApiListPhoneNumbersJobsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListPhoneNumbersJobsRequest) PageSize(pageSize int32) ApiListPhoneNumbersJobsRequest {
	r.pageSize = &pageSize
	return r
}

// Specifies the sort order for results. If not given, results are sorted by created_at in descending order.
func (r ApiListPhoneNumbersJobsRequest) Sort(sort string) ApiListPhoneNumbersJobsRequest {
	r.sort = &sort
	return r
}

func (r ApiListPhoneNumbersJobsRequest) Execute() (*ListPhoneNumbersBackgroundJobsResponse, *http.Response, error) {
	return r.ApiService.ListPhoneNumbersJobsExecute(r)
}

/*
ListPhoneNumbersJobs Lists the phone numbers jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPhoneNumbersJobsRequest
*/
func (a *BulkPhoneNumberOperationsAPIService) ListPhoneNumbersJobs(ctx context.Context) ApiListPhoneNumbersJobsRequest {
	return ApiListPhoneNumbersJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPhoneNumbersBackgroundJobsResponse
func (a *BulkPhoneNumberOperationsAPIService) ListPhoneNumbersJobsExecute(r ApiListPhoneNumbersJobsRequest) (*ListPhoneNumbersBackgroundJobsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPhoneNumbersBackgroundJobsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberOperationsAPIService.ListPhoneNumbersJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[type]", r.filterType, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePhoneNumbersJobRequest struct {
	ctx context.Context
	ApiService *BulkPhoneNumberOperationsAPIService
	id string
}

func (r ApiRetrievePhoneNumbersJobRequest) Execute() (*PhoneNumbersJob, *http.Response, error) {
	return r.ApiService.RetrievePhoneNumbersJobExecute(r)
}

/*
RetrievePhoneNumbersJob Retrieve a phone numbers job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the Phone Numbers Job.
 @return ApiRetrievePhoneNumbersJobRequest
*/
func (a *BulkPhoneNumberOperationsAPIService) RetrievePhoneNumbersJob(ctx context.Context, id string) ApiRetrievePhoneNumbersJobRequest {
	return ApiRetrievePhoneNumbersJobRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhoneNumbersJob
func (a *BulkPhoneNumberOperationsAPIService) RetrievePhoneNumbersJobExecute(r ApiRetrievePhoneNumbersJobRequest) (*PhoneNumbersJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhoneNumbersJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkPhoneNumberOperationsAPIService.RetrievePhoneNumbersJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/jobs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
