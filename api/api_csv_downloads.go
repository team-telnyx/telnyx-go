/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CSVDownloadsAPIService CSVDownloadsAPI service
type CSVDownloadsAPIService service

type ApiCreateCsvDownloadRequest struct {
	ctx context.Context
	ApiService *CSVDownloadsAPIService
	csvFormat *string
	filterHasBundle *string
	filterTag *string
	filterConnectionId *string
	filterPhoneNumber *string
	filterStatus *string
	filterVoiceConnectionNameContains *string
	filterVoiceUsagePaymentMethod *string
	filterBillingGroupId *string
	filterEmergencyAddressId *string
	filterCustomerReference *string
}

// Which format to use when generating the CSV file. The default for backwards compatibility is &#39;V1&#39;
func (r ApiCreateCsvDownloadRequest) CsvFormat(csvFormat string) ApiCreateCsvDownloadRequest {
	r.csvFormat = &csvFormat
	return r
}

// Filter by phone number that have bundles.
func (r ApiCreateCsvDownloadRequest) FilterHasBundle(filterHasBundle string) ApiCreateCsvDownloadRequest {
	r.filterHasBundle = &filterHasBundle
	return r
}

// Filter by phone number tags.
func (r ApiCreateCsvDownloadRequest) FilterTag(filterTag string) ApiCreateCsvDownloadRequest {
	r.filterTag = &filterTag
	return r
}

// Filter by connection_id.
func (r ApiCreateCsvDownloadRequest) FilterConnectionId(filterConnectionId string) ApiCreateCsvDownloadRequest {
	r.filterConnectionId = &filterConnectionId
	return r
}

// Filter by phone number. Requires at least three digits.              Non-numerical characters will result in no values being returned.
func (r ApiCreateCsvDownloadRequest) FilterPhoneNumber(filterPhoneNumber string) ApiCreateCsvDownloadRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

// Filter by phone number status.
func (r ApiCreateCsvDownloadRequest) FilterStatus(filterStatus string) ApiCreateCsvDownloadRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter contains connection name. Requires at least three characters.
func (r ApiCreateCsvDownloadRequest) FilterVoiceConnectionNameContains(filterVoiceConnectionNameContains string) ApiCreateCsvDownloadRequest {
	r.filterVoiceConnectionNameContains = &filterVoiceConnectionNameContains
	return r
}

// Filter by usage_payment_method.
func (r ApiCreateCsvDownloadRequest) FilterVoiceUsagePaymentMethod(filterVoiceUsagePaymentMethod string) ApiCreateCsvDownloadRequest {
	r.filterVoiceUsagePaymentMethod = &filterVoiceUsagePaymentMethod
	return r
}

// Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string &#39;null&#39;.
func (r ApiCreateCsvDownloadRequest) FilterBillingGroupId(filterBillingGroupId string) ApiCreateCsvDownloadRequest {
	r.filterBillingGroupId = &filterBillingGroupId
	return r
}

// Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string &#39;null&#39;.
func (r ApiCreateCsvDownloadRequest) FilterEmergencyAddressId(filterEmergencyAddressId string) ApiCreateCsvDownloadRequest {
	r.filterEmergencyAddressId = &filterEmergencyAddressId
	return r
}

// Filter numbers via the customer_reference set.
func (r ApiCreateCsvDownloadRequest) FilterCustomerReference(filterCustomerReference string) ApiCreateCsvDownloadRequest {
	r.filterCustomerReference = &filterCustomerReference
	return r
}

func (r ApiCreateCsvDownloadRequest) Execute() (*CSVDownloadResponse, *http.Response, error) {
	return r.ApiService.CreateCsvDownloadExecute(r)
}

/*
CreateCsvDownload Create a CSV download

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCsvDownloadRequest
*/
func (a *CSVDownloadsAPIService) CreateCsvDownload(ctx context.Context) ApiCreateCsvDownloadRequest {
	return ApiCreateCsvDownloadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CSVDownloadResponse
func (a *CSVDownloadsAPIService) CreateCsvDownloadExecute(r ApiCreateCsvDownloadRequest) (*CSVDownloadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CSVDownloadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CSVDownloadsAPIService.CreateCsvDownload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/csv_downloads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.csvFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "csv_format", r.csvFormat, "form", "")
	} else {
		var defaultValue string = "V1"
		r.csvFormat = &defaultValue
	}
	if r.filterHasBundle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[has_bundle]", r.filterHasBundle, "form", "")
	}
	if r.filterTag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tag]", r.filterTag, "form", "")
	}
	if r.filterConnectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_id]", r.filterConnectionId, "form", "")
	}
	if r.filterPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	}
	if r.filterStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[status]", r.filterStatus, "form", "")
	}
	if r.filterVoiceConnectionNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.connection_name][contains]", r.filterVoiceConnectionNameContains, "form", "")
	}
	if r.filterVoiceUsagePaymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[voice.usage_payment_method]", r.filterVoiceUsagePaymentMethod, "form", "")
	}
	if r.filterBillingGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[billing_group_id]", r.filterBillingGroupId, "form", "")
	}
	if r.filterEmergencyAddressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[emergency_address_id]", r.filterEmergencyAddressId, "form", "")
	}
	if r.filterCustomerReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[customer_reference]", r.filterCustomerReference, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCsvDownloadRequest struct {
	ctx context.Context
	ApiService *CSVDownloadsAPIService
	id string
}

func (r ApiGetCsvDownloadRequest) Execute() (*CSVDownloadResponse, *http.Response, error) {
	return r.ApiService.GetCsvDownloadExecute(r)
}

/*
GetCsvDownload Retrieve a CSV download

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifies the CSV download.
 @return ApiGetCsvDownloadRequest
*/
func (a *CSVDownloadsAPIService) GetCsvDownload(ctx context.Context, id string) ApiGetCsvDownloadRequest {
	return ApiGetCsvDownloadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CSVDownloadResponse
func (a *CSVDownloadsAPIService) GetCsvDownloadExecute(r ApiGetCsvDownloadRequest) (*CSVDownloadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CSVDownloadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CSVDownloadsAPIService.GetCsvDownload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/csv_downloads/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCsvDownloadsRequest struct {
	ctx context.Context
	ApiService *CSVDownloadsAPIService
	pageNumber *int32
	pageSize *int32
}

// The page number to load.
func (r ApiListCsvDownloadsRequest) PageNumber(pageNumber int32) ApiListCsvDownloadsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiListCsvDownloadsRequest) PageSize(pageSize int32) ApiListCsvDownloadsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListCsvDownloadsRequest) Execute() (*ListCSVDownloadsResponse, *http.Response, error) {
	return r.ApiService.ListCsvDownloadsExecute(r)
}

/*
ListCsvDownloads List CSV downloads

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCsvDownloadsRequest
*/
func (a *CSVDownloadsAPIService) ListCsvDownloads(ctx context.Context) ApiListCsvDownloadsRequest {
	return ApiListCsvDownloadsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCSVDownloadsResponse
func (a *CSVDownloadsAPIService) ListCsvDownloadsExecute(r ApiListCsvDownloadsRequest) (*ListCSVDownloadsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCSVDownloadsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CSVDownloadsAPIService.ListCsvDownloads")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers/csv_downloads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
