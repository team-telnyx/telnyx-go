/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CallRecordingsAPIService CallRecordingsAPI service
type CallRecordingsAPIService service

type ApiCreateCustomStorageCredentialsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	connectionId string
	customStorageConfiguration *CustomStorageConfiguration
}

// Creates new credentials resource for the specified connection_id.
func (r ApiCreateCustomStorageCredentialsRequest) CustomStorageConfiguration(customStorageConfiguration CustomStorageConfiguration) ApiCreateCustomStorageCredentialsRequest {
	r.customStorageConfiguration = &customStorageConfiguration
	return r
}

func (r ApiCreateCustomStorageCredentialsRequest) Execute() (*CredentialsResponse, *http.Response, error) {
	return r.ApiService.CreateCustomStorageCredentialsExecute(r)
}

/*
CreateCustomStorageCredentials Create a custom storage credential

Creates a custom storage credentials configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionId Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
 @return ApiCreateCustomStorageCredentialsRequest
*/
func (a *CallRecordingsAPIService) CreateCustomStorageCredentials(ctx context.Context, connectionId string) ApiCreateCustomStorageCredentialsRequest {
	return ApiCreateCustomStorageCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		connectionId: connectionId,
	}
}

// Execute executes the request
//  @return CredentialsResponse
func (a *CallRecordingsAPIService) CreateCustomStorageCredentialsExecute(r ApiCreateCustomStorageCredentialsRequest) (*CredentialsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CredentialsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.CreateCustomStorageCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_storage_credentials/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customStorageConfiguration == nil {
		return localVarReturnValue, nil, reportError("customStorageConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customStorageConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCustomStorageCredentialsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	connectionId string
}

func (r ApiDeleteCustomStorageCredentialsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCustomStorageCredentialsExecute(r)
}

/*
DeleteCustomStorageCredentials Delete a stored credential

Deletes a stored custom credentials configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionId Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
 @return ApiDeleteCustomStorageCredentialsRequest
*/
func (a *CallRecordingsAPIService) DeleteCustomStorageCredentials(ctx context.Context, connectionId string) ApiDeleteCustomStorageCredentialsRequest {
	return ApiDeleteCustomStorageCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		connectionId: connectionId,
	}
}

// Execute executes the request
func (a *CallRecordingsAPIService) DeleteCustomStorageCredentialsExecute(r ApiDeleteCustomStorageCredentialsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.DeleteCustomStorageCredentials")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_storage_credentials/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRecordingRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	recordingId string
}

func (r ApiDeleteRecordingRequest) Execute() (*RecordingResponse, *http.Response, error) {
	return r.ApiService.DeleteRecordingExecute(r)
}

/*
DeleteRecording Delete a call recording

Permanently deletes a call recording.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordingId Uniquely identifies the recording by id.
 @return ApiDeleteRecordingRequest
*/
func (a *CallRecordingsAPIService) DeleteRecording(ctx context.Context, recordingId string) ApiDeleteRecordingRequest {
	return ApiDeleteRecordingRequest{
		ApiService: a,
		ctx: ctx,
		recordingId: recordingId,
	}
}

// Execute executes the request
//  @return RecordingResponse
func (a *CallRecordingsAPIService) DeleteRecordingExecute(r ApiDeleteRecordingRequest) (*RecordingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecordingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.DeleteRecording")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recordings/{recording_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"recording_id"+"}", url.PathEscape(parameterValueToString(r.recordingId, "recordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRecordingTranscriptionRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	recordingTranscriptionId string
}

func (r ApiDeleteRecordingTranscriptionRequest) Execute() (*GetRecordingTranscription200Response, *http.Response, error) {
	return r.ApiService.DeleteRecordingTranscriptionExecute(r)
}

/*
DeleteRecordingTranscription Delete a recording transcription

Permanently deletes a recording transcription.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordingTranscriptionId Uniquely identifies the recording transcription by id.
 @return ApiDeleteRecordingTranscriptionRequest
*/
func (a *CallRecordingsAPIService) DeleteRecordingTranscription(ctx context.Context, recordingTranscriptionId string) ApiDeleteRecordingTranscriptionRequest {
	return ApiDeleteRecordingTranscriptionRequest{
		ApiService: a,
		ctx: ctx,
		recordingTranscriptionId: recordingTranscriptionId,
	}
}

// Execute executes the request
//  @return GetRecordingTranscription200Response
func (a *CallRecordingsAPIService) DeleteRecordingTranscriptionExecute(r ApiDeleteRecordingTranscriptionRequest) (*GetRecordingTranscription200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecordingTranscription200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.DeleteRecordingTranscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recording_transcriptions/{recording_transcription_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"recording_transcription_id"+"}", url.PathEscape(parameterValueToString(r.recordingTranscriptionId, "recordingTranscriptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRecordingsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	requestBody *[]string
}

// Deletes recordings for the given list of IDs.
func (r ApiDeleteRecordingsRequest) RequestBody(requestBody []string) ApiDeleteRecordingsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiDeleteRecordingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRecordingsExecute(r)
}

/*
DeleteRecordings Delete a list of call recordings

Permanently deletes a list of call recordings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteRecordingsRequest
*/
func (a *CallRecordingsAPIService) DeleteRecordings(ctx context.Context) ApiDeleteRecordingsRequest {
	return ApiDeleteRecordingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CallRecordingsAPIService) DeleteRecordingsExecute(r ApiDeleteRecordingsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.DeleteRecordings")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recordings/actions/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCustomStorageCredentialsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	connectionId string
}

func (r ApiGetCustomStorageCredentialsRequest) Execute() (*CredentialsResponse, *http.Response, error) {
	return r.ApiService.GetCustomStorageCredentialsExecute(r)
}

/*
GetCustomStorageCredentials Retrieve a stored credential

Returns the information about custom storage credentials.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionId Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
 @return ApiGetCustomStorageCredentialsRequest
*/
func (a *CallRecordingsAPIService) GetCustomStorageCredentials(ctx context.Context, connectionId string) ApiGetCustomStorageCredentialsRequest {
	return ApiGetCustomStorageCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		connectionId: connectionId,
	}
}

// Execute executes the request
//  @return CredentialsResponse
func (a *CallRecordingsAPIService) GetCustomStorageCredentialsExecute(r ApiGetCustomStorageCredentialsRequest) (*CredentialsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CredentialsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.GetCustomStorageCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_storage_credentials/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecordingRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	recordingId string
}

func (r ApiGetRecordingRequest) Execute() (*RecordingResponse, *http.Response, error) {
	return r.ApiService.GetRecordingExecute(r)
}

/*
GetRecording Retrieve a call recording

Retrieves the details of an existing call recording.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordingId Uniquely identifies the recording by id.
 @return ApiGetRecordingRequest
*/
func (a *CallRecordingsAPIService) GetRecording(ctx context.Context, recordingId string) ApiGetRecordingRequest {
	return ApiGetRecordingRequest{
		ApiService: a,
		ctx: ctx,
		recordingId: recordingId,
	}
}

// Execute executes the request
//  @return RecordingResponse
func (a *CallRecordingsAPIService) GetRecordingExecute(r ApiGetRecordingRequest) (*RecordingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecordingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.GetRecording")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recordings/{recording_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"recording_id"+"}", url.PathEscape(parameterValueToString(r.recordingId, "recordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecordingTranscriptionRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	recordingTranscriptionId string
}

func (r ApiGetRecordingTranscriptionRequest) Execute() (*GetRecordingTranscription200Response, *http.Response, error) {
	return r.ApiService.GetRecordingTranscriptionExecute(r)
}

/*
GetRecordingTranscription Retrieve a recording transcription

Retrieves the details of an existing recording transcription.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordingTranscriptionId Uniquely identifies the recording transcription by id.
 @return ApiGetRecordingTranscriptionRequest
*/
func (a *CallRecordingsAPIService) GetRecordingTranscription(ctx context.Context, recordingTranscriptionId string) ApiGetRecordingTranscriptionRequest {
	return ApiGetRecordingTranscriptionRequest{
		ApiService: a,
		ctx: ctx,
		recordingTranscriptionId: recordingTranscriptionId,
	}
}

// Execute executes the request
//  @return GetRecordingTranscription200Response
func (a *CallRecordingsAPIService) GetRecordingTranscriptionExecute(r ApiGetRecordingTranscriptionRequest) (*GetRecordingTranscription200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecordingTranscription200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.GetRecordingTranscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recording_transcriptions/{recording_transcription_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"recording_transcription_id"+"}", url.PathEscape(parameterValueToString(r.recordingTranscriptionId, "recordingTranscriptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecordingTranscriptionsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
}

func (r ApiGetRecordingTranscriptionsRequest) Execute() (*GetRecordingTranscriptions200Response, *http.Response, error) {
	return r.ApiService.GetRecordingTranscriptionsExecute(r)
}

/*
GetRecordingTranscriptions List all recording transcriptions

Returns a list of your recording transcriptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRecordingTranscriptionsRequest
*/
func (a *CallRecordingsAPIService) GetRecordingTranscriptions(ctx context.Context) ApiGetRecordingTranscriptionsRequest {
	return ApiGetRecordingTranscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRecordingTranscriptions200Response
func (a *CallRecordingsAPIService) GetRecordingTranscriptionsExecute(r ApiGetRecordingTranscriptionsRequest) (*GetRecordingTranscriptions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecordingTranscriptions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.GetRecordingTranscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recording_transcriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecordingsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	filterConferenceId *string
	filterCreatedAtGte *string
	filterCreatedAtLte *string
	filterCallLegId *string
	filterCallSessionId *string
	filterFrom *string
	filterTo *string
	filterConnectionId *string
	pageNumber *int32
	pageSize *int32
}

// Returns only recordings associated with a given conference.
func (r ApiGetRecordingsRequest) FilterConferenceId(filterConferenceId string) ApiGetRecordingsRequest {
	r.filterConferenceId = &filterConferenceId
	return r
}

// Returns only recordings created later than or at given ISO 8601 datetime.
func (r ApiGetRecordingsRequest) FilterCreatedAtGte(filterCreatedAtGte string) ApiGetRecordingsRequest {
	r.filterCreatedAtGte = &filterCreatedAtGte
	return r
}

// Returns only recordings created earlier than or at given ISO 8601 datetime.
func (r ApiGetRecordingsRequest) FilterCreatedAtLte(filterCreatedAtLte string) ApiGetRecordingsRequest {
	r.filterCreatedAtLte = &filterCreatedAtLte
	return r
}

// If present, recordings will be filtered to those with a matching call_leg_id.
func (r ApiGetRecordingsRequest) FilterCallLegId(filterCallLegId string) ApiGetRecordingsRequest {
	r.filterCallLegId = &filterCallLegId
	return r
}

// If present, recordings will be filtered to those with a matching call_session_id.
func (r ApiGetRecordingsRequest) FilterCallSessionId(filterCallSessionId string) ApiGetRecordingsRequest {
	r.filterCallSessionId = &filterCallSessionId
	return r
}

// If present, recordings will be filtered to those with a matching &#x60;from&#x60; attribute (case-sensitive).
func (r ApiGetRecordingsRequest) FilterFrom(filterFrom string) ApiGetRecordingsRequest {
	r.filterFrom = &filterFrom
	return r
}

// If present, recordings will be filtered to those with a matching &#x60;to&#x60; attribute (case-sensitive).
func (r ApiGetRecordingsRequest) FilterTo(filterTo string) ApiGetRecordingsRequest {
	r.filterTo = &filterTo
	return r
}

// If present, recordings will be filtered to those with a matching &#x60;connection_id&#x60; attribute (case-sensitive).
func (r ApiGetRecordingsRequest) FilterConnectionId(filterConnectionId string) ApiGetRecordingsRequest {
	r.filterConnectionId = &filterConnectionId
	return r
}

// The page number to load.
func (r ApiGetRecordingsRequest) PageNumber(pageNumber int32) ApiGetRecordingsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetRecordingsRequest) PageSize(pageSize int32) ApiGetRecordingsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetRecordingsRequest) Execute() (*GetRecordings200Response, *http.Response, error) {
	return r.ApiService.GetRecordingsExecute(r)
}

/*
GetRecordings List all call recordings

Returns a list of your call recordings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRecordingsRequest
*/
func (a *CallRecordingsAPIService) GetRecordings(ctx context.Context) ApiGetRecordingsRequest {
	return ApiGetRecordingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRecordings200Response
func (a *CallRecordingsAPIService) GetRecordingsExecute(r ApiGetRecordingsRequest) (*GetRecordings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecordings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.GetRecordings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recordings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterConferenceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[conference_id]", r.filterConferenceId, "form", "")
	}
	if r.filterCreatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][gte]", r.filterCreatedAtGte, "form", "")
	}
	if r.filterCreatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[created_at][lte]", r.filterCreatedAtLte, "form", "")
	}
	if r.filterCallLegId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[call_leg_id]", r.filterCallLegId, "form", "")
	}
	if r.filterCallSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[call_session_id]", r.filterCallSessionId, "form", "")
	}
	if r.filterFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[from]", r.filterFrom, "form", "")
	}
	if r.filterTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[to]", r.filterTo, "form", "")
	}
	if r.filterConnectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[connection_id]", r.filterConnectionId, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomStorageCredentialsRequest struct {
	ctx context.Context
	ApiService *CallRecordingsAPIService
	connectionId string
	customStorageConfiguration *CustomStorageConfiguration
}

// Creates new credentials resource for the specified connection_id.
func (r ApiUpdateCustomStorageCredentialsRequest) CustomStorageConfiguration(customStorageConfiguration CustomStorageConfiguration) ApiUpdateCustomStorageCredentialsRequest {
	r.customStorageConfiguration = &customStorageConfiguration
	return r
}

func (r ApiUpdateCustomStorageCredentialsRequest) Execute() (*CredentialsResponse, *http.Response, error) {
	return r.ApiService.UpdateCustomStorageCredentialsExecute(r)
}

/*
UpdateCustomStorageCredentials Update a stored credential

Updates a stored custom credentials configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionId Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
 @return ApiUpdateCustomStorageCredentialsRequest
*/
func (a *CallRecordingsAPIService) UpdateCustomStorageCredentials(ctx context.Context, connectionId string) ApiUpdateCustomStorageCredentialsRequest {
	return ApiUpdateCustomStorageCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		connectionId: connectionId,
	}
}

// Execute executes the request
//  @return CredentialsResponse
func (a *CallRecordingsAPIService) UpdateCustomStorageCredentialsExecute(r ApiUpdateCustomStorageCredentialsRequest) (*CredentialsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CredentialsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallRecordingsAPIService.UpdateCustomStorageCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_storage_credentials/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customStorageConfiguration == nil {
		return localVarReturnValue, nil, reportError("customStorageConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customStorageConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
