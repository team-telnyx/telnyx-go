/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RoomsClientTokensAPIService RoomsClientTokensAPI service
type RoomsClientTokensAPIService service

type ApiCreateRoomClientTokenRequest struct {
	ctx context.Context
	ApiService *RoomsClientTokensAPIService
	roomId string
	createRoomClientTokenRequest *CreateRoomClientTokenRequest
}

// Parameters that can be defined during Room Client Token creation.
func (r ApiCreateRoomClientTokenRequest) CreateRoomClientTokenRequest(createRoomClientTokenRequest CreateRoomClientTokenRequest) ApiCreateRoomClientTokenRequest {
	r.createRoomClientTokenRequest = &createRoomClientTokenRequest
	return r
}

func (r ApiCreateRoomClientTokenRequest) Execute() (*CreateRoomClientToken201Response, *http.Response, error) {
	return r.ApiService.CreateRoomClientTokenExecute(r)
}

/*
CreateRoomClientToken Create Client Token to join a room.

Synchronously create an Client Token to join a Room. Client Token is necessary to join a Telnyx Room. Client Token will expire after `token_ttl_secs`, a Refresh Token is also provided to refresh a Client Token, the Refresh Token expires after `refresh_token_ttl_secs`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomId The unique identifier of a room.
 @return ApiCreateRoomClientTokenRequest
*/
func (a *RoomsClientTokensAPIService) CreateRoomClientToken(ctx context.Context, roomId string) ApiCreateRoomClientTokenRequest {
	return ApiCreateRoomClientTokenRequest{
		ApiService: a,
		ctx: ctx,
		roomId: roomId,
	}
}

// Execute executes the request
//  @return CreateRoomClientToken201Response
func (a *RoomsClientTokensAPIService) CreateRoomClientTokenExecute(r ApiCreateRoomClientTokenRequest) (*CreateRoomClientToken201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateRoomClientToken201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomsClientTokensAPIService.CreateRoomClientToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rooms/{room_id}/actions/generate_join_client_token"
	localVarPath = strings.Replace(localVarPath, "{"+"room_id"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createRoomClientTokenRequest == nil {
		return localVarReturnValue, nil, reportError("createRoomClientTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRoomClientTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRefreshRoomClientTokenRequest struct {
	ctx context.Context
	ApiService *RoomsClientTokensAPIService
	roomId string
	refreshRoomClientTokenRequest *RefreshRoomClientTokenRequest
}

// Parameters that can be defined during Room Client Token refresh.
func (r ApiRefreshRoomClientTokenRequest) RefreshRoomClientTokenRequest(refreshRoomClientTokenRequest RefreshRoomClientTokenRequest) ApiRefreshRoomClientTokenRequest {
	r.refreshRoomClientTokenRequest = &refreshRoomClientTokenRequest
	return r
}

func (r ApiRefreshRoomClientTokenRequest) Execute() (*RefreshRoomClientToken201Response, *http.Response, error) {
	return r.ApiService.RefreshRoomClientTokenExecute(r)
}

/*
RefreshRoomClientToken Refresh Client Token to join a room.

Synchronously refresh an Client Token to join a Room. Client Token is necessary to join a Telnyx Room. Client Token will expire after `token_ttl_secs`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomId The unique identifier of a room.
 @return ApiRefreshRoomClientTokenRequest
*/
func (a *RoomsClientTokensAPIService) RefreshRoomClientToken(ctx context.Context, roomId string) ApiRefreshRoomClientTokenRequest {
	return ApiRefreshRoomClientTokenRequest{
		ApiService: a,
		ctx: ctx,
		roomId: roomId,
	}
}

// Execute executes the request
//  @return RefreshRoomClientToken201Response
func (a *RoomsClientTokensAPIService) RefreshRoomClientTokenExecute(r ApiRefreshRoomClientTokenRequest) (*RefreshRoomClientToken201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RefreshRoomClientToken201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomsClientTokensAPIService.RefreshRoomClientToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rooms/{room_id}/actions/refresh_client_token"
	localVarPath = strings.Replace(localVarPath, "{"+"room_id"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.refreshRoomClientTokenRequest == nil {
		return localVarReturnValue, nil, reportError("refreshRoomClientTokenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.refreshRoomClientTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
