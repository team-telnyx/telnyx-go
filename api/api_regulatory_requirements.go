/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RegulatoryRequirementsAPIService RegulatoryRequirementsAPI service
type RegulatoryRequirementsAPIService service

type ApiListRegulatoryRequirementsRequest struct {
	ctx context.Context
	ApiService *RegulatoryRequirementsAPIService
	filterPhoneNumber *string
	filterRequirementGroupId *string
	filterCountryCode *string
	filterPhoneNumberType *string
	filterAction *string
}

// Phone number to check requirements for
func (r ApiListRegulatoryRequirementsRequest) FilterPhoneNumber(filterPhoneNumber string) ApiListRegulatoryRequirementsRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

// ID of requirement group to check requirements for
func (r ApiListRegulatoryRequirementsRequest) FilterRequirementGroupId(filterRequirementGroupId string) ApiListRegulatoryRequirementsRequest {
	r.filterRequirementGroupId = &filterRequirementGroupId
	return r
}

// Country code(iso2) to check requirements for
func (r ApiListRegulatoryRequirementsRequest) FilterCountryCode(filterCountryCode string) ApiListRegulatoryRequirementsRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

// Phone number type to check requirements for
func (r ApiListRegulatoryRequirementsRequest) FilterPhoneNumberType(filterPhoneNumberType string) ApiListRegulatoryRequirementsRequest {
	r.filterPhoneNumberType = &filterPhoneNumberType
	return r
}

// Action to check requirements for
func (r ApiListRegulatoryRequirementsRequest) FilterAction(filterAction string) ApiListRegulatoryRequirementsRequest {
	r.filterAction = &filterAction
	return r
}

func (r ApiListRegulatoryRequirementsRequest) Execute() (*ListRegulatoryRequirements200Response, *http.Response, error) {
	return r.ApiService.ListRegulatoryRequirementsExecute(r)
}

/*
ListRegulatoryRequirements Retrieve regulatory requirements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRegulatoryRequirementsRequest
*/
func (a *RegulatoryRequirementsAPIService) ListRegulatoryRequirements(ctx context.Context) ApiListRegulatoryRequirementsRequest {
	return ApiListRegulatoryRequirementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListRegulatoryRequirements200Response
func (a *RegulatoryRequirementsAPIService) ListRegulatoryRequirementsExecute(r ApiListRegulatoryRequirementsRequest) (*ListRegulatoryRequirements200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListRegulatoryRequirements200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegulatoryRequirementsAPIService.ListRegulatoryRequirements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/regulatory_requirements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterPhoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	}
	if r.filterRequirementGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[requirement_group_id]", r.filterRequirementGroupId, "form", "")
	}
	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.filterPhoneNumberType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number_type]", r.filterPhoneNumberType, "form", "")
	}
	if r.filterAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[action]", r.filterAction, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRegulatoryRequirementsPhoneNumbersRequest struct {
	ctx context.Context
	ApiService *RegulatoryRequirementsAPIService
	filterPhoneNumber *string
}

// Record type phone number/ phone numbers
func (r ApiListRegulatoryRequirementsPhoneNumbersRequest) FilterPhoneNumber(filterPhoneNumber string) ApiListRegulatoryRequirementsPhoneNumbersRequest {
	r.filterPhoneNumber = &filterPhoneNumber
	return r
}

func (r ApiListRegulatoryRequirementsPhoneNumbersRequest) Execute() (*ListRegulatoryRequirementsPhoneNumbers200Response, *http.Response, error) {
	return r.ApiService.ListRegulatoryRequirementsPhoneNumbersExecute(r)
}

/*
ListRegulatoryRequirementsPhoneNumbers Retrieve regulatory requirements for a list of phone numbers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRegulatoryRequirementsPhoneNumbersRequest
*/
func (a *RegulatoryRequirementsAPIService) ListRegulatoryRequirementsPhoneNumbers(ctx context.Context) ApiListRegulatoryRequirementsPhoneNumbersRequest {
	return ApiListRegulatoryRequirementsPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListRegulatoryRequirementsPhoneNumbers200Response
func (a *RegulatoryRequirementsAPIService) ListRegulatoryRequirementsPhoneNumbersExecute(r ApiListRegulatoryRequirementsPhoneNumbersRequest) (*ListRegulatoryRequirementsPhoneNumbers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListRegulatoryRequirementsPhoneNumbers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegulatoryRequirementsAPIService.ListRegulatoryRequirementsPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone_numbers_regulatory_requirements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterPhoneNumber == nil {
		return localVarReturnValue, nil, reportError("filterPhoneNumber is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[phone_number]", r.filterPhoneNumber, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
