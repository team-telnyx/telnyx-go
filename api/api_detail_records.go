/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DetailRecordsAPIService DetailRecordsAPI service
type DetailRecordsAPIService service

type ApiSearchDetailRecordsRequest struct {
	ctx context.Context
	ApiService *DetailRecordsAPIService
	filterRecordType *string
	filterDateRange *string
	filter *map[string]interface{}
	pageNumber *int32
	pageSize *int32
	sort *[]string
}

// Filter by the given record type.
func (r ApiSearchDetailRecordsRequest) FilterRecordType(filterRecordType string) ApiSearchDetailRecordsRequest {
	r.filterRecordType = &filterRecordType
	return r
}

// Filter by the given user-friendly date range. You can specify one of the following enum values, or a dynamic one using this format: last_N_days.
func (r ApiSearchDetailRecordsRequest) FilterDateRange(filterDateRange string) ApiSearchDetailRecordsRequest {
	r.filterDateRange = &filterDateRange
	return r
}

// Filter records on a given record attribute and value. &lt;br/&gt;Example: filter[status]&#x3D;delivered
func (r ApiSearchDetailRecordsRequest) Filter(filter map[string]interface{}) ApiSearchDetailRecordsRequest {
	r.filter = &filter
	return r
}

// Page number
func (r ApiSearchDetailRecordsRequest) PageNumber(pageNumber int32) ApiSearchDetailRecordsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Page size
func (r ApiSearchDetailRecordsRequest) PageSize(pageSize int32) ApiSearchDetailRecordsRequest {
	r.pageSize = &pageSize
	return r
}

// Specifies the sort order for results. &lt;br/&gt;Example: sort&#x3D;-created_at
func (r ApiSearchDetailRecordsRequest) Sort(sort []string) ApiSearchDetailRecordsRequest {
	r.sort = &sort
	return r
}

func (r ApiSearchDetailRecordsRequest) Execute() (*DetailRecordsSearchResponse, *http.Response, error) {
	return r.ApiService.SearchDetailRecordsExecute(r)
}

/*
SearchDetailRecords Search detail records

Search for any detail record across the Telnyx Platform

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchDetailRecordsRequest
*/
func (a *DetailRecordsAPIService) SearchDetailRecords(ctx context.Context) ApiSearchDetailRecordsRequest {
	return ApiSearchDetailRecordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DetailRecordsSearchResponse
func (a *DetailRecordsAPIService) SearchDetailRecordsExecute(r ApiSearchDetailRecordsRequest) (*DetailRecordsSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DetailRecordsSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DetailRecordsAPIService.SearchDetailRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/detail_records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterRecordType == nil {
		return localVarReturnValue, nil, reportError("filterRecordType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[record_type]", r.filterRecordType, "form", "")
	if r.filterDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[date_range]", r.filterDateRange, "form", "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "form", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
