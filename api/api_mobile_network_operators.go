/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MobileNetworkOperatorsAPIService MobileNetworkOperatorsAPI service
type MobileNetworkOperatorsAPIService service

type ApiGetMobileNetworkOperatorsRequest struct {
	ctx context.Context
	ApiService *MobileNetworkOperatorsAPIService
	pageNumber *int32
	pageSize *int32
	filterNameStartsWith *string
	filterNameContains *string
	filterNameEndsWith *string
	filterCountryCode *string
	filterMcc *string
	filterMnc *string
	filterTadig *string
	filterNetworkPreferencesEnabled *bool
}

// The page number to load.
func (r ApiGetMobileNetworkOperatorsRequest) PageNumber(pageNumber int32) ApiGetMobileNetworkOperatorsRequest {
	r.pageNumber = &pageNumber
	return r
}

// The size of the page.
func (r ApiGetMobileNetworkOperatorsRequest) PageSize(pageSize int32) ApiGetMobileNetworkOperatorsRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by name starting with.
func (r ApiGetMobileNetworkOperatorsRequest) FilterNameStartsWith(filterNameStartsWith string) ApiGetMobileNetworkOperatorsRequest {
	r.filterNameStartsWith = &filterNameStartsWith
	return r
}

// Filter by name containing match.
func (r ApiGetMobileNetworkOperatorsRequest) FilterNameContains(filterNameContains string) ApiGetMobileNetworkOperatorsRequest {
	r.filterNameContains = &filterNameContains
	return r
}

// Filter by name ending with.
func (r ApiGetMobileNetworkOperatorsRequest) FilterNameEndsWith(filterNameEndsWith string) ApiGetMobileNetworkOperatorsRequest {
	r.filterNameEndsWith = &filterNameEndsWith
	return r
}

// Filter by exact country_code.
func (r ApiGetMobileNetworkOperatorsRequest) FilterCountryCode(filterCountryCode string) ApiGetMobileNetworkOperatorsRequest {
	r.filterCountryCode = &filterCountryCode
	return r
}

// Filter by exact MCC.
func (r ApiGetMobileNetworkOperatorsRequest) FilterMcc(filterMcc string) ApiGetMobileNetworkOperatorsRequest {
	r.filterMcc = &filterMcc
	return r
}

// Filter by exact MNC.
func (r ApiGetMobileNetworkOperatorsRequest) FilterMnc(filterMnc string) ApiGetMobileNetworkOperatorsRequest {
	r.filterMnc = &filterMnc
	return r
}

// Filter by exact TADIG.
func (r ApiGetMobileNetworkOperatorsRequest) FilterTadig(filterTadig string) ApiGetMobileNetworkOperatorsRequest {
	r.filterTadig = &filterTadig
	return r
}

// Filter by network_preferences_enabled.
func (r ApiGetMobileNetworkOperatorsRequest) FilterNetworkPreferencesEnabled(filterNetworkPreferencesEnabled bool) ApiGetMobileNetworkOperatorsRequest {
	r.filterNetworkPreferencesEnabled = &filterNetworkPreferencesEnabled
	return r
}

func (r ApiGetMobileNetworkOperatorsRequest) Execute() (*GetMobileNetworkOperators200Response, *http.Response, error) {
	return r.ApiService.GetMobileNetworkOperatorsExecute(r)
}

/*
GetMobileNetworkOperators List mobile network operators

Telnyx has a set of GSM mobile operators partners that are available through our mobile network roaming. This resource is entirely managed by Telnyx and may change over time. That means that this resource won't allow any write operations for it. Still, it's available so it can be used as a support resource that can be related to other resources or become a configuration option.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMobileNetworkOperatorsRequest
*/
func (a *MobileNetworkOperatorsAPIService) GetMobileNetworkOperators(ctx context.Context) ApiGetMobileNetworkOperatorsRequest {
	return ApiGetMobileNetworkOperatorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetMobileNetworkOperators200Response
func (a *MobileNetworkOperatorsAPIService) GetMobileNetworkOperatorsExecute(r ApiGetMobileNetworkOperatorsRequest) (*GetMobileNetworkOperators200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMobileNetworkOperators200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileNetworkOperatorsAPIService.GetMobileNetworkOperators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mobile_network_operators"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[number]", r.pageNumber, "form", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[size]", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.filterNameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name][starts_with]", r.filterNameStartsWith, "form", "")
	}
	if r.filterNameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name][contains]", r.filterNameContains, "form", "")
	}
	if r.filterNameEndsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name][ends_with]", r.filterNameEndsWith, "form", "")
	}
	if r.filterCountryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[country_code]", r.filterCountryCode, "form", "")
	}
	if r.filterMcc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[mcc]", r.filterMcc, "form", "")
	}
	if r.filterMnc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[mnc]", r.filterMnc, "form", "")
	}
	if r.filterTadig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[tadig]", r.filterTadig, "form", "")
	}
	if r.filterNetworkPreferencesEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[network_preferences_enabled]", r.filterNetworkPreferencesEnabled, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
