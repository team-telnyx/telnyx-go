/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TextToSpeechCommandsAPIService TextToSpeechCommandsAPI service
type TextToSpeechCommandsAPIService service

type ApiGenerateTextToSpeechRequest struct {
	ctx context.Context
	ApiService *TextToSpeechCommandsAPIService
	generateTextToSpeechRequest *GenerateTextToSpeechRequest
}

func (r ApiGenerateTextToSpeechRequest) GenerateTextToSpeechRequest(generateTextToSpeechRequest GenerateTextToSpeechRequest) ApiGenerateTextToSpeechRequest {
	r.generateTextToSpeechRequest = &generateTextToSpeechRequest
	return r
}

func (r ApiGenerateTextToSpeechRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GenerateTextToSpeechExecute(r)
}

/*
GenerateTextToSpeech Generate speech from text

Converts the provided text to speech using the specified voice and returns audio data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenerateTextToSpeechRequest
*/
func (a *TextToSpeechCommandsAPIService) GenerateTextToSpeech(ctx context.Context) ApiGenerateTextToSpeechRequest {
	return ApiGenerateTextToSpeechRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TextToSpeechCommandsAPIService) GenerateTextToSpeechExecute(r ApiGenerateTextToSpeechRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextToSpeechCommandsAPIService.GenerateTextToSpeech")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/text-to-speech/speech"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generateTextToSpeechRequest == nil {
		return localVarReturnValue, nil, reportError("generateTextToSpeechRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/mpeg"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generateTextToSpeechRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTextToSpeechVoicesRequest struct {
	ctx context.Context
	ApiService *TextToSpeechCommandsAPIService
	provider *string
	elevenlabsApiKeyRef *string
}

// Filter voices by provider
func (r ApiListTextToSpeechVoicesRequest) Provider(provider string) ApiListTextToSpeechVoicesRequest {
	r.provider = &provider
	return r
}

// Reference to your ElevenLabs API key stored in the Telnyx Portal
func (r ApiListTextToSpeechVoicesRequest) ElevenlabsApiKeyRef(elevenlabsApiKeyRef string) ApiListTextToSpeechVoicesRequest {
	r.elevenlabsApiKeyRef = &elevenlabsApiKeyRef
	return r
}

func (r ApiListTextToSpeechVoicesRequest) Execute() (*ListTextToSpeechVoices200Response, *http.Response, error) {
	return r.ApiService.ListTextToSpeechVoicesExecute(r)
}

/*
ListTextToSpeechVoices List available text to speech voices

Returns a list of voices that can be used with the text to speech commands.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListTextToSpeechVoicesRequest
*/
func (a *TextToSpeechCommandsAPIService) ListTextToSpeechVoices(ctx context.Context) ApiListTextToSpeechVoicesRequest {
	return ApiListTextToSpeechVoicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListTextToSpeechVoices200Response
func (a *TextToSpeechCommandsAPIService) ListTextToSpeechVoicesExecute(r ApiListTextToSpeechVoicesRequest) (*ListTextToSpeechVoices200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTextToSpeechVoices200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextToSpeechCommandsAPIService.ListTextToSpeechVoices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/text-to-speech/voices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider", r.provider, "form", "")
	}
	if r.elevenlabsApiKeyRef != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "elevenlabs_api_key_ref", r.elevenlabsApiKeyRef, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
