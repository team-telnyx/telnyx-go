/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CallInformationAPIService CallInformationAPI service
type CallInformationAPIService service

type ApiListConnectionActiveCallsRequest struct {
	ctx context.Context
	ApiService *CallInformationAPIService
	connectionId string
	pageLimit *int32
	pageAfter *string
	pageBefore *string
}

// Limit of records per single page
func (r ApiListConnectionActiveCallsRequest) PageLimit(pageLimit int32) ApiListConnectionActiveCallsRequest {
	r.pageLimit = &pageLimit
	return r
}

// Opaque identifier of next page
func (r ApiListConnectionActiveCallsRequest) PageAfter(pageAfter string) ApiListConnectionActiveCallsRequest {
	r.pageAfter = &pageAfter
	return r
}

// Opaque identifier of previous page
func (r ApiListConnectionActiveCallsRequest) PageBefore(pageBefore string) ApiListConnectionActiveCallsRequest {
	r.pageBefore = &pageBefore
	return r
}

func (r ApiListConnectionActiveCallsRequest) Execute() (*ActiveCallsResponse, *http.Response, error) {
	return r.ApiService.ListConnectionActiveCallsExecute(r)
}

/*
ListConnectionActiveCalls List all active calls for given connection

Lists all active calls for given connection. Acceptable connections are either SIP connections with webhook_url or xml_request_url, call control or texml. Returned results are cursor paginated.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionId Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
 @return ApiListConnectionActiveCallsRequest
*/
func (a *CallInformationAPIService) ListConnectionActiveCalls(ctx context.Context, connectionId string) ApiListConnectionActiveCallsRequest {
	return ApiListConnectionActiveCallsRequest{
		ApiService: a,
		ctx: ctx,
		connectionId: connectionId,
	}
}

// Execute executes the request
//  @return ActiveCallsResponse
func (a *CallInformationAPIService) ListConnectionActiveCallsExecute(r ApiListConnectionActiveCallsRequest) (*ActiveCallsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActiveCallsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallInformationAPIService.ListConnectionActiveCalls")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{connection_id}/active_calls"
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[limit]", r.pageLimit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageLimit = &defaultValue
	}
	if r.pageAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[after]", r.pageAfter, "form", "")
	} else {
		var defaultValue string = "null"
		r.pageAfter = &defaultValue
	}
	if r.pageBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page[before]", r.pageBefore, "form", "")
	} else {
		var defaultValue string = "null"
		r.pageBefore = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveCallStatusRequest struct {
	ctx context.Context
	ApiService *CallInformationAPIService
	callControlId string
}

func (r ApiRetrieveCallStatusRequest) Execute() (*RetrieveCallStatusResponse, *http.Response, error) {
	return r.ApiService.RetrieveCallStatusExecute(r)
}

/*
RetrieveCallStatus Retrieve a call status

Returns the status of a call (data is available 10 minutes after call ended).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param callControlId Unique identifier and token for controlling the call
 @return ApiRetrieveCallStatusRequest
*/
func (a *CallInformationAPIService) RetrieveCallStatus(ctx context.Context, callControlId string) ApiRetrieveCallStatusRequest {
	return ApiRetrieveCallStatusRequest{
		ApiService: a,
		ctx: ctx,
		callControlId: callControlId,
	}
}

// Execute executes the request
//  @return RetrieveCallStatusResponse
func (a *CallInformationAPIService) RetrieveCallStatusExecute(r ApiRetrieveCallStatusRequest) (*RetrieveCallStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveCallStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallInformationAPIService.RetrieveCallStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls/{call_control_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"call_control_id"+"}", url.PathEscape(parameterValueToString(r.callControlId, "callControlId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
