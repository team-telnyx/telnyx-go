/*
Telnyx API

Testing EmbeddingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_EmbeddingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EmbeddingsAPIService EmbeddingBucketFilesPublicEmbeddingBucketsBucketNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string

		httpRes, err := apiClient.EmbeddingsAPI.EmbeddingBucketFilesPublicEmbeddingBucketsBucketNameDelete(context.Background(), bucketName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService GetBucketName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string

		resp, httpRes, err := apiClient.EmbeddingsAPI.GetBucketName(context.Background(), bucketName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService GetEmbeddingBuckets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EmbeddingsAPI.GetEmbeddingBuckets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService GetEmbeddingTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.EmbeddingsAPI.GetEmbeddingTask(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService GetTasksByStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EmbeddingsAPI.GetTasksByStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService PostEmbedding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EmbeddingsAPI.PostEmbedding(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService PostEmbeddingSimilaritySearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EmbeddingsAPI.PostEmbeddingSimilaritySearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmbeddingsAPIService PostEmbeddingUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EmbeddingsAPI.PostEmbeddingUrl(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
