/*
Telnyx API

Testing VerifyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_VerifyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VerifyAPIService CreateFlashcallVerification", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VerifyAPI.CreateFlashcallVerification(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService CreateVerificationCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VerifyAPI.CreateVerificationCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService CreateVerificationSms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VerifyAPI.CreateVerificationSms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService CreateVerifyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VerifyAPI.CreateVerifyProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService DeleteProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var verifyProfileId string

		resp, httpRes, err := apiClient.VerifyAPI.DeleteProfile(context.Background(), verifyProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService GetVerifyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var verifyProfileId string

		resp, httpRes, err := apiClient.VerifyAPI.GetVerifyProfile(context.Background(), verifyProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService ListProfileMessageTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VerifyAPI.ListProfileMessageTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService ListProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VerifyAPI.ListProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService ListVerifications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var phoneNumber string

		resp, httpRes, err := apiClient.VerifyAPI.ListVerifications(context.Background(), phoneNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService RetrieveVerification", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var verificationId string

		resp, httpRes, err := apiClient.VerifyAPI.RetrieveVerification(context.Background(), verificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService UpdateVerifyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var verifyProfileId string

		resp, httpRes, err := apiClient.VerifyAPI.UpdateVerifyProfile(context.Background(), verifyProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService VerifyVerificationCodeById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var verificationId string

		resp, httpRes, err := apiClient.VerifyAPI.VerifyVerificationCodeById(context.Background(), verificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VerifyAPIService VerifyVerificationCodeByPhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var phoneNumber string

		resp, httpRes, err := apiClient.VerifyAPI.VerifyVerificationCodeByPhoneNumber(context.Background(), phoneNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
