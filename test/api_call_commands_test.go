/*
Telnyx API

Testing CallCommandsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_CallCommandsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallCommandsAPIService AnswerCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.AnswerCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService BridgeCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.BridgeCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService CallGatherUsingAI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.CallGatherUsingAI(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService CallStartAIAssistant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.CallStartAIAssistant(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService CallStopAIAssistant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.CallStopAIAssistant(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService DialCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CallCommandsAPI.DialCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService EnqueueCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.EnqueueCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService GatherCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.GatherCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService GatherUsingAudio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.GatherUsingAudio(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService GatherUsingSpeak", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.GatherUsingSpeak(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService HangupCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.HangupCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService LeaveQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.LeaveQueue(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService NoiseSuppressionStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.NoiseSuppressionStart(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService NoiseSuppressionStop", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.NoiseSuppressionStop(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService PauseCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.PauseCallRecording(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService ReferCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.ReferCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService RejectCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.RejectCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService ResumeCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.ResumeCallRecording(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService SendDTMF", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.SendDTMF(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService SendSIPInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.SendSIPInfo(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService SpeakCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.SpeakCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StartCallFork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StartCallFork(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StartCallPlayback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StartCallPlayback(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StartCallRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StartCallRecord(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StartCallStreaming", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StartCallStreaming(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StartCallTranscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StartCallTranscription(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StartSiprecSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StartSiprecSession(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopCallFork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopCallFork(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopCallGather", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopCallGather(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopCallPlayback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopCallPlayback(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopCallRecording(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopCallStreaming", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopCallStreaming(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopCallTranscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopCallTranscription(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService StopSiprecSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.StopSiprecSession(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService TransferCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.TransferCall(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallCommandsAPIService UpdateClientState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callControlId string

		resp, httpRes, err := apiClient.CallCommandsAPI.UpdateClientState(context.Background(), callControlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
