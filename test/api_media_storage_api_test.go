/*
Telnyx API

Testing MediaStorageAPIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_MediaStorageAPIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MediaStorageAPIAPIService CreateMediaStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MediaStorageAPIAPI.CreateMediaStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaStorageAPIAPIService DeleteMediaStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaName string

		httpRes, err := apiClient.MediaStorageAPIAPI.DeleteMediaStorage(context.Background(), mediaName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaStorageAPIAPIService DownloadMedia", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaName string

		resp, httpRes, err := apiClient.MediaStorageAPIAPI.DownloadMedia(context.Background(), mediaName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaStorageAPIAPIService GetMediaStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaName string

		resp, httpRes, err := apiClient.MediaStorageAPIAPI.GetMediaStorage(context.Background(), mediaName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaStorageAPIAPIService ListMediaStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MediaStorageAPIAPI.ListMediaStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MediaStorageAPIAPIService UpdateMediaStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mediaName string

		resp, httpRes, err := apiClient.MediaStorageAPIAPI.UpdateMediaStorage(context.Background(), mediaName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
