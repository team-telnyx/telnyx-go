/*
Telnyx API

Testing BrandsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_BrandsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BrandsAPIService CreateBrandPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BrandsAPI.CreateBrandPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService DeleteBrand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.DeleteBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService GetBrand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.GetBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService GetBrandFeedbackById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.GetBrandFeedbackById(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService GetBrands", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BrandsAPI.GetBrands(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService ListExternalVettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.ListExternalVettings(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService PostOrderExternalVetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.PostOrderExternalVetting(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService PutExternalVettingRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.PutExternalVettingRecord(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService ResendBrand2faEmail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		httpRes, err := apiClient.BrandsAPI.ResendBrand2faEmail(context.Background(), brandId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService RevetBrand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.RevetBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrandsAPIService UpdateBrand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.BrandsAPI.UpdateBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
