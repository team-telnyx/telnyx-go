/*
Telnyx API

Testing PhoneNumberOrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_PhoneNumberOrdersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PhoneNumberOrdersAPIService CancelSubNumberOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subNumberOrderId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.CancelSubNumberOrder(context.Background(), subNumberOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService CreateComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.CreateComment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService CreateNumberOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.CreateNumberOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService GetNumberOrderPhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var numberOrderPhoneNumberId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.GetNumberOrderPhoneNumber(context.Background(), numberOrderPhoneNumberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService GetSubNumberOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subNumberOrderId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.GetSubNumberOrder(context.Background(), subNumberOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService ListComments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.ListComments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService ListNumberOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.ListNumberOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService ListSubNumberOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.ListSubNumberOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService MarkCommentRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.MarkCommentRead(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService RetrieveComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.RetrieveComment(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService RetrieveNumberOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var numberOrderId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.RetrieveNumberOrder(context.Background(), numberOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService RetrieveOrderPhoneNumbers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.RetrieveOrderPhoneNumbers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService UpdateNumberOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var numberOrderId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.UpdateNumberOrder(context.Background(), numberOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService UpdateNumberOrderPhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var numberOrderPhoneNumberId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.UpdateNumberOrderPhoneNumber(context.Background(), numberOrderPhoneNumberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PhoneNumberOrdersAPIService UpdateSubNumberOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subNumberOrderId string

		resp, httpRes, err := apiClient.PhoneNumberOrdersAPI.UpdateSubNumberOrder(context.Background(), subNumberOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
