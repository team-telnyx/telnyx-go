/*
Telnyx API

Testing ExternalConnectionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_ExternalConnectionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExternalConnectionsAPIService CreateExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.CreateExternalConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService CreateExternalConnectionUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.CreateExternalConnectionUpload(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService DeleteExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.DeleteExternalConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService DeleteExternalConnectionLogMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.DeleteExternalConnectionLogMessage(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnectionCivicAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var addressId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnectionCivicAddress(context.Background(), id, addressId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnectionLogMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnectionLogMessage(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnectionPhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var phoneNumberId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnectionPhoneNumber(context.Background(), id, phoneNumberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnectionRelease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var releaseId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnectionRelease(context.Background(), id, releaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnectionUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ticketId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnectionUpload(context.Background(), id, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService GetExternalConnectionUploadsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.GetExternalConnectionUploadsStatus(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService ListCivicAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.ListCivicAddresses(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService ListExternalConnectionLogMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.ListExternalConnectionLogMessages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService ListExternalConnectionPhoneNumbers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.ListExternalConnectionPhoneNumbers(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService ListExternalConnectionReleases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.ListExternalConnectionReleases(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService ListExternalConnectionUploads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.ListExternalConnectionUploads(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService ListExternalConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.ListExternalConnections(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService OperatorConnectRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.OperatorConnectRefresh(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService RefreshExternalConnectionUploads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.RefreshExternalConnectionUploads(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService RetryUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ticketId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.RetryUpload(context.Background(), id, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService UpdateExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.UpdateExternalConnection(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService UpdateExternalConnectionPhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var phoneNumberId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.UpdateExternalConnectionPhoneNumber(context.Background(), id, phoneNumberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionsAPIService UpdateLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var locationId string

		resp, httpRes, err := apiClient.ExternalConnectionsAPI.UpdateLocation(context.Background(), id, locationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
