/*
Telnyx API

Testing ConversationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_ConversationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConversationsAPIService CreateNewConversationPublicConversationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConversationsAPI.CreateNewConversationPublicConversationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConversationsAPIService DeleteConversationByIdPublicConversationsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		httpRes, err := apiClient.ConversationsAPI.DeleteConversationByIdPublicConversationsDelete(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConversationsAPIService GetConversationByIdPublicConversationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.ConversationsAPI.GetConversationByIdPublicConversationsGet(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConversationsAPIService GetConversationsPublicConversationIdInsightsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.ConversationsAPI.GetConversationsPublicConversationIdInsightsGet(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConversationsAPIService GetConversationsPublicConversationIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.ConversationsAPI.GetConversationsPublicConversationIdMessagesGet(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConversationsAPIService GetConversationsPublicConversationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConversationsAPI.GetConversationsPublicConversationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConversationsAPIService UpdateConversationByIdPublicConversationsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.ConversationsAPI.UpdateConversationByIdPublicConversationsPut(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
