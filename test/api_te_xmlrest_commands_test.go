/*
Telnyx API

Testing TeXMLRESTCommandsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_TeXMLRESTCommandsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TeXMLRESTCommandsAPIService CreateTexmlSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.CreateTexmlSecret(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService DeleteTeXMLCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var recordingSid string

		httpRes, err := apiClient.TeXMLRESTCommandsAPI.DeleteTeXMLCallRecording(context.Background(), accountSid, recordingSid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService DeleteTeXMLRecordingTranscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var recordingTranscriptionSid string

		httpRes, err := apiClient.TeXMLRESTCommandsAPI.DeleteTeXMLRecordingTranscription(context.Background(), accountSid, recordingTranscriptionSid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService DeleteTexmlConferenceParticipant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string
		var callSid string

		httpRes, err := apiClient.TeXMLRESTCommandsAPI.DeleteTexmlConferenceParticipant(context.Background(), accountSid, conferenceSid, callSid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService DeprecatedInitiateTexmlCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.DeprecatedInitiateTexmlCall(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService DeprecatedUpdateTexmlCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.DeprecatedUpdateTexmlCall(context.Background(), callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService DialTexmlConferenceParticipant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.DialTexmlConferenceParticipant(context.Background(), accountSid, conferenceSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService FetchTeXMLCallRecordings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.FetchTeXMLCallRecordings(context.Background(), accountSid, callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService FetchTeXMLConferenceRecordings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.FetchTeXMLConferenceRecordings(context.Background(), accountSid, conferenceSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTeXMLCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var recordingSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTeXMLCallRecording(context.Background(), accountSid, recordingSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTeXMLCallRecordings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTeXMLCallRecordings(context.Background(), accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTeXMLRecordingTranscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var recordingTranscriptionSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTeXMLRecordingTranscription(context.Background(), accountSid, recordingTranscriptionSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTeXMLRecordingTranscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTeXMLRecordingTranscriptions(context.Background(), accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callSid string
		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlCall(context.Background(), callSid, accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlCalls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlCalls(context.Background(), accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlConference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlConference(context.Background(), accountSid, conferenceSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlConferenceParticipant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string
		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlConferenceParticipant(context.Background(), accountSid, conferenceSid, callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlConferenceParticipants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlConferenceParticipants(context.Background(), accountSid, conferenceSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlConferenceRecordings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlConferenceRecordings(context.Background(), accountSid, conferenceSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService GetTexmlConferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.GetTexmlConferences(context.Background(), accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService InitiateTexmlCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.InitiateTexmlCall(context.Background(), accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService StartTeXMLCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.StartTeXMLCallRecording(context.Background(), accountSid, callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService StartTeXMLCallStreaming", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.StartTeXMLCallStreaming(context.Background(), accountSid, callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService StartTeXMLSiprecSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.StartTeXMLSiprecSession(context.Background(), accountSid, callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService UpdateTeXMLCallRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string
		var recordingSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.UpdateTeXMLCallRecording(context.Background(), accountSid, callSid, recordingSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService UpdateTeXMLCallStreaming", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string
		var streamingSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.UpdateTeXMLCallStreaming(context.Background(), accountSid, callSid, streamingSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService UpdateTeXMLSiprecSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var callSid string
		var siprecSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.UpdateTeXMLSiprecSession(context.Background(), accountSid, callSid, siprecSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService UpdateTexmlCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var callSid string
		var accountSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.UpdateTexmlCall(context.Background(), callSid, accountSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService UpdateTexmlConference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.UpdateTexmlConference(context.Background(), accountSid, conferenceSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeXMLRESTCommandsAPIService UpdateTexmlConferenceParticipant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountSid string
		var conferenceSid string
		var callSid string

		resp, httpRes, err := apiClient.TeXMLRESTCommandsAPI.UpdateTexmlConferenceParticipant(context.Background(), accountSid, conferenceSid, callSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
