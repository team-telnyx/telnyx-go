/*
Telnyx API

Testing PortingOrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_PortingOrdersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PortingOrdersAPIService ActivatePortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ActivatePortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CancelPortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.CancelPortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ConfirmPortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ConfirmPortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreateAdditionalDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreateAdditionalDocuments(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreateLoaConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreateLoaConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreatePhoneNumberConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreatePhoneNumberConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreatePortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreatePortingOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreatePortingOrderComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreatePortingOrderComment(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreatePortingPhoneNumberBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portingOrderId string

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreatePortingPhoneNumberBlock(context.Background(), portingOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreatePortingPhoneNumberExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portingOrderId string

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreatePortingPhoneNumberExtension(context.Background(), portingOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService CreatePortingReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.CreatePortingReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService DeleteAdditionalDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var additionalDocumentId string

		httpRes, err := apiClient.PortingOrdersAPI.DeleteAdditionalDocument(context.Background(), id, additionalDocumentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService DeleteLoaConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PortingOrdersAPI.DeleteLoaConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService DeletePortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PortingOrdersAPI.DeletePortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService DeletePortingPhoneNumberBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portingOrderId string
		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.DeletePortingPhoneNumberBlock(context.Background(), portingOrderId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService DeletePortingPhoneNumberExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portingOrderId string
		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.DeletePortingPhoneNumberExtension(context.Background(), portingOrderId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService GetLoaConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.GetLoaConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService GetPortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.GetPortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService GetPortingOrderLoaTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.GetPortingOrderLoaTemplate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService GetPortingOrderSubRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.GetPortingOrderSubRequest(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService GetPortingOrdersActivationJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var activationJobId string

		resp, httpRes, err := apiClient.PortingOrdersAPI.GetPortingOrdersActivationJob(context.Background(), id, activationJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService GetPortingReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.GetPortingReport(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListAdditionalDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListAdditionalDocuments(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListAllowedFocWindows", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListAllowedFocWindows(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListExceptionTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListExceptionTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListLoaConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListLoaConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPhoneNumberConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPhoneNumberConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingOrderActivationJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingOrderActivationJobs(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingOrderComments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingOrderComments(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingOrderRequirements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingOrderRequirements(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingPhoneNumberBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portingOrderId string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingPhoneNumberBlocks(context.Background(), portingOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingPhoneNumberExtensions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var portingOrderId string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingPhoneNumberExtensions(context.Background(), portingOrderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingPhoneNumbers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingPhoneNumbers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListPortingReports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListPortingReports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ListVerificationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ListVerificationCodes(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService PreviewLoaConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.PreviewLoaConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService PreviewLoaConfigurationParams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PortingOrdersAPI.PreviewLoaConfigurationParams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService RepublishPortingEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PortingOrdersAPI.RepublishPortingEvent(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService SendPortingVerificationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PortingOrdersAPI.SendPortingVerificationCodes(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService SharePortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.SharePortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService ShowPortingEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.ShowPortingEvent(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService UpdateLoaConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.UpdateLoaConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService UpdatePortingOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.UpdatePortingOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService UpdatePortingOrdersActivationJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var activationJobId string

		resp, httpRes, err := apiClient.PortingOrdersAPI.UpdatePortingOrdersActivationJob(context.Background(), id, activationJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PortingOrdersAPIService VerifyPortingVerificationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PortingOrdersAPI.VerifyPortingVerificationCodes(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
