/*
Telnyx API

Testing CampaignAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_CampaignAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CampaignAPIService AcceptCampaign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.AcceptCampaign(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService DeactivateCampaign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.DeactivateCampaign(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaign(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaignCost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaignCost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaignMnoMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaignMnoMetadata(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaignOperationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaignOperationStatus(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaignOsrAttributes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaignOsrAttributes(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaignSharingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaignSharingStatus(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetCampaigns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CampaignAPI.GetCampaigns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService GetUsecaseQualification", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var usecase string
		var brandId string

		resp, httpRes, err := apiClient.CampaignAPI.GetUsecaseQualification(context.Background(), usecase, brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService PostCampaign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CampaignAPI.PostCampaign(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignAPIService UpdateCampaign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignAPI.UpdateCampaign(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
