/*
Telnyx API

Testing AssistantsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package telnyx

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/telnyx/telnyx-go"
)

func Test_telnyx_AssistantsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssistantsAPIService CreateNewAssistantPublicAssistantsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AssistantsAPI.CreateNewAssistantPublicAssistantsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService CreateScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.CreateScheduledEvent(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService DeleteAssistantPublicAssistantsAssistantIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.DeleteAssistantPublicAssistantsAssistantIdDelete(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService DeleteScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string
		var eventId string

		resp, httpRes, err := apiClient.AssistantsAPI.DeleteScheduledEvent(context.Background(), assistantId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantPublicAssistantsAssistantIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantPublicAssistantsAssistantIdGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantTexmlPublicAssistantsAssistantIdTexmlGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantTexmlPublicAssistantsAssistantIdTexmlGet(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetAssistantsPublicAssistantsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AssistantsAPI.GetAssistantsPublicAssistantsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string
		var eventId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetScheduledEvent(context.Background(), assistantId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService GetScheduledEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.GetScheduledEvents(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssistantsAPIService UpdateAssistantPublicAssistantsAssistantIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var assistantId string

		resp, httpRes, err := apiClient.AssistantsAPI.UpdateAssistantPublicAssistantsAssistantIdPost(context.Background(), assistantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
