// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package telnyx

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"slices"

	"github.com/team-telnyx/telnyx-go/internal/apijson"
	"github.com/team-telnyx/telnyx-go/internal/apiquery"
	"github.com/team-telnyx/telnyx-go/internal/requestconfig"
	"github.com/team-telnyx/telnyx-go/option"
	"github.com/team-telnyx/telnyx-go/packages/param"
	"github.com/team-telnyx/telnyx-go/packages/respjson"
)

// PartnerCampaignService contains methods and other services that help with
// interacting with the telnyx API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewPartnerCampaignService] method instead.
type PartnerCampaignService struct {
	Options []option.RequestOption
}

// NewPartnerCampaignService generates a new service that applies the given options
// to each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewPartnerCampaignService(opts ...option.RequestOption) (r PartnerCampaignService) {
	r = PartnerCampaignService{}
	r.Options = opts
	return
}

// Retrieve campaign details by `campaignId`.
func (r *PartnerCampaignService) Get(ctx context.Context, campaignID string, opts ...option.RequestOption) (res *TelnyxDownstreamCampaign, err error) {
	opts = slices.Concat(r.Options, opts)
	if campaignID == "" {
		err = errors.New("missing required campaignId parameter")
		return
	}
	path := fmt.Sprintf("partner_campaigns/%s", campaignID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// Update campaign details by `campaignId`. **Please note:** Only webhook urls are
// editable.
func (r *PartnerCampaignService) Update(ctx context.Context, campaignID string, body PartnerCampaignUpdateParams, opts ...option.RequestOption) (res *TelnyxDownstreamCampaign, err error) {
	opts = slices.Concat(r.Options, opts)
	if campaignID == "" {
		err = errors.New("missing required campaignId parameter")
		return
	}
	path := fmt.Sprintf("partner_campaigns/%s", campaignID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPatch, path, body, &res, opts...)
	return
}

// Retrieve all partner campaigns you have shared to Telnyx in a paginated fashion.
//
// This endpoint is currently limited to only returning shared campaigns that
// Telnyx has accepted. In other words, shared but pending campaigns are currently
// omitted from the response from this endpoint.
func (r *PartnerCampaignService) List(ctx context.Context, query PartnerCampaignListParams, opts ...option.RequestOption) (res *PartnerCampaignListResponse, err error) {
	opts = slices.Concat(r.Options, opts)
	path := "partner_campaigns"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Get all partner campaigns you have shared to Telnyx in a paginated fashion
//
// This endpoint is currently limited to only returning shared campaigns that
// Telnyx has accepted. In other words, shared but pending campaigns are currently
// omitted from the response from this endpoint.
func (r *PartnerCampaignService) ListSharedByMe(ctx context.Context, query PartnerCampaignListSharedByMeParams, opts ...option.RequestOption) (res *PartnerCampaignListSharedByMeResponse, err error) {
	opts = slices.Concat(r.Options, opts)
	path := "partnerCampaign/sharedByMe"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Get Sharing Status
func (r *PartnerCampaignService) GetSharingStatus(ctx context.Context, campaignID string, opts ...option.RequestOption) (res *PartnerCampaignGetSharingStatusResponse, err error) {
	opts = slices.Concat(r.Options, opts)
	if campaignID == "" {
		err = errors.New("missing required campaignId parameter")
		return
	}
	path := fmt.Sprintf("partnerCampaign/%s/sharing", campaignID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, &res, opts...)
	return
}

// Campaign is generated by the 10DLC registry once the corresponding campaign
// request is approved. Each campaign is assigned a unique identifier -
// **campaignId**. Once a campaign is activated, limited information is published
// to the NetNumber OSR service for consumption by members of the ecosystem. When a
// campaign is suspended(reversible) or expired(non-reversible), campaign data is
// deleted from the OSR service.
type TelnyxDownstreamCampaign struct {
	// Unique identifier assigned to the brand by the registry.
	TcrBrandID string `json:"tcrBrandId,required"`
	// Unique identifier assigned to the campaign by the registry.
	TcrCampaignID string `json:"tcrCampaignId,required"`
	// Age gated content in campaign.
	AgeGated bool `json:"ageGated"`
	// Number of phone numbers associated with the campaign
	AssignedPhoneNumbersCount float64 `json:"assignedPhoneNumbersCount"`
	// Display or marketing name of the brand.
	BrandDisplayName string `json:"brandDisplayName"`
	// Campaign status
	//
	// Any of "TCR_PENDING", "TCR_SUSPENDED", "TCR_EXPIRED", "TCR_ACCEPTED",
	// "TCR_FAILED", "TELNYX_ACCEPTED", "TELNYX_FAILED", "MNO_PENDING", "MNO_ACCEPTED",
	// "MNO_REJECTED", "MNO_PROVISIONED", "MNO_PROVISIONING_FAILED".
	CampaignStatus TelnyxDownstreamCampaignCampaignStatus `json:"campaignStatus"`
	// Date and time that the brand was created at.
	CreatedAt string `json:"createdAt"`
	// Summary description of this campaign.
	Description string `json:"description"`
	// Direct lending or loan arrangement.
	DirectLending bool `json:"directLending"`
	// Does message generated by the campaign include URL link in SMS?
	EmbeddedLink bool `json:"embeddedLink"`
	// Sample of an embedded link that will be sent to subscribers.
	EmbeddedLinkSample string `json:"embeddedLinkSample"`
	// Does message generated by the campaign include phone number in SMS?
	EmbeddedPhone bool `json:"embeddedPhone"`
	// Failure reasons if campaign submission failed
	FailureReasons string `json:"failureReasons"`
	// Subscriber help keywords. Multiple keywords are comma separated without space.
	HelpKeywords string `json:"helpKeywords"`
	// Help message of the campaign.
	HelpMessage string `json:"helpMessage"`
	// Indicates whether the campaign has a T-Mobile number pool ID associated with it.
	IsNumberPoolingEnabled bool `json:"isNumberPoolingEnabled"`
	// Message flow description.
	MessageFlow string `json:"messageFlow"`
	// Does campaign utilize pool of phone numbers?
	NumberPool bool `json:"numberPool"`
	// Subscriber opt-in keywords. Multiple keywords are comma separated without space.
	OptinKeywords string `json:"optinKeywords"`
	// Subscriber opt-in message.
	OptinMessage string `json:"optinMessage"`
	// Subscriber opt-out keywords. Multiple keywords are comma separated without
	// space.
	OptoutKeywords string `json:"optoutKeywords"`
	// Subscriber opt-out message.
	OptoutMessage string `json:"optoutMessage"`
	// Link to the campaign's privacy policy.
	PrivacyPolicyLink string `json:"privacyPolicyLink"`
	// Message sample. Some campaign tiers require 1 or more message samples.
	Sample1 string `json:"sample1"`
	// Message sample. Some campaign tiers require 2 or more message samples.
	Sample2 string `json:"sample2"`
	// Message sample. Some campaign tiers require 3 or more message samples.
	Sample3 string `json:"sample3"`
	// Message sample. Some campaign tiers require 4 or more message samples.
	Sample4 string `json:"sample4"`
	// Message sample. Some campaign tiers require 5 or more message samples.
	Sample5 string `json:"sample5"`
	// Does campaign require subscriber to opt-in before SMS is sent to subscriber?
	SubscriberOptin bool `json:"subscriberOptin"`
	// Does campaign support subscriber opt-out keyword(s)?
	SubscriberOptout bool `json:"subscriberOptout"`
	// Campaign sub-usecases. Must be of defined valid sub-usecase types. Use
	// `/registry/enum/usecase` operation to retrieve list of valid sub-usecases
	SubUsecases []string `json:"subUsecases"`
	// Is terms & conditions accepted?
	TermsAndConditions bool `json:"termsAndConditions"`
	// Link to the campaign's terms and conditions.
	TermsAndConditionsLink string `json:"termsAndConditionsLink"`
	// Date and time that the brand was last updated at.
	UpdatedAt string `json:"updatedAt"`
	// Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
	// operation to retrieve usecases available for given brand.
	Usecase string `json:"usecase"`
	// Failover webhook to which campaign status updates are sent.
	WebhookFailoverURL string `json:"webhookFailoverURL"`
	// Webhook to which campaign status updates are sent.
	WebhookURL string `json:"webhookURL"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		TcrBrandID                respjson.Field
		TcrCampaignID             respjson.Field
		AgeGated                  respjson.Field
		AssignedPhoneNumbersCount respjson.Field
		BrandDisplayName          respjson.Field
		CampaignStatus            respjson.Field
		CreatedAt                 respjson.Field
		Description               respjson.Field
		DirectLending             respjson.Field
		EmbeddedLink              respjson.Field
		EmbeddedLinkSample        respjson.Field
		EmbeddedPhone             respjson.Field
		FailureReasons            respjson.Field
		HelpKeywords              respjson.Field
		HelpMessage               respjson.Field
		IsNumberPoolingEnabled    respjson.Field
		MessageFlow               respjson.Field
		NumberPool                respjson.Field
		OptinKeywords             respjson.Field
		OptinMessage              respjson.Field
		OptoutKeywords            respjson.Field
		OptoutMessage             respjson.Field
		PrivacyPolicyLink         respjson.Field
		Sample1                   respjson.Field
		Sample2                   respjson.Field
		Sample3                   respjson.Field
		Sample4                   respjson.Field
		Sample5                   respjson.Field
		SubscriberOptin           respjson.Field
		SubscriberOptout          respjson.Field
		SubUsecases               respjson.Field
		TermsAndConditions        respjson.Field
		TermsAndConditionsLink    respjson.Field
		UpdatedAt                 respjson.Field
		Usecase                   respjson.Field
		WebhookFailoverURL        respjson.Field
		WebhookURL                respjson.Field
		ExtraFields               map[string]respjson.Field
		raw                       string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r TelnyxDownstreamCampaign) RawJSON() string { return r.JSON.raw }
func (r *TelnyxDownstreamCampaign) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Campaign status
type TelnyxDownstreamCampaignCampaignStatus string

const (
	TelnyxDownstreamCampaignCampaignStatusTcrPending            TelnyxDownstreamCampaignCampaignStatus = "TCR_PENDING"
	TelnyxDownstreamCampaignCampaignStatusTcrSuspended          TelnyxDownstreamCampaignCampaignStatus = "TCR_SUSPENDED"
	TelnyxDownstreamCampaignCampaignStatusTcrExpired            TelnyxDownstreamCampaignCampaignStatus = "TCR_EXPIRED"
	TelnyxDownstreamCampaignCampaignStatusTcrAccepted           TelnyxDownstreamCampaignCampaignStatus = "TCR_ACCEPTED"
	TelnyxDownstreamCampaignCampaignStatusTcrFailed             TelnyxDownstreamCampaignCampaignStatus = "TCR_FAILED"
	TelnyxDownstreamCampaignCampaignStatusTelnyxAccepted        TelnyxDownstreamCampaignCampaignStatus = "TELNYX_ACCEPTED"
	TelnyxDownstreamCampaignCampaignStatusTelnyxFailed          TelnyxDownstreamCampaignCampaignStatus = "TELNYX_FAILED"
	TelnyxDownstreamCampaignCampaignStatusMnoPending            TelnyxDownstreamCampaignCampaignStatus = "MNO_PENDING"
	TelnyxDownstreamCampaignCampaignStatusMnoAccepted           TelnyxDownstreamCampaignCampaignStatus = "MNO_ACCEPTED"
	TelnyxDownstreamCampaignCampaignStatusMnoRejected           TelnyxDownstreamCampaignCampaignStatus = "MNO_REJECTED"
	TelnyxDownstreamCampaignCampaignStatusMnoProvisioned        TelnyxDownstreamCampaignCampaignStatus = "MNO_PROVISIONED"
	TelnyxDownstreamCampaignCampaignStatusMnoProvisioningFailed TelnyxDownstreamCampaignCampaignStatus = "MNO_PROVISIONING_FAILED"
)

type PartnerCampaignListResponse struct {
	Page         int64                      `json:"page"`
	Records      []TelnyxDownstreamCampaign `json:"records"`
	TotalRecords int64                      `json:"totalRecords"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Page         respjson.Field
		Records      respjson.Field
		TotalRecords respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartnerCampaignListResponse) RawJSON() string { return r.JSON.raw }
func (r *PartnerCampaignListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type PartnerCampaignListSharedByMeResponse struct {
	Page         int64                                         `json:"page"`
	Records      []PartnerCampaignListSharedByMeResponseRecord `json:"records"`
	TotalRecords int64                                         `json:"totalRecords"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Page         respjson.Field
		Records      respjson.Field
		TotalRecords respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartnerCampaignListSharedByMeResponse) RawJSON() string { return r.JSON.raw }
func (r *PartnerCampaignListSharedByMeResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Campaign is generated by the 10DLC registry once the corresponding campaign
// request is approved. Each campaign is assigned a unique identifier -
// **campaignId**. Once a campaign is activated, limited information is published
// to the NetNumber OSR service for consumption by members of the ecosystem. When a
// campaign is suspended(reversible) or expired(non-reversible), campaign data is
// deleted from the OSR service. Most attributes of campaignare immutable,
// including **usecase**, **vertical**, **brandId** and **cspId**.
type PartnerCampaignListSharedByMeResponseRecord struct {
	// Alphanumeric identifier of the brand associated with this campaign.
	BrandID string `json:"brandId,required"`
	// Alphanumeric identifier assigned by the registry for a campaign. This identifier
	// is required by the NetNumber OSR SMS enabling process of 10DLC.
	CampaignID string `json:"campaignId,required"`
	// Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
	// operation to retrieve usecases available for given brand.
	Usecase string `json:"usecase,required"`
	// Unix timestamp when campaign was created.
	CreateDate string `json:"createDate"`
	// Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created
	// campaign defaults to ACTIVE status.
	Status string `json:"status"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BrandID     respjson.Field
		CampaignID  respjson.Field
		Usecase     respjson.Field
		CreateDate  respjson.Field
		Status      respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartnerCampaignListSharedByMeResponseRecord) RawJSON() string { return r.JSON.raw }
func (r *PartnerCampaignListSharedByMeResponseRecord) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type PartnerCampaignGetSharingStatusResponse map[string]CampaignSharingStatus

type PartnerCampaignUpdateParams struct {
	// Webhook failover to which campaign status updates are sent.
	WebhookFailoverURL param.Opt[string] `json:"webhookFailoverURL,omitzero"`
	// Webhook to which campaign status updates are sent.
	WebhookURL param.Opt[string] `json:"webhookURL,omitzero"`
	paramObj
}

func (r PartnerCampaignUpdateParams) MarshalJSON() (data []byte, err error) {
	type shadow PartnerCampaignUpdateParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PartnerCampaignUpdateParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type PartnerCampaignListParams struct {
	// The 1-indexed page number to get. The default value is `1`.
	Page param.Opt[int64] `query:"page,omitzero" json:"-"`
	// The amount of records per page, limited to between 1 and 500 inclusive. The
	// default value is `10`.
	RecordsPerPage param.Opt[int64] `query:"recordsPerPage,omitzero" json:"-"`
	// Specifies the sort order for results. If not given, results are sorted by
	// createdAt in descending order.
	//
	// Any of "assignedPhoneNumbersCount", "-assignedPhoneNumbersCount",
	// "brandDisplayName", "-brandDisplayName", "tcrBrandId", "-tcrBranId",
	// "tcrCampaignId", "-tcrCampaignId", "createdAt", "-createdAt", "campaignStatus",
	// "-campaignStatus".
	Sort PartnerCampaignListParamsSort `query:"sort,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [PartnerCampaignListParams]'s query parameters as
// `url.Values`.
func (r PartnerCampaignListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

// Specifies the sort order for results. If not given, results are sorted by
// createdAt in descending order.
type PartnerCampaignListParamsSort string

const (
	PartnerCampaignListParamsSortAssignedPhoneNumbersCount     PartnerCampaignListParamsSort = "assignedPhoneNumbersCount"
	PartnerCampaignListParamsSortAssignedPhoneNumbersCountDesc PartnerCampaignListParamsSort = "-assignedPhoneNumbersCount"
	PartnerCampaignListParamsSortBrandDisplayName              PartnerCampaignListParamsSort = "brandDisplayName"
	PartnerCampaignListParamsSortBrandDisplayNameDesc          PartnerCampaignListParamsSort = "-brandDisplayName"
	PartnerCampaignListParamsSortTcrBrandID                    PartnerCampaignListParamsSort = "tcrBrandId"
	PartnerCampaignListParamsSortTcrBranIDDesc                 PartnerCampaignListParamsSort = "-tcrBranId"
	PartnerCampaignListParamsSortTcrCampaignID                 PartnerCampaignListParamsSort = "tcrCampaignId"
	PartnerCampaignListParamsSortTcrCampaignIDDesc             PartnerCampaignListParamsSort = "-tcrCampaignId"
	PartnerCampaignListParamsSortCreatedAt                     PartnerCampaignListParamsSort = "createdAt"
	PartnerCampaignListParamsSortCreatedAtDesc                 PartnerCampaignListParamsSort = "-createdAt"
	PartnerCampaignListParamsSortCampaignStatus                PartnerCampaignListParamsSort = "campaignStatus"
	PartnerCampaignListParamsSortCampaignStatusDesc            PartnerCampaignListParamsSort = "-campaignStatus"
)

type PartnerCampaignListSharedByMeParams struct {
	// The 1-indexed page number to get. The default value is `1`.
	Page param.Opt[int64] `query:"page,omitzero" json:"-"`
	// The amount of records per page, limited to between 1 and 500 inclusive. The
	// default value is `10`.
	RecordsPerPage param.Opt[int64] `query:"recordsPerPage,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [PartnerCampaignListSharedByMeParams]'s query parameters as
// `url.Values`.
func (r PartnerCampaignListSharedByMeParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}
