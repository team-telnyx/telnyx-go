/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardDeviceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardDeviceDetails{}

// SIMCardDeviceDetails struct for SIMCardDeviceDetails
type SIMCardDeviceDetails struct {
	RecordType *string `json:"record_type,omitempty"`
	// IMEI of the device where the SIM card is being used in.
	Imei *string `json:"imei,omitempty"`
	// Brand of the device where the SIM card is being used in.
	ModelName *string `json:"model_name,omitempty"`
	// Brand of the device where the SIM card is being used in.
	BrandName *string `json:"brand_name,omitempty"`
	// Type of the device where the SIM card is being used in.
	DeviceType *string `json:"device_type,omitempty"`
	// Operating system of the device where the SIM card is being used in.
	OperatingSystem *string `json:"operating_system,omitempty"`
}

// NewSIMCardDeviceDetails instantiates a new SIMCardDeviceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardDeviceDetails() *SIMCardDeviceDetails {
	this := SIMCardDeviceDetails{}
	return &this
}

// NewSIMCardDeviceDetailsWithDefaults instantiates a new SIMCardDeviceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardDeviceDetailsWithDefaults() *SIMCardDeviceDetails {
	this := SIMCardDeviceDetails{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SIMCardDeviceDetails) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardDeviceDetails) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SIMCardDeviceDetails) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SIMCardDeviceDetails) SetRecordType(v string) {
	o.RecordType = &v
}

// GetImei returns the Imei field value if set, zero value otherwise.
func (o *SIMCardDeviceDetails) GetImei() string {
	if o == nil || IsNil(o.Imei) {
		var ret string
		return ret
	}
	return *o.Imei
}

// GetImeiOk returns a tuple with the Imei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardDeviceDetails) GetImeiOk() (*string, bool) {
	if o == nil || IsNil(o.Imei) {
		return nil, false
	}
	return o.Imei, true
}

// HasImei returns a boolean if a field has been set.
func (o *SIMCardDeviceDetails) HasImei() bool {
	if o != nil && !IsNil(o.Imei) {
		return true
	}

	return false
}

// SetImei gets a reference to the given string and assigns it to the Imei field.
func (o *SIMCardDeviceDetails) SetImei(v string) {
	o.Imei = &v
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *SIMCardDeviceDetails) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardDeviceDetails) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *SIMCardDeviceDetails) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *SIMCardDeviceDetails) SetModelName(v string) {
	o.ModelName = &v
}

// GetBrandName returns the BrandName field value if set, zero value otherwise.
func (o *SIMCardDeviceDetails) GetBrandName() string {
	if o == nil || IsNil(o.BrandName) {
		var ret string
		return ret
	}
	return *o.BrandName
}

// GetBrandNameOk returns a tuple with the BrandName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardDeviceDetails) GetBrandNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrandName) {
		return nil, false
	}
	return o.BrandName, true
}

// HasBrandName returns a boolean if a field has been set.
func (o *SIMCardDeviceDetails) HasBrandName() bool {
	if o != nil && !IsNil(o.BrandName) {
		return true
	}

	return false
}

// SetBrandName gets a reference to the given string and assigns it to the BrandName field.
func (o *SIMCardDeviceDetails) SetBrandName(v string) {
	o.BrandName = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *SIMCardDeviceDetails) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardDeviceDetails) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *SIMCardDeviceDetails) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *SIMCardDeviceDetails) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *SIMCardDeviceDetails) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardDeviceDetails) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *SIMCardDeviceDetails) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *SIMCardDeviceDetails) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

func (o SIMCardDeviceDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardDeviceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Imei) {
		toSerialize["imei"] = o.Imei
	}
	if !IsNil(o.ModelName) {
		toSerialize["model_name"] = o.ModelName
	}
	if !IsNil(o.BrandName) {
		toSerialize["brand_name"] = o.BrandName
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	return toSerialize, nil
}

type NullableSIMCardDeviceDetails struct {
	value *SIMCardDeviceDetails
	isSet bool
}

func (v NullableSIMCardDeviceDetails) Get() *SIMCardDeviceDetails {
	return v.value
}

func (v *NullableSIMCardDeviceDetails) Set(val *SIMCardDeviceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardDeviceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardDeviceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardDeviceDetails(val *SIMCardDeviceDetails) *NullableSIMCardDeviceDetails {
	return &NullableSIMCardDeviceDetails{value: val, isSet: true}
}

func (v NullableSIMCardDeviceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardDeviceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


