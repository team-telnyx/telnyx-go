/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the GlobalIpHealthCheckType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalIpHealthCheckType{}

// GlobalIpHealthCheckType struct for GlobalIpHealthCheckType
type GlobalIpHealthCheckType struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// Global IP Health check type.
	HealthCheckType *string `json:"health_check_type,omitempty"`
	// Global IP Health check params.
	HealthCheckParams map[string]interface{} `json:"health_check_params,omitempty"`
}

// NewGlobalIpHealthCheckType instantiates a new GlobalIpHealthCheckType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalIpHealthCheckType() *GlobalIpHealthCheckType {
	this := GlobalIpHealthCheckType{}
	return &this
}

// NewGlobalIpHealthCheckTypeWithDefaults instantiates a new GlobalIpHealthCheckType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalIpHealthCheckTypeWithDefaults() *GlobalIpHealthCheckType {
	this := GlobalIpHealthCheckType{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *GlobalIpHealthCheckType) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpHealthCheckType) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *GlobalIpHealthCheckType) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *GlobalIpHealthCheckType) SetRecordType(v string) {
	o.RecordType = &v
}

// GetHealthCheckType returns the HealthCheckType field value if set, zero value otherwise.
func (o *GlobalIpHealthCheckType) GetHealthCheckType() string {
	if o == nil || IsNil(o.HealthCheckType) {
		var ret string
		return ret
	}
	return *o.HealthCheckType
}

// GetHealthCheckTypeOk returns a tuple with the HealthCheckType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpHealthCheckType) GetHealthCheckTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HealthCheckType) {
		return nil, false
	}
	return o.HealthCheckType, true
}

// HasHealthCheckType returns a boolean if a field has been set.
func (o *GlobalIpHealthCheckType) HasHealthCheckType() bool {
	if o != nil && !IsNil(o.HealthCheckType) {
		return true
	}

	return false
}

// SetHealthCheckType gets a reference to the given string and assigns it to the HealthCheckType field.
func (o *GlobalIpHealthCheckType) SetHealthCheckType(v string) {
	o.HealthCheckType = &v
}

// GetHealthCheckParams returns the HealthCheckParams field value if set, zero value otherwise.
func (o *GlobalIpHealthCheckType) GetHealthCheckParams() map[string]interface{} {
	if o == nil || IsNil(o.HealthCheckParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.HealthCheckParams
}

// GetHealthCheckParamsOk returns a tuple with the HealthCheckParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpHealthCheckType) GetHealthCheckParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.HealthCheckParams) {
		return map[string]interface{}{}, false
	}
	return o.HealthCheckParams, true
}

// HasHealthCheckParams returns a boolean if a field has been set.
func (o *GlobalIpHealthCheckType) HasHealthCheckParams() bool {
	if o != nil && !IsNil(o.HealthCheckParams) {
		return true
	}

	return false
}

// SetHealthCheckParams gets a reference to the given map[string]interface{} and assigns it to the HealthCheckParams field.
func (o *GlobalIpHealthCheckType) SetHealthCheckParams(v map[string]interface{}) {
	o.HealthCheckParams = v
}

func (o GlobalIpHealthCheckType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalIpHealthCheckType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.HealthCheckType) {
		toSerialize["health_check_type"] = o.HealthCheckType
	}
	if !IsNil(o.HealthCheckParams) {
		toSerialize["health_check_params"] = o.HealthCheckParams
	}
	return toSerialize, nil
}

type NullableGlobalIpHealthCheckType struct {
	value *GlobalIpHealthCheckType
	isSet bool
}

func (v NullableGlobalIpHealthCheckType) Get() *GlobalIpHealthCheckType {
	return v.value
}

func (v *NullableGlobalIpHealthCheckType) Set(val *GlobalIpHealthCheckType) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalIpHealthCheckType) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalIpHealthCheckType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalIpHealthCheckType(val *GlobalIpHealthCheckType) *NullableGlobalIpHealthCheckType {
	return &NullableGlobalIpHealthCheckType{value: val, isSet: true}
}

func (v NullableGlobalIpHealthCheckType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalIpHealthCheckType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


