/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// StockExchange (Required for public company) stock exchange.
type StockExchange string

// List of StockExchange
const (
	NONE StockExchange = "NONE"
	NASDAQ StockExchange = "NASDAQ"
	NYSE StockExchange = "NYSE"
	AMEX StockExchange = "AMEX"
	AMX StockExchange = "AMX"
	ASX StockExchange = "ASX"
	B3 StockExchange = "B3"
	BME StockExchange = "BME"
	BSE StockExchange = "BSE"
	FRA StockExchange = "FRA"
	ICEX StockExchange = "ICEX"
	JPX StockExchange = "JPX"
	JSE StockExchange = "JSE"
	KRX StockExchange = "KRX"
	LON StockExchange = "LON"
	NSE StockExchange = "NSE"
	OMX StockExchange = "OMX"
	SEHK StockExchange = "SEHK"
	SSE StockExchange = "SSE"
	STO StockExchange = "STO"
	SWX StockExchange = "SWX"
	SZSE StockExchange = "SZSE"
	TSX StockExchange = "TSX"
	TWSE StockExchange = "TWSE"
	VSE StockExchange = "VSE"
)

// All allowed values of StockExchange enum
var AllowedStockExchangeEnumValues = []StockExchange{
	"NONE",
	"NASDAQ",
	"NYSE",
	"AMEX",
	"AMX",
	"ASX",
	"B3",
	"BME",
	"BSE",
	"FRA",
	"ICEX",
	"JPX",
	"JSE",
	"KRX",
	"LON",
	"NSE",
	"OMX",
	"SEHK",
	"SSE",
	"STO",
	"SWX",
	"SZSE",
	"TSX",
	"TWSE",
	"VSE",
}

func (v *StockExchange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StockExchange(value)
	for _, existing := range AllowedStockExchangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StockExchange", value)
}

// NewStockExchangeFromValue returns a pointer to a valid StockExchange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStockExchangeFromValue(v string) (*StockExchange, error) {
	ev := StockExchange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StockExchange: valid values are %v", v, AllowedStockExchangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StockExchange) IsValid() bool {
	for _, existing := range AllowedStockExchangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StockExchange value
func (v StockExchange) Ptr() *StockExchange {
	return &v
}

type NullableStockExchange struct {
	value *StockExchange
	isSet bool
}

func (v NullableStockExchange) Get() *StockExchange {
	return v.value
}

func (v *NullableStockExchange) Set(val *StockExchange) {
	v.value = val
	v.isSet = true
}

func (v NullableStockExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableStockExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockExchange(val *StockExchange) *NullableStockExchange {
	return &NullableStockExchange{value: val, isSet: true}
}

func (v NullableStockExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

