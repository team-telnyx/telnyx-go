/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// StreamTrack Tracks to be included in the stream
type StreamTrack string

// List of StreamTrack
const (
	INBOUND_TRACK StreamTrack = "inbound_track"
	OUTBOUND_TRACK StreamTrack = "outbound_track"
	BOTH_TRACKS StreamTrack = "both_tracks"
)

// All allowed values of StreamTrack enum
var AllowedStreamTrackEnumValues = []StreamTrack{
	"inbound_track",
	"outbound_track",
	"both_tracks",
}

func (v *StreamTrack) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamTrack(value)
	for _, existing := range AllowedStreamTrackEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamTrack", value)
}

// NewStreamTrackFromValue returns a pointer to a valid StreamTrack
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamTrackFromValue(v string) (*StreamTrack, error) {
	ev := StreamTrack(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamTrack: valid values are %v", v, AllowedStreamTrackEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamTrack) IsValid() bool {
	for _, existing := range AllowedStreamTrackEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamTrack value
func (v StreamTrack) Ptr() *StreamTrack {
	return &v
}

type NullableStreamTrack struct {
	value *StreamTrack
	isSet bool
}

func (v NullableStreamTrack) Get() *StreamTrack {
	return v.value
}

func (v *NullableStreamTrack) Set(val *StreamTrack) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamTrack(val *StreamTrack) *NullableStreamTrack {
	return &NullableStreamTrack{value: val, isSet: true}
}

func (v NullableStreamTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

