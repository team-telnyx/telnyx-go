/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the WirelessConnectivityLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WirelessConnectivityLog{}

// WirelessConnectivityLog This object represents a wireless connectivity session log that happened through a SIM card. It aids in finding out potential problems when the SIM is not able to attach properly.
type WirelessConnectivityLog struct {
	RecordType *string `json:"record_type,omitempty"`
	// Uniquely identifies the session.
	Id *int32 `json:"id,omitempty"`
	// The identification UUID of the related SIM card resource.
	SimCardId *string `json:"sim_card_id,omitempty"`
	// The type of the session, 'registration' being the initial authentication session and 'data' the actual data transfer sessions.
	LogType *string `json:"log_type,omitempty"`
	// SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). <br/> Mobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR). 
	Imsi *string `json:"imsi,omitempty"`
	// The International Mobile Equipment Identity (or IMEI) is a number, usually unique, that identifies the device currently being used connect to the network.
	Imei *string `json:"imei,omitempty"`
	// It's a three decimal digit that identifies a country.<br/><br/> This code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.
	MobileCountryCode *string `json:"mobile_country_code,omitempty"`
	// It's a two to three decimal digits that identify a network.<br/><br/>  This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.
	MobileNetworkCode *string `json:"mobile_network_code,omitempty"`
	// ISO 8601 formatted date-time indicating when the session started.
	StartTime *string `json:"start_time,omitempty"`
	// ISO 8601 formatted date-time indicating when the session ended.
	StopTime *string `json:"stop_time,omitempty"`
	// ISO 8601 formatted date-time indicating when the record was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the last heartbeat to the device was successfully recorded.
	LastSeen *string `json:"last_seen,omitempty"`
	// The Access Point Name (APN) identifies the packet data network that a mobile data user wants to communicate with.
	Apn *string `json:"apn,omitempty"`
	// The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections. 
	Ipv4 *string `json:"ipv4,omitempty"`
	// The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections. 
	Ipv6 *string `json:"ipv6,omitempty"`
	// The radio technology the SIM card used during the session.
	RadioAccessTechnology *string `json:"radio_access_technology,omitempty"`
	// The state of the SIM card after when the session happened.
	State *string `json:"state,omitempty"`
	// The cell ID to which the SIM connected.
	CellId *string `json:"cell_id,omitempty"`
}

// NewWirelessConnectivityLog instantiates a new WirelessConnectivityLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWirelessConnectivityLog() *WirelessConnectivityLog {
	this := WirelessConnectivityLog{}
	return &this
}

// NewWirelessConnectivityLogWithDefaults instantiates a new WirelessConnectivityLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWirelessConnectivityLogWithDefaults() *WirelessConnectivityLog {
	this := WirelessConnectivityLog{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *WirelessConnectivityLog) SetRecordType(v string) {
	o.RecordType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WirelessConnectivityLog) SetId(v int32) {
	o.Id = &v
}

// GetSimCardId returns the SimCardId field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetSimCardId() string {
	if o == nil || IsNil(o.SimCardId) {
		var ret string
		return ret
	}
	return *o.SimCardId
}

// GetSimCardIdOk returns a tuple with the SimCardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetSimCardIdOk() (*string, bool) {
	if o == nil || IsNil(o.SimCardId) {
		return nil, false
	}
	return o.SimCardId, true
}

// HasSimCardId returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasSimCardId() bool {
	if o != nil && !IsNil(o.SimCardId) {
		return true
	}

	return false
}

// SetSimCardId gets a reference to the given string and assigns it to the SimCardId field.
func (o *WirelessConnectivityLog) SetSimCardId(v string) {
	o.SimCardId = &v
}

// GetLogType returns the LogType field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetLogType() string {
	if o == nil || IsNil(o.LogType) {
		var ret string
		return ret
	}
	return *o.LogType
}

// GetLogTypeOk returns a tuple with the LogType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetLogTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LogType) {
		return nil, false
	}
	return o.LogType, true
}

// HasLogType returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasLogType() bool {
	if o != nil && !IsNil(o.LogType) {
		return true
	}

	return false
}

// SetLogType gets a reference to the given string and assigns it to the LogType field.
func (o *WirelessConnectivityLog) SetLogType(v string) {
	o.LogType = &v
}

// GetImsi returns the Imsi field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetImsi() string {
	if o == nil || IsNil(o.Imsi) {
		var ret string
		return ret
	}
	return *o.Imsi
}

// GetImsiOk returns a tuple with the Imsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetImsiOk() (*string, bool) {
	if o == nil || IsNil(o.Imsi) {
		return nil, false
	}
	return o.Imsi, true
}

// HasImsi returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasImsi() bool {
	if o != nil && !IsNil(o.Imsi) {
		return true
	}

	return false
}

// SetImsi gets a reference to the given string and assigns it to the Imsi field.
func (o *WirelessConnectivityLog) SetImsi(v string) {
	o.Imsi = &v
}

// GetImei returns the Imei field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetImei() string {
	if o == nil || IsNil(o.Imei) {
		var ret string
		return ret
	}
	return *o.Imei
}

// GetImeiOk returns a tuple with the Imei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetImeiOk() (*string, bool) {
	if o == nil || IsNil(o.Imei) {
		return nil, false
	}
	return o.Imei, true
}

// HasImei returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasImei() bool {
	if o != nil && !IsNil(o.Imei) {
		return true
	}

	return false
}

// SetImei gets a reference to the given string and assigns it to the Imei field.
func (o *WirelessConnectivityLog) SetImei(v string) {
	o.Imei = &v
}

// GetMobileCountryCode returns the MobileCountryCode field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetMobileCountryCode() string {
	if o == nil || IsNil(o.MobileCountryCode) {
		var ret string
		return ret
	}
	return *o.MobileCountryCode
}

// GetMobileCountryCodeOk returns a tuple with the MobileCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetMobileCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MobileCountryCode) {
		return nil, false
	}
	return o.MobileCountryCode, true
}

// HasMobileCountryCode returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasMobileCountryCode() bool {
	if o != nil && !IsNil(o.MobileCountryCode) {
		return true
	}

	return false
}

// SetMobileCountryCode gets a reference to the given string and assigns it to the MobileCountryCode field.
func (o *WirelessConnectivityLog) SetMobileCountryCode(v string) {
	o.MobileCountryCode = &v
}

// GetMobileNetworkCode returns the MobileNetworkCode field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetMobileNetworkCode() string {
	if o == nil || IsNil(o.MobileNetworkCode) {
		var ret string
		return ret
	}
	return *o.MobileNetworkCode
}

// GetMobileNetworkCodeOk returns a tuple with the MobileNetworkCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetMobileNetworkCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MobileNetworkCode) {
		return nil, false
	}
	return o.MobileNetworkCode, true
}

// HasMobileNetworkCode returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasMobileNetworkCode() bool {
	if o != nil && !IsNil(o.MobileNetworkCode) {
		return true
	}

	return false
}

// SetMobileNetworkCode gets a reference to the given string and assigns it to the MobileNetworkCode field.
func (o *WirelessConnectivityLog) SetMobileNetworkCode(v string) {
	o.MobileNetworkCode = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *WirelessConnectivityLog) SetStartTime(v string) {
	o.StartTime = &v
}

// GetStopTime returns the StopTime field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetStopTime() string {
	if o == nil || IsNil(o.StopTime) {
		var ret string
		return ret
	}
	return *o.StopTime
}

// GetStopTimeOk returns a tuple with the StopTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetStopTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StopTime) {
		return nil, false
	}
	return o.StopTime, true
}

// HasStopTime returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasStopTime() bool {
	if o != nil && !IsNil(o.StopTime) {
		return true
	}

	return false
}

// SetStopTime gets a reference to the given string and assigns it to the StopTime field.
func (o *WirelessConnectivityLog) SetStopTime(v string) {
	o.StopTime = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *WirelessConnectivityLog) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetLastSeen() string {
	if o == nil || IsNil(o.LastSeen) {
		var ret string
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetLastSeenOk() (*string, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given string and assigns it to the LastSeen field.
func (o *WirelessConnectivityLog) SetLastSeen(v string) {
	o.LastSeen = &v
}

// GetApn returns the Apn field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetApn() string {
	if o == nil || IsNil(o.Apn) {
		var ret string
		return ret
	}
	return *o.Apn
}

// GetApnOk returns a tuple with the Apn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetApnOk() (*string, bool) {
	if o == nil || IsNil(o.Apn) {
		return nil, false
	}
	return o.Apn, true
}

// HasApn returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasApn() bool {
	if o != nil && !IsNil(o.Apn) {
		return true
	}

	return false
}

// SetApn gets a reference to the given string and assigns it to the Apn field.
func (o *WirelessConnectivityLog) SetApn(v string) {
	o.Apn = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetIpv4() string {
	if o == nil || IsNil(o.Ipv4) {
		var ret string
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given string and assigns it to the Ipv4 field.
func (o *WirelessConnectivityLog) SetIpv4(v string) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetIpv6() string {
	if o == nil || IsNil(o.Ipv6) {
		var ret string
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given string and assigns it to the Ipv6 field.
func (o *WirelessConnectivityLog) SetIpv6(v string) {
	o.Ipv6 = &v
}

// GetRadioAccessTechnology returns the RadioAccessTechnology field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetRadioAccessTechnology() string {
	if o == nil || IsNil(o.RadioAccessTechnology) {
		var ret string
		return ret
	}
	return *o.RadioAccessTechnology
}

// GetRadioAccessTechnologyOk returns a tuple with the RadioAccessTechnology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetRadioAccessTechnologyOk() (*string, bool) {
	if o == nil || IsNil(o.RadioAccessTechnology) {
		return nil, false
	}
	return o.RadioAccessTechnology, true
}

// HasRadioAccessTechnology returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasRadioAccessTechnology() bool {
	if o != nil && !IsNil(o.RadioAccessTechnology) {
		return true
	}

	return false
}

// SetRadioAccessTechnology gets a reference to the given string and assigns it to the RadioAccessTechnology field.
func (o *WirelessConnectivityLog) SetRadioAccessTechnology(v string) {
	o.RadioAccessTechnology = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *WirelessConnectivityLog) SetState(v string) {
	o.State = &v
}

// GetCellId returns the CellId field value if set, zero value otherwise.
func (o *WirelessConnectivityLog) GetCellId() string {
	if o == nil || IsNil(o.CellId) {
		var ret string
		return ret
	}
	return *o.CellId
}

// GetCellIdOk returns a tuple with the CellId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessConnectivityLog) GetCellIdOk() (*string, bool) {
	if o == nil || IsNil(o.CellId) {
		return nil, false
	}
	return o.CellId, true
}

// HasCellId returns a boolean if a field has been set.
func (o *WirelessConnectivityLog) HasCellId() bool {
	if o != nil && !IsNil(o.CellId) {
		return true
	}

	return false
}

// SetCellId gets a reference to the given string and assigns it to the CellId field.
func (o *WirelessConnectivityLog) SetCellId(v string) {
	o.CellId = &v
}

func (o WirelessConnectivityLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WirelessConnectivityLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SimCardId) {
		toSerialize["sim_card_id"] = o.SimCardId
	}
	if !IsNil(o.LogType) {
		toSerialize["log_type"] = o.LogType
	}
	if !IsNil(o.Imsi) {
		toSerialize["imsi"] = o.Imsi
	}
	if !IsNil(o.Imei) {
		toSerialize["imei"] = o.Imei
	}
	if !IsNil(o.MobileCountryCode) {
		toSerialize["mobile_country_code"] = o.MobileCountryCode
	}
	if !IsNil(o.MobileNetworkCode) {
		toSerialize["mobile_network_code"] = o.MobileNetworkCode
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.StopTime) {
		toSerialize["stop_time"] = o.StopTime
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.Apn) {
		toSerialize["apn"] = o.Apn
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.RadioAccessTechnology) {
		toSerialize["radio_access_technology"] = o.RadioAccessTechnology
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.CellId) {
		toSerialize["cell_id"] = o.CellId
	}
	return toSerialize, nil
}

type NullableWirelessConnectivityLog struct {
	value *WirelessConnectivityLog
	isSet bool
}

func (v NullableWirelessConnectivityLog) Get() *WirelessConnectivityLog {
	return v.value
}

func (v *NullableWirelessConnectivityLog) Set(val *WirelessConnectivityLog) {
	v.value = val
	v.isSet = true
}

func (v NullableWirelessConnectivityLog) IsSet() bool {
	return v.isSet
}

func (v *NullableWirelessConnectivityLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWirelessConnectivityLog(val *WirelessConnectivityLog) *NullableWirelessConnectivityLog {
	return &NullableWirelessConnectivityLog{value: val, isSet: true}
}

func (v NullableWirelessConnectivityLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWirelessConnectivityLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


