/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckAvailabilityToolParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckAvailabilityToolParams{}

// CheckAvailabilityToolParams struct for CheckAvailabilityToolParams
type CheckAvailabilityToolParams struct {
	// Event Type ID for which slots are being fetched. [cal.com](https://cal.com/docs/api-reference/v2/slots/get-available-slots#parameter-event-type-id)
	EventTypeId int32 `json:"event_type_id"`
	// Reference to an integration secret that contains your Cal.com API key. You would pass the `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your Cal.com API key.
	ApiKeyRef string `json:"api_key_ref"`
}

type _CheckAvailabilityToolParams CheckAvailabilityToolParams

// NewCheckAvailabilityToolParams instantiates a new CheckAvailabilityToolParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckAvailabilityToolParams(eventTypeId int32, apiKeyRef string) *CheckAvailabilityToolParams {
	this := CheckAvailabilityToolParams{}
	this.EventTypeId = eventTypeId
	this.ApiKeyRef = apiKeyRef
	return &this
}

// NewCheckAvailabilityToolParamsWithDefaults instantiates a new CheckAvailabilityToolParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckAvailabilityToolParamsWithDefaults() *CheckAvailabilityToolParams {
	this := CheckAvailabilityToolParams{}
	return &this
}

// GetEventTypeId returns the EventTypeId field value
func (o *CheckAvailabilityToolParams) GetEventTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value
// and a boolean to check if the value has been set.
func (o *CheckAvailabilityToolParams) GetEventTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTypeId, true
}

// SetEventTypeId sets field value
func (o *CheckAvailabilityToolParams) SetEventTypeId(v int32) {
	o.EventTypeId = v
}

// GetApiKeyRef returns the ApiKeyRef field value
func (o *CheckAvailabilityToolParams) GetApiKeyRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKeyRef
}

// GetApiKeyRefOk returns a tuple with the ApiKeyRef field value
// and a boolean to check if the value has been set.
func (o *CheckAvailabilityToolParams) GetApiKeyRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKeyRef, true
}

// SetApiKeyRef sets field value
func (o *CheckAvailabilityToolParams) SetApiKeyRef(v string) {
	o.ApiKeyRef = v
}

func (o CheckAvailabilityToolParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckAvailabilityToolParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_type_id"] = o.EventTypeId
	toSerialize["api_key_ref"] = o.ApiKeyRef
	return toSerialize, nil
}

func (o *CheckAvailabilityToolParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_type_id",
		"api_key_ref",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckAvailabilityToolParams := _CheckAvailabilityToolParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckAvailabilityToolParams)

	if err != nil {
		return err
	}

	*o = CheckAvailabilityToolParams(varCheckAvailabilityToolParams)

	return err
}

type NullableCheckAvailabilityToolParams struct {
	value *CheckAvailabilityToolParams
	isSet bool
}

func (v NullableCheckAvailabilityToolParams) Get() *CheckAvailabilityToolParams {
	return v.value
}

func (v *NullableCheckAvailabilityToolParams) Set(val *CheckAvailabilityToolParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckAvailabilityToolParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckAvailabilityToolParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckAvailabilityToolParams(val *CheckAvailabilityToolParams) *NullableCheckAvailabilityToolParams {
	return &NullableCheckAvailabilityToolParams{value: val, isSet: true}
}

func (v NullableCheckAvailabilityToolParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckAvailabilityToolParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


