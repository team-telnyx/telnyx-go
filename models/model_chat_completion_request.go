/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionRequest{}

// ChatCompletionRequest struct for ChatCompletionRequest
type ChatCompletionRequest struct {
	// A list of the previous chat messages for context.
	Messages []ChatCompletionSystemMessageParam `json:"messages"`
	// The language model to chat with. If you are optimizing for speed + price, try `meta-llama/Meta-Llama-3.1-8B-Instruct`. For quality, try `meta-llama/Meta-Llama-3.1-70B-Instruct`. Or explore our [LLM Library](https://telnyx.com/products/llm-library).
	Model *string `json:"model,omitempty"`
	// If you are using an external inference provider like xAI or OpenAI, this field allows you to pass along a reference to your API key. After creating an [integration secret](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for you API key, pass the secret's `identifier` in this field.
	ApiKeyRef *string `json:"api_key_ref,omitempty"`
	// Whether or not to stream data-only server-sent events as they become available.
	Stream *bool `json:"stream,omitempty"`
	// Adjusts the \"creativity\" of the model. Lower values make the model more deterministic and repetitive, while higher values make the model more random and creative.
	Temperature *float32 `json:"temperature,omitempty"`
	// Maximum number of completion tokens the model should generate.
	MaxTokens *int32 `json:"max_tokens,omitempty"`
	// The `function` tool type follows the same schema as the [OpenAI Chat Completions API](https://platform.openai.com/docs/api-reference/chat). The `retrieval` tool type is unique to Telnyx. You may pass a list of [embedded storage buckets](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding) for retrieval-augmented generation.
	Tools []ChatCompletionRequestToolsInner `json:"tools,omitempty"`
	ToolChoice *string `json:"tool_choice,omitempty"`
	ResponseFormat *ChatCompletionResponseFormatParam `json:"response_format,omitempty"`
	// Must be a valid JSON schema. If specified, the output will follow the JSON schema.
	GuidedJson map[string]interface{} `json:"guided_json,omitempty"`
	// If specified, the output will follow the regex pattern.
	GuidedRegex *string `json:"guided_regex,omitempty"`
	// If specified, the output will be exactly one of the choices.
	GuidedChoice []string `json:"guided_choice,omitempty"`
	// This is an alternative to `top_p` that [many prefer](https://github.com/huggingface/transformers/issues/27670). Must be in [0, 1].
	MinP *float32 `json:"min_p,omitempty"`
	// This will return multiple choices for you instead of a single chat completion.
	N *float32 `json:"n,omitempty"`
	// Setting this to `true` will allow the model to [explore more completion options](https://huggingface.co/blog/how-to-generate#beam-search). This is not supported by OpenAI.
	UseBeamSearch *bool `json:"use_beam_search,omitempty"`
	// This is used with `use_beam_search` to determine how many candidate beams to explore.
	BestOf *int32 `json:"best_of,omitempty"`
	// This is used with `use_beam_search` to prefer shorter or longer completions.
	LengthPenalty *float32 `json:"length_penalty,omitempty"`
	// This is used with `use_beam_search`. If `true`, generation stops as soon as there are `best_of` complete candidates; if `false`, a heuristic is applied and the generation stops when is it very unlikely to find better candidates.
	EarlyStopping *bool `json:"early_stopping,omitempty"`
	// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
	Logprobs *bool `json:"logprobs,omitempty"`
	// This is used with `logprobs`. An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability.
	TopLogprobs *int32 `json:"top_logprobs,omitempty"`
	// Higher values will penalize the model from repeating the same output tokens.
	FrequencyPenalty *float32 `json:"frequency_penalty,omitempty"`
	// Higher values will penalize the model from repeating the same output tokens.
	PresencePenalty *float32 `json:"presence_penalty,omitempty"`
	// An alternative or complement to `temperature`. This adjusts how many of the top possibilities to consider.
	TopP *float32 `json:"top_p,omitempty"`
}

type _ChatCompletionRequest ChatCompletionRequest

// NewChatCompletionRequest instantiates a new ChatCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionRequest(messages []ChatCompletionSystemMessageParam) *ChatCompletionRequest {
	this := ChatCompletionRequest{}
	this.Messages = messages
	var model string = "meta-llama/Meta-Llama-3.1-8B-Instruct"
	this.Model = &model
	var stream bool = false
	this.Stream = &stream
	var temperature float32 = 0.1
	this.Temperature = &temperature
	var useBeamSearch bool = false
	this.UseBeamSearch = &useBeamSearch
	var lengthPenalty float32 = 1
	this.LengthPenalty = &lengthPenalty
	var earlyStopping bool = false
	this.EarlyStopping = &earlyStopping
	var logprobs bool = false
	this.Logprobs = &logprobs
	var frequencyPenalty float32 = 0
	this.FrequencyPenalty = &frequencyPenalty
	var presencePenalty float32 = 0
	this.PresencePenalty = &presencePenalty
	return &this
}

// NewChatCompletionRequestWithDefaults instantiates a new ChatCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionRequestWithDefaults() *ChatCompletionRequest {
	this := ChatCompletionRequest{}
	var model string = "meta-llama/Meta-Llama-3.1-8B-Instruct"
	this.Model = &model
	var stream bool = false
	this.Stream = &stream
	var temperature float32 = 0.1
	this.Temperature = &temperature
	var useBeamSearch bool = false
	this.UseBeamSearch = &useBeamSearch
	var lengthPenalty float32 = 1
	this.LengthPenalty = &lengthPenalty
	var earlyStopping bool = false
	this.EarlyStopping = &earlyStopping
	var logprobs bool = false
	this.Logprobs = &logprobs
	var frequencyPenalty float32 = 0
	this.FrequencyPenalty = &frequencyPenalty
	var presencePenalty float32 = 0
	this.PresencePenalty = &presencePenalty
	return &this
}

// GetMessages returns the Messages field value
func (o *ChatCompletionRequest) GetMessages() []ChatCompletionSystemMessageParam {
	if o == nil {
		var ret []ChatCompletionSystemMessageParam
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetMessagesOk() ([]ChatCompletionSystemMessageParam, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *ChatCompletionRequest) SetMessages(v []ChatCompletionSystemMessageParam) {
	o.Messages = v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ChatCompletionRequest) SetModel(v string) {
	o.Model = &v
}

// GetApiKeyRef returns the ApiKeyRef field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetApiKeyRef() string {
	if o == nil || IsNil(o.ApiKeyRef) {
		var ret string
		return ret
	}
	return *o.ApiKeyRef
}

// GetApiKeyRefOk returns a tuple with the ApiKeyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetApiKeyRefOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKeyRef) {
		return nil, false
	}
	return o.ApiKeyRef, true
}

// HasApiKeyRef returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasApiKeyRef() bool {
	if o != nil && !IsNil(o.ApiKeyRef) {
		return true
	}

	return false
}

// SetApiKeyRef gets a reference to the given string and assigns it to the ApiKeyRef field.
func (o *ChatCompletionRequest) SetApiKeyRef(v string) {
	o.ApiKeyRef = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *ChatCompletionRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *ChatCompletionRequest) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens) {
		var ret int32
		return ret
	}
	return *o.MaxTokens
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetMaxTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTokens) {
		return nil, false
	}
	return o.MaxTokens, true
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasMaxTokens() bool {
	if o != nil && !IsNil(o.MaxTokens) {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given int32 and assigns it to the MaxTokens field.
func (o *ChatCompletionRequest) SetMaxTokens(v int32) {
	o.MaxTokens = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTools() []ChatCompletionRequestToolsInner {
	if o == nil || IsNil(o.Tools) {
		var ret []ChatCompletionRequestToolsInner
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolsOk() ([]ChatCompletionRequestToolsInner, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []ChatCompletionRequestToolsInner and assigns it to the Tools field.
func (o *ChatCompletionRequest) SetTools(v []ChatCompletionRequestToolsInner) {
	o.Tools = v
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetToolChoice() string {
	if o == nil || IsNil(o.ToolChoice) {
		var ret string
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolChoiceOk() (*string, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given string and assigns it to the ToolChoice field.
func (o *ChatCompletionRequest) SetToolChoice(v string) {
	o.ToolChoice = &v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetResponseFormat() ChatCompletionResponseFormatParam {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret ChatCompletionResponseFormatParam
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetResponseFormatOk() (*ChatCompletionResponseFormatParam, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given ChatCompletionResponseFormatParam and assigns it to the ResponseFormat field.
func (o *ChatCompletionRequest) SetResponseFormat(v ChatCompletionResponseFormatParam) {
	o.ResponseFormat = &v
}

// GetGuidedJson returns the GuidedJson field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetGuidedJson() map[string]interface{} {
	if o == nil || IsNil(o.GuidedJson) {
		var ret map[string]interface{}
		return ret
	}
	return o.GuidedJson
}

// GetGuidedJsonOk returns a tuple with the GuidedJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetGuidedJsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GuidedJson) {
		return map[string]interface{}{}, false
	}
	return o.GuidedJson, true
}

// HasGuidedJson returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasGuidedJson() bool {
	if o != nil && !IsNil(o.GuidedJson) {
		return true
	}

	return false
}

// SetGuidedJson gets a reference to the given map[string]interface{} and assigns it to the GuidedJson field.
func (o *ChatCompletionRequest) SetGuidedJson(v map[string]interface{}) {
	o.GuidedJson = v
}

// GetGuidedRegex returns the GuidedRegex field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetGuidedRegex() string {
	if o == nil || IsNil(o.GuidedRegex) {
		var ret string
		return ret
	}
	return *o.GuidedRegex
}

// GetGuidedRegexOk returns a tuple with the GuidedRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetGuidedRegexOk() (*string, bool) {
	if o == nil || IsNil(o.GuidedRegex) {
		return nil, false
	}
	return o.GuidedRegex, true
}

// HasGuidedRegex returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasGuidedRegex() bool {
	if o != nil && !IsNil(o.GuidedRegex) {
		return true
	}

	return false
}

// SetGuidedRegex gets a reference to the given string and assigns it to the GuidedRegex field.
func (o *ChatCompletionRequest) SetGuidedRegex(v string) {
	o.GuidedRegex = &v
}

// GetGuidedChoice returns the GuidedChoice field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetGuidedChoice() []string {
	if o == nil || IsNil(o.GuidedChoice) {
		var ret []string
		return ret
	}
	return o.GuidedChoice
}

// GetGuidedChoiceOk returns a tuple with the GuidedChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetGuidedChoiceOk() ([]string, bool) {
	if o == nil || IsNil(o.GuidedChoice) {
		return nil, false
	}
	return o.GuidedChoice, true
}

// HasGuidedChoice returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasGuidedChoice() bool {
	if o != nil && !IsNil(o.GuidedChoice) {
		return true
	}

	return false
}

// SetGuidedChoice gets a reference to the given []string and assigns it to the GuidedChoice field.
func (o *ChatCompletionRequest) SetGuidedChoice(v []string) {
	o.GuidedChoice = v
}

// GetMinP returns the MinP field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetMinP() float32 {
	if o == nil || IsNil(o.MinP) {
		var ret float32
		return ret
	}
	return *o.MinP
}

// GetMinPOk returns a tuple with the MinP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetMinPOk() (*float32, bool) {
	if o == nil || IsNil(o.MinP) {
		return nil, false
	}
	return o.MinP, true
}

// HasMinP returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasMinP() bool {
	if o != nil && !IsNil(o.MinP) {
		return true
	}

	return false
}

// SetMinP gets a reference to the given float32 and assigns it to the MinP field.
func (o *ChatCompletionRequest) SetMinP(v float32) {
	o.MinP = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetN() float32 {
	if o == nil || IsNil(o.N) {
		var ret float32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetNOk() (*float32, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given float32 and assigns it to the N field.
func (o *ChatCompletionRequest) SetN(v float32) {
	o.N = &v
}

// GetUseBeamSearch returns the UseBeamSearch field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetUseBeamSearch() bool {
	if o == nil || IsNil(o.UseBeamSearch) {
		var ret bool
		return ret
	}
	return *o.UseBeamSearch
}

// GetUseBeamSearchOk returns a tuple with the UseBeamSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetUseBeamSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBeamSearch) {
		return nil, false
	}
	return o.UseBeamSearch, true
}

// HasUseBeamSearch returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasUseBeamSearch() bool {
	if o != nil && !IsNil(o.UseBeamSearch) {
		return true
	}

	return false
}

// SetUseBeamSearch gets a reference to the given bool and assigns it to the UseBeamSearch field.
func (o *ChatCompletionRequest) SetUseBeamSearch(v bool) {
	o.UseBeamSearch = &v
}

// GetBestOf returns the BestOf field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetBestOf() int32 {
	if o == nil || IsNil(o.BestOf) {
		var ret int32
		return ret
	}
	return *o.BestOf
}

// GetBestOfOk returns a tuple with the BestOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetBestOfOk() (*int32, bool) {
	if o == nil || IsNil(o.BestOf) {
		return nil, false
	}
	return o.BestOf, true
}

// HasBestOf returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasBestOf() bool {
	if o != nil && !IsNil(o.BestOf) {
		return true
	}

	return false
}

// SetBestOf gets a reference to the given int32 and assigns it to the BestOf field.
func (o *ChatCompletionRequest) SetBestOf(v int32) {
	o.BestOf = &v
}

// GetLengthPenalty returns the LengthPenalty field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetLengthPenalty() float32 {
	if o == nil || IsNil(o.LengthPenalty) {
		var ret float32
		return ret
	}
	return *o.LengthPenalty
}

// GetLengthPenaltyOk returns a tuple with the LengthPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetLengthPenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.LengthPenalty) {
		return nil, false
	}
	return o.LengthPenalty, true
}

// HasLengthPenalty returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasLengthPenalty() bool {
	if o != nil && !IsNil(o.LengthPenalty) {
		return true
	}

	return false
}

// SetLengthPenalty gets a reference to the given float32 and assigns it to the LengthPenalty field.
func (o *ChatCompletionRequest) SetLengthPenalty(v float32) {
	o.LengthPenalty = &v
}

// GetEarlyStopping returns the EarlyStopping field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetEarlyStopping() bool {
	if o == nil || IsNil(o.EarlyStopping) {
		var ret bool
		return ret
	}
	return *o.EarlyStopping
}

// GetEarlyStoppingOk returns a tuple with the EarlyStopping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetEarlyStoppingOk() (*bool, bool) {
	if o == nil || IsNil(o.EarlyStopping) {
		return nil, false
	}
	return o.EarlyStopping, true
}

// HasEarlyStopping returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasEarlyStopping() bool {
	if o != nil && !IsNil(o.EarlyStopping) {
		return true
	}

	return false
}

// SetEarlyStopping gets a reference to the given bool and assigns it to the EarlyStopping field.
func (o *ChatCompletionRequest) SetEarlyStopping(v bool) {
	o.EarlyStopping = &v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetLogprobs() bool {
	if o == nil || IsNil(o.Logprobs) {
		var ret bool
		return ret
	}
	return *o.Logprobs
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetLogprobsOk() (*bool, bool) {
	if o == nil || IsNil(o.Logprobs) {
		return nil, false
	}
	return o.Logprobs, true
}

// HasLogprobs returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasLogprobs() bool {
	if o != nil && !IsNil(o.Logprobs) {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given bool and assigns it to the Logprobs field.
func (o *ChatCompletionRequest) SetLogprobs(v bool) {
	o.Logprobs = &v
}

// GetTopLogprobs returns the TopLogprobs field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTopLogprobs() int32 {
	if o == nil || IsNil(o.TopLogprobs) {
		var ret int32
		return ret
	}
	return *o.TopLogprobs
}

// GetTopLogprobsOk returns a tuple with the TopLogprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetTopLogprobsOk() (*int32, bool) {
	if o == nil || IsNil(o.TopLogprobs) {
		return nil, false
	}
	return o.TopLogprobs, true
}

// HasTopLogprobs returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTopLogprobs() bool {
	if o != nil && !IsNil(o.TopLogprobs) {
		return true
	}

	return false
}

// SetTopLogprobs gets a reference to the given int32 and assigns it to the TopLogprobs field.
func (o *ChatCompletionRequest) SetTopLogprobs(v int32) {
	o.TopLogprobs = &v
}

// GetFrequencyPenalty returns the FrequencyPenalty field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetFrequencyPenalty() float32 {
	if o == nil || IsNil(o.FrequencyPenalty) {
		var ret float32
		return ret
	}
	return *o.FrequencyPenalty
}

// GetFrequencyPenaltyOk returns a tuple with the FrequencyPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetFrequencyPenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.FrequencyPenalty) {
		return nil, false
	}
	return o.FrequencyPenalty, true
}

// HasFrequencyPenalty returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasFrequencyPenalty() bool {
	if o != nil && !IsNil(o.FrequencyPenalty) {
		return true
	}

	return false
}

// SetFrequencyPenalty gets a reference to the given float32 and assigns it to the FrequencyPenalty field.
func (o *ChatCompletionRequest) SetFrequencyPenalty(v float32) {
	o.FrequencyPenalty = &v
}

// GetPresencePenalty returns the PresencePenalty field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetPresencePenalty() float32 {
	if o == nil || IsNil(o.PresencePenalty) {
		var ret float32
		return ret
	}
	return *o.PresencePenalty
}

// GetPresencePenaltyOk returns a tuple with the PresencePenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetPresencePenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.PresencePenalty) {
		return nil, false
	}
	return o.PresencePenalty, true
}

// HasPresencePenalty returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasPresencePenalty() bool {
	if o != nil && !IsNil(o.PresencePenalty) {
		return true
	}

	return false
}

// SetPresencePenalty gets a reference to the given float32 and assigns it to the PresencePenalty field.
func (o *ChatCompletionRequest) SetPresencePenalty(v float32) {
	o.PresencePenalty = &v
}

// GetTopP returns the TopP field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP) {
		var ret float32
		return ret
	}
	return *o.TopP
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetTopPOk() (*float32, bool) {
	if o == nil || IsNil(o.TopP) {
		return nil, false
	}
	return o.TopP, true
}

// HasTopP returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTopP() bool {
	if o != nil && !IsNil(o.TopP) {
		return true
	}

	return false
}

// SetTopP gets a reference to the given float32 and assigns it to the TopP field.
func (o *ChatCompletionRequest) SetTopP(v float32) {
	o.TopP = &v
}

func (o ChatCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messages"] = o.Messages
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.ApiKeyRef) {
		toSerialize["api_key_ref"] = o.ApiKeyRef
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.MaxTokens) {
		toSerialize["max_tokens"] = o.MaxTokens
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	if !IsNil(o.GuidedJson) {
		toSerialize["guided_json"] = o.GuidedJson
	}
	if !IsNil(o.GuidedRegex) {
		toSerialize["guided_regex"] = o.GuidedRegex
	}
	if !IsNil(o.GuidedChoice) {
		toSerialize["guided_choice"] = o.GuidedChoice
	}
	if !IsNil(o.MinP) {
		toSerialize["min_p"] = o.MinP
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.UseBeamSearch) {
		toSerialize["use_beam_search"] = o.UseBeamSearch
	}
	if !IsNil(o.BestOf) {
		toSerialize["best_of"] = o.BestOf
	}
	if !IsNil(o.LengthPenalty) {
		toSerialize["length_penalty"] = o.LengthPenalty
	}
	if !IsNil(o.EarlyStopping) {
		toSerialize["early_stopping"] = o.EarlyStopping
	}
	if !IsNil(o.Logprobs) {
		toSerialize["logprobs"] = o.Logprobs
	}
	if !IsNil(o.TopLogprobs) {
		toSerialize["top_logprobs"] = o.TopLogprobs
	}
	if !IsNil(o.FrequencyPenalty) {
		toSerialize["frequency_penalty"] = o.FrequencyPenalty
	}
	if !IsNil(o.PresencePenalty) {
		toSerialize["presence_penalty"] = o.PresencePenalty
	}
	if !IsNil(o.TopP) {
		toSerialize["top_p"] = o.TopP
	}
	return toSerialize, nil
}

func (o *ChatCompletionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionRequest := _ChatCompletionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCompletionRequest)

	if err != nil {
		return err
	}

	*o = ChatCompletionRequest(varChatCompletionRequest)

	return err
}

type NullableChatCompletionRequest struct {
	value *ChatCompletionRequest
	isSet bool
}

func (v NullableChatCompletionRequest) Get() *ChatCompletionRequest {
	return v.value
}

func (v *NullableChatCompletionRequest) Set(val *ChatCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRequest(val *ChatCompletionRequest) *NullableChatCompletionRequest {
	return &NullableChatCompletionRequest{value: val, isSet: true}
}

func (v NullableChatCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


