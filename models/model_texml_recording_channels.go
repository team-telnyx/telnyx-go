/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TexmlRecordingChannels When `dual`, final audio file has the first leg on channel A, and the rest on channel B. `single` mixes both tracks into a single channel.
type TexmlRecordingChannels string

// List of TexmlRecordingChannels
const (
	SINGLE TexmlRecordingChannels = "single"
	DUAL TexmlRecordingChannels = "dual"
)

// All allowed values of TexmlRecordingChannels enum
var AllowedTexmlRecordingChannelsEnumValues = []TexmlRecordingChannels{
	"single",
	"dual",
}

func (v *TexmlRecordingChannels) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TexmlRecordingChannels(value)
	for _, existing := range AllowedTexmlRecordingChannelsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TexmlRecordingChannels", value)
}

// NewTexmlRecordingChannelsFromValue returns a pointer to a valid TexmlRecordingChannels
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTexmlRecordingChannelsFromValue(v string) (*TexmlRecordingChannels, error) {
	ev := TexmlRecordingChannels(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TexmlRecordingChannels: valid values are %v", v, AllowedTexmlRecordingChannelsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TexmlRecordingChannels) IsValid() bool {
	for _, existing := range AllowedTexmlRecordingChannelsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TexmlRecordingChannels value
func (v TexmlRecordingChannels) Ptr() *TexmlRecordingChannels {
	return &v
}

type NullableTexmlRecordingChannels struct {
	value *TexmlRecordingChannels
	isSet bool
}

func (v NullableTexmlRecordingChannels) Get() *TexmlRecordingChannels {
	return v.value
}

func (v *NullableTexmlRecordingChannels) Set(val *TexmlRecordingChannels) {
	v.value = val
	v.isSet = true
}

func (v NullableTexmlRecordingChannels) IsSet() bool {
	return v.isSet
}

func (v *NullableTexmlRecordingChannels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTexmlRecordingChannels(val *TexmlRecordingChannels) *NullableTexmlRecordingChannels {
	return &NullableTexmlRecordingChannels{value: val, isSet: true}
}

func (v NullableTexmlRecordingChannels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTexmlRecordingChannels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

