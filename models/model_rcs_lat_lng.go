/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCSLatLng type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSLatLng{}

// RCSLatLng struct for RCSLatLng
type RCSLatLng struct {
	// The latitude in degrees. It must be in the range [-90.0, +90.0].
	Latitude float32 `json:"latitude"`
	// The longitude in degrees. It must be in the range [-180.0, +180.0].
	Longitude float32 `json:"longitude"`
}

type _RCSLatLng RCSLatLng

// NewRCSLatLng instantiates a new RCSLatLng object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSLatLng(latitude float32, longitude float32) *RCSLatLng {
	this := RCSLatLng{}
	this.Latitude = latitude
	this.Longitude = longitude
	return &this
}

// NewRCSLatLngWithDefaults instantiates a new RCSLatLng object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSLatLngWithDefaults() *RCSLatLng {
	this := RCSLatLng{}
	return &this
}

// GetLatitude returns the Latitude field value
func (o *RCSLatLng) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *RCSLatLng) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *RCSLatLng) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *RCSLatLng) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *RCSLatLng) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *RCSLatLng) SetLongitude(v float32) {
	o.Longitude = v
}

func (o RCSLatLng) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSLatLng) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	return toSerialize, nil
}

func (o *RCSLatLng) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCSLatLng := _RCSLatLng{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCSLatLng)

	if err != nil {
		return err
	}

	*o = RCSLatLng(varRCSLatLng)

	return err
}

type NullableRCSLatLng struct {
	value *RCSLatLng
	isSet bool
}

func (v NullableRCSLatLng) Get() *RCSLatLng {
	return v.value
}

func (v *NullableRCSLatLng) Set(val *RCSLatLng) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSLatLng) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSLatLng) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSLatLng(val *RCSLatLng) *NullableRCSLatLng {
	return &NullableRCSLatLng{value: val, isSet: true}
}

func (v NullableRCSLatLng) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSLatLng) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


