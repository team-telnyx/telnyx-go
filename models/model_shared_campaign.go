/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SharedCampaign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedCampaign{}

// SharedCampaign Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service. Most attributes of campaignare immutable, including **usecase**, **vertical**, **brandId** and **cspId**.
type SharedCampaign struct {
	// Alphanumeric identifier of the brand associated with this campaign.
	BrandId string `json:"brandId"`
	// Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
	CampaignId string `json:"campaignId"`
	// Unix timestamp when campaign was created.
	CreateDate *string `json:"createDate,omitempty"`
	// Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. 
	Status *string `json:"status,omitempty"`
	// Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
	Usecase string `json:"usecase"`
}

type _SharedCampaign SharedCampaign

// NewSharedCampaign instantiates a new SharedCampaign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedCampaign(brandId string, campaignId string, usecase string) *SharedCampaign {
	this := SharedCampaign{}
	this.BrandId = brandId
	this.CampaignId = campaignId
	this.Usecase = usecase
	return &this
}

// NewSharedCampaignWithDefaults instantiates a new SharedCampaign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedCampaignWithDefaults() *SharedCampaign {
	this := SharedCampaign{}
	return &this
}

// GetBrandId returns the BrandId field value
func (o *SharedCampaign) GetBrandId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value
// and a boolean to check if the value has been set.
func (o *SharedCampaign) GetBrandIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrandId, true
}

// SetBrandId sets field value
func (o *SharedCampaign) SetBrandId(v string) {
	o.BrandId = v
}

// GetCampaignId returns the CampaignId field value
func (o *SharedCampaign) GetCampaignId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value
// and a boolean to check if the value has been set.
func (o *SharedCampaign) GetCampaignIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CampaignId, true
}

// SetCampaignId sets field value
func (o *SharedCampaign) SetCampaignId(v string) {
	o.CampaignId = v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *SharedCampaign) GetCreateDate() string {
	if o == nil || IsNil(o.CreateDate) {
		var ret string
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedCampaign) GetCreateDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *SharedCampaign) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given string and assigns it to the CreateDate field.
func (o *SharedCampaign) SetCreateDate(v string) {
	o.CreateDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SharedCampaign) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedCampaign) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SharedCampaign) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SharedCampaign) SetStatus(v string) {
	o.Status = &v
}

// GetUsecase returns the Usecase field value
func (o *SharedCampaign) GetUsecase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Usecase
}

// GetUsecaseOk returns a tuple with the Usecase field value
// and a boolean to check if the value has been set.
func (o *SharedCampaign) GetUsecaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usecase, true
}

// SetUsecase sets field value
func (o *SharedCampaign) SetUsecase(v string) {
	o.Usecase = v
}

func (o SharedCampaign) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedCampaign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brandId"] = o.BrandId
	toSerialize["campaignId"] = o.CampaignId
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["usecase"] = o.Usecase
	return toSerialize, nil
}

func (o *SharedCampaign) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brandId",
		"campaignId",
		"usecase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedCampaign := _SharedCampaign{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharedCampaign)

	if err != nil {
		return err
	}

	*o = SharedCampaign(varSharedCampaign)

	return err
}

type NullableSharedCampaign struct {
	value *SharedCampaign
	isSet bool
}

func (v NullableSharedCampaign) Get() *SharedCampaign {
	return v.value
}

func (v *NullableSharedCampaign) Set(val *SharedCampaign) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedCampaign) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedCampaign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedCampaign(val *SharedCampaign) *NullableSharedCampaign {
	return &NullableSharedCampaign{value: val, isSet: true}
}

func (v NullableSharedCampaign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedCampaign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


