/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the TranscriptionPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranscriptionPayload{}

// TranscriptionPayload struct for TranscriptionPayload
type TranscriptionPayload struct {
	// Unique identifier and token for controlling the call.
	CallControlId *string `json:"call_control_id,omitempty"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegId *string `json:"call_leg_id,omitempty"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.
	CallSessionId *string `json:"call_session_id,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionId *string `json:"connection_id,omitempty"`
	TranscriptionData *TranscriptionPayloadTranscriptionData `json:"transcription_data,omitempty"`
}

// NewTranscriptionPayload instantiates a new TranscriptionPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscriptionPayload() *TranscriptionPayload {
	this := TranscriptionPayload{}
	return &this
}

// NewTranscriptionPayloadWithDefaults instantiates a new TranscriptionPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionPayloadWithDefaults() *TranscriptionPayload {
	this := TranscriptionPayload{}
	return &this
}

// GetCallControlId returns the CallControlId field value if set, zero value otherwise.
func (o *TranscriptionPayload) GetCallControlId() string {
	if o == nil || IsNil(o.CallControlId) {
		var ret string
		return ret
	}
	return *o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionPayload) GetCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallControlId) {
		return nil, false
	}
	return o.CallControlId, true
}

// HasCallControlId returns a boolean if a field has been set.
func (o *TranscriptionPayload) HasCallControlId() bool {
	if o != nil && !IsNil(o.CallControlId) {
		return true
	}

	return false
}

// SetCallControlId gets a reference to the given string and assigns it to the CallControlId field.
func (o *TranscriptionPayload) SetCallControlId(v string) {
	o.CallControlId = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *TranscriptionPayload) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionPayload) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *TranscriptionPayload) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *TranscriptionPayload) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *TranscriptionPayload) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionPayload) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *TranscriptionPayload) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *TranscriptionPayload) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *TranscriptionPayload) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionPayload) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *TranscriptionPayload) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *TranscriptionPayload) SetClientState(v string) {
	o.ClientState = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *TranscriptionPayload) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionPayload) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *TranscriptionPayload) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *TranscriptionPayload) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetTranscriptionData returns the TranscriptionData field value if set, zero value otherwise.
func (o *TranscriptionPayload) GetTranscriptionData() TranscriptionPayloadTranscriptionData {
	if o == nil || IsNil(o.TranscriptionData) {
		var ret TranscriptionPayloadTranscriptionData
		return ret
	}
	return *o.TranscriptionData
}

// GetTranscriptionDataOk returns a tuple with the TranscriptionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionPayload) GetTranscriptionDataOk() (*TranscriptionPayloadTranscriptionData, bool) {
	if o == nil || IsNil(o.TranscriptionData) {
		return nil, false
	}
	return o.TranscriptionData, true
}

// HasTranscriptionData returns a boolean if a field has been set.
func (o *TranscriptionPayload) HasTranscriptionData() bool {
	if o != nil && !IsNil(o.TranscriptionData) {
		return true
	}

	return false
}

// SetTranscriptionData gets a reference to the given TranscriptionPayloadTranscriptionData and assigns it to the TranscriptionData field.
func (o *TranscriptionPayload) SetTranscriptionData(v TranscriptionPayloadTranscriptionData) {
	o.TranscriptionData = &v
}

func (o TranscriptionPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranscriptionPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlId) {
		toSerialize["call_control_id"] = o.CallControlId
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.TranscriptionData) {
		toSerialize["transcription_data"] = o.TranscriptionData
	}
	return toSerialize, nil
}

type NullableTranscriptionPayload struct {
	value *TranscriptionPayload
	isSet bool
}

func (v NullableTranscriptionPayload) Get() *TranscriptionPayload {
	return v.value
}

func (v *NullableTranscriptionPayload) Set(val *TranscriptionPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionPayload(val *TranscriptionPayload) *NullableTranscriptionPayload {
	return &NullableTranscriptionPayload{value: val, isSet: true}
}

func (v NullableTranscriptionPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


