/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardStatus{}

// SIMCardStatus struct for SIMCardStatus
type SIMCardStatus struct {
	// The current status of the SIM card. It will be one of the following: <br/> <ul>  <li><code>registering</code> - the card is being registered</li>  <li><code>enabling</code> - the card is being enabled</li>  <li><code>enabled</code> - the card is enabled and ready for use</li>  <li><code>disabling</code> - the card is being disabled</li>  <li><code>disabled</code> - the card has been disabled and cannot be used</li>  <li><code>data_limit_exceeded</code> - the card has exceeded its data consumption limit</li>  <li><code>setting_standby</code> - the process to set the card in stand by is in progress</li>  <li><code>standby</code> - the card is in stand by</li> </ul> Transitioning between the enabled and disabled states may take a period of time. 
	Value *string `json:"value,omitempty"`
	// It describes why the SIM card is in the current status.
	Reason *string `json:"reason,omitempty"`
}

// NewSIMCardStatus instantiates a new SIMCardStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardStatus() *SIMCardStatus {
	this := SIMCardStatus{}
	return &this
}

// NewSIMCardStatusWithDefaults instantiates a new SIMCardStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardStatusWithDefaults() *SIMCardStatus {
	this := SIMCardStatus{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SIMCardStatus) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardStatus) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SIMCardStatus) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SIMCardStatus) SetValue(v string) {
	o.Value = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SIMCardStatus) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardStatus) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SIMCardStatus) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *SIMCardStatus) SetReason(v string) {
	o.Reason = &v
}

func (o SIMCardStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableSIMCardStatus struct {
	value *SIMCardStatus
	isSet bool
}

func (v NullableSIMCardStatus) Get() *SIMCardStatus {
	return v.value
}

func (v *NullableSIMCardStatus) Set(val *SIMCardStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardStatus(val *SIMCardStatus) *NullableSIMCardStatus {
	return &NullableSIMCardStatus{value: val, isSet: true}
}

func (v NullableSIMCardStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


