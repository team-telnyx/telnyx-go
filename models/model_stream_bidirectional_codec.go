/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// StreamBidirectionalCodec Indicates codec for bidirectional streaming RTP payloads. Used only with stream_bidirectional_mode=rtp. Case sensitive.
type StreamBidirectionalCodec string

// List of StreamBidirectionalCodec
const (
	PCMU StreamBidirectionalCodec = "PCMU"
	PCMA StreamBidirectionalCodec = "PCMA"
	G722 StreamBidirectionalCodec = "G722"
	OPUS StreamBidirectionalCodec = "OPUS"
	AMR_WB StreamBidirectionalCodec = "AMR-WB"
)

// All allowed values of StreamBidirectionalCodec enum
var AllowedStreamBidirectionalCodecEnumValues = []StreamBidirectionalCodec{
	"PCMU",
	"PCMA",
	"G722",
	"OPUS",
	"AMR-WB",
}

func (v *StreamBidirectionalCodec) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamBidirectionalCodec(value)
	for _, existing := range AllowedStreamBidirectionalCodecEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamBidirectionalCodec", value)
}

// NewStreamBidirectionalCodecFromValue returns a pointer to a valid StreamBidirectionalCodec
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamBidirectionalCodecFromValue(v string) (*StreamBidirectionalCodec, error) {
	ev := StreamBidirectionalCodec(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamBidirectionalCodec: valid values are %v", v, AllowedStreamBidirectionalCodecEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamBidirectionalCodec) IsValid() bool {
	for _, existing := range AllowedStreamBidirectionalCodecEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamBidirectionalCodec value
func (v StreamBidirectionalCodec) Ptr() *StreamBidirectionalCodec {
	return &v
}

type NullableStreamBidirectionalCodec struct {
	value *StreamBidirectionalCodec
	isSet bool
}

func (v NullableStreamBidirectionalCodec) Get() *StreamBidirectionalCodec {
	return v.value
}

func (v *NullableStreamBidirectionalCodec) Set(val *StreamBidirectionalCodec) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamBidirectionalCodec) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamBidirectionalCodec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamBidirectionalCodec(val *StreamBidirectionalCodec) *NullableStreamBidirectionalCodec {
	return &NullableStreamBidirectionalCodec{value: val, isSet: true}
}

func (v NullableStreamBidirectionalCodec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamBidirectionalCodec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

