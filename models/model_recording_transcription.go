/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RecordingTranscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingTranscription{}

// RecordingTranscription struct for RecordingTranscription
type RecordingTranscription struct {
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// The duration of the recording transcription in milliseconds.
	DurationMillis *int32 `json:"duration_millis,omitempty"`
	// Uniquely identifies the recording transcription.
	Id *string `json:"id,omitempty"`
	// Uniquely identifies the recording associated with this transcription.
	RecordingId *string `json:"recording_id,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	// The status of the recording transcription. Only `completed` has transcription text available.
	Status *string `json:"status,omitempty"`
	// The recording's transcribed text.
	TranscriptionText *string `json:"transcription_text,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewRecordingTranscription instantiates a new RecordingTranscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingTranscription() *RecordingTranscription {
	this := RecordingTranscription{}
	return &this
}

// NewRecordingTranscriptionWithDefaults instantiates a new RecordingTranscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingTranscriptionWithDefaults() *RecordingTranscription {
	this := RecordingTranscription{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RecordingTranscription) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RecordingTranscription) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RecordingTranscription) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDurationMillis returns the DurationMillis field value if set, zero value otherwise.
func (o *RecordingTranscription) GetDurationMillis() int32 {
	if o == nil || IsNil(o.DurationMillis) {
		var ret int32
		return ret
	}
	return *o.DurationMillis
}

// GetDurationMillisOk returns a tuple with the DurationMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetDurationMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.DurationMillis) {
		return nil, false
	}
	return o.DurationMillis, true
}

// HasDurationMillis returns a boolean if a field has been set.
func (o *RecordingTranscription) HasDurationMillis() bool {
	if o != nil && !IsNil(o.DurationMillis) {
		return true
	}

	return false
}

// SetDurationMillis gets a reference to the given int32 and assigns it to the DurationMillis field.
func (o *RecordingTranscription) SetDurationMillis(v int32) {
	o.DurationMillis = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecordingTranscription) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecordingTranscription) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecordingTranscription) SetId(v string) {
	o.Id = &v
}

// GetRecordingId returns the RecordingId field value if set, zero value otherwise.
func (o *RecordingTranscription) GetRecordingId() string {
	if o == nil || IsNil(o.RecordingId) {
		var ret string
		return ret
	}
	return *o.RecordingId
}

// GetRecordingIdOk returns a tuple with the RecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetRecordingIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingId) {
		return nil, false
	}
	return o.RecordingId, true
}

// HasRecordingId returns a boolean if a field has been set.
func (o *RecordingTranscription) HasRecordingId() bool {
	if o != nil && !IsNil(o.RecordingId) {
		return true
	}

	return false
}

// SetRecordingId gets a reference to the given string and assigns it to the RecordingId field.
func (o *RecordingTranscription) SetRecordingId(v string) {
	o.RecordingId = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RecordingTranscription) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RecordingTranscription) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RecordingTranscription) SetRecordType(v string) {
	o.RecordType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RecordingTranscription) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RecordingTranscription) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RecordingTranscription) SetStatus(v string) {
	o.Status = &v
}

// GetTranscriptionText returns the TranscriptionText field value if set, zero value otherwise.
func (o *RecordingTranscription) GetTranscriptionText() string {
	if o == nil || IsNil(o.TranscriptionText) {
		var ret string
		return ret
	}
	return *o.TranscriptionText
}

// GetTranscriptionTextOk returns a tuple with the TranscriptionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetTranscriptionTextOk() (*string, bool) {
	if o == nil || IsNil(o.TranscriptionText) {
		return nil, false
	}
	return o.TranscriptionText, true
}

// HasTranscriptionText returns a boolean if a field has been set.
func (o *RecordingTranscription) HasTranscriptionText() bool {
	if o != nil && !IsNil(o.TranscriptionText) {
		return true
	}

	return false
}

// SetTranscriptionText gets a reference to the given string and assigns it to the TranscriptionText field.
func (o *RecordingTranscription) SetTranscriptionText(v string) {
	o.TranscriptionText = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RecordingTranscription) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscription) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RecordingTranscription) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RecordingTranscription) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o RecordingTranscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingTranscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DurationMillis) {
		toSerialize["duration_millis"] = o.DurationMillis
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordingId) {
		toSerialize["recording_id"] = o.RecordingId
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TranscriptionText) {
		toSerialize["transcription_text"] = o.TranscriptionText
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableRecordingTranscription struct {
	value *RecordingTranscription
	isSet bool
}

func (v NullableRecordingTranscription) Get() *RecordingTranscription {
	return v.value
}

func (v *NullableRecordingTranscription) Set(val *RecordingTranscription) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingTranscription) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingTranscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingTranscription(val *RecordingTranscription) *NullableRecordingTranscription {
	return &NullableRecordingTranscription{value: val, isSet: true}
}

func (v NullableRecordingTranscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingTranscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


