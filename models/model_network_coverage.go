/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the NetworkCoverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkCoverage{}

// NetworkCoverage struct for NetworkCoverage
type NetworkCoverage struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	Location *Location `json:"location,omitempty"`
	// List of interface types supported in this region.
	AvailableServices []NetworkCoverageAvailableServicesInner `json:"available_services,omitempty"`
}

// NewNetworkCoverage instantiates a new NetworkCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkCoverage() *NetworkCoverage {
	this := NetworkCoverage{}
	return &this
}

// NewNetworkCoverageWithDefaults instantiates a new NetworkCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkCoverageWithDefaults() *NetworkCoverage {
	this := NetworkCoverage{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NetworkCoverage) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkCoverage) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NetworkCoverage) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NetworkCoverage) SetRecordType(v string) {
	o.RecordType = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *NetworkCoverage) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkCoverage) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *NetworkCoverage) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *NetworkCoverage) SetLocation(v Location) {
	o.Location = &v
}

// GetAvailableServices returns the AvailableServices field value if set, zero value otherwise.
func (o *NetworkCoverage) GetAvailableServices() []NetworkCoverageAvailableServicesInner {
	if o == nil || IsNil(o.AvailableServices) {
		var ret []NetworkCoverageAvailableServicesInner
		return ret
	}
	return o.AvailableServices
}

// GetAvailableServicesOk returns a tuple with the AvailableServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkCoverage) GetAvailableServicesOk() ([]NetworkCoverageAvailableServicesInner, bool) {
	if o == nil || IsNil(o.AvailableServices) {
		return nil, false
	}
	return o.AvailableServices, true
}

// HasAvailableServices returns a boolean if a field has been set.
func (o *NetworkCoverage) HasAvailableServices() bool {
	if o != nil && !IsNil(o.AvailableServices) {
		return true
	}

	return false
}

// SetAvailableServices gets a reference to the given []NetworkCoverageAvailableServicesInner and assigns it to the AvailableServices field.
func (o *NetworkCoverage) SetAvailableServices(v []NetworkCoverageAvailableServicesInner) {
	o.AvailableServices = v
}

func (o NetworkCoverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkCoverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.AvailableServices) {
		toSerialize["available_services"] = o.AvailableServices
	}
	return toSerialize, nil
}

type NullableNetworkCoverage struct {
	value *NetworkCoverage
	isSet bool
}

func (v NullableNetworkCoverage) Get() *NetworkCoverage {
	return v.value
}

func (v *NullableNetworkCoverage) Set(val *NetworkCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkCoverage(val *NetworkCoverage) *NullableNetworkCoverage {
	return &NullableNetworkCoverage{value: val, isSet: true}
}

func (v NullableNetworkCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


