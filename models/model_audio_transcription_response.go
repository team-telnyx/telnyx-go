/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AudioTranscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioTranscriptionResponse{}

// AudioTranscriptionResponse struct for AudioTranscriptionResponse
type AudioTranscriptionResponse struct {
	// The transcribed text for the audio file.
	Text string `json:"text"`
	// The duration of the audio file in seconds. This is only included if `response_format` is set to `verbose_json`.
	Duration *float32 `json:"duration,omitempty"`
	// Segments of the transcribed text and their corresponding details. This is only included if `response_format` is set to `verbose_json`.
	Segments []AudioTranscriptionResponseSegments `json:"segments,omitempty"`
}

type _AudioTranscriptionResponse AudioTranscriptionResponse

// NewAudioTranscriptionResponse instantiates a new AudioTranscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioTranscriptionResponse(text string) *AudioTranscriptionResponse {
	this := AudioTranscriptionResponse{}
	this.Text = text
	return &this
}

// NewAudioTranscriptionResponseWithDefaults instantiates a new AudioTranscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioTranscriptionResponseWithDefaults() *AudioTranscriptionResponse {
	this := AudioTranscriptionResponse{}
	return &this
}

// GetText returns the Text field value
func (o *AudioTranscriptionResponse) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *AudioTranscriptionResponse) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *AudioTranscriptionResponse) SetText(v string) {
	o.Text = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AudioTranscriptionResponse) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioTranscriptionResponse) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AudioTranscriptionResponse) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *AudioTranscriptionResponse) SetDuration(v float32) {
	o.Duration = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *AudioTranscriptionResponse) GetSegments() []AudioTranscriptionResponseSegments {
	if o == nil || IsNil(o.Segments) {
		var ret []AudioTranscriptionResponseSegments
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioTranscriptionResponse) GetSegmentsOk() ([]AudioTranscriptionResponseSegments, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *AudioTranscriptionResponse) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []AudioTranscriptionResponseSegments and assigns it to the Segments field.
func (o *AudioTranscriptionResponse) SetSegments(v []AudioTranscriptionResponseSegments) {
	o.Segments = v
}

func (o AudioTranscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioTranscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	return toSerialize, nil
}

func (o *AudioTranscriptionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAudioTranscriptionResponse := _AudioTranscriptionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAudioTranscriptionResponse)

	if err != nil {
		return err
	}

	*o = AudioTranscriptionResponse(varAudioTranscriptionResponse)

	return err
}

type NullableAudioTranscriptionResponse struct {
	value *AudioTranscriptionResponse
	isSet bool
}

func (v NullableAudioTranscriptionResponse) Get() *AudioTranscriptionResponse {
	return v.value
}

func (v *NullableAudioTranscriptionResponse) Set(val *AudioTranscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioTranscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioTranscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioTranscriptionResponse(val *AudioTranscriptionResponse) *NullableAudioTranscriptionResponse {
	return &NullableAudioTranscriptionResponse{value: val, isSet: true}
}

func (v NullableAudioTranscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioTranscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


