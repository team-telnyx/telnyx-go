/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PushCredential type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PushCredential{}

// PushCredential struct for PushCredential
type PushCredential struct {
	// Unique identifier of a push credential
	Id string `json:"id"`
	// Apple certificate for sending push notifications. For iOS only
	Certificate string `json:"certificate"`
	// Apple private key for a given certificate for sending push notifications. For iOS only
	PrivateKey string `json:"private_key"`
	// Google server key for sending push notifications. For Android only
	ProjectAccountJsonFile map[string]interface{} `json:"project_account_json_file"`
	// Alias to uniquely identify a credential
	Alias string `json:"alias"`
	// Type of mobile push credential. Either <code>ios</code> or <code>android</code>
	Type string `json:"type"`
	RecordType string `json:"record_type"`
	// ISO 8601 timestamp when the room was created
	CreatedAt string `json:"created_at"`
	// ISO 8601 timestamp when the room was updated.
	UpdatedAt string `json:"updated_at"`
}

type _PushCredential PushCredential

// NewPushCredential instantiates a new PushCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushCredential(id string, certificate string, privateKey string, projectAccountJsonFile map[string]interface{}, alias string, type_ string, recordType string, createdAt string, updatedAt string) *PushCredential {
	this := PushCredential{}
	this.Id = id
	this.Certificate = certificate
	this.PrivateKey = privateKey
	this.ProjectAccountJsonFile = projectAccountJsonFile
	this.Alias = alias
	this.Type = type_
	this.RecordType = recordType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewPushCredentialWithDefaults instantiates a new PushCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushCredentialWithDefaults() *PushCredential {
	this := PushCredential{}
	return &this
}

// GetId returns the Id field value
func (o *PushCredential) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PushCredential) SetId(v string) {
	o.Id = v
}

// GetCertificate returns the Certificate field value
func (o *PushCredential) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *PushCredential) SetCertificate(v string) {
	o.Certificate = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *PushCredential) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *PushCredential) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetProjectAccountJsonFile returns the ProjectAccountJsonFile field value
func (o *PushCredential) GetProjectAccountJsonFile() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ProjectAccountJsonFile
}

// GetProjectAccountJsonFileOk returns a tuple with the ProjectAccountJsonFile field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetProjectAccountJsonFileOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ProjectAccountJsonFile, true
}

// SetProjectAccountJsonFile sets field value
func (o *PushCredential) SetProjectAccountJsonFile(v map[string]interface{}) {
	o.ProjectAccountJsonFile = v
}

// GetAlias returns the Alias field value
func (o *PushCredential) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *PushCredential) SetAlias(v string) {
	o.Alias = v
}

// GetType returns the Type field value
func (o *PushCredential) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PushCredential) SetType(v string) {
	o.Type = v
}

// GetRecordType returns the RecordType field value
func (o *PushCredential) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *PushCredential) SetRecordType(v string) {
	o.RecordType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PushCredential) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PushCredential) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PushCredential) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PushCredential) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PushCredential) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o PushCredential) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PushCredential) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["certificate"] = o.Certificate
	toSerialize["private_key"] = o.PrivateKey
	toSerialize["project_account_json_file"] = o.ProjectAccountJsonFile
	toSerialize["alias"] = o.Alias
	toSerialize["type"] = o.Type
	toSerialize["record_type"] = o.RecordType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *PushCredential) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"certificate",
		"private_key",
		"project_account_json_file",
		"alias",
		"type",
		"record_type",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPushCredential := _PushCredential{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPushCredential)

	if err != nil {
		return err
	}

	*o = PushCredential(varPushCredential)

	return err
}

type NullablePushCredential struct {
	value *PushCredential
	isSet bool
}

func (v NullablePushCredential) Get() *PushCredential {
	return v.value
}

func (v *NullablePushCredential) Set(val *PushCredential) {
	v.value = val
	v.isSet = true
}

func (v NullablePushCredential) IsSet() bool {
	return v.isSet
}

func (v *NullablePushCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushCredential(val *PushCredential) *NullablePushCredential {
	return &NullablePushCredential{value: val, isSet: true}
}

func (v NullablePushCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


