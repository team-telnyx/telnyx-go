/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// Volume Message Volume Enums
type Volume string

// List of Volume
const (
	_10 Volume = "10"
	_100 Volume = "100"
	_1000 Volume = "1,000"
	_10000 Volume = "10,000"
	_100000 Volume = "100,000"
	_250000 Volume = "250,000"
	_500000 Volume = "500,000"
	_750000 Volume = "750,000"
	_1000000 Volume = "1,000,000"
	_5000000 Volume = "5,000,000"
	_10000000 Volume = "10,000,000+"
)

// All allowed values of Volume enum
var AllowedVolumeEnumValues = []Volume{
	"10",
	"100",
	"1,000",
	"10,000",
	"100,000",
	"250,000",
	"500,000",
	"750,000",
	"1,000,000",
	"5,000,000",
	"10,000,000+",
}

func (v *Volume) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Volume(value)
	for _, existing := range AllowedVolumeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Volume", value)
}

// NewVolumeFromValue returns a pointer to a valid Volume
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeFromValue(v string) (*Volume, error) {
	ev := Volume(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Volume: valid values are %v", v, AllowedVolumeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Volume) IsValid() bool {
	for _, existing := range AllowedVolumeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Volume value
func (v Volume) Ptr() *Volume {
	return &v
}

type NullableVolume struct {
	value *Volume
	isSet bool
}

func (v NullableVolume) Get() *Volume {
	return v.value
}

func (v *NullableVolume) Set(val *Volume) {
	v.value = val
	v.isSet = true
}

func (v NullableVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolume(val *Volume) *NullableVolume {
	return &NullableVolume{value: val, isSet: true}
}

func (v NullableVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

