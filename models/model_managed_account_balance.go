/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ManagedAccountBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedAccountBalance{}

// ManagedAccountBalance struct for ManagedAccountBalance
type ManagedAccountBalance struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// The account's current balance.
	Balance *float64 `json:"balance,omitempty"`
	// The account's credit limit.
	CreditLimit *float64 `json:"credit_limit,omitempty"`
	// Available amount to spend (balance + credit limit)
	AvailableCredit *float64 `json:"available_credit,omitempty"`
	// The ISO 4217 currency identifier.
	Currency *string `json:"currency,omitempty"`
}

// NewManagedAccountBalance instantiates a new ManagedAccountBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedAccountBalance() *ManagedAccountBalance {
	this := ManagedAccountBalance{}
	return &this
}

// NewManagedAccountBalanceWithDefaults instantiates a new ManagedAccountBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedAccountBalanceWithDefaults() *ManagedAccountBalance {
	this := ManagedAccountBalance{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *ManagedAccountBalance) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedAccountBalance) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *ManagedAccountBalance) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *ManagedAccountBalance) SetRecordType(v string) {
	o.RecordType = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *ManagedAccountBalance) GetBalance() float64 {
	if o == nil || IsNil(o.Balance) {
		var ret float64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedAccountBalance) GetBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *ManagedAccountBalance) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float64 and assigns it to the Balance field.
func (o *ManagedAccountBalance) SetBalance(v float64) {
	o.Balance = &v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *ManagedAccountBalance) GetCreditLimit() float64 {
	if o == nil || IsNil(o.CreditLimit) {
		var ret float64
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedAccountBalance) GetCreditLimitOk() (*float64, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *ManagedAccountBalance) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given float64 and assigns it to the CreditLimit field.
func (o *ManagedAccountBalance) SetCreditLimit(v float64) {
	o.CreditLimit = &v
}

// GetAvailableCredit returns the AvailableCredit field value if set, zero value otherwise.
func (o *ManagedAccountBalance) GetAvailableCredit() float64 {
	if o == nil || IsNil(o.AvailableCredit) {
		var ret float64
		return ret
	}
	return *o.AvailableCredit
}

// GetAvailableCreditOk returns a tuple with the AvailableCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedAccountBalance) GetAvailableCreditOk() (*float64, bool) {
	if o == nil || IsNil(o.AvailableCredit) {
		return nil, false
	}
	return o.AvailableCredit, true
}

// HasAvailableCredit returns a boolean if a field has been set.
func (o *ManagedAccountBalance) HasAvailableCredit() bool {
	if o != nil && !IsNil(o.AvailableCredit) {
		return true
	}

	return false
}

// SetAvailableCredit gets a reference to the given float64 and assigns it to the AvailableCredit field.
func (o *ManagedAccountBalance) SetAvailableCredit(v float64) {
	o.AvailableCredit = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ManagedAccountBalance) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedAccountBalance) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ManagedAccountBalance) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ManagedAccountBalance) SetCurrency(v string) {
	o.Currency = &v
}

func (o ManagedAccountBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedAccountBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["credit_limit"] = o.CreditLimit
	}
	if !IsNil(o.AvailableCredit) {
		toSerialize["available_credit"] = o.AvailableCredit
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

type NullableManagedAccountBalance struct {
	value *ManagedAccountBalance
	isSet bool
}

func (v NullableManagedAccountBalance) Get() *ManagedAccountBalance {
	return v.value
}

func (v *NullableManagedAccountBalance) Set(val *ManagedAccountBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedAccountBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedAccountBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedAccountBalance(val *ManagedAccountBalance) *NullableManagedAccountBalance {
	return &NullableManagedAccountBalance{value: val, isSet: true}
}

func (v NullableManagedAccountBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedAccountBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


