/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TexmlBidirectionalStreamMode Configures method of bidirectional streaming (mp3, rtp).
type TexmlBidirectionalStreamMode string

// List of TexmlBidirectionalStreamMode
const (
	MP3 TexmlBidirectionalStreamMode = "mp3"
	RTP TexmlBidirectionalStreamMode = "rtp"
)

// All allowed values of TexmlBidirectionalStreamMode enum
var AllowedTexmlBidirectionalStreamModeEnumValues = []TexmlBidirectionalStreamMode{
	"mp3",
	"rtp",
}

func (v *TexmlBidirectionalStreamMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TexmlBidirectionalStreamMode(value)
	for _, existing := range AllowedTexmlBidirectionalStreamModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TexmlBidirectionalStreamMode", value)
}

// NewTexmlBidirectionalStreamModeFromValue returns a pointer to a valid TexmlBidirectionalStreamMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTexmlBidirectionalStreamModeFromValue(v string) (*TexmlBidirectionalStreamMode, error) {
	ev := TexmlBidirectionalStreamMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TexmlBidirectionalStreamMode: valid values are %v", v, AllowedTexmlBidirectionalStreamModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TexmlBidirectionalStreamMode) IsValid() bool {
	for _, existing := range AllowedTexmlBidirectionalStreamModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TexmlBidirectionalStreamMode value
func (v TexmlBidirectionalStreamMode) Ptr() *TexmlBidirectionalStreamMode {
	return &v
}

type NullableTexmlBidirectionalStreamMode struct {
	value *TexmlBidirectionalStreamMode
	isSet bool
}

func (v NullableTexmlBidirectionalStreamMode) Get() *TexmlBidirectionalStreamMode {
	return v.value
}

func (v *NullableTexmlBidirectionalStreamMode) Set(val *TexmlBidirectionalStreamMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTexmlBidirectionalStreamMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTexmlBidirectionalStreamMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTexmlBidirectionalStreamMode(val *TexmlBidirectionalStreamMode) *NullableTexmlBidirectionalStreamMode {
	return &NullableTexmlBidirectionalStreamMode{value: val, isSet: true}
}

func (v NullableTexmlBidirectionalStreamMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTexmlBidirectionalStreamMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

