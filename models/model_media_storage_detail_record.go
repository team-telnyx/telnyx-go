/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MediaStorageDetailRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaStorageDetailRecord{}

// MediaStorageDetailRecord struct for MediaStorageDetailRecord
type MediaStorageDetailRecord struct {
	// Unique identifier for the Media Storage Event
	Id *string `json:"id,omitempty"`
	// Event creation time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Asset id
	AssetId *string `json:"asset_id,omitempty"`
	// User id
	UserId *string `json:"user_id,omitempty"`
	// Organization owner id
	OrgId *string `json:"org_id,omitempty"`
	// Type of action performed against the Media Storage API
	ActionType *string `json:"action_type,omitempty"`
	// Link channel type
	LinkChannelType *string `json:"link_channel_type,omitempty"`
	// Link channel id
	LinkChannelId *string `json:"link_channel_id,omitempty"`
	// Request status
	Status *string `json:"status,omitempty"`
	// Webhook id
	WebhookId *string `json:"webhook_id,omitempty"`
	// Currency amount per billing unit used to calculate the Telnyx billing cost
	Rate *string `json:"rate,omitempty"`
	// Billing unit used to calculate the Telnyx billing cost
	RateMeasuredIn *string `json:"rate_measured_in,omitempty"`
	// Currency amount for Telnyx billing cost
	Cost *string `json:"cost,omitempty"`
	// Telnyx account currency used to describe monetary values, including billing cost
	Currency *string `json:"currency,omitempty"`
	RecordType string `json:"record_type"`
}

type _MediaStorageDetailRecord MediaStorageDetailRecord

// NewMediaStorageDetailRecord instantiates a new MediaStorageDetailRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaStorageDetailRecord(recordType string) *MediaStorageDetailRecord {
	this := MediaStorageDetailRecord{}
	this.RecordType = recordType
	return &this
}

// NewMediaStorageDetailRecordWithDefaults instantiates a new MediaStorageDetailRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaStorageDetailRecordWithDefaults() *MediaStorageDetailRecord {
	this := MediaStorageDetailRecord{}
	var recordType string = "media_storage"
	this.RecordType = recordType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MediaStorageDetailRecord) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *MediaStorageDetailRecord) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *MediaStorageDetailRecord) SetAssetId(v string) {
	o.AssetId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *MediaStorageDetailRecord) SetUserId(v string) {
	o.UserId = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *MediaStorageDetailRecord) SetOrgId(v string) {
	o.OrgId = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *MediaStorageDetailRecord) SetActionType(v string) {
	o.ActionType = &v
}

// GetLinkChannelType returns the LinkChannelType field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetLinkChannelType() string {
	if o == nil || IsNil(o.LinkChannelType) {
		var ret string
		return ret
	}
	return *o.LinkChannelType
}

// GetLinkChannelTypeOk returns a tuple with the LinkChannelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetLinkChannelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkChannelType) {
		return nil, false
	}
	return o.LinkChannelType, true
}

// HasLinkChannelType returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasLinkChannelType() bool {
	if o != nil && !IsNil(o.LinkChannelType) {
		return true
	}

	return false
}

// SetLinkChannelType gets a reference to the given string and assigns it to the LinkChannelType field.
func (o *MediaStorageDetailRecord) SetLinkChannelType(v string) {
	o.LinkChannelType = &v
}

// GetLinkChannelId returns the LinkChannelId field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetLinkChannelId() string {
	if o == nil || IsNil(o.LinkChannelId) {
		var ret string
		return ret
	}
	return *o.LinkChannelId
}

// GetLinkChannelIdOk returns a tuple with the LinkChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetLinkChannelIdOk() (*string, bool) {
	if o == nil || IsNil(o.LinkChannelId) {
		return nil, false
	}
	return o.LinkChannelId, true
}

// HasLinkChannelId returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasLinkChannelId() bool {
	if o != nil && !IsNil(o.LinkChannelId) {
		return true
	}

	return false
}

// SetLinkChannelId gets a reference to the given string and assigns it to the LinkChannelId field.
func (o *MediaStorageDetailRecord) SetLinkChannelId(v string) {
	o.LinkChannelId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MediaStorageDetailRecord) SetStatus(v string) {
	o.Status = &v
}

// GetWebhookId returns the WebhookId field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetWebhookId() string {
	if o == nil || IsNil(o.WebhookId) {
		var ret string
		return ret
	}
	return *o.WebhookId
}

// GetWebhookIdOk returns a tuple with the WebhookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetWebhookIdOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookId) {
		return nil, false
	}
	return o.WebhookId, true
}

// HasWebhookId returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasWebhookId() bool {
	if o != nil && !IsNil(o.WebhookId) {
		return true
	}

	return false
}

// SetWebhookId gets a reference to the given string and assigns it to the WebhookId field.
func (o *MediaStorageDetailRecord) SetWebhookId(v string) {
	o.WebhookId = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetRate() string {
	if o == nil || IsNil(o.Rate) {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetRateOk() (*string, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *MediaStorageDetailRecord) SetRate(v string) {
	o.Rate = &v
}

// GetRateMeasuredIn returns the RateMeasuredIn field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetRateMeasuredIn() string {
	if o == nil || IsNil(o.RateMeasuredIn) {
		var ret string
		return ret
	}
	return *o.RateMeasuredIn
}

// GetRateMeasuredInOk returns a tuple with the RateMeasuredIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetRateMeasuredInOk() (*string, bool) {
	if o == nil || IsNil(o.RateMeasuredIn) {
		return nil, false
	}
	return o.RateMeasuredIn, true
}

// HasRateMeasuredIn returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasRateMeasuredIn() bool {
	if o != nil && !IsNil(o.RateMeasuredIn) {
		return true
	}

	return false
}

// SetRateMeasuredIn gets a reference to the given string and assigns it to the RateMeasuredIn field.
func (o *MediaStorageDetailRecord) SetRateMeasuredIn(v string) {
	o.RateMeasuredIn = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetCost() string {
	if o == nil || IsNil(o.Cost) {
		var ret string
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetCostOk() (*string, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given string and assigns it to the Cost field.
func (o *MediaStorageDetailRecord) SetCost(v string) {
	o.Cost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *MediaStorageDetailRecord) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *MediaStorageDetailRecord) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *MediaStorageDetailRecord) SetCurrency(v string) {
	o.Currency = &v
}

// GetRecordType returns the RecordType field value
func (o *MediaStorageDetailRecord) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *MediaStorageDetailRecord) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *MediaStorageDetailRecord) SetRecordType(v string) {
	o.RecordType = v
}

func (o MediaStorageDetailRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaStorageDetailRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.ActionType) {
		toSerialize["action_type"] = o.ActionType
	}
	if !IsNil(o.LinkChannelType) {
		toSerialize["link_channel_type"] = o.LinkChannelType
	}
	if !IsNil(o.LinkChannelId) {
		toSerialize["link_channel_id"] = o.LinkChannelId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.WebhookId) {
		toSerialize["webhook_id"] = o.WebhookId
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RateMeasuredIn) {
		toSerialize["rate_measured_in"] = o.RateMeasuredIn
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["record_type"] = o.RecordType
	return toSerialize, nil
}

func (o *MediaStorageDetailRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaStorageDetailRecord := _MediaStorageDetailRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaStorageDetailRecord)

	if err != nil {
		return err
	}

	*o = MediaStorageDetailRecord(varMediaStorageDetailRecord)

	return err
}

type NullableMediaStorageDetailRecord struct {
	value *MediaStorageDetailRecord
	isSet bool
}

func (v NullableMediaStorageDetailRecord) Get() *MediaStorageDetailRecord {
	return v.value
}

func (v *NullableMediaStorageDetailRecord) Set(val *MediaStorageDetailRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaStorageDetailRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaStorageDetailRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaStorageDetailRecord(val *MediaStorageDetailRecord) *NullableMediaStorageDetailRecord {
	return &NullableMediaStorageDetailRecord{value: val, isSet: true}
}

func (v NullableMediaStorageDetailRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaStorageDetailRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


