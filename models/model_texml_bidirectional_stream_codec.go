/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TexmlBidirectionalStreamCodec Indicates codec for bidirectional streaming RTP payloads. Used only with stream_bidirectional_mode=rtp. Case sensitive.
type TexmlBidirectionalStreamCodec string

// List of TexmlBidirectionalStreamCodec
const (
	PCMU TexmlBidirectionalStreamCodec = "PCMU"
	PCMA TexmlBidirectionalStreamCodec = "PCMA"
	G722 TexmlBidirectionalStreamCodec = "G722"
)

// All allowed values of TexmlBidirectionalStreamCodec enum
var AllowedTexmlBidirectionalStreamCodecEnumValues = []TexmlBidirectionalStreamCodec{
	"PCMU",
	"PCMA",
	"G722",
}

func (v *TexmlBidirectionalStreamCodec) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TexmlBidirectionalStreamCodec(value)
	for _, existing := range AllowedTexmlBidirectionalStreamCodecEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TexmlBidirectionalStreamCodec", value)
}

// NewTexmlBidirectionalStreamCodecFromValue returns a pointer to a valid TexmlBidirectionalStreamCodec
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTexmlBidirectionalStreamCodecFromValue(v string) (*TexmlBidirectionalStreamCodec, error) {
	ev := TexmlBidirectionalStreamCodec(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TexmlBidirectionalStreamCodec: valid values are %v", v, AllowedTexmlBidirectionalStreamCodecEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TexmlBidirectionalStreamCodec) IsValid() bool {
	for _, existing := range AllowedTexmlBidirectionalStreamCodecEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TexmlBidirectionalStreamCodec value
func (v TexmlBidirectionalStreamCodec) Ptr() *TexmlBidirectionalStreamCodec {
	return &v
}

type NullableTexmlBidirectionalStreamCodec struct {
	value *TexmlBidirectionalStreamCodec
	isSet bool
}

func (v NullableTexmlBidirectionalStreamCodec) Get() *TexmlBidirectionalStreamCodec {
	return v.value
}

func (v *NullableTexmlBidirectionalStreamCodec) Set(val *TexmlBidirectionalStreamCodec) {
	v.value = val
	v.isSet = true
}

func (v NullableTexmlBidirectionalStreamCodec) IsSet() bool {
	return v.isSet
}

func (v *NullableTexmlBidirectionalStreamCodec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTexmlBidirectionalStreamCodec(val *TexmlBidirectionalStreamCodec) *NullableTexmlBidirectionalStreamCodec {
	return &NullableTexmlBidirectionalStreamCodec{value: val, isSet: true}
}

func (v NullableTexmlBidirectionalStreamCodec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTexmlBidirectionalStreamCodec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

