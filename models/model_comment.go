/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment struct for Comment
type Comment struct {
	Id *string `json:"id,omitempty"`
	Body *string `json:"body,omitempty"`
	Commenter *string `json:"commenter,omitempty"`
	CommenterType *string `json:"commenter_type,omitempty"`
	CommentRecordType *string `json:"comment_record_type,omitempty"`
	CommentRecordId *string `json:"comment_record_id,omitempty"`
	// An ISO 8901 datetime string for when the comment was read.
	ReadAt *string `json:"read_at,omitempty"`
	// An ISO 8901 datetime string denoting when the comment was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// An ISO 8901 datetime string for when the comment was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment() *Comment {
	this := Comment{}
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Comment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Comment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Comment) SetId(v string) {
	o.Id = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *Comment) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *Comment) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *Comment) SetBody(v string) {
	o.Body = &v
}

// GetCommenter returns the Commenter field value if set, zero value otherwise.
func (o *Comment) GetCommenter() string {
	if o == nil || IsNil(o.Commenter) {
		var ret string
		return ret
	}
	return *o.Commenter
}

// GetCommenterOk returns a tuple with the Commenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCommenterOk() (*string, bool) {
	if o == nil || IsNil(o.Commenter) {
		return nil, false
	}
	return o.Commenter, true
}

// HasCommenter returns a boolean if a field has been set.
func (o *Comment) HasCommenter() bool {
	if o != nil && !IsNil(o.Commenter) {
		return true
	}

	return false
}

// SetCommenter gets a reference to the given string and assigns it to the Commenter field.
func (o *Comment) SetCommenter(v string) {
	o.Commenter = &v
}

// GetCommenterType returns the CommenterType field value if set, zero value otherwise.
func (o *Comment) GetCommenterType() string {
	if o == nil || IsNil(o.CommenterType) {
		var ret string
		return ret
	}
	return *o.CommenterType
}

// GetCommenterTypeOk returns a tuple with the CommenterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCommenterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CommenterType) {
		return nil, false
	}
	return o.CommenterType, true
}

// HasCommenterType returns a boolean if a field has been set.
func (o *Comment) HasCommenterType() bool {
	if o != nil && !IsNil(o.CommenterType) {
		return true
	}

	return false
}

// SetCommenterType gets a reference to the given string and assigns it to the CommenterType field.
func (o *Comment) SetCommenterType(v string) {
	o.CommenterType = &v
}

// GetCommentRecordType returns the CommentRecordType field value if set, zero value otherwise.
func (o *Comment) GetCommentRecordType() string {
	if o == nil || IsNil(o.CommentRecordType) {
		var ret string
		return ret
	}
	return *o.CommentRecordType
}

// GetCommentRecordTypeOk returns a tuple with the CommentRecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCommentRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CommentRecordType) {
		return nil, false
	}
	return o.CommentRecordType, true
}

// HasCommentRecordType returns a boolean if a field has been set.
func (o *Comment) HasCommentRecordType() bool {
	if o != nil && !IsNil(o.CommentRecordType) {
		return true
	}

	return false
}

// SetCommentRecordType gets a reference to the given string and assigns it to the CommentRecordType field.
func (o *Comment) SetCommentRecordType(v string) {
	o.CommentRecordType = &v
}

// GetCommentRecordId returns the CommentRecordId field value if set, zero value otherwise.
func (o *Comment) GetCommentRecordId() string {
	if o == nil || IsNil(o.CommentRecordId) {
		var ret string
		return ret
	}
	return *o.CommentRecordId
}

// GetCommentRecordIdOk returns a tuple with the CommentRecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCommentRecordIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommentRecordId) {
		return nil, false
	}
	return o.CommentRecordId, true
}

// HasCommentRecordId returns a boolean if a field has been set.
func (o *Comment) HasCommentRecordId() bool {
	if o != nil && !IsNil(o.CommentRecordId) {
		return true
	}

	return false
}

// SetCommentRecordId gets a reference to the given string and assigns it to the CommentRecordId field.
func (o *Comment) SetCommentRecordId(v string) {
	o.CommentRecordId = &v
}

// GetReadAt returns the ReadAt field value if set, zero value otherwise.
func (o *Comment) GetReadAt() string {
	if o == nil || IsNil(o.ReadAt) {
		var ret string
		return ret
	}
	return *o.ReadAt
}

// GetReadAtOk returns a tuple with the ReadAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetReadAtOk() (*string, bool) {
	if o == nil || IsNil(o.ReadAt) {
		return nil, false
	}
	return o.ReadAt, true
}

// HasReadAt returns a boolean if a field has been set.
func (o *Comment) HasReadAt() bool {
	if o != nil && !IsNil(o.ReadAt) {
		return true
	}

	return false
}

// SetReadAt gets a reference to the given string and assigns it to the ReadAt field.
func (o *Comment) SetReadAt(v string) {
	o.ReadAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Comment) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Comment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Comment) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Comment) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Comment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Comment) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Commenter) {
		toSerialize["commenter"] = o.Commenter
	}
	if !IsNil(o.CommenterType) {
		toSerialize["commenter_type"] = o.CommenterType
	}
	if !IsNil(o.CommentRecordType) {
		toSerialize["comment_record_type"] = o.CommentRecordType
	}
	if !IsNil(o.CommentRecordId) {
		toSerialize["comment_record_id"] = o.CommentRecordId
	}
	if !IsNil(o.ReadAt) {
		toSerialize["read_at"] = o.ReadAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


