/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the NotificationEventCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationEventCondition{}

// NotificationEventCondition struct for NotificationEventCondition
type NotificationEventCondition struct {
	// A UUID.
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	NotificationEventId *string `json:"notification_event_id,omitempty"`
	AssociatedRecordType *string `json:"associated_record_type,omitempty"`
	Parameters []NotificationEventConditionParametersInner `json:"parameters,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// Dictates whether a notification channel id needs to be provided when creating a notficiation setting.
	AllowMultipleChannels *bool `json:"allow_multiple_channels,omitempty"`
	// Dictates whether a notification setting will take effect immediately.
	Asynchronous *bool `json:"asynchronous,omitempty"`
	// Dictates the supported notification channel types that can be emitted.
	SupportedChannels []string `json:"supported_channels,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewNotificationEventCondition instantiates a new NotificationEventCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationEventCondition() *NotificationEventCondition {
	this := NotificationEventCondition{}
	return &this
}

// NewNotificationEventConditionWithDefaults instantiates a new NotificationEventCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationEventConditionWithDefaults() *NotificationEventCondition {
	this := NotificationEventCondition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationEventCondition) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationEventCondition) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NotificationEventCondition) SetDescription(v string) {
	o.Description = &v
}

// GetNotificationEventId returns the NotificationEventId field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetNotificationEventId() string {
	if o == nil || IsNil(o.NotificationEventId) {
		var ret string
		return ret
	}
	return *o.NotificationEventId
}

// GetNotificationEventIdOk returns a tuple with the NotificationEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetNotificationEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationEventId) {
		return nil, false
	}
	return o.NotificationEventId, true
}

// HasNotificationEventId returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasNotificationEventId() bool {
	if o != nil && !IsNil(o.NotificationEventId) {
		return true
	}

	return false
}

// SetNotificationEventId gets a reference to the given string and assigns it to the NotificationEventId field.
func (o *NotificationEventCondition) SetNotificationEventId(v string) {
	o.NotificationEventId = &v
}

// GetAssociatedRecordType returns the AssociatedRecordType field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetAssociatedRecordType() string {
	if o == nil || IsNil(o.AssociatedRecordType) {
		var ret string
		return ret
	}
	return *o.AssociatedRecordType
}

// GetAssociatedRecordTypeOk returns a tuple with the AssociatedRecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetAssociatedRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssociatedRecordType) {
		return nil, false
	}
	return o.AssociatedRecordType, true
}

// HasAssociatedRecordType returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasAssociatedRecordType() bool {
	if o != nil && !IsNil(o.AssociatedRecordType) {
		return true
	}

	return false
}

// SetAssociatedRecordType gets a reference to the given string and assigns it to the AssociatedRecordType field.
func (o *NotificationEventCondition) SetAssociatedRecordType(v string) {
	o.AssociatedRecordType = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetParameters() []NotificationEventConditionParametersInner {
	if o == nil || IsNil(o.Parameters) {
		var ret []NotificationEventConditionParametersInner
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetParametersOk() ([]NotificationEventConditionParametersInner, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []NotificationEventConditionParametersInner and assigns it to the Parameters field.
func (o *NotificationEventCondition) SetParameters(v []NotificationEventConditionParametersInner) {
	o.Parameters = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NotificationEventCondition) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAllowMultipleChannels returns the AllowMultipleChannels field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetAllowMultipleChannels() bool {
	if o == nil || IsNil(o.AllowMultipleChannels) {
		var ret bool
		return ret
	}
	return *o.AllowMultipleChannels
}

// GetAllowMultipleChannelsOk returns a tuple with the AllowMultipleChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetAllowMultipleChannelsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultipleChannels) {
		return nil, false
	}
	return o.AllowMultipleChannels, true
}

// HasAllowMultipleChannels returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasAllowMultipleChannels() bool {
	if o != nil && !IsNil(o.AllowMultipleChannels) {
		return true
	}

	return false
}

// SetAllowMultipleChannels gets a reference to the given bool and assigns it to the AllowMultipleChannels field.
func (o *NotificationEventCondition) SetAllowMultipleChannels(v bool) {
	o.AllowMultipleChannels = &v
}

// GetAsynchronous returns the Asynchronous field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetAsynchronous() bool {
	if o == nil || IsNil(o.Asynchronous) {
		var ret bool
		return ret
	}
	return *o.Asynchronous
}

// GetAsynchronousOk returns a tuple with the Asynchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetAsynchronousOk() (*bool, bool) {
	if o == nil || IsNil(o.Asynchronous) {
		return nil, false
	}
	return o.Asynchronous, true
}

// HasAsynchronous returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasAsynchronous() bool {
	if o != nil && !IsNil(o.Asynchronous) {
		return true
	}

	return false
}

// SetAsynchronous gets a reference to the given bool and assigns it to the Asynchronous field.
func (o *NotificationEventCondition) SetAsynchronous(v bool) {
	o.Asynchronous = &v
}

// GetSupportedChannels returns the SupportedChannels field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetSupportedChannels() []string {
	if o == nil || IsNil(o.SupportedChannels) {
		var ret []string
		return ret
	}
	return o.SupportedChannels
}

// GetSupportedChannelsOk returns a tuple with the SupportedChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetSupportedChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedChannels) {
		return nil, false
	}
	return o.SupportedChannels, true
}

// HasSupportedChannels returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasSupportedChannels() bool {
	if o != nil && !IsNil(o.SupportedChannels) {
		return true
	}

	return false
}

// SetSupportedChannels gets a reference to the given []string and assigns it to the SupportedChannels field.
func (o *NotificationEventCondition) SetSupportedChannels(v []string) {
	o.SupportedChannels = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NotificationEventCondition) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NotificationEventCondition) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventCondition) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NotificationEventCondition) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NotificationEventCondition) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o NotificationEventCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationEventCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.NotificationEventId) {
		toSerialize["notification_event_id"] = o.NotificationEventId
	}
	if !IsNil(o.AssociatedRecordType) {
		toSerialize["associated_record_type"] = o.AssociatedRecordType
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AllowMultipleChannels) {
		toSerialize["allow_multiple_channels"] = o.AllowMultipleChannels
	}
	if !IsNil(o.Asynchronous) {
		toSerialize["asynchronous"] = o.Asynchronous
	}
	if !IsNil(o.SupportedChannels) {
		toSerialize["supported_channels"] = o.SupportedChannels
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableNotificationEventCondition struct {
	value *NotificationEventCondition
	isSet bool
}

func (v NullableNotificationEventCondition) Get() *NotificationEventCondition {
	return v.value
}

func (v *NullableNotificationEventCondition) Set(val *NotificationEventCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationEventCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationEventCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationEventCondition(val *NotificationEventCondition) *NullableNotificationEventCondition {
	return &NullableNotificationEventCondition{value: val, isSet: true}
}

func (v NullableNotificationEventCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationEventCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


