/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccessIPRangeListResponseSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessIPRangeListResponseSchema{}

// AccessIPRangeListResponseSchema struct for AccessIPRangeListResponseSchema
type AccessIPRangeListResponseSchema struct {
	Data []AccessIPRangeResponseSchema `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

type _AccessIPRangeListResponseSchema AccessIPRangeListResponseSchema

// NewAccessIPRangeListResponseSchema instantiates a new AccessIPRangeListResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessIPRangeListResponseSchema(data []AccessIPRangeResponseSchema, meta PaginationMeta) *AccessIPRangeListResponseSchema {
	this := AccessIPRangeListResponseSchema{}
	this.Data = data
	this.Meta = meta
	return &this
}

// NewAccessIPRangeListResponseSchemaWithDefaults instantiates a new AccessIPRangeListResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessIPRangeListResponseSchemaWithDefaults() *AccessIPRangeListResponseSchema {
	this := AccessIPRangeListResponseSchema{}
	return &this
}

// GetData returns the Data field value
func (o *AccessIPRangeListResponseSchema) GetData() []AccessIPRangeResponseSchema {
	if o == nil {
		var ret []AccessIPRangeResponseSchema
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AccessIPRangeListResponseSchema) GetDataOk() ([]AccessIPRangeResponseSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *AccessIPRangeListResponseSchema) SetData(v []AccessIPRangeResponseSchema) {
	o.Data = v
}

// GetMeta returns the Meta field value
func (o *AccessIPRangeListResponseSchema) GetMeta() PaginationMeta {
	if o == nil {
		var ret PaginationMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *AccessIPRangeListResponseSchema) GetMetaOk() (*PaginationMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *AccessIPRangeListResponseSchema) SetMeta(v PaginationMeta) {
	o.Meta = v
}

func (o AccessIPRangeListResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessIPRangeListResponseSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["meta"] = o.Meta
	return toSerialize, nil
}

func (o *AccessIPRangeListResponseSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessIPRangeListResponseSchema := _AccessIPRangeListResponseSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessIPRangeListResponseSchema)

	if err != nil {
		return err
	}

	*o = AccessIPRangeListResponseSchema(varAccessIPRangeListResponseSchema)

	return err
}

type NullableAccessIPRangeListResponseSchema struct {
	value *AccessIPRangeListResponseSchema
	isSet bool
}

func (v NullableAccessIPRangeListResponseSchema) Get() *AccessIPRangeListResponseSchema {
	return v.value
}

func (v *NullableAccessIPRangeListResponseSchema) Set(val *AccessIPRangeListResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessIPRangeListResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessIPRangeListResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessIPRangeListResponseSchema(val *AccessIPRangeListResponseSchema) *NullableAccessIPRangeListResponseSchema {
	return &NullableAccessIPRangeListResponseSchema{value: val, isSet: true}
}

func (v NullableAccessIPRangeListResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessIPRangeListResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


