/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendSIPInfoRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendSIPInfoRequest{}

// SendSIPInfoRequest struct for SendSIPInfoRequest
type SendSIPInfoRequest struct {
	// Content type of the INFO body. Must be MIME type compliant. There is a 1,400 bytes limit
	ContentType string `json:"content_type"`
	// Content of the SIP INFO
	Body string `json:"body"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
}

type _SendSIPInfoRequest SendSIPInfoRequest

// NewSendSIPInfoRequest instantiates a new SendSIPInfoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendSIPInfoRequest(contentType string, body string) *SendSIPInfoRequest {
	this := SendSIPInfoRequest{}
	this.ContentType = contentType
	this.Body = body
	return &this
}

// NewSendSIPInfoRequestWithDefaults instantiates a new SendSIPInfoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendSIPInfoRequestWithDefaults() *SendSIPInfoRequest {
	this := SendSIPInfoRequest{}
	return &this
}

// GetContentType returns the ContentType field value
func (o *SendSIPInfoRequest) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *SendSIPInfoRequest) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *SendSIPInfoRequest) SetContentType(v string) {
	o.ContentType = v
}

// GetBody returns the Body field value
func (o *SendSIPInfoRequest) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *SendSIPInfoRequest) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *SendSIPInfoRequest) SetBody(v string) {
	o.Body = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *SendSIPInfoRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSIPInfoRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *SendSIPInfoRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *SendSIPInfoRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *SendSIPInfoRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSIPInfoRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *SendSIPInfoRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *SendSIPInfoRequest) SetCommandId(v string) {
	o.CommandId = &v
}

func (o SendSIPInfoRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendSIPInfoRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content_type"] = o.ContentType
	toSerialize["body"] = o.Body
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	return toSerialize, nil
}

func (o *SendSIPInfoRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content_type",
		"body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendSIPInfoRequest := _SendSIPInfoRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendSIPInfoRequest)

	if err != nil {
		return err
	}

	*o = SendSIPInfoRequest(varSendSIPInfoRequest)

	return err
}

type NullableSendSIPInfoRequest struct {
	value *SendSIPInfoRequest
	isSet bool
}

func (v NullableSendSIPInfoRequest) Get() *SendSIPInfoRequest {
	return v.value
}

func (v *NullableSendSIPInfoRequest) Set(val *SendSIPInfoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendSIPInfoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendSIPInfoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendSIPInfoRequest(val *SendSIPInfoRequest) *NullableSendSIPInfoRequest {
	return &NullableSendSIPInfoRequest{value: val, isSet: true}
}

func (v NullableSendSIPInfoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendSIPInfoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


