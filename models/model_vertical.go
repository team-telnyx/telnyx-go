/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// Vertical Vertical or industry segment of the brand or campaign.
type Vertical string

// List of Vertical
const (
	REAL_ESTATE Vertical = "REAL_ESTATE"
	HEALTHCARE Vertical = "HEALTHCARE"
	ENERGY Vertical = "ENERGY"
	ENTERTAINMENT Vertical = "ENTERTAINMENT"
	RETAIL Vertical = "RETAIL"
	AGRICULTURE Vertical = "AGRICULTURE"
	INSURANCE Vertical = "INSURANCE"
	EDUCATION Vertical = "EDUCATION"
	HOSPITALITY Vertical = "HOSPITALITY"
	FINANCIAL Vertical = "FINANCIAL"
	GAMBLING Vertical = "GAMBLING"
	CONSTRUCTION Vertical = "CONSTRUCTION"
	NGO Vertical = "NGO"
	MANUFACTURING Vertical = "MANUFACTURING"
	GOVERNMENT Vertical = "GOVERNMENT"
	TECHNOLOGY Vertical = "TECHNOLOGY"
	COMMUNICATION Vertical = "COMMUNICATION"
)

// All allowed values of Vertical enum
var AllowedVerticalEnumValues = []Vertical{
	"REAL_ESTATE",
	"HEALTHCARE",
	"ENERGY",
	"ENTERTAINMENT",
	"RETAIL",
	"AGRICULTURE",
	"INSURANCE",
	"EDUCATION",
	"HOSPITALITY",
	"FINANCIAL",
	"GAMBLING",
	"CONSTRUCTION",
	"NGO",
	"MANUFACTURING",
	"GOVERNMENT",
	"TECHNOLOGY",
	"COMMUNICATION",
}

func (v *Vertical) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Vertical(value)
	for _, existing := range AllowedVerticalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Vertical", value)
}

// NewVerticalFromValue returns a pointer to a valid Vertical
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerticalFromValue(v string) (*Vertical, error) {
	ev := Vertical(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Vertical: valid values are %v", v, AllowedVerticalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Vertical) IsValid() bool {
	for _, existing := range AllowedVerticalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Vertical value
func (v Vertical) Ptr() *Vertical {
	return &v
}

type NullableVertical struct {
	value *Vertical
	isSet bool
}

func (v NullableVertical) Get() *Vertical {
	return v.value
}

func (v *NullableVertical) Set(val *Vertical) {
	v.value = val
	v.isSet = true
}

func (v NullableVertical) IsSet() bool {
	return v.isSet
}

func (v *NullableVertical) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVertical(val *Vertical) *NullableVertical {
	return &NullableVertical{value: val, isSet: true}
}

func (v NullableVertical) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVertical) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

