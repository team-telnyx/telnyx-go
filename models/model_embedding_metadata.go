/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbeddingMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingMetadata{}

// EmbeddingMetadata struct for EmbeddingMetadata
type EmbeddingMetadata struct {
	Source string `json:"source"`
	Checksum string `json:"checksum"`
	Embedding string `json:"embedding"`
	Filename string `json:"filename"`
	Certainty *float32 `json:"certainty,omitempty"`
	LoaderMetadata map[string]interface{} `json:"loader_metadata,omitempty"`
}

type _EmbeddingMetadata EmbeddingMetadata

// NewEmbeddingMetadata instantiates a new EmbeddingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingMetadata(source string, checksum string, embedding string, filename string) *EmbeddingMetadata {
	this := EmbeddingMetadata{}
	this.Source = source
	this.Checksum = checksum
	this.Embedding = embedding
	this.Filename = filename
	return &this
}

// NewEmbeddingMetadataWithDefaults instantiates a new EmbeddingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingMetadataWithDefaults() *EmbeddingMetadata {
	this := EmbeddingMetadata{}
	return &this
}

// GetSource returns the Source field value
func (o *EmbeddingMetadata) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *EmbeddingMetadata) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *EmbeddingMetadata) SetSource(v string) {
	o.Source = v
}

// GetChecksum returns the Checksum field value
func (o *EmbeddingMetadata) GetChecksum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value
// and a boolean to check if the value has been set.
func (o *EmbeddingMetadata) GetChecksumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checksum, true
}

// SetChecksum sets field value
func (o *EmbeddingMetadata) SetChecksum(v string) {
	o.Checksum = v
}

// GetEmbedding returns the Embedding field value
func (o *EmbeddingMetadata) GetEmbedding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Embedding
}

// GetEmbeddingOk returns a tuple with the Embedding field value
// and a boolean to check if the value has been set.
func (o *EmbeddingMetadata) GetEmbeddingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedding, true
}

// SetEmbedding sets field value
func (o *EmbeddingMetadata) SetEmbedding(v string) {
	o.Embedding = v
}

// GetFilename returns the Filename field value
func (o *EmbeddingMetadata) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *EmbeddingMetadata) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *EmbeddingMetadata) SetFilename(v string) {
	o.Filename = v
}

// GetCertainty returns the Certainty field value if set, zero value otherwise.
func (o *EmbeddingMetadata) GetCertainty() float32 {
	if o == nil || IsNil(o.Certainty) {
		var ret float32
		return ret
	}
	return *o.Certainty
}

// GetCertaintyOk returns a tuple with the Certainty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingMetadata) GetCertaintyOk() (*float32, bool) {
	if o == nil || IsNil(o.Certainty) {
		return nil, false
	}
	return o.Certainty, true
}

// HasCertainty returns a boolean if a field has been set.
func (o *EmbeddingMetadata) HasCertainty() bool {
	if o != nil && !IsNil(o.Certainty) {
		return true
	}

	return false
}

// SetCertainty gets a reference to the given float32 and assigns it to the Certainty field.
func (o *EmbeddingMetadata) SetCertainty(v float32) {
	o.Certainty = &v
}

// GetLoaderMetadata returns the LoaderMetadata field value if set, zero value otherwise.
func (o *EmbeddingMetadata) GetLoaderMetadata() map[string]interface{} {
	if o == nil || IsNil(o.LoaderMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.LoaderMetadata
}

// GetLoaderMetadataOk returns a tuple with the LoaderMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingMetadata) GetLoaderMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LoaderMetadata) {
		return map[string]interface{}{}, false
	}
	return o.LoaderMetadata, true
}

// HasLoaderMetadata returns a boolean if a field has been set.
func (o *EmbeddingMetadata) HasLoaderMetadata() bool {
	if o != nil && !IsNil(o.LoaderMetadata) {
		return true
	}

	return false
}

// SetLoaderMetadata gets a reference to the given map[string]interface{} and assigns it to the LoaderMetadata field.
func (o *EmbeddingMetadata) SetLoaderMetadata(v map[string]interface{}) {
	o.LoaderMetadata = v
}

func (o EmbeddingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["checksum"] = o.Checksum
	toSerialize["embedding"] = o.Embedding
	toSerialize["filename"] = o.Filename
	if !IsNil(o.Certainty) {
		toSerialize["certainty"] = o.Certainty
	}
	if !IsNil(o.LoaderMetadata) {
		toSerialize["loader_metadata"] = o.LoaderMetadata
	}
	return toSerialize, nil
}

func (o *EmbeddingMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"checksum",
		"embedding",
		"filename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingMetadata := _EmbeddingMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddingMetadata)

	if err != nil {
		return err
	}

	*o = EmbeddingMetadata(varEmbeddingMetadata)

	return err
}

type NullableEmbeddingMetadata struct {
	value *EmbeddingMetadata
	isSet bool
}

func (v NullableEmbeddingMetadata) Get() *EmbeddingMetadata {
	return v.value
}

func (v *NullableEmbeddingMetadata) Set(val *EmbeddingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingMetadata(val *EmbeddingMetadata) *NullableEmbeddingMetadata {
	return &NullableEmbeddingMetadata{value: val, isSet: true}
}

func (v NullableEmbeddingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


