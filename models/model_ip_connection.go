/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the IpConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpConnection{}

// IpConnection struct for IpConnection
type IpConnection struct {
	// Identifies the type of resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// Defaults to true
	Active *bool `json:"active,omitempty"`
	AnchorsiteOverride *AnchorsiteOverride `json:"anchorsite_override,omitempty"`
	ConnectionName *string `json:"connection_name,omitempty"`
	// One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.
	TransportProtocol *string `json:"transport_protocol,omitempty"`
	// When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.
	DefaultOnHoldComfortNoiseEnabled *bool `json:"default_on_hold_comfort_noise_enabled,omitempty"`
	DtmfType *DtmfType `json:"dtmf_type,omitempty"`
	// Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.
	EncodeContactHeaderEnabled *bool `json:"encode_contact_header_enabled,omitempty"`
	EncryptedMedia NullableEncryptedMedia `json:"encrypted_media,omitempty"`
	// Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.
	OnnetT38PassthroughEnabled *bool `json:"onnet_t38_passthrough_enabled,omitempty"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.
	WebhookEventUrl *string `json:"webhook_event_url,omitempty"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverUrl NullableString `json:"webhook_event_failover_url,omitempty"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookApiVersion *string `json:"webhook_api_version,omitempty"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs NullableInt32 `json:"webhook_timeout_secs,omitempty"`
	RtcpSettings *ConnectionRtcpSettings `json:"rtcp_settings,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Tags associated with the connection.
	Tags []string `json:"tags,omitempty"`
	Inbound *InboundIp `json:"inbound,omitempty"`
	Outbound *OutboundIp `json:"outbound,omitempty"`
}

// NewIpConnection instantiates a new IpConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpConnection() *IpConnection {
	this := IpConnection{}
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	var transportProtocol string = "UDP"
	this.TransportProtocol = &transportProtocol
	var defaultOnHoldComfortNoiseEnabled bool = true
	this.DefaultOnHoldComfortNoiseEnabled = &defaultOnHoldComfortNoiseEnabled
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var encodeContactHeaderEnabled bool = false
	this.EncodeContactHeaderEnabled = &encodeContactHeaderEnabled
	var onnetT38PassthroughEnabled bool = false
	this.OnnetT38PassthroughEnabled = &onnetT38PassthroughEnabled
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	return &this
}

// NewIpConnectionWithDefaults instantiates a new IpConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpConnectionWithDefaults() *IpConnection {
	this := IpConnection{}
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	var transportProtocol string = "UDP"
	this.TransportProtocol = &transportProtocol
	var defaultOnHoldComfortNoiseEnabled bool = true
	this.DefaultOnHoldComfortNoiseEnabled = &defaultOnHoldComfortNoiseEnabled
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var encodeContactHeaderEnabled bool = false
	this.EncodeContactHeaderEnabled = &encodeContactHeaderEnabled
	var onnetT38PassthroughEnabled bool = false
	this.OnnetT38PassthroughEnabled = &onnetT38PassthroughEnabled
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpConnection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpConnection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpConnection) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *IpConnection) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *IpConnection) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *IpConnection) SetRecordType(v string) {
	o.RecordType = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *IpConnection) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *IpConnection) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *IpConnection) SetActive(v bool) {
	o.Active = &v
}

// GetAnchorsiteOverride returns the AnchorsiteOverride field value if set, zero value otherwise.
func (o *IpConnection) GetAnchorsiteOverride() AnchorsiteOverride {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		var ret AnchorsiteOverride
		return ret
	}
	return *o.AnchorsiteOverride
}

// GetAnchorsiteOverrideOk returns a tuple with the AnchorsiteOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetAnchorsiteOverrideOk() (*AnchorsiteOverride, bool) {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		return nil, false
	}
	return o.AnchorsiteOverride, true
}

// HasAnchorsiteOverride returns a boolean if a field has been set.
func (o *IpConnection) HasAnchorsiteOverride() bool {
	if o != nil && !IsNil(o.AnchorsiteOverride) {
		return true
	}

	return false
}

// SetAnchorsiteOverride gets a reference to the given AnchorsiteOverride and assigns it to the AnchorsiteOverride field.
func (o *IpConnection) SetAnchorsiteOverride(v AnchorsiteOverride) {
	o.AnchorsiteOverride = &v
}

// GetConnectionName returns the ConnectionName field value if set, zero value otherwise.
func (o *IpConnection) GetConnectionName() string {
	if o == nil || IsNil(o.ConnectionName) {
		var ret string
		return ret
	}
	return *o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetConnectionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionName) {
		return nil, false
	}
	return o.ConnectionName, true
}

// HasConnectionName returns a boolean if a field has been set.
func (o *IpConnection) HasConnectionName() bool {
	if o != nil && !IsNil(o.ConnectionName) {
		return true
	}

	return false
}

// SetConnectionName gets a reference to the given string and assigns it to the ConnectionName field.
func (o *IpConnection) SetConnectionName(v string) {
	o.ConnectionName = &v
}

// GetTransportProtocol returns the TransportProtocol field value if set, zero value otherwise.
func (o *IpConnection) GetTransportProtocol() string {
	if o == nil || IsNil(o.TransportProtocol) {
		var ret string
		return ret
	}
	return *o.TransportProtocol
}

// GetTransportProtocolOk returns a tuple with the TransportProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetTransportProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.TransportProtocol) {
		return nil, false
	}
	return o.TransportProtocol, true
}

// HasTransportProtocol returns a boolean if a field has been set.
func (o *IpConnection) HasTransportProtocol() bool {
	if o != nil && !IsNil(o.TransportProtocol) {
		return true
	}

	return false
}

// SetTransportProtocol gets a reference to the given string and assigns it to the TransportProtocol field.
func (o *IpConnection) SetTransportProtocol(v string) {
	o.TransportProtocol = &v
}

// GetDefaultOnHoldComfortNoiseEnabled returns the DefaultOnHoldComfortNoiseEnabled field value if set, zero value otherwise.
func (o *IpConnection) GetDefaultOnHoldComfortNoiseEnabled() bool {
	if o == nil || IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		var ret bool
		return ret
	}
	return *o.DefaultOnHoldComfortNoiseEnabled
}

// GetDefaultOnHoldComfortNoiseEnabledOk returns a tuple with the DefaultOnHoldComfortNoiseEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetDefaultOnHoldComfortNoiseEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		return nil, false
	}
	return o.DefaultOnHoldComfortNoiseEnabled, true
}

// HasDefaultOnHoldComfortNoiseEnabled returns a boolean if a field has been set.
func (o *IpConnection) HasDefaultOnHoldComfortNoiseEnabled() bool {
	if o != nil && !IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		return true
	}

	return false
}

// SetDefaultOnHoldComfortNoiseEnabled gets a reference to the given bool and assigns it to the DefaultOnHoldComfortNoiseEnabled field.
func (o *IpConnection) SetDefaultOnHoldComfortNoiseEnabled(v bool) {
	o.DefaultOnHoldComfortNoiseEnabled = &v
}

// GetDtmfType returns the DtmfType field value if set, zero value otherwise.
func (o *IpConnection) GetDtmfType() DtmfType {
	if o == nil || IsNil(o.DtmfType) {
		var ret DtmfType
		return ret
	}
	return *o.DtmfType
}

// GetDtmfTypeOk returns a tuple with the DtmfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetDtmfTypeOk() (*DtmfType, bool) {
	if o == nil || IsNil(o.DtmfType) {
		return nil, false
	}
	return o.DtmfType, true
}

// HasDtmfType returns a boolean if a field has been set.
func (o *IpConnection) HasDtmfType() bool {
	if o != nil && !IsNil(o.DtmfType) {
		return true
	}

	return false
}

// SetDtmfType gets a reference to the given DtmfType and assigns it to the DtmfType field.
func (o *IpConnection) SetDtmfType(v DtmfType) {
	o.DtmfType = &v
}

// GetEncodeContactHeaderEnabled returns the EncodeContactHeaderEnabled field value if set, zero value otherwise.
func (o *IpConnection) GetEncodeContactHeaderEnabled() bool {
	if o == nil || IsNil(o.EncodeContactHeaderEnabled) {
		var ret bool
		return ret
	}
	return *o.EncodeContactHeaderEnabled
}

// GetEncodeContactHeaderEnabledOk returns a tuple with the EncodeContactHeaderEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetEncodeContactHeaderEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncodeContactHeaderEnabled) {
		return nil, false
	}
	return o.EncodeContactHeaderEnabled, true
}

// HasEncodeContactHeaderEnabled returns a boolean if a field has been set.
func (o *IpConnection) HasEncodeContactHeaderEnabled() bool {
	if o != nil && !IsNil(o.EncodeContactHeaderEnabled) {
		return true
	}

	return false
}

// SetEncodeContactHeaderEnabled gets a reference to the given bool and assigns it to the EncodeContactHeaderEnabled field.
func (o *IpConnection) SetEncodeContactHeaderEnabled(v bool) {
	o.EncodeContactHeaderEnabled = &v
}

// GetEncryptedMedia returns the EncryptedMedia field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConnection) GetEncryptedMedia() EncryptedMedia {
	if o == nil || IsNil(o.EncryptedMedia.Get()) {
		var ret EncryptedMedia
		return ret
	}
	return *o.EncryptedMedia.Get()
}

// GetEncryptedMediaOk returns a tuple with the EncryptedMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConnection) GetEncryptedMediaOk() (*EncryptedMedia, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptedMedia.Get(), o.EncryptedMedia.IsSet()
}

// HasEncryptedMedia returns a boolean if a field has been set.
func (o *IpConnection) HasEncryptedMedia() bool {
	if o != nil && o.EncryptedMedia.IsSet() {
		return true
	}

	return false
}

// SetEncryptedMedia gets a reference to the given NullableEncryptedMedia and assigns it to the EncryptedMedia field.
func (o *IpConnection) SetEncryptedMedia(v EncryptedMedia) {
	o.EncryptedMedia.Set(&v)
}
// SetEncryptedMediaNil sets the value for EncryptedMedia to be an explicit nil
func (o *IpConnection) SetEncryptedMediaNil() {
	o.EncryptedMedia.Set(nil)
}

// UnsetEncryptedMedia ensures that no value is present for EncryptedMedia, not even an explicit nil
func (o *IpConnection) UnsetEncryptedMedia() {
	o.EncryptedMedia.Unset()
}

// GetOnnetT38PassthroughEnabled returns the OnnetT38PassthroughEnabled field value if set, zero value otherwise.
func (o *IpConnection) GetOnnetT38PassthroughEnabled() bool {
	if o == nil || IsNil(o.OnnetT38PassthroughEnabled) {
		var ret bool
		return ret
	}
	return *o.OnnetT38PassthroughEnabled
}

// GetOnnetT38PassthroughEnabledOk returns a tuple with the OnnetT38PassthroughEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetOnnetT38PassthroughEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OnnetT38PassthroughEnabled) {
		return nil, false
	}
	return o.OnnetT38PassthroughEnabled, true
}

// HasOnnetT38PassthroughEnabled returns a boolean if a field has been set.
func (o *IpConnection) HasOnnetT38PassthroughEnabled() bool {
	if o != nil && !IsNil(o.OnnetT38PassthroughEnabled) {
		return true
	}

	return false
}

// SetOnnetT38PassthroughEnabled gets a reference to the given bool and assigns it to the OnnetT38PassthroughEnabled field.
func (o *IpConnection) SetOnnetT38PassthroughEnabled(v bool) {
	o.OnnetT38PassthroughEnabled = &v
}

// GetWebhookEventUrl returns the WebhookEventUrl field value if set, zero value otherwise.
func (o *IpConnection) GetWebhookEventUrl() string {
	if o == nil || IsNil(o.WebhookEventUrl) {
		var ret string
		return ret
	}
	return *o.WebhookEventUrl
}

// GetWebhookEventUrlOk returns a tuple with the WebhookEventUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetWebhookEventUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookEventUrl) {
		return nil, false
	}
	return o.WebhookEventUrl, true
}

// HasWebhookEventUrl returns a boolean if a field has been set.
func (o *IpConnection) HasWebhookEventUrl() bool {
	if o != nil && !IsNil(o.WebhookEventUrl) {
		return true
	}

	return false
}

// SetWebhookEventUrl gets a reference to the given string and assigns it to the WebhookEventUrl field.
func (o *IpConnection) SetWebhookEventUrl(v string) {
	o.WebhookEventUrl = &v
}

// GetWebhookEventFailoverUrl returns the WebhookEventFailoverUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConnection) GetWebhookEventFailoverUrl() string {
	if o == nil || IsNil(o.WebhookEventFailoverUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookEventFailoverUrl.Get()
}

// GetWebhookEventFailoverUrlOk returns a tuple with the WebhookEventFailoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConnection) GetWebhookEventFailoverUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookEventFailoverUrl.Get(), o.WebhookEventFailoverUrl.IsSet()
}

// HasWebhookEventFailoverUrl returns a boolean if a field has been set.
func (o *IpConnection) HasWebhookEventFailoverUrl() bool {
	if o != nil && o.WebhookEventFailoverUrl.IsSet() {
		return true
	}

	return false
}

// SetWebhookEventFailoverUrl gets a reference to the given NullableString and assigns it to the WebhookEventFailoverUrl field.
func (o *IpConnection) SetWebhookEventFailoverUrl(v string) {
	o.WebhookEventFailoverUrl.Set(&v)
}
// SetWebhookEventFailoverUrlNil sets the value for WebhookEventFailoverUrl to be an explicit nil
func (o *IpConnection) SetWebhookEventFailoverUrlNil() {
	o.WebhookEventFailoverUrl.Set(nil)
}

// UnsetWebhookEventFailoverUrl ensures that no value is present for WebhookEventFailoverUrl, not even an explicit nil
func (o *IpConnection) UnsetWebhookEventFailoverUrl() {
	o.WebhookEventFailoverUrl.Unset()
}

// GetWebhookApiVersion returns the WebhookApiVersion field value if set, zero value otherwise.
func (o *IpConnection) GetWebhookApiVersion() string {
	if o == nil || IsNil(o.WebhookApiVersion) {
		var ret string
		return ret
	}
	return *o.WebhookApiVersion
}

// GetWebhookApiVersionOk returns a tuple with the WebhookApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetWebhookApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookApiVersion) {
		return nil, false
	}
	return o.WebhookApiVersion, true
}

// HasWebhookApiVersion returns a boolean if a field has been set.
func (o *IpConnection) HasWebhookApiVersion() bool {
	if o != nil && !IsNil(o.WebhookApiVersion) {
		return true
	}

	return false
}

// SetWebhookApiVersion gets a reference to the given string and assigns it to the WebhookApiVersion field.
func (o *IpConnection) SetWebhookApiVersion(v string) {
	o.WebhookApiVersion = &v
}

// GetWebhookTimeoutSecs returns the WebhookTimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConnection) GetWebhookTimeoutSecs() int32 {
	if o == nil || IsNil(o.WebhookTimeoutSecs.Get()) {
		var ret int32
		return ret
	}
	return *o.WebhookTimeoutSecs.Get()
}

// GetWebhookTimeoutSecsOk returns a tuple with the WebhookTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConnection) GetWebhookTimeoutSecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookTimeoutSecs.Get(), o.WebhookTimeoutSecs.IsSet()
}

// HasWebhookTimeoutSecs returns a boolean if a field has been set.
func (o *IpConnection) HasWebhookTimeoutSecs() bool {
	if o != nil && o.WebhookTimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetWebhookTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the WebhookTimeoutSecs field.
func (o *IpConnection) SetWebhookTimeoutSecs(v int32) {
	o.WebhookTimeoutSecs.Set(&v)
}
// SetWebhookTimeoutSecsNil sets the value for WebhookTimeoutSecs to be an explicit nil
func (o *IpConnection) SetWebhookTimeoutSecsNil() {
	o.WebhookTimeoutSecs.Set(nil)
}

// UnsetWebhookTimeoutSecs ensures that no value is present for WebhookTimeoutSecs, not even an explicit nil
func (o *IpConnection) UnsetWebhookTimeoutSecs() {
	o.WebhookTimeoutSecs.Unset()
}

// GetRtcpSettings returns the RtcpSettings field value if set, zero value otherwise.
func (o *IpConnection) GetRtcpSettings() ConnectionRtcpSettings {
	if o == nil || IsNil(o.RtcpSettings) {
		var ret ConnectionRtcpSettings
		return ret
	}
	return *o.RtcpSettings
}

// GetRtcpSettingsOk returns a tuple with the RtcpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetRtcpSettingsOk() (*ConnectionRtcpSettings, bool) {
	if o == nil || IsNil(o.RtcpSettings) {
		return nil, false
	}
	return o.RtcpSettings, true
}

// HasRtcpSettings returns a boolean if a field has been set.
func (o *IpConnection) HasRtcpSettings() bool {
	if o != nil && !IsNil(o.RtcpSettings) {
		return true
	}

	return false
}

// SetRtcpSettings gets a reference to the given ConnectionRtcpSettings and assigns it to the RtcpSettings field.
func (o *IpConnection) SetRtcpSettings(v ConnectionRtcpSettings) {
	o.RtcpSettings = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IpConnection) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IpConnection) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *IpConnection) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IpConnection) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IpConnection) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *IpConnection) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *IpConnection) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IpConnection) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *IpConnection) SetTags(v []string) {
	o.Tags = v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *IpConnection) GetInbound() InboundIp {
	if o == nil || IsNil(o.Inbound) {
		var ret InboundIp
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetInboundOk() (*InboundIp, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *IpConnection) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given InboundIp and assigns it to the Inbound field.
func (o *IpConnection) SetInbound(v InboundIp) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *IpConnection) GetOutbound() OutboundIp {
	if o == nil || IsNil(o.Outbound) {
		var ret OutboundIp
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConnection) GetOutboundOk() (*OutboundIp, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *IpConnection) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given OutboundIp and assigns it to the Outbound field.
func (o *IpConnection) SetOutbound(v OutboundIp) {
	o.Outbound = &v
}

func (o IpConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AnchorsiteOverride) {
		toSerialize["anchorsite_override"] = o.AnchorsiteOverride
	}
	if !IsNil(o.ConnectionName) {
		toSerialize["connection_name"] = o.ConnectionName
	}
	if !IsNil(o.TransportProtocol) {
		toSerialize["transport_protocol"] = o.TransportProtocol
	}
	if !IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		toSerialize["default_on_hold_comfort_noise_enabled"] = o.DefaultOnHoldComfortNoiseEnabled
	}
	if !IsNil(o.DtmfType) {
		toSerialize["dtmf_type"] = o.DtmfType
	}
	if !IsNil(o.EncodeContactHeaderEnabled) {
		toSerialize["encode_contact_header_enabled"] = o.EncodeContactHeaderEnabled
	}
	if o.EncryptedMedia.IsSet() {
		toSerialize["encrypted_media"] = o.EncryptedMedia.Get()
	}
	if !IsNil(o.OnnetT38PassthroughEnabled) {
		toSerialize["onnet_t38_passthrough_enabled"] = o.OnnetT38PassthroughEnabled
	}
	if !IsNil(o.WebhookEventUrl) {
		toSerialize["webhook_event_url"] = o.WebhookEventUrl
	}
	if o.WebhookEventFailoverUrl.IsSet() {
		toSerialize["webhook_event_failover_url"] = o.WebhookEventFailoverUrl.Get()
	}
	if !IsNil(o.WebhookApiVersion) {
		toSerialize["webhook_api_version"] = o.WebhookApiVersion
	}
	if o.WebhookTimeoutSecs.IsSet() {
		toSerialize["webhook_timeout_secs"] = o.WebhookTimeoutSecs.Get()
	}
	if !IsNil(o.RtcpSettings) {
		toSerialize["rtcp_settings"] = o.RtcpSettings
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	return toSerialize, nil
}

type NullableIpConnection struct {
	value *IpConnection
	isSet bool
}

func (v NullableIpConnection) Get() *IpConnection {
	return v.value
}

func (v *NullableIpConnection) Set(val *IpConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableIpConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableIpConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpConnection(val *IpConnection) *NullableIpConnection {
	return &NullableIpConnection{value: val, isSet: true}
}

func (v NullableIpConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


