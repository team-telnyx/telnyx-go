/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the PortingOrderRequirementDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortingOrderRequirementDetail{}

// PortingOrderRequirementDetail struct for PortingOrderRequirementDetail
type PortingOrderRequirementDetail struct {
	// Type of value expected on field_value field
	FieldType *string `json:"field_type,omitempty"`
	// Identifies the document that satisfies this requirement
	FieldValue *string `json:"field_value,omitempty"`
	RequirementType *PortingOrderRequirementDetailRequirementType `json:"requirement_type,omitempty"`
	// Status of the requirement
	RequirementStatus *string `json:"requirement_status,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
}

// NewPortingOrderRequirementDetail instantiates a new PortingOrderRequirementDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortingOrderRequirementDetail() *PortingOrderRequirementDetail {
	this := PortingOrderRequirementDetail{}
	return &this
}

// NewPortingOrderRequirementDetailWithDefaults instantiates a new PortingOrderRequirementDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortingOrderRequirementDetailWithDefaults() *PortingOrderRequirementDetail {
	this := PortingOrderRequirementDetail{}
	return &this
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *PortingOrderRequirementDetail) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderRequirementDetail) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *PortingOrderRequirementDetail) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *PortingOrderRequirementDetail) SetFieldType(v string) {
	o.FieldType = &v
}

// GetFieldValue returns the FieldValue field value if set, zero value otherwise.
func (o *PortingOrderRequirementDetail) GetFieldValue() string {
	if o == nil || IsNil(o.FieldValue) {
		var ret string
		return ret
	}
	return *o.FieldValue
}

// GetFieldValueOk returns a tuple with the FieldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderRequirementDetail) GetFieldValueOk() (*string, bool) {
	if o == nil || IsNil(o.FieldValue) {
		return nil, false
	}
	return o.FieldValue, true
}

// HasFieldValue returns a boolean if a field has been set.
func (o *PortingOrderRequirementDetail) HasFieldValue() bool {
	if o != nil && !IsNil(o.FieldValue) {
		return true
	}

	return false
}

// SetFieldValue gets a reference to the given string and assigns it to the FieldValue field.
func (o *PortingOrderRequirementDetail) SetFieldValue(v string) {
	o.FieldValue = &v
}

// GetRequirementType returns the RequirementType field value if set, zero value otherwise.
func (o *PortingOrderRequirementDetail) GetRequirementType() PortingOrderRequirementDetailRequirementType {
	if o == nil || IsNil(o.RequirementType) {
		var ret PortingOrderRequirementDetailRequirementType
		return ret
	}
	return *o.RequirementType
}

// GetRequirementTypeOk returns a tuple with the RequirementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderRequirementDetail) GetRequirementTypeOk() (*PortingOrderRequirementDetailRequirementType, bool) {
	if o == nil || IsNil(o.RequirementType) {
		return nil, false
	}
	return o.RequirementType, true
}

// HasRequirementType returns a boolean if a field has been set.
func (o *PortingOrderRequirementDetail) HasRequirementType() bool {
	if o != nil && !IsNil(o.RequirementType) {
		return true
	}

	return false
}

// SetRequirementType gets a reference to the given PortingOrderRequirementDetailRequirementType and assigns it to the RequirementType field.
func (o *PortingOrderRequirementDetail) SetRequirementType(v PortingOrderRequirementDetailRequirementType) {
	o.RequirementType = &v
}

// GetRequirementStatus returns the RequirementStatus field value if set, zero value otherwise.
func (o *PortingOrderRequirementDetail) GetRequirementStatus() string {
	if o == nil || IsNil(o.RequirementStatus) {
		var ret string
		return ret
	}
	return *o.RequirementStatus
}

// GetRequirementStatusOk returns a tuple with the RequirementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderRequirementDetail) GetRequirementStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RequirementStatus) {
		return nil, false
	}
	return o.RequirementStatus, true
}

// HasRequirementStatus returns a boolean if a field has been set.
func (o *PortingOrderRequirementDetail) HasRequirementStatus() bool {
	if o != nil && !IsNil(o.RequirementStatus) {
		return true
	}

	return false
}

// SetRequirementStatus gets a reference to the given string and assigns it to the RequirementStatus field.
func (o *PortingOrderRequirementDetail) SetRequirementStatus(v string) {
	o.RequirementStatus = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *PortingOrderRequirementDetail) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderRequirementDetail) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *PortingOrderRequirementDetail) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *PortingOrderRequirementDetail) SetRecordType(v string) {
	o.RecordType = &v
}

func (o PortingOrderRequirementDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortingOrderRequirementDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldType) {
		toSerialize["field_type"] = o.FieldType
	}
	if !IsNil(o.FieldValue) {
		toSerialize["field_value"] = o.FieldValue
	}
	if !IsNil(o.RequirementType) {
		toSerialize["requirement_type"] = o.RequirementType
	}
	if !IsNil(o.RequirementStatus) {
		toSerialize["requirement_status"] = o.RequirementStatus
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullablePortingOrderRequirementDetail struct {
	value *PortingOrderRequirementDetail
	isSet bool
}

func (v NullablePortingOrderRequirementDetail) Get() *PortingOrderRequirementDetail {
	return v.value
}

func (v *NullablePortingOrderRequirementDetail) Set(val *PortingOrderRequirementDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingOrderRequirementDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingOrderRequirementDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingOrderRequirementDetail(val *PortingOrderRequirementDetail) *NullablePortingOrderRequirementDetail {
	return &NullablePortingOrderRequirementDetail{value: val, isSet: true}
}

func (v NullablePortingOrderRequirementDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingOrderRequirementDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


