/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ValidateAddressField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateAddressField{}

// ValidateAddressField struct for ValidateAddressField
type ValidateAddressField struct {
	// The primary street address information about the address.
	StreetAddress *string `json:"street_address,omitempty"`
	// Additional street address information about the address such as, but not limited to, unit number or apartment number.
	ExtendedAddress *string `json:"extended_address,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the city of the address.
	Locality *string `json:"locality,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the state of the address.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// The postal code of the address.
	PostalCode *string `json:"postal_code,omitempty"`
	// The two-character (ISO 3166-1 alpha-2) country code of the address.
	CountryCode *string `json:"country_code,omitempty"`
}

// NewValidateAddressField instantiates a new ValidateAddressField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateAddressField() *ValidateAddressField {
	this := ValidateAddressField{}
	return &this
}

// NewValidateAddressFieldWithDefaults instantiates a new ValidateAddressField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateAddressFieldWithDefaults() *ValidateAddressField {
	this := ValidateAddressField{}
	return &this
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *ValidateAddressField) GetStreetAddress() string {
	if o == nil || IsNil(o.StreetAddress) {
		var ret string
		return ret
	}
	return *o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressField) GetStreetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.StreetAddress) {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *ValidateAddressField) HasStreetAddress() bool {
	if o != nil && !IsNil(o.StreetAddress) {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given string and assigns it to the StreetAddress field.
func (o *ValidateAddressField) SetStreetAddress(v string) {
	o.StreetAddress = &v
}

// GetExtendedAddress returns the ExtendedAddress field value if set, zero value otherwise.
func (o *ValidateAddressField) GetExtendedAddress() string {
	if o == nil || IsNil(o.ExtendedAddress) {
		var ret string
		return ret
	}
	return *o.ExtendedAddress
}

// GetExtendedAddressOk returns a tuple with the ExtendedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressField) GetExtendedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendedAddress) {
		return nil, false
	}
	return o.ExtendedAddress, true
}

// HasExtendedAddress returns a boolean if a field has been set.
func (o *ValidateAddressField) HasExtendedAddress() bool {
	if o != nil && !IsNil(o.ExtendedAddress) {
		return true
	}

	return false
}

// SetExtendedAddress gets a reference to the given string and assigns it to the ExtendedAddress field.
func (o *ValidateAddressField) SetExtendedAddress(v string) {
	o.ExtendedAddress = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *ValidateAddressField) GetLocality() string {
	if o == nil || IsNil(o.Locality) {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressField) GetLocalityOk() (*string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *ValidateAddressField) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *ValidateAddressField) SetLocality(v string) {
	o.Locality = &v
}

// GetAdministrativeArea returns the AdministrativeArea field value if set, zero value otherwise.
func (o *ValidateAddressField) GetAdministrativeArea() string {
	if o == nil || IsNil(o.AdministrativeArea) {
		var ret string
		return ret
	}
	return *o.AdministrativeArea
}

// GetAdministrativeAreaOk returns a tuple with the AdministrativeArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressField) GetAdministrativeAreaOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrativeArea) {
		return nil, false
	}
	return o.AdministrativeArea, true
}

// HasAdministrativeArea returns a boolean if a field has been set.
func (o *ValidateAddressField) HasAdministrativeArea() bool {
	if o != nil && !IsNil(o.AdministrativeArea) {
		return true
	}

	return false
}

// SetAdministrativeArea gets a reference to the given string and assigns it to the AdministrativeArea field.
func (o *ValidateAddressField) SetAdministrativeArea(v string) {
	o.AdministrativeArea = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *ValidateAddressField) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressField) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *ValidateAddressField) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *ValidateAddressField) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ValidateAddressField) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressField) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ValidateAddressField) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ValidateAddressField) SetCountryCode(v string) {
	o.CountryCode = &v
}

func (o ValidateAddressField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateAddressField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StreetAddress) {
		toSerialize["street_address"] = o.StreetAddress
	}
	if !IsNil(o.ExtendedAddress) {
		toSerialize["extended_address"] = o.ExtendedAddress
	}
	if !IsNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !IsNil(o.AdministrativeArea) {
		toSerialize["administrative_area"] = o.AdministrativeArea
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	return toSerialize, nil
}

type NullableValidateAddressField struct {
	value *ValidateAddressField
	isSet bool
}

func (v NullableValidateAddressField) Get() *ValidateAddressField {
	return v.value
}

func (v *NullableValidateAddressField) Set(val *ValidateAddressField) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateAddressField) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateAddressField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateAddressField(val *ValidateAddressField) *NullableValidateAddressField {
	return &NullableValidateAddressField{value: val, isSet: true}
}

func (v NullableValidateAddressField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateAddressField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


