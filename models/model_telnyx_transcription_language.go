/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TelnyxTranscriptionLanguage Language to use for speech recognition
type TelnyxTranscriptionLanguage string

// List of TelnyxTranscriptionLanguage
const (
	EN TelnyxTranscriptionLanguage = "en"
	ZH TelnyxTranscriptionLanguage = "zh"
	DE TelnyxTranscriptionLanguage = "de"
	ES TelnyxTranscriptionLanguage = "es"
	RU TelnyxTranscriptionLanguage = "ru"
	KO TelnyxTranscriptionLanguage = "ko"
	FR TelnyxTranscriptionLanguage = "fr"
	JA TelnyxTranscriptionLanguage = "ja"
	PT TelnyxTranscriptionLanguage = "pt"
	TR TelnyxTranscriptionLanguage = "tr"
	PL TelnyxTranscriptionLanguage = "pl"
	CA TelnyxTranscriptionLanguage = "ca"
	NL TelnyxTranscriptionLanguage = "nl"
	AR TelnyxTranscriptionLanguage = "ar"
	SV TelnyxTranscriptionLanguage = "sv"
	IT TelnyxTranscriptionLanguage = "it"
	ID TelnyxTranscriptionLanguage = "id"
	HI TelnyxTranscriptionLanguage = "hi"
	FI TelnyxTranscriptionLanguage = "fi"
	VI TelnyxTranscriptionLanguage = "vi"
	HE TelnyxTranscriptionLanguage = "he"
	UK TelnyxTranscriptionLanguage = "uk"
	EL TelnyxTranscriptionLanguage = "el"
	MS TelnyxTranscriptionLanguage = "ms"
	CS TelnyxTranscriptionLanguage = "cs"
	RO TelnyxTranscriptionLanguage = "ro"
	DA TelnyxTranscriptionLanguage = "da"
	HU TelnyxTranscriptionLanguage = "hu"
	TA TelnyxTranscriptionLanguage = "ta"
	NO TelnyxTranscriptionLanguage = "no"
	TH TelnyxTranscriptionLanguage = "th"
	UR TelnyxTranscriptionLanguage = "ur"
	HR TelnyxTranscriptionLanguage = "hr"
	BG TelnyxTranscriptionLanguage = "bg"
	LT TelnyxTranscriptionLanguage = "lt"
	LA TelnyxTranscriptionLanguage = "la"
	MI TelnyxTranscriptionLanguage = "mi"
	ML TelnyxTranscriptionLanguage = "ml"
	CY TelnyxTranscriptionLanguage = "cy"
	SK TelnyxTranscriptionLanguage = "sk"
	TE TelnyxTranscriptionLanguage = "te"
	FA TelnyxTranscriptionLanguage = "fa"
	LV TelnyxTranscriptionLanguage = "lv"
	BN TelnyxTranscriptionLanguage = "bn"
	SR TelnyxTranscriptionLanguage = "sr"
	AZ TelnyxTranscriptionLanguage = "az"
	SL TelnyxTranscriptionLanguage = "sl"
	KN TelnyxTranscriptionLanguage = "kn"
	ET TelnyxTranscriptionLanguage = "et"
	MK TelnyxTranscriptionLanguage = "mk"
	BR TelnyxTranscriptionLanguage = "br"
	EU TelnyxTranscriptionLanguage = "eu"
	IS TelnyxTranscriptionLanguage = "is"
	HY TelnyxTranscriptionLanguage = "hy"
	NE TelnyxTranscriptionLanguage = "ne"
	MN TelnyxTranscriptionLanguage = "mn"
	BS TelnyxTranscriptionLanguage = "bs"
	KK TelnyxTranscriptionLanguage = "kk"
	SQ TelnyxTranscriptionLanguage = "sq"
	SW TelnyxTranscriptionLanguage = "sw"
	GL TelnyxTranscriptionLanguage = "gl"
	MR TelnyxTranscriptionLanguage = "mr"
	PA TelnyxTranscriptionLanguage = "pa"
	SI TelnyxTranscriptionLanguage = "si"
	KM TelnyxTranscriptionLanguage = "km"
	SN TelnyxTranscriptionLanguage = "sn"
	YO TelnyxTranscriptionLanguage = "yo"
	SO TelnyxTranscriptionLanguage = "so"
	AF TelnyxTranscriptionLanguage = "af"
	OC TelnyxTranscriptionLanguage = "oc"
	KA TelnyxTranscriptionLanguage = "ka"
	BE TelnyxTranscriptionLanguage = "be"
	TG TelnyxTranscriptionLanguage = "tg"
	SD TelnyxTranscriptionLanguage = "sd"
	GU TelnyxTranscriptionLanguage = "gu"
	AM TelnyxTranscriptionLanguage = "am"
	YI TelnyxTranscriptionLanguage = "yi"
	LO TelnyxTranscriptionLanguage = "lo"
	UZ TelnyxTranscriptionLanguage = "uz"
	FO TelnyxTranscriptionLanguage = "fo"
	HT TelnyxTranscriptionLanguage = "ht"
	PS TelnyxTranscriptionLanguage = "ps"
	TK TelnyxTranscriptionLanguage = "tk"
	NN TelnyxTranscriptionLanguage = "nn"
	MT TelnyxTranscriptionLanguage = "mt"
	SA TelnyxTranscriptionLanguage = "sa"
	LB TelnyxTranscriptionLanguage = "lb"
	MY TelnyxTranscriptionLanguage = "my"
	BO TelnyxTranscriptionLanguage = "bo"
	TL TelnyxTranscriptionLanguage = "tl"
	MG TelnyxTranscriptionLanguage = "mg"
	AS TelnyxTranscriptionLanguage = "as"
	TT TelnyxTranscriptionLanguage = "tt"
	HAW TelnyxTranscriptionLanguage = "haw"
	LN TelnyxTranscriptionLanguage = "ln"
	HA TelnyxTranscriptionLanguage = "ha"
	BA TelnyxTranscriptionLanguage = "ba"
	JW TelnyxTranscriptionLanguage = "jw"
	SU TelnyxTranscriptionLanguage = "su"
	AUTO_DETECT TelnyxTranscriptionLanguage = "auto_detect"
)

// All allowed values of TelnyxTranscriptionLanguage enum
var AllowedTelnyxTranscriptionLanguageEnumValues = []TelnyxTranscriptionLanguage{
	"en",
	"zh",
	"de",
	"es",
	"ru",
	"ko",
	"fr",
	"ja",
	"pt",
	"tr",
	"pl",
	"ca",
	"nl",
	"ar",
	"sv",
	"it",
	"id",
	"hi",
	"fi",
	"vi",
	"he",
	"uk",
	"el",
	"ms",
	"cs",
	"ro",
	"da",
	"hu",
	"ta",
	"no",
	"th",
	"ur",
	"hr",
	"bg",
	"lt",
	"la",
	"mi",
	"ml",
	"cy",
	"sk",
	"te",
	"fa",
	"lv",
	"bn",
	"sr",
	"az",
	"sl",
	"kn",
	"et",
	"mk",
	"br",
	"eu",
	"is",
	"hy",
	"ne",
	"mn",
	"bs",
	"kk",
	"sq",
	"sw",
	"gl",
	"mr",
	"pa",
	"si",
	"km",
	"sn",
	"yo",
	"so",
	"af",
	"oc",
	"ka",
	"be",
	"tg",
	"sd",
	"gu",
	"am",
	"yi",
	"lo",
	"uz",
	"fo",
	"ht",
	"ps",
	"tk",
	"nn",
	"mt",
	"sa",
	"lb",
	"my",
	"bo",
	"tl",
	"mg",
	"as",
	"tt",
	"haw",
	"ln",
	"ha",
	"ba",
	"jw",
	"su",
	"auto_detect",
}

func (v *TelnyxTranscriptionLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TelnyxTranscriptionLanguage(value)
	for _, existing := range AllowedTelnyxTranscriptionLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TelnyxTranscriptionLanguage", value)
}

// NewTelnyxTranscriptionLanguageFromValue returns a pointer to a valid TelnyxTranscriptionLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTelnyxTranscriptionLanguageFromValue(v string) (*TelnyxTranscriptionLanguage, error) {
	ev := TelnyxTranscriptionLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TelnyxTranscriptionLanguage: valid values are %v", v, AllowedTelnyxTranscriptionLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TelnyxTranscriptionLanguage) IsValid() bool {
	for _, existing := range AllowedTelnyxTranscriptionLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TelnyxTranscriptionLanguage value
func (v TelnyxTranscriptionLanguage) Ptr() *TelnyxTranscriptionLanguage {
	return &v
}

type NullableTelnyxTranscriptionLanguage struct {
	value *TelnyxTranscriptionLanguage
	isSet bool
}

func (v NullableTelnyxTranscriptionLanguage) Get() *TelnyxTranscriptionLanguage {
	return v.value
}

func (v *NullableTelnyxTranscriptionLanguage) Set(val *TelnyxTranscriptionLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableTelnyxTranscriptionLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableTelnyxTranscriptionLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelnyxTranscriptionLanguage(val *TelnyxTranscriptionLanguage) *NullableTelnyxTranscriptionLanguage {
	return &NullableTelnyxTranscriptionLanguage{value: val, isSet: true}
}

func (v NullableTelnyxTranscriptionLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelnyxTranscriptionLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

