/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConnectionRtcpSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionRtcpSettings{}

// ConnectionRtcpSettings struct for ConnectionRtcpSettings
type ConnectionRtcpSettings struct {
	// RTCP port by default is rtp+1, it can also be set to rtcp-mux
	Port *string `json:"port,omitempty"`
	// BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.
	CaptureEnabled *bool `json:"capture_enabled,omitempty"`
	// RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.
	ReportFrequencySecs *int32 `json:"report_frequency_secs,omitempty"`
}

// NewConnectionRtcpSettings instantiates a new ConnectionRtcpSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionRtcpSettings() *ConnectionRtcpSettings {
	this := ConnectionRtcpSettings{}
	var port string = "rtp+1"
	this.Port = &port
	var captureEnabled bool = false
	this.CaptureEnabled = &captureEnabled
	var reportFrequencySecs int32 = 5
	this.ReportFrequencySecs = &reportFrequencySecs
	return &this
}

// NewConnectionRtcpSettingsWithDefaults instantiates a new ConnectionRtcpSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionRtcpSettingsWithDefaults() *ConnectionRtcpSettings {
	this := ConnectionRtcpSettings{}
	var port string = "rtp+1"
	this.Port = &port
	var captureEnabled bool = false
	this.CaptureEnabled = &captureEnabled
	var reportFrequencySecs int32 = 5
	this.ReportFrequencySecs = &reportFrequencySecs
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ConnectionRtcpSettings) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRtcpSettings) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ConnectionRtcpSettings) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *ConnectionRtcpSettings) SetPort(v string) {
	o.Port = &v
}

// GetCaptureEnabled returns the CaptureEnabled field value if set, zero value otherwise.
func (o *ConnectionRtcpSettings) GetCaptureEnabled() bool {
	if o == nil || IsNil(o.CaptureEnabled) {
		var ret bool
		return ret
	}
	return *o.CaptureEnabled
}

// GetCaptureEnabledOk returns a tuple with the CaptureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRtcpSettings) GetCaptureEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CaptureEnabled) {
		return nil, false
	}
	return o.CaptureEnabled, true
}

// HasCaptureEnabled returns a boolean if a field has been set.
func (o *ConnectionRtcpSettings) HasCaptureEnabled() bool {
	if o != nil && !IsNil(o.CaptureEnabled) {
		return true
	}

	return false
}

// SetCaptureEnabled gets a reference to the given bool and assigns it to the CaptureEnabled field.
func (o *ConnectionRtcpSettings) SetCaptureEnabled(v bool) {
	o.CaptureEnabled = &v
}

// GetReportFrequencySecs returns the ReportFrequencySecs field value if set, zero value otherwise.
func (o *ConnectionRtcpSettings) GetReportFrequencySecs() int32 {
	if o == nil || IsNil(o.ReportFrequencySecs) {
		var ret int32
		return ret
	}
	return *o.ReportFrequencySecs
}

// GetReportFrequencySecsOk returns a tuple with the ReportFrequencySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRtcpSettings) GetReportFrequencySecsOk() (*int32, bool) {
	if o == nil || IsNil(o.ReportFrequencySecs) {
		return nil, false
	}
	return o.ReportFrequencySecs, true
}

// HasReportFrequencySecs returns a boolean if a field has been set.
func (o *ConnectionRtcpSettings) HasReportFrequencySecs() bool {
	if o != nil && !IsNil(o.ReportFrequencySecs) {
		return true
	}

	return false
}

// SetReportFrequencySecs gets a reference to the given int32 and assigns it to the ReportFrequencySecs field.
func (o *ConnectionRtcpSettings) SetReportFrequencySecs(v int32) {
	o.ReportFrequencySecs = &v
}

func (o ConnectionRtcpSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionRtcpSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.CaptureEnabled) {
		toSerialize["capture_enabled"] = o.CaptureEnabled
	}
	if !IsNil(o.ReportFrequencySecs) {
		toSerialize["report_frequency_secs"] = o.ReportFrequencySecs
	}
	return toSerialize, nil
}

type NullableConnectionRtcpSettings struct {
	value *ConnectionRtcpSettings
	isSet bool
}

func (v NullableConnectionRtcpSettings) Get() *ConnectionRtcpSettings {
	return v.value
}

func (v *NullableConnectionRtcpSettings) Set(val *ConnectionRtcpSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRtcpSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRtcpSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRtcpSettings(val *ConnectionRtcpSettings) *NullableConnectionRtcpSettings {
	return &NullableConnectionRtcpSettings{value: val, isSet: true}
}

func (v NullableConnectionRtcpSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRtcpSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


