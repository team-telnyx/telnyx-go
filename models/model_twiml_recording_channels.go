/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TwimlRecordingChannels the model 'TwimlRecordingChannels'
type TwimlRecordingChannels int32

// List of TwimlRecordingChannels
const (
	_1 TwimlRecordingChannels = 1
	_2 TwimlRecordingChannels = 2
)

// All allowed values of TwimlRecordingChannels enum
var AllowedTwimlRecordingChannelsEnumValues = []TwimlRecordingChannels{
	1,
	2,
}

func (v *TwimlRecordingChannels) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TwimlRecordingChannels(value)
	for _, existing := range AllowedTwimlRecordingChannelsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TwimlRecordingChannels", value)
}

// NewTwimlRecordingChannelsFromValue returns a pointer to a valid TwimlRecordingChannels
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTwimlRecordingChannelsFromValue(v int32) (*TwimlRecordingChannels, error) {
	ev := TwimlRecordingChannels(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TwimlRecordingChannels: valid values are %v", v, AllowedTwimlRecordingChannelsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TwimlRecordingChannels) IsValid() bool {
	for _, existing := range AllowedTwimlRecordingChannelsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TwimlRecordingChannels value
func (v TwimlRecordingChannels) Ptr() *TwimlRecordingChannels {
	return &v
}

type NullableTwimlRecordingChannels struct {
	value *TwimlRecordingChannels
	isSet bool
}

func (v NullableTwimlRecordingChannels) Get() *TwimlRecordingChannels {
	return v.value
}

func (v *NullableTwimlRecordingChannels) Set(val *TwimlRecordingChannels) {
	v.value = val
	v.isSet = true
}

func (v NullableTwimlRecordingChannels) IsSet() bool {
	return v.isSet
}

func (v *NullableTwimlRecordingChannels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwimlRecordingChannels(val *TwimlRecordingChannels) *NullableTwimlRecordingChannels {
	return &NullableTwimlRecordingChannels{value: val, isSet: true}
}

func (v NullableTwimlRecordingChannels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwimlRecordingChannels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

