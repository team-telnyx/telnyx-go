/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferenceEndedBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceEndedBy{}

// ConferenceEndedBy IDs related to who ended the conference. It is expected for them to all be there or all be null
type ConferenceEndedBy struct {
	// Call Control ID which ended the conference
	CallControlId *string `json:"call_control_id,omitempty"`
	// Call Session ID which ended the conference
	CallSessionId *string `json:"call_session_id,omitempty"`
}

// NewConferenceEndedBy instantiates a new ConferenceEndedBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceEndedBy() *ConferenceEndedBy {
	this := ConferenceEndedBy{}
	return &this
}

// NewConferenceEndedByWithDefaults instantiates a new ConferenceEndedBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceEndedByWithDefaults() *ConferenceEndedBy {
	this := ConferenceEndedBy{}
	return &this
}

// GetCallControlId returns the CallControlId field value if set, zero value otherwise.
func (o *ConferenceEndedBy) GetCallControlId() string {
	if o == nil || IsNil(o.CallControlId) {
		var ret string
		return ret
	}
	return *o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceEndedBy) GetCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallControlId) {
		return nil, false
	}
	return o.CallControlId, true
}

// HasCallControlId returns a boolean if a field has been set.
func (o *ConferenceEndedBy) HasCallControlId() bool {
	if o != nil && !IsNil(o.CallControlId) {
		return true
	}

	return false
}

// SetCallControlId gets a reference to the given string and assigns it to the CallControlId field.
func (o *ConferenceEndedBy) SetCallControlId(v string) {
	o.CallControlId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *ConferenceEndedBy) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceEndedBy) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *ConferenceEndedBy) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *ConferenceEndedBy) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

func (o ConferenceEndedBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceEndedBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlId) {
		toSerialize["call_control_id"] = o.CallControlId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	return toSerialize, nil
}

type NullableConferenceEndedBy struct {
	value *ConferenceEndedBy
	isSet bool
}

func (v NullableConferenceEndedBy) Get() *ConferenceEndedBy {
	return v.value
}

func (v *NullableConferenceEndedBy) Set(val *ConferenceEndedBy) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceEndedBy) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceEndedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceEndedBy(val *ConferenceEndedBy) *NullableConferenceEndedBy {
	return &NullableConferenceEndedBy{value: val, isSet: true}
}

func (v NullableConferenceEndedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceEndedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


