/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSEvent{}

// RCSEvent RCS Event to send to the recipient
type RCSEvent struct {
	EventType *string `json:"event_type,omitempty"`
}

// NewRCSEvent instantiates a new RCSEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSEvent() *RCSEvent {
	this := RCSEvent{}
	return &this
}

// NewRCSEventWithDefaults instantiates a new RCSEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSEventWithDefaults() *RCSEvent {
	this := RCSEvent{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *RCSEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *RCSEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *RCSEvent) SetEventType(v string) {
	o.EventType = &v
}

func (o RCSEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	return toSerialize, nil
}

type NullableRCSEvent struct {
	value *RCSEvent
	isSet bool
}

func (v NullableRCSEvent) Get() *RCSEvent {
	return v.value
}

func (v *NullableRCSEvent) Set(val *RCSEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSEvent(val *RCSEvent) *NullableRCSEvent {
	return &NullableRCSEvent{value: val, isSet: true}
}

func (v NullableRCSEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


