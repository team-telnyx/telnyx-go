/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// PortingOrderType A port can be either 'full' or 'partial'. When type is 'full' the other attributes should be omitted.
type PortingOrderType string

// List of PortingOrderType
const (
	FULL PortingOrderType = "full"
	PARTIAL PortingOrderType = "partial"
)

// All allowed values of PortingOrderType enum
var AllowedPortingOrderTypeEnumValues = []PortingOrderType{
	"full",
	"partial",
}

func (v *PortingOrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortingOrderType(value)
	for _, existing := range AllowedPortingOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortingOrderType", value)
}

// NewPortingOrderTypeFromValue returns a pointer to a valid PortingOrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortingOrderTypeFromValue(v string) (*PortingOrderType, error) {
	ev := PortingOrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortingOrderType: valid values are %v", v, AllowedPortingOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortingOrderType) IsValid() bool {
	for _, existing := range AllowedPortingOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortingOrderType value
func (v PortingOrderType) Ptr() *PortingOrderType {
	return &v
}

type NullablePortingOrderType struct {
	value *PortingOrderType
	isSet bool
}

func (v NullablePortingOrderType) Get() *PortingOrderType {
	return v.value
}

func (v *NullablePortingOrderType) Set(val *PortingOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingOrderType(val *PortingOrderType) *NullablePortingOrderType {
	return &NullablePortingOrderType{value: val, isSet: true}
}

func (v NullablePortingOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

