/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ConferenceParticipantDetailRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceParticipantDetailRecord{}

// ConferenceParticipantDetailRecord struct for ConferenceParticipantDetailRecord
type ConferenceParticipantDetailRecord struct {
	// Participant id
	Id *string `json:"id,omitempty"`
	// User id
	UserId *string `json:"user_id,omitempty"`
	// Conference id
	ConferenceId *string `json:"conference_id,omitempty"`
	// Participant join time
	JoinedAt *time.Time `json:"joined_at,omitempty"`
	// Participant leave time
	LeftAt *time.Time `json:"left_at,omitempty"`
	// Number called by the participant to join the conference
	DestinationNumber *string `json:"destination_number,omitempty"`
	// Participant origin number used in the conference call
	OriginatingNumber *string `json:"originating_number,omitempty"`
	// Telnyx UUID that identifies the conference call leg
	CallLegId *string `json:"call_leg_id,omitempty"`
	// Telnyx UUID that identifies with conference call session
	CallSessionId *string `json:"call_session_id,omitempty"`
	// Duration of the conference call in seconds
	CallSec *int32 `json:"call_sec,omitempty"`
	// Duration of the conference call for billing purposes
	BilledSec *int32 `json:"billed_sec,omitempty"`
	// Indicates whether Telnyx billing charges might be applicable
	IsTelnyxBillable *bool `json:"is_telnyx_billable,omitempty"`
	// Currency amount per billing unit used to calculate the Telnyx billing cost
	Rate *string `json:"rate,omitempty"`
	// Billing unit used to calculate the Telnyx billing cost
	RateMeasuredIn *string `json:"rate_measured_in,omitempty"`
	// Currency amount for Telnyx billing cost
	Cost *string `json:"cost,omitempty"`
	// Telnyx account currency used to describe monetary values, including billing cost
	Currency *string `json:"currency,omitempty"`
	RecordType string `json:"record_type"`
}

type _ConferenceParticipantDetailRecord ConferenceParticipantDetailRecord

// NewConferenceParticipantDetailRecord instantiates a new ConferenceParticipantDetailRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceParticipantDetailRecord(recordType string) *ConferenceParticipantDetailRecord {
	this := ConferenceParticipantDetailRecord{}
	this.RecordType = recordType
	return &this
}

// NewConferenceParticipantDetailRecordWithDefaults instantiates a new ConferenceParticipantDetailRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceParticipantDetailRecordWithDefaults() *ConferenceParticipantDetailRecord {
	this := ConferenceParticipantDetailRecord{}
	var recordType string = "conference_participant_detail_record"
	this.RecordType = recordType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConferenceParticipantDetailRecord) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ConferenceParticipantDetailRecord) SetUserId(v string) {
	o.UserId = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetConferenceId() string {
	if o == nil || IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetConferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasConferenceId() bool {
	if o != nil && !IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceParticipantDetailRecord) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetJoinedAt returns the JoinedAt field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetJoinedAt() time.Time {
	if o == nil || IsNil(o.JoinedAt) {
		var ret time.Time
		return ret
	}
	return *o.JoinedAt
}

// GetJoinedAtOk returns a tuple with the JoinedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetJoinedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.JoinedAt) {
		return nil, false
	}
	return o.JoinedAt, true
}

// HasJoinedAt returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasJoinedAt() bool {
	if o != nil && !IsNil(o.JoinedAt) {
		return true
	}

	return false
}

// SetJoinedAt gets a reference to the given time.Time and assigns it to the JoinedAt field.
func (o *ConferenceParticipantDetailRecord) SetJoinedAt(v time.Time) {
	o.JoinedAt = &v
}

// GetLeftAt returns the LeftAt field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetLeftAt() time.Time {
	if o == nil || IsNil(o.LeftAt) {
		var ret time.Time
		return ret
	}
	return *o.LeftAt
}

// GetLeftAtOk returns a tuple with the LeftAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetLeftAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LeftAt) {
		return nil, false
	}
	return o.LeftAt, true
}

// HasLeftAt returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasLeftAt() bool {
	if o != nil && !IsNil(o.LeftAt) {
		return true
	}

	return false
}

// SetLeftAt gets a reference to the given time.Time and assigns it to the LeftAt field.
func (o *ConferenceParticipantDetailRecord) SetLeftAt(v time.Time) {
	o.LeftAt = &v
}

// GetDestinationNumber returns the DestinationNumber field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetDestinationNumber() string {
	if o == nil || IsNil(o.DestinationNumber) {
		var ret string
		return ret
	}
	return *o.DestinationNumber
}

// GetDestinationNumberOk returns a tuple with the DestinationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetDestinationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationNumber) {
		return nil, false
	}
	return o.DestinationNumber, true
}

// HasDestinationNumber returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasDestinationNumber() bool {
	if o != nil && !IsNil(o.DestinationNumber) {
		return true
	}

	return false
}

// SetDestinationNumber gets a reference to the given string and assigns it to the DestinationNumber field.
func (o *ConferenceParticipantDetailRecord) SetDestinationNumber(v string) {
	o.DestinationNumber = &v
}

// GetOriginatingNumber returns the OriginatingNumber field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetOriginatingNumber() string {
	if o == nil || IsNil(o.OriginatingNumber) {
		var ret string
		return ret
	}
	return *o.OriginatingNumber
}

// GetOriginatingNumberOk returns a tuple with the OriginatingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetOriginatingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.OriginatingNumber) {
		return nil, false
	}
	return o.OriginatingNumber, true
}

// HasOriginatingNumber returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasOriginatingNumber() bool {
	if o != nil && !IsNil(o.OriginatingNumber) {
		return true
	}

	return false
}

// SetOriginatingNumber gets a reference to the given string and assigns it to the OriginatingNumber field.
func (o *ConferenceParticipantDetailRecord) SetOriginatingNumber(v string) {
	o.OriginatingNumber = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *ConferenceParticipantDetailRecord) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *ConferenceParticipantDetailRecord) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetCallSec returns the CallSec field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetCallSec() int32 {
	if o == nil || IsNil(o.CallSec) {
		var ret int32
		return ret
	}
	return *o.CallSec
}

// GetCallSecOk returns a tuple with the CallSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetCallSecOk() (*int32, bool) {
	if o == nil || IsNil(o.CallSec) {
		return nil, false
	}
	return o.CallSec, true
}

// HasCallSec returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasCallSec() bool {
	if o != nil && !IsNil(o.CallSec) {
		return true
	}

	return false
}

// SetCallSec gets a reference to the given int32 and assigns it to the CallSec field.
func (o *ConferenceParticipantDetailRecord) SetCallSec(v int32) {
	o.CallSec = &v
}

// GetBilledSec returns the BilledSec field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetBilledSec() int32 {
	if o == nil || IsNil(o.BilledSec) {
		var ret int32
		return ret
	}
	return *o.BilledSec
}

// GetBilledSecOk returns a tuple with the BilledSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetBilledSecOk() (*int32, bool) {
	if o == nil || IsNil(o.BilledSec) {
		return nil, false
	}
	return o.BilledSec, true
}

// HasBilledSec returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasBilledSec() bool {
	if o != nil && !IsNil(o.BilledSec) {
		return true
	}

	return false
}

// SetBilledSec gets a reference to the given int32 and assigns it to the BilledSec field.
func (o *ConferenceParticipantDetailRecord) SetBilledSec(v int32) {
	o.BilledSec = &v
}

// GetIsTelnyxBillable returns the IsTelnyxBillable field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetIsTelnyxBillable() bool {
	if o == nil || IsNil(o.IsTelnyxBillable) {
		var ret bool
		return ret
	}
	return *o.IsTelnyxBillable
}

// GetIsTelnyxBillableOk returns a tuple with the IsTelnyxBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetIsTelnyxBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTelnyxBillable) {
		return nil, false
	}
	return o.IsTelnyxBillable, true
}

// HasIsTelnyxBillable returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasIsTelnyxBillable() bool {
	if o != nil && !IsNil(o.IsTelnyxBillable) {
		return true
	}

	return false
}

// SetIsTelnyxBillable gets a reference to the given bool and assigns it to the IsTelnyxBillable field.
func (o *ConferenceParticipantDetailRecord) SetIsTelnyxBillable(v bool) {
	o.IsTelnyxBillable = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetRate() string {
	if o == nil || IsNil(o.Rate) {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetRateOk() (*string, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *ConferenceParticipantDetailRecord) SetRate(v string) {
	o.Rate = &v
}

// GetRateMeasuredIn returns the RateMeasuredIn field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetRateMeasuredIn() string {
	if o == nil || IsNil(o.RateMeasuredIn) {
		var ret string
		return ret
	}
	return *o.RateMeasuredIn
}

// GetRateMeasuredInOk returns a tuple with the RateMeasuredIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetRateMeasuredInOk() (*string, bool) {
	if o == nil || IsNil(o.RateMeasuredIn) {
		return nil, false
	}
	return o.RateMeasuredIn, true
}

// HasRateMeasuredIn returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasRateMeasuredIn() bool {
	if o != nil && !IsNil(o.RateMeasuredIn) {
		return true
	}

	return false
}

// SetRateMeasuredIn gets a reference to the given string and assigns it to the RateMeasuredIn field.
func (o *ConferenceParticipantDetailRecord) SetRateMeasuredIn(v string) {
	o.RateMeasuredIn = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetCost() string {
	if o == nil || IsNil(o.Cost) {
		var ret string
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetCostOk() (*string, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given string and assigns it to the Cost field.
func (o *ConferenceParticipantDetailRecord) SetCost(v string) {
	o.Cost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ConferenceParticipantDetailRecord) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ConferenceParticipantDetailRecord) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ConferenceParticipantDetailRecord) SetCurrency(v string) {
	o.Currency = &v
}

// GetRecordType returns the RecordType field value
func (o *ConferenceParticipantDetailRecord) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *ConferenceParticipantDetailRecord) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *ConferenceParticipantDetailRecord) SetRecordType(v string) {
	o.RecordType = v
}

func (o ConferenceParticipantDetailRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceParticipantDetailRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.ConferenceId) {
		toSerialize["conference_id"] = o.ConferenceId
	}
	if !IsNil(o.JoinedAt) {
		toSerialize["joined_at"] = o.JoinedAt
	}
	if !IsNil(o.LeftAt) {
		toSerialize["left_at"] = o.LeftAt
	}
	if !IsNil(o.DestinationNumber) {
		toSerialize["destination_number"] = o.DestinationNumber
	}
	if !IsNil(o.OriginatingNumber) {
		toSerialize["originating_number"] = o.OriginatingNumber
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.CallSec) {
		toSerialize["call_sec"] = o.CallSec
	}
	if !IsNil(o.BilledSec) {
		toSerialize["billed_sec"] = o.BilledSec
	}
	if !IsNil(o.IsTelnyxBillable) {
		toSerialize["is_telnyx_billable"] = o.IsTelnyxBillable
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RateMeasuredIn) {
		toSerialize["rate_measured_in"] = o.RateMeasuredIn
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["record_type"] = o.RecordType
	return toSerialize, nil
}

func (o *ConferenceParticipantDetailRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConferenceParticipantDetailRecord := _ConferenceParticipantDetailRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConferenceParticipantDetailRecord)

	if err != nil {
		return err
	}

	*o = ConferenceParticipantDetailRecord(varConferenceParticipantDetailRecord)

	return err
}

type NullableConferenceParticipantDetailRecord struct {
	value *ConferenceParticipantDetailRecord
	isSet bool
}

func (v NullableConferenceParticipantDetailRecord) Get() *ConferenceParticipantDetailRecord {
	return v.value
}

func (v *NullableConferenceParticipantDetailRecord) Set(val *ConferenceParticipantDetailRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceParticipantDetailRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceParticipantDetailRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceParticipantDetailRecord(val *ConferenceParticipantDetailRecord) *NullableConferenceParticipantDetailRecord {
	return &NullableConferenceParticipantDetailRecord{value: val, isSet: true}
}

func (v NullableConferenceParticipantDetailRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceParticipantDetailRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


