/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// Quality The quality of the fax. The `ultra` settings provides the highest quality available, but also present longer fax processing times. `ultra_light` is best suited for images, wihle `ultra_dark` is best suited for text.
type Quality string

// List of Quality
const (
	NORMAL Quality = "normal"
	HIGH Quality = "high"
	VERY_HIGH Quality = "very_high"
	ULTRA_LIGHT Quality = "ultra_light"
	ULTRA_DARK Quality = "ultra_dark"
)

// All allowed values of Quality enum
var AllowedQualityEnumValues = []Quality{
	"normal",
	"high",
	"very_high",
	"ultra_light",
	"ultra_dark",
}

func (v *Quality) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Quality(value)
	for _, existing := range AllowedQualityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Quality", value)
}

// NewQualityFromValue returns a pointer to a valid Quality
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQualityFromValue(v string) (*Quality, error) {
	ev := Quality(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Quality: valid values are %v", v, AllowedQualityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Quality) IsValid() bool {
	for _, existing := range AllowedQualityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Quality value
func (v Quality) Ptr() *Quality {
	return &v
}

type NullableQuality struct {
	value *Quality
	isSet bool
}

func (v NullableQuality) Get() *Quality {
	return v.value
}

func (v *NullableQuality) Set(val *Quality) {
	v.value = val
	v.isSet = true
}

func (v NullableQuality) IsSet() bool {
	return v.isSet
}

func (v *NullableQuality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuality(val *Quality) *NullableQuality {
	return &NullableQuality{value: val, isSet: true}
}

func (v NullableQuality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

