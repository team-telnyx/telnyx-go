/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallControlApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallControlApplication{}

// CallControlApplication struct for CallControlApplication
type CallControlApplication struct {
	// Specifies whether the connection can be used.
	Active *bool `json:"active,omitempty"`
	// `Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media. 
	AnchorsiteOverride *string `json:"anchorsite_override,omitempty"`
	// A user-assigned name to help manage the application.
	ApplicationName *string `json:"application_name,omitempty"`
	// ISO 8601 formatted date of when the resource was created
	CreatedAt *string `json:"created_at,omitempty"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.
	DtmfType *string `json:"dtmf_type,omitempty"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after timing out.
	FirstCommandTimeout *bool `json:"first_command_timeout,omitempty"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs *int32 `json:"first_command_timeout_secs,omitempty"`
	// Tags assigned to the Call Control Application.
	Tags []string `json:"tags,omitempty"`
	Id *string `json:"id,omitempty"`
	Inbound *CallControlApplicationInbound `json:"inbound,omitempty"`
	Outbound *CallControlApplicationOutbound `json:"outbound,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date of when the resource was last updated
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookApiVersion *string `json:"webhook_api_version,omitempty"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as `https`.
	WebhookEventFailoverUrl NullableString `json:"webhook_event_failover_url,omitempty"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as `https`.
	WebhookEventUrl *string `json:"webhook_event_url,omitempty"`
	WebhookTimeoutSecs NullableInt32 `json:"webhook_timeout_secs,omitempty"`
}

// NewCallControlApplication instantiates a new CallControlApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallControlApplication() *CallControlApplication {
	this := CallControlApplication{}
	var active bool = true
	this.Active = &active
	var anchorsiteOverride string = "\"Latency\""
	this.AnchorsiteOverride = &anchorsiteOverride
	var dtmfType string = "RFC 2833"
	this.DtmfType = &dtmfType
	var firstCommandTimeout bool = false
	this.FirstCommandTimeout = &firstCommandTimeout
	var firstCommandTimeoutSecs int32 = 30
	this.FirstCommandTimeoutSecs = &firstCommandTimeoutSecs
	var recordType string = "call_control_application"
	this.RecordType = &recordType
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	return &this
}

// NewCallControlApplicationWithDefaults instantiates a new CallControlApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallControlApplicationWithDefaults() *CallControlApplication {
	this := CallControlApplication{}
	var active bool = true
	this.Active = &active
	var anchorsiteOverride string = "\"Latency\""
	this.AnchorsiteOverride = &anchorsiteOverride
	var dtmfType string = "RFC 2833"
	this.DtmfType = &dtmfType
	var firstCommandTimeout bool = false
	this.FirstCommandTimeout = &firstCommandTimeout
	var firstCommandTimeoutSecs int32 = 30
	this.FirstCommandTimeoutSecs = &firstCommandTimeoutSecs
	var recordType string = "call_control_application"
	this.RecordType = &recordType
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CallControlApplication) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CallControlApplication) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CallControlApplication) SetActive(v bool) {
	o.Active = &v
}

// GetAnchorsiteOverride returns the AnchorsiteOverride field value if set, zero value otherwise.
func (o *CallControlApplication) GetAnchorsiteOverride() string {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		var ret string
		return ret
	}
	return *o.AnchorsiteOverride
}

// GetAnchorsiteOverrideOk returns a tuple with the AnchorsiteOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetAnchorsiteOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		return nil, false
	}
	return o.AnchorsiteOverride, true
}

// HasAnchorsiteOverride returns a boolean if a field has been set.
func (o *CallControlApplication) HasAnchorsiteOverride() bool {
	if o != nil && !IsNil(o.AnchorsiteOverride) {
		return true
	}

	return false
}

// SetAnchorsiteOverride gets a reference to the given string and assigns it to the AnchorsiteOverride field.
func (o *CallControlApplication) SetAnchorsiteOverride(v string) {
	o.AnchorsiteOverride = &v
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *CallControlApplication) GetApplicationName() string {
	if o == nil || IsNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetApplicationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *CallControlApplication) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *CallControlApplication) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CallControlApplication) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CallControlApplication) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CallControlApplication) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDtmfType returns the DtmfType field value if set, zero value otherwise.
func (o *CallControlApplication) GetDtmfType() string {
	if o == nil || IsNil(o.DtmfType) {
		var ret string
		return ret
	}
	return *o.DtmfType
}

// GetDtmfTypeOk returns a tuple with the DtmfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetDtmfTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DtmfType) {
		return nil, false
	}
	return o.DtmfType, true
}

// HasDtmfType returns a boolean if a field has been set.
func (o *CallControlApplication) HasDtmfType() bool {
	if o != nil && !IsNil(o.DtmfType) {
		return true
	}

	return false
}

// SetDtmfType gets a reference to the given string and assigns it to the DtmfType field.
func (o *CallControlApplication) SetDtmfType(v string) {
	o.DtmfType = &v
}

// GetFirstCommandTimeout returns the FirstCommandTimeout field value if set, zero value otherwise.
func (o *CallControlApplication) GetFirstCommandTimeout() bool {
	if o == nil || IsNil(o.FirstCommandTimeout) {
		var ret bool
		return ret
	}
	return *o.FirstCommandTimeout
}

// GetFirstCommandTimeoutOk returns a tuple with the FirstCommandTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetFirstCommandTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstCommandTimeout) {
		return nil, false
	}
	return o.FirstCommandTimeout, true
}

// HasFirstCommandTimeout returns a boolean if a field has been set.
func (o *CallControlApplication) HasFirstCommandTimeout() bool {
	if o != nil && !IsNil(o.FirstCommandTimeout) {
		return true
	}

	return false
}

// SetFirstCommandTimeout gets a reference to the given bool and assigns it to the FirstCommandTimeout field.
func (o *CallControlApplication) SetFirstCommandTimeout(v bool) {
	o.FirstCommandTimeout = &v
}

// GetFirstCommandTimeoutSecs returns the FirstCommandTimeoutSecs field value if set, zero value otherwise.
func (o *CallControlApplication) GetFirstCommandTimeoutSecs() int32 {
	if o == nil || IsNil(o.FirstCommandTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.FirstCommandTimeoutSecs
}

// GetFirstCommandTimeoutSecsOk returns a tuple with the FirstCommandTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetFirstCommandTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstCommandTimeoutSecs) {
		return nil, false
	}
	return o.FirstCommandTimeoutSecs, true
}

// HasFirstCommandTimeoutSecs returns a boolean if a field has been set.
func (o *CallControlApplication) HasFirstCommandTimeoutSecs() bool {
	if o != nil && !IsNil(o.FirstCommandTimeoutSecs) {
		return true
	}

	return false
}

// SetFirstCommandTimeoutSecs gets a reference to the given int32 and assigns it to the FirstCommandTimeoutSecs field.
func (o *CallControlApplication) SetFirstCommandTimeoutSecs(v int32) {
	o.FirstCommandTimeoutSecs = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CallControlApplication) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CallControlApplication) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CallControlApplication) SetTags(v []string) {
	o.Tags = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CallControlApplication) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CallControlApplication) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CallControlApplication) SetId(v string) {
	o.Id = &v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *CallControlApplication) GetInbound() CallControlApplicationInbound {
	if o == nil || IsNil(o.Inbound) {
		var ret CallControlApplicationInbound
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetInboundOk() (*CallControlApplicationInbound, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *CallControlApplication) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given CallControlApplicationInbound and assigns it to the Inbound field.
func (o *CallControlApplication) SetInbound(v CallControlApplicationInbound) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *CallControlApplication) GetOutbound() CallControlApplicationOutbound {
	if o == nil || IsNil(o.Outbound) {
		var ret CallControlApplicationOutbound
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetOutboundOk() (*CallControlApplicationOutbound, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *CallControlApplication) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given CallControlApplicationOutbound and assigns it to the Outbound field.
func (o *CallControlApplication) SetOutbound(v CallControlApplicationOutbound) {
	o.Outbound = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *CallControlApplication) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *CallControlApplication) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *CallControlApplication) SetRecordType(v string) {
	o.RecordType = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CallControlApplication) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CallControlApplication) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *CallControlApplication) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetWebhookApiVersion returns the WebhookApiVersion field value if set, zero value otherwise.
func (o *CallControlApplication) GetWebhookApiVersion() string {
	if o == nil || IsNil(o.WebhookApiVersion) {
		var ret string
		return ret
	}
	return *o.WebhookApiVersion
}

// GetWebhookApiVersionOk returns a tuple with the WebhookApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetWebhookApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookApiVersion) {
		return nil, false
	}
	return o.WebhookApiVersion, true
}

// HasWebhookApiVersion returns a boolean if a field has been set.
func (o *CallControlApplication) HasWebhookApiVersion() bool {
	if o != nil && !IsNil(o.WebhookApiVersion) {
		return true
	}

	return false
}

// SetWebhookApiVersion gets a reference to the given string and assigns it to the WebhookApiVersion field.
func (o *CallControlApplication) SetWebhookApiVersion(v string) {
	o.WebhookApiVersion = &v
}

// GetWebhookEventFailoverUrl returns the WebhookEventFailoverUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallControlApplication) GetWebhookEventFailoverUrl() string {
	if o == nil || IsNil(o.WebhookEventFailoverUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookEventFailoverUrl.Get()
}

// GetWebhookEventFailoverUrlOk returns a tuple with the WebhookEventFailoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallControlApplication) GetWebhookEventFailoverUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookEventFailoverUrl.Get(), o.WebhookEventFailoverUrl.IsSet()
}

// HasWebhookEventFailoverUrl returns a boolean if a field has been set.
func (o *CallControlApplication) HasWebhookEventFailoverUrl() bool {
	if o != nil && o.WebhookEventFailoverUrl.IsSet() {
		return true
	}

	return false
}

// SetWebhookEventFailoverUrl gets a reference to the given NullableString and assigns it to the WebhookEventFailoverUrl field.
func (o *CallControlApplication) SetWebhookEventFailoverUrl(v string) {
	o.WebhookEventFailoverUrl.Set(&v)
}
// SetWebhookEventFailoverUrlNil sets the value for WebhookEventFailoverUrl to be an explicit nil
func (o *CallControlApplication) SetWebhookEventFailoverUrlNil() {
	o.WebhookEventFailoverUrl.Set(nil)
}

// UnsetWebhookEventFailoverUrl ensures that no value is present for WebhookEventFailoverUrl, not even an explicit nil
func (o *CallControlApplication) UnsetWebhookEventFailoverUrl() {
	o.WebhookEventFailoverUrl.Unset()
}

// GetWebhookEventUrl returns the WebhookEventUrl field value if set, zero value otherwise.
func (o *CallControlApplication) GetWebhookEventUrl() string {
	if o == nil || IsNil(o.WebhookEventUrl) {
		var ret string
		return ret
	}
	return *o.WebhookEventUrl
}

// GetWebhookEventUrlOk returns a tuple with the WebhookEventUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallControlApplication) GetWebhookEventUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookEventUrl) {
		return nil, false
	}
	return o.WebhookEventUrl, true
}

// HasWebhookEventUrl returns a boolean if a field has been set.
func (o *CallControlApplication) HasWebhookEventUrl() bool {
	if o != nil && !IsNil(o.WebhookEventUrl) {
		return true
	}

	return false
}

// SetWebhookEventUrl gets a reference to the given string and assigns it to the WebhookEventUrl field.
func (o *CallControlApplication) SetWebhookEventUrl(v string) {
	o.WebhookEventUrl = &v
}

// GetWebhookTimeoutSecs returns the WebhookTimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallControlApplication) GetWebhookTimeoutSecs() int32 {
	if o == nil || IsNil(o.WebhookTimeoutSecs.Get()) {
		var ret int32
		return ret
	}
	return *o.WebhookTimeoutSecs.Get()
}

// GetWebhookTimeoutSecsOk returns a tuple with the WebhookTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallControlApplication) GetWebhookTimeoutSecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookTimeoutSecs.Get(), o.WebhookTimeoutSecs.IsSet()
}

// HasWebhookTimeoutSecs returns a boolean if a field has been set.
func (o *CallControlApplication) HasWebhookTimeoutSecs() bool {
	if o != nil && o.WebhookTimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetWebhookTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the WebhookTimeoutSecs field.
func (o *CallControlApplication) SetWebhookTimeoutSecs(v int32) {
	o.WebhookTimeoutSecs.Set(&v)
}
// SetWebhookTimeoutSecsNil sets the value for WebhookTimeoutSecs to be an explicit nil
func (o *CallControlApplication) SetWebhookTimeoutSecsNil() {
	o.WebhookTimeoutSecs.Set(nil)
}

// UnsetWebhookTimeoutSecs ensures that no value is present for WebhookTimeoutSecs, not even an explicit nil
func (o *CallControlApplication) UnsetWebhookTimeoutSecs() {
	o.WebhookTimeoutSecs.Unset()
}

func (o CallControlApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallControlApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AnchorsiteOverride) {
		toSerialize["anchorsite_override"] = o.AnchorsiteOverride
	}
	if !IsNil(o.ApplicationName) {
		toSerialize["application_name"] = o.ApplicationName
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DtmfType) {
		toSerialize["dtmf_type"] = o.DtmfType
	}
	if !IsNil(o.FirstCommandTimeout) {
		toSerialize["first_command_timeout"] = o.FirstCommandTimeout
	}
	if !IsNil(o.FirstCommandTimeoutSecs) {
		toSerialize["first_command_timeout_secs"] = o.FirstCommandTimeoutSecs
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.WebhookApiVersion) {
		toSerialize["webhook_api_version"] = o.WebhookApiVersion
	}
	if o.WebhookEventFailoverUrl.IsSet() {
		toSerialize["webhook_event_failover_url"] = o.WebhookEventFailoverUrl.Get()
	}
	if !IsNil(o.WebhookEventUrl) {
		toSerialize["webhook_event_url"] = o.WebhookEventUrl
	}
	if o.WebhookTimeoutSecs.IsSet() {
		toSerialize["webhook_timeout_secs"] = o.WebhookTimeoutSecs.Get()
	}
	return toSerialize, nil
}

type NullableCallControlApplication struct {
	value *CallControlApplication
	isSet bool
}

func (v NullableCallControlApplication) Get() *CallControlApplication {
	return v.value
}

func (v *NullableCallControlApplication) Set(val *CallControlApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableCallControlApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableCallControlApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallControlApplication(val *CallControlApplication) *NullableCallControlApplication {
	return &NullableCallControlApplication{value: val, isSet: true}
}

func (v NullableCallControlApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallControlApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


