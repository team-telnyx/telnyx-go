/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LeaveConferenceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeaveConferenceRequest{}

// LeaveConferenceRequest struct for LeaveConferenceRequest
type LeaveConferenceRequest struct {
	// Unique identifier and token for controlling the call
	CallControlId string `json:"call_control_id"`
	// Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.
	CommandId *string `json:"command_id,omitempty"`
	// Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.
	BeepEnabled *string `json:"beep_enabled,omitempty"`
}

type _LeaveConferenceRequest LeaveConferenceRequest

// NewLeaveConferenceRequest instantiates a new LeaveConferenceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaveConferenceRequest(callControlId string) *LeaveConferenceRequest {
	this := LeaveConferenceRequest{}
	this.CallControlId = callControlId
	return &this
}

// NewLeaveConferenceRequestWithDefaults instantiates a new LeaveConferenceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaveConferenceRequestWithDefaults() *LeaveConferenceRequest {
	this := LeaveConferenceRequest{}
	return &this
}

// GetCallControlId returns the CallControlId field value
func (o *LeaveConferenceRequest) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *LeaveConferenceRequest) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *LeaveConferenceRequest) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *LeaveConferenceRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaveConferenceRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *LeaveConferenceRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *LeaveConferenceRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetBeepEnabled returns the BeepEnabled field value if set, zero value otherwise.
func (o *LeaveConferenceRequest) GetBeepEnabled() string {
	if o == nil || IsNil(o.BeepEnabled) {
		var ret string
		return ret
	}
	return *o.BeepEnabled
}

// GetBeepEnabledOk returns a tuple with the BeepEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaveConferenceRequest) GetBeepEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.BeepEnabled) {
		return nil, false
	}
	return o.BeepEnabled, true
}

// HasBeepEnabled returns a boolean if a field has been set.
func (o *LeaveConferenceRequest) HasBeepEnabled() bool {
	if o != nil && !IsNil(o.BeepEnabled) {
		return true
	}

	return false
}

// SetBeepEnabled gets a reference to the given string and assigns it to the BeepEnabled field.
func (o *LeaveConferenceRequest) SetBeepEnabled(v string) {
	o.BeepEnabled = &v
}

func (o LeaveConferenceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeaveConferenceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_control_id"] = o.CallControlId
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.BeepEnabled) {
		toSerialize["beep_enabled"] = o.BeepEnabled
	}
	return toSerialize, nil
}

func (o *LeaveConferenceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_control_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLeaveConferenceRequest := _LeaveConferenceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLeaveConferenceRequest)

	if err != nil {
		return err
	}

	*o = LeaveConferenceRequest(varLeaveConferenceRequest)

	return err
}

type NullableLeaveConferenceRequest struct {
	value *LeaveConferenceRequest
	isSet bool
}

func (v NullableLeaveConferenceRequest) Get() *LeaveConferenceRequest {
	return v.value
}

func (v *NullableLeaveConferenceRequest) Set(val *LeaveConferenceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaveConferenceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaveConferenceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaveConferenceRequest(val *LeaveConferenceRequest) *NullableLeaveConferenceRequest {
	return &NullableLeaveConferenceRequest{value: val, isSet: true}
}

func (v NullableLeaveConferenceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaveConferenceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


