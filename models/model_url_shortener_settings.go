/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UrlShortenerSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlShortenerSettings{}

// UrlShortenerSettings The URL shortener feature allows automatic replacement of URLs that were generated using a public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly, is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with with links generated by Telnyx. The use of custom links can improve branding and message deliverability.  To disable this feature, set the object field to `null`. 
type UrlShortenerSettings struct {
	// One of the domains provided by the Telnyx URL shortener service. 
	Domain string `json:"domain"`
	// Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name. 
	Prefix *string `json:"prefix,omitempty"`
	// Use the link replacement tool only for links that are specifically blacklisted by Telnyx. 
	ReplaceBlacklistOnly *bool `json:"replace_blacklist_only,omitempty"`
	// Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile. 
	SendWebhooks *bool `json:"send_webhooks,omitempty"`
}

type _UrlShortenerSettings UrlShortenerSettings

// NewUrlShortenerSettings instantiates a new UrlShortenerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlShortenerSettings(domain string) *UrlShortenerSettings {
	this := UrlShortenerSettings{}
	this.Domain = domain
	return &this
}

// NewUrlShortenerSettingsWithDefaults instantiates a new UrlShortenerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlShortenerSettingsWithDefaults() *UrlShortenerSettings {
	this := UrlShortenerSettings{}
	return &this
}

// GetDomain returns the Domain field value
func (o *UrlShortenerSettings) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *UrlShortenerSettings) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *UrlShortenerSettings) SetDomain(v string) {
	o.Domain = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *UrlShortenerSettings) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlShortenerSettings) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *UrlShortenerSettings) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *UrlShortenerSettings) SetPrefix(v string) {
	o.Prefix = &v
}

// GetReplaceBlacklistOnly returns the ReplaceBlacklistOnly field value if set, zero value otherwise.
func (o *UrlShortenerSettings) GetReplaceBlacklistOnly() bool {
	if o == nil || IsNil(o.ReplaceBlacklistOnly) {
		var ret bool
		return ret
	}
	return *o.ReplaceBlacklistOnly
}

// GetReplaceBlacklistOnlyOk returns a tuple with the ReplaceBlacklistOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlShortenerSettings) GetReplaceBlacklistOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplaceBlacklistOnly) {
		return nil, false
	}
	return o.ReplaceBlacklistOnly, true
}

// HasReplaceBlacklistOnly returns a boolean if a field has been set.
func (o *UrlShortenerSettings) HasReplaceBlacklistOnly() bool {
	if o != nil && !IsNil(o.ReplaceBlacklistOnly) {
		return true
	}

	return false
}

// SetReplaceBlacklistOnly gets a reference to the given bool and assigns it to the ReplaceBlacklistOnly field.
func (o *UrlShortenerSettings) SetReplaceBlacklistOnly(v bool) {
	o.ReplaceBlacklistOnly = &v
}

// GetSendWebhooks returns the SendWebhooks field value if set, zero value otherwise.
func (o *UrlShortenerSettings) GetSendWebhooks() bool {
	if o == nil || IsNil(o.SendWebhooks) {
		var ret bool
		return ret
	}
	return *o.SendWebhooks
}

// GetSendWebhooksOk returns a tuple with the SendWebhooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlShortenerSettings) GetSendWebhooksOk() (*bool, bool) {
	if o == nil || IsNil(o.SendWebhooks) {
		return nil, false
	}
	return o.SendWebhooks, true
}

// HasSendWebhooks returns a boolean if a field has been set.
func (o *UrlShortenerSettings) HasSendWebhooks() bool {
	if o != nil && !IsNil(o.SendWebhooks) {
		return true
	}

	return false
}

// SetSendWebhooks gets a reference to the given bool and assigns it to the SendWebhooks field.
func (o *UrlShortenerSettings) SetSendWebhooks(v bool) {
	o.SendWebhooks = &v
}

func (o UrlShortenerSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlShortenerSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.ReplaceBlacklistOnly) {
		toSerialize["replace_blacklist_only"] = o.ReplaceBlacklistOnly
	}
	if !IsNil(o.SendWebhooks) {
		toSerialize["send_webhooks"] = o.SendWebhooks
	}
	return toSerialize, nil
}

func (o *UrlShortenerSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUrlShortenerSettings := _UrlShortenerSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUrlShortenerSettings)

	if err != nil {
		return err
	}

	*o = UrlShortenerSettings(varUrlShortenerSettings)

	return err
}

type NullableUrlShortenerSettings struct {
	value *UrlShortenerSettings
	isSet bool
}

func (v NullableUrlShortenerSettings) Get() *UrlShortenerSettings {
	return v.value
}

func (v *NullableUrlShortenerSettings) Set(val *UrlShortenerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlShortenerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlShortenerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlShortenerSettings(val *UrlShortenerSettings) *NullableUrlShortenerSettings {
	return &NullableUrlShortenerSettings{value: val, isSet: true}
}

func (v NullableUrlShortenerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlShortenerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


