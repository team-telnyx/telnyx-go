/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCard{}

// SIMCard struct for SIMCard
type SIMCard struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	Status *SIMCardStatus `json:"status,omitempty"`
	// The type of SIM card
	Type *string `json:"type,omitempty"`
	// The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization. 
	Iccid *string `json:"iccid,omitempty"`
	// SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). <br/> Mobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR). 
	Imsi *string `json:"imsi,omitempty"`
	// Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/> MSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator. 
	Msisdn *string `json:"msisdn,omitempty"`
	// The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.
	SimCardGroupId *string `json:"sim_card_group_id,omitempty"`
	// Searchable tags associated with the SIM card
	Tags []string `json:"tags,omitempty"`
	// List of IMEIs authorized to use a given SIM card.
	AuthorizedImeis []string `json:"authorized_imeis,omitempty"`
	// IMEI of the device where a given SIM card is currently being used.
	CurrentImei *string `json:"current_imei,omitempty"`
	DataLimit *SIMCardDataLimit `json:"data_limit,omitempty"`
	CurrentBillingPeriodConsumedData *SIMCardCurrentBillingPeriodConsumedData `json:"current_billing_period_consumed_data,omitempty"`
	// Indicate whether the SIM card has any pending (in-progress) actions.
	ActionsInProgress *bool `json:"actions_in_progress,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections. 
	Ipv4 *string `json:"ipv4,omitempty"`
	// The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections. 
	Ipv6 *string `json:"ipv6,omitempty"`
	CurrentDeviceLocation *SIMCardCurrentDeviceLocation `json:"current_device_location,omitempty"`
	// Mobile Network Code of the current network to which the SIM card is connected. It's a two to three decimal digits that identify a network.<br/><br/>  This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.
	CurrentMnc *string `json:"current_mnc,omitempty"`
	// Mobile Country Code of the current network to which the SIM card is connected. It's a three decimal digit that identifies a country.<br/><br/> This code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.
	CurrentMcc *string `json:"current_mcc,omitempty"`
	// Indicates whether the device is actively connected to a network and able to run data.
	LiveDataSession *string `json:"live_data_session,omitempty"`
}

// NewSIMCard instantiates a new SIMCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCard() *SIMCard {
	this := SIMCard{}
	return &this
}

// NewSIMCardWithDefaults instantiates a new SIMCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardWithDefaults() *SIMCard {
	this := SIMCard{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SIMCard) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SIMCard) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SIMCard) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SIMCard) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SIMCard) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SIMCard) SetRecordType(v string) {
	o.RecordType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SIMCard) GetStatus() SIMCardStatus {
	if o == nil || IsNil(o.Status) {
		var ret SIMCardStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetStatusOk() (*SIMCardStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SIMCard) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SIMCardStatus and assigns it to the Status field.
func (o *SIMCard) SetStatus(v SIMCardStatus) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SIMCard) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SIMCard) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SIMCard) SetType(v string) {
	o.Type = &v
}

// GetIccid returns the Iccid field value if set, zero value otherwise.
func (o *SIMCard) GetIccid() string {
	if o == nil || IsNil(o.Iccid) {
		var ret string
		return ret
	}
	return *o.Iccid
}

// GetIccidOk returns a tuple with the Iccid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetIccidOk() (*string, bool) {
	if o == nil || IsNil(o.Iccid) {
		return nil, false
	}
	return o.Iccid, true
}

// HasIccid returns a boolean if a field has been set.
func (o *SIMCard) HasIccid() bool {
	if o != nil && !IsNil(o.Iccid) {
		return true
	}

	return false
}

// SetIccid gets a reference to the given string and assigns it to the Iccid field.
func (o *SIMCard) SetIccid(v string) {
	o.Iccid = &v
}

// GetImsi returns the Imsi field value if set, zero value otherwise.
func (o *SIMCard) GetImsi() string {
	if o == nil || IsNil(o.Imsi) {
		var ret string
		return ret
	}
	return *o.Imsi
}

// GetImsiOk returns a tuple with the Imsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetImsiOk() (*string, bool) {
	if o == nil || IsNil(o.Imsi) {
		return nil, false
	}
	return o.Imsi, true
}

// HasImsi returns a boolean if a field has been set.
func (o *SIMCard) HasImsi() bool {
	if o != nil && !IsNil(o.Imsi) {
		return true
	}

	return false
}

// SetImsi gets a reference to the given string and assigns it to the Imsi field.
func (o *SIMCard) SetImsi(v string) {
	o.Imsi = &v
}

// GetMsisdn returns the Msisdn field value if set, zero value otherwise.
func (o *SIMCard) GetMsisdn() string {
	if o == nil || IsNil(o.Msisdn) {
		var ret string
		return ret
	}
	return *o.Msisdn
}

// GetMsisdnOk returns a tuple with the Msisdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetMsisdnOk() (*string, bool) {
	if o == nil || IsNil(o.Msisdn) {
		return nil, false
	}
	return o.Msisdn, true
}

// HasMsisdn returns a boolean if a field has been set.
func (o *SIMCard) HasMsisdn() bool {
	if o != nil && !IsNil(o.Msisdn) {
		return true
	}

	return false
}

// SetMsisdn gets a reference to the given string and assigns it to the Msisdn field.
func (o *SIMCard) SetMsisdn(v string) {
	o.Msisdn = &v
}

// GetSimCardGroupId returns the SimCardGroupId field value if set, zero value otherwise.
func (o *SIMCard) GetSimCardGroupId() string {
	if o == nil || IsNil(o.SimCardGroupId) {
		var ret string
		return ret
	}
	return *o.SimCardGroupId
}

// GetSimCardGroupIdOk returns a tuple with the SimCardGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetSimCardGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SimCardGroupId) {
		return nil, false
	}
	return o.SimCardGroupId, true
}

// HasSimCardGroupId returns a boolean if a field has been set.
func (o *SIMCard) HasSimCardGroupId() bool {
	if o != nil && !IsNil(o.SimCardGroupId) {
		return true
	}

	return false
}

// SetSimCardGroupId gets a reference to the given string and assigns it to the SimCardGroupId field.
func (o *SIMCard) SetSimCardGroupId(v string) {
	o.SimCardGroupId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SIMCard) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SIMCard) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SIMCard) SetTags(v []string) {
	o.Tags = v
}

// GetAuthorizedImeis returns the AuthorizedImeis field value if set, zero value otherwise.
func (o *SIMCard) GetAuthorizedImeis() []string {
	if o == nil || IsNil(o.AuthorizedImeis) {
		var ret []string
		return ret
	}
	return o.AuthorizedImeis
}

// GetAuthorizedImeisOk returns a tuple with the AuthorizedImeis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetAuthorizedImeisOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthorizedImeis) {
		return nil, false
	}
	return o.AuthorizedImeis, true
}

// HasAuthorizedImeis returns a boolean if a field has been set.
func (o *SIMCard) HasAuthorizedImeis() bool {
	if o != nil && !IsNil(o.AuthorizedImeis) {
		return true
	}

	return false
}

// SetAuthorizedImeis gets a reference to the given []string and assigns it to the AuthorizedImeis field.
func (o *SIMCard) SetAuthorizedImeis(v []string) {
	o.AuthorizedImeis = v
}

// GetCurrentImei returns the CurrentImei field value if set, zero value otherwise.
func (o *SIMCard) GetCurrentImei() string {
	if o == nil || IsNil(o.CurrentImei) {
		var ret string
		return ret
	}
	return *o.CurrentImei
}

// GetCurrentImeiOk returns a tuple with the CurrentImei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetCurrentImeiOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentImei) {
		return nil, false
	}
	return o.CurrentImei, true
}

// HasCurrentImei returns a boolean if a field has been set.
func (o *SIMCard) HasCurrentImei() bool {
	if o != nil && !IsNil(o.CurrentImei) {
		return true
	}

	return false
}

// SetCurrentImei gets a reference to the given string and assigns it to the CurrentImei field.
func (o *SIMCard) SetCurrentImei(v string) {
	o.CurrentImei = &v
}

// GetDataLimit returns the DataLimit field value if set, zero value otherwise.
func (o *SIMCard) GetDataLimit() SIMCardDataLimit {
	if o == nil || IsNil(o.DataLimit) {
		var ret SIMCardDataLimit
		return ret
	}
	return *o.DataLimit
}

// GetDataLimitOk returns a tuple with the DataLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetDataLimitOk() (*SIMCardDataLimit, bool) {
	if o == nil || IsNil(o.DataLimit) {
		return nil, false
	}
	return o.DataLimit, true
}

// HasDataLimit returns a boolean if a field has been set.
func (o *SIMCard) HasDataLimit() bool {
	if o != nil && !IsNil(o.DataLimit) {
		return true
	}

	return false
}

// SetDataLimit gets a reference to the given SIMCardDataLimit and assigns it to the DataLimit field.
func (o *SIMCard) SetDataLimit(v SIMCardDataLimit) {
	o.DataLimit = &v
}

// GetCurrentBillingPeriodConsumedData returns the CurrentBillingPeriodConsumedData field value if set, zero value otherwise.
func (o *SIMCard) GetCurrentBillingPeriodConsumedData() SIMCardCurrentBillingPeriodConsumedData {
	if o == nil || IsNil(o.CurrentBillingPeriodConsumedData) {
		var ret SIMCardCurrentBillingPeriodConsumedData
		return ret
	}
	return *o.CurrentBillingPeriodConsumedData
}

// GetCurrentBillingPeriodConsumedDataOk returns a tuple with the CurrentBillingPeriodConsumedData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetCurrentBillingPeriodConsumedDataOk() (*SIMCardCurrentBillingPeriodConsumedData, bool) {
	if o == nil || IsNil(o.CurrentBillingPeriodConsumedData) {
		return nil, false
	}
	return o.CurrentBillingPeriodConsumedData, true
}

// HasCurrentBillingPeriodConsumedData returns a boolean if a field has been set.
func (o *SIMCard) HasCurrentBillingPeriodConsumedData() bool {
	if o != nil && !IsNil(o.CurrentBillingPeriodConsumedData) {
		return true
	}

	return false
}

// SetCurrentBillingPeriodConsumedData gets a reference to the given SIMCardCurrentBillingPeriodConsumedData and assigns it to the CurrentBillingPeriodConsumedData field.
func (o *SIMCard) SetCurrentBillingPeriodConsumedData(v SIMCardCurrentBillingPeriodConsumedData) {
	o.CurrentBillingPeriodConsumedData = &v
}

// GetActionsInProgress returns the ActionsInProgress field value if set, zero value otherwise.
func (o *SIMCard) GetActionsInProgress() bool {
	if o == nil || IsNil(o.ActionsInProgress) {
		var ret bool
		return ret
	}
	return *o.ActionsInProgress
}

// GetActionsInProgressOk returns a tuple with the ActionsInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetActionsInProgressOk() (*bool, bool) {
	if o == nil || IsNil(o.ActionsInProgress) {
		return nil, false
	}
	return o.ActionsInProgress, true
}

// HasActionsInProgress returns a boolean if a field has been set.
func (o *SIMCard) HasActionsInProgress() bool {
	if o != nil && !IsNil(o.ActionsInProgress) {
		return true
	}

	return false
}

// SetActionsInProgress gets a reference to the given bool and assigns it to the ActionsInProgress field.
func (o *SIMCard) SetActionsInProgress(v bool) {
	o.ActionsInProgress = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SIMCard) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SIMCard) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SIMCard) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SIMCard) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SIMCard) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SIMCard) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *SIMCard) GetIpv4() string {
	if o == nil || IsNil(o.Ipv4) {
		var ret string
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *SIMCard) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given string and assigns it to the Ipv4 field.
func (o *SIMCard) SetIpv4(v string) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *SIMCard) GetIpv6() string {
	if o == nil || IsNil(o.Ipv6) {
		var ret string
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *SIMCard) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given string and assigns it to the Ipv6 field.
func (o *SIMCard) SetIpv6(v string) {
	o.Ipv6 = &v
}

// GetCurrentDeviceLocation returns the CurrentDeviceLocation field value if set, zero value otherwise.
func (o *SIMCard) GetCurrentDeviceLocation() SIMCardCurrentDeviceLocation {
	if o == nil || IsNil(o.CurrentDeviceLocation) {
		var ret SIMCardCurrentDeviceLocation
		return ret
	}
	return *o.CurrentDeviceLocation
}

// GetCurrentDeviceLocationOk returns a tuple with the CurrentDeviceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetCurrentDeviceLocationOk() (*SIMCardCurrentDeviceLocation, bool) {
	if o == nil || IsNil(o.CurrentDeviceLocation) {
		return nil, false
	}
	return o.CurrentDeviceLocation, true
}

// HasCurrentDeviceLocation returns a boolean if a field has been set.
func (o *SIMCard) HasCurrentDeviceLocation() bool {
	if o != nil && !IsNil(o.CurrentDeviceLocation) {
		return true
	}

	return false
}

// SetCurrentDeviceLocation gets a reference to the given SIMCardCurrentDeviceLocation and assigns it to the CurrentDeviceLocation field.
func (o *SIMCard) SetCurrentDeviceLocation(v SIMCardCurrentDeviceLocation) {
	o.CurrentDeviceLocation = &v
}

// GetCurrentMnc returns the CurrentMnc field value if set, zero value otherwise.
func (o *SIMCard) GetCurrentMnc() string {
	if o == nil || IsNil(o.CurrentMnc) {
		var ret string
		return ret
	}
	return *o.CurrentMnc
}

// GetCurrentMncOk returns a tuple with the CurrentMnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetCurrentMncOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentMnc) {
		return nil, false
	}
	return o.CurrentMnc, true
}

// HasCurrentMnc returns a boolean if a field has been set.
func (o *SIMCard) HasCurrentMnc() bool {
	if o != nil && !IsNil(o.CurrentMnc) {
		return true
	}

	return false
}

// SetCurrentMnc gets a reference to the given string and assigns it to the CurrentMnc field.
func (o *SIMCard) SetCurrentMnc(v string) {
	o.CurrentMnc = &v
}

// GetCurrentMcc returns the CurrentMcc field value if set, zero value otherwise.
func (o *SIMCard) GetCurrentMcc() string {
	if o == nil || IsNil(o.CurrentMcc) {
		var ret string
		return ret
	}
	return *o.CurrentMcc
}

// GetCurrentMccOk returns a tuple with the CurrentMcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetCurrentMccOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentMcc) {
		return nil, false
	}
	return o.CurrentMcc, true
}

// HasCurrentMcc returns a boolean if a field has been set.
func (o *SIMCard) HasCurrentMcc() bool {
	if o != nil && !IsNil(o.CurrentMcc) {
		return true
	}

	return false
}

// SetCurrentMcc gets a reference to the given string and assigns it to the CurrentMcc field.
func (o *SIMCard) SetCurrentMcc(v string) {
	o.CurrentMcc = &v
}

// GetLiveDataSession returns the LiveDataSession field value if set, zero value otherwise.
func (o *SIMCard) GetLiveDataSession() string {
	if o == nil || IsNil(o.LiveDataSession) {
		var ret string
		return ret
	}
	return *o.LiveDataSession
}

// GetLiveDataSessionOk returns a tuple with the LiveDataSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCard) GetLiveDataSessionOk() (*string, bool) {
	if o == nil || IsNil(o.LiveDataSession) {
		return nil, false
	}
	return o.LiveDataSession, true
}

// HasLiveDataSession returns a boolean if a field has been set.
func (o *SIMCard) HasLiveDataSession() bool {
	if o != nil && !IsNil(o.LiveDataSession) {
		return true
	}

	return false
}

// SetLiveDataSession gets a reference to the given string and assigns it to the LiveDataSession field.
func (o *SIMCard) SetLiveDataSession(v string) {
	o.LiveDataSession = &v
}

func (o SIMCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Iccid) {
		toSerialize["iccid"] = o.Iccid
	}
	if !IsNil(o.Imsi) {
		toSerialize["imsi"] = o.Imsi
	}
	if !IsNil(o.Msisdn) {
		toSerialize["msisdn"] = o.Msisdn
	}
	if !IsNil(o.SimCardGroupId) {
		toSerialize["sim_card_group_id"] = o.SimCardGroupId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.AuthorizedImeis) {
		toSerialize["authorized_imeis"] = o.AuthorizedImeis
	}
	if !IsNil(o.CurrentImei) {
		toSerialize["current_imei"] = o.CurrentImei
	}
	if !IsNil(o.DataLimit) {
		toSerialize["data_limit"] = o.DataLimit
	}
	if !IsNil(o.CurrentBillingPeriodConsumedData) {
		toSerialize["current_billing_period_consumed_data"] = o.CurrentBillingPeriodConsumedData
	}
	if !IsNil(o.ActionsInProgress) {
		toSerialize["actions_in_progress"] = o.ActionsInProgress
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.CurrentDeviceLocation) {
		toSerialize["current_device_location"] = o.CurrentDeviceLocation
	}
	if !IsNil(o.CurrentMnc) {
		toSerialize["current_mnc"] = o.CurrentMnc
	}
	if !IsNil(o.CurrentMcc) {
		toSerialize["current_mcc"] = o.CurrentMcc
	}
	if !IsNil(o.LiveDataSession) {
		toSerialize["live_data_session"] = o.LiveDataSession
	}
	return toSerialize, nil
}

type NullableSIMCard struct {
	value *SIMCard
	isSet bool
}

func (v NullableSIMCard) Get() *SIMCard {
	return v.value
}

func (v *NullableSIMCard) Set(val *SIMCard) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCard) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCard(val *SIMCard) *NullableSIMCard {
	return &NullableSIMCard{value: val, isSet: true}
}

func (v NullableSIMCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


