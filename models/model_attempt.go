/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the Attempt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attempt{}

// Attempt Webhook delivery attempt details.
type Attempt struct {
	Status *string `json:"status,omitempty"`
	// ISO 8601 timestamp indicating when the attempt was initiated.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// ISO 8601 timestamp indicating when the attempt has finished.
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	Http *Http `json:"http,omitempty"`
	// Webhook delivery error codes.
	Errors []int32 `json:"errors,omitempty"`
}

// NewAttempt instantiates a new Attempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttempt() *Attempt {
	this := Attempt{}
	return &this
}

// NewAttemptWithDefaults instantiates a new Attempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptWithDefaults() *Attempt {
	this := Attempt{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Attempt) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Attempt) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Attempt) SetStatus(v string) {
	o.Status = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *Attempt) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *Attempt) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *Attempt) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *Attempt) GetFinishedAt() time.Time {
	if o == nil || IsNil(o.FinishedAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *Attempt) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *Attempt) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *Attempt) GetHttp() Http {
	if o == nil || IsNil(o.Http) {
		var ret Http
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetHttpOk() (*Http, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *Attempt) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given Http and assigns it to the Http field.
func (o *Attempt) SetHttp(v Http) {
	o.Http = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Attempt) GetErrors() []int32 {
	if o == nil || IsNil(o.Errors) {
		var ret []int32
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetErrorsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Attempt) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []int32 and assigns it to the Errors field.
func (o *Attempt) SetErrors(v []int32) {
	o.Errors = v
}

func (o Attempt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attempt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.FinishedAt) {
		toSerialize["finished_at"] = o.FinishedAt
	}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableAttempt struct {
	value *Attempt
	isSet bool
}

func (v NullableAttempt) Get() *Attempt {
	return v.value
}

func (v *NullableAttempt) Set(val *Attempt) {
	v.value = val
	v.isSet = true
}

func (v NullableAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullableAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttempt(val *Attempt) *NullableAttempt {
	return &NullableAttempt{value: val, isSet: true}
}

func (v NullableAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


