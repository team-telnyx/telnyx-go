/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSSuggestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSSuggestion{}

// RCSSuggestion struct for RCSSuggestion
type RCSSuggestion struct {
	Reply *RCSReply `json:"reply,omitempty"`
	Action *RCSAction `json:"action,omitempty"`
}

// NewRCSSuggestion instantiates a new RCSSuggestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSSuggestion() *RCSSuggestion {
	this := RCSSuggestion{}
	return &this
}

// NewRCSSuggestionWithDefaults instantiates a new RCSSuggestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSSuggestionWithDefaults() *RCSSuggestion {
	this := RCSSuggestion{}
	return &this
}

// GetReply returns the Reply field value if set, zero value otherwise.
func (o *RCSSuggestion) GetReply() RCSReply {
	if o == nil || IsNil(o.Reply) {
		var ret RCSReply
		return ret
	}
	return *o.Reply
}

// GetReplyOk returns a tuple with the Reply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSSuggestion) GetReplyOk() (*RCSReply, bool) {
	if o == nil || IsNil(o.Reply) {
		return nil, false
	}
	return o.Reply, true
}

// HasReply returns a boolean if a field has been set.
func (o *RCSSuggestion) HasReply() bool {
	if o != nil && !IsNil(o.Reply) {
		return true
	}

	return false
}

// SetReply gets a reference to the given RCSReply and assigns it to the Reply field.
func (o *RCSSuggestion) SetReply(v RCSReply) {
	o.Reply = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RCSSuggestion) GetAction() RCSAction {
	if o == nil || IsNil(o.Action) {
		var ret RCSAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSSuggestion) GetActionOk() (*RCSAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RCSSuggestion) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given RCSAction and assigns it to the Action field.
func (o *RCSSuggestion) SetAction(v RCSAction) {
	o.Action = &v
}

func (o RCSSuggestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSSuggestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reply) {
		toSerialize["reply"] = o.Reply
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableRCSSuggestion struct {
	value *RCSSuggestion
	isSet bool
}

func (v NullableRCSSuggestion) Get() *RCSSuggestion {
	return v.value
}

func (v *NullableRCSSuggestion) Set(val *RCSSuggestion) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSSuggestion) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSSuggestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSSuggestion(val *RCSSuggestion) *NullableRCSSuggestion {
	return &NullableRCSSuggestion{value: val, isSet: true}
}

func (v NullableRCSSuggestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSSuggestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


