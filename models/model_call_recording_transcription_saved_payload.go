/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallRecordingTranscriptionSavedPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRecordingTranscriptionSavedPayload{}

// CallRecordingTranscriptionSavedPayload struct for CallRecordingTranscriptionSavedPayload
type CallRecordingTranscriptionSavedPayload struct {
	// Call ID used to issue commands via Call Control API.
	CallControlId *string `json:"call_control_id,omitempty"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionId *string `json:"connection_id,omitempty"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegId *string `json:"call_leg_id,omitempty"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.
	CallSessionId *string `json:"call_session_id,omitempty"`
	// State received from a command.
	ClientState *string `json:"client_state,omitempty"`
	// The type of calling party connection.
	CallingPartyType *string `json:"calling_party_type,omitempty"`
	// ID that is unique to the recording session and can be used to correlate webhook events.
	RecordingId *string `json:"recording_id,omitempty"`
	// ID that is unique to the transcription process and can be used to correlate webhook events.
	RecordingTranscriptionId *string `json:"recording_transcription_id,omitempty"`
	// The transcription status.
	Status *string `json:"status,omitempty"`
	// The transcribed text
	TranscriptionText *string `json:"transcription_text,omitempty"`
}

// NewCallRecordingTranscriptionSavedPayload instantiates a new CallRecordingTranscriptionSavedPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRecordingTranscriptionSavedPayload() *CallRecordingTranscriptionSavedPayload {
	this := CallRecordingTranscriptionSavedPayload{}
	return &this
}

// NewCallRecordingTranscriptionSavedPayloadWithDefaults instantiates a new CallRecordingTranscriptionSavedPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordingTranscriptionSavedPayloadWithDefaults() *CallRecordingTranscriptionSavedPayload {
	this := CallRecordingTranscriptionSavedPayload{}
	return &this
}

// GetCallControlId returns the CallControlId field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetCallControlId() string {
	if o == nil || IsNil(o.CallControlId) {
		var ret string
		return ret
	}
	return *o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallControlId) {
		return nil, false
	}
	return o.CallControlId, true
}

// HasCallControlId returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasCallControlId() bool {
	if o != nil && !IsNil(o.CallControlId) {
		return true
	}

	return false
}

// SetCallControlId gets a reference to the given string and assigns it to the CallControlId field.
func (o *CallRecordingTranscriptionSavedPayload) SetCallControlId(v string) {
	o.CallControlId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *CallRecordingTranscriptionSavedPayload) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *CallRecordingTranscriptionSavedPayload) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *CallRecordingTranscriptionSavedPayload) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *CallRecordingTranscriptionSavedPayload) SetClientState(v string) {
	o.ClientState = &v
}

// GetCallingPartyType returns the CallingPartyType field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetCallingPartyType() string {
	if o == nil || IsNil(o.CallingPartyType) {
		var ret string
		return ret
	}
	return *o.CallingPartyType
}

// GetCallingPartyTypeOk returns a tuple with the CallingPartyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetCallingPartyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CallingPartyType) {
		return nil, false
	}
	return o.CallingPartyType, true
}

// HasCallingPartyType returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasCallingPartyType() bool {
	if o != nil && !IsNil(o.CallingPartyType) {
		return true
	}

	return false
}

// SetCallingPartyType gets a reference to the given string and assigns it to the CallingPartyType field.
func (o *CallRecordingTranscriptionSavedPayload) SetCallingPartyType(v string) {
	o.CallingPartyType = &v
}

// GetRecordingId returns the RecordingId field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetRecordingId() string {
	if o == nil || IsNil(o.RecordingId) {
		var ret string
		return ret
	}
	return *o.RecordingId
}

// GetRecordingIdOk returns a tuple with the RecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetRecordingIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingId) {
		return nil, false
	}
	return o.RecordingId, true
}

// HasRecordingId returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasRecordingId() bool {
	if o != nil && !IsNil(o.RecordingId) {
		return true
	}

	return false
}

// SetRecordingId gets a reference to the given string and assigns it to the RecordingId field.
func (o *CallRecordingTranscriptionSavedPayload) SetRecordingId(v string) {
	o.RecordingId = &v
}

// GetRecordingTranscriptionId returns the RecordingTranscriptionId field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetRecordingTranscriptionId() string {
	if o == nil || IsNil(o.RecordingTranscriptionId) {
		var ret string
		return ret
	}
	return *o.RecordingTranscriptionId
}

// GetRecordingTranscriptionIdOk returns a tuple with the RecordingTranscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetRecordingTranscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingTranscriptionId) {
		return nil, false
	}
	return o.RecordingTranscriptionId, true
}

// HasRecordingTranscriptionId returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasRecordingTranscriptionId() bool {
	if o != nil && !IsNil(o.RecordingTranscriptionId) {
		return true
	}

	return false
}

// SetRecordingTranscriptionId gets a reference to the given string and assigns it to the RecordingTranscriptionId field.
func (o *CallRecordingTranscriptionSavedPayload) SetRecordingTranscriptionId(v string) {
	o.RecordingTranscriptionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CallRecordingTranscriptionSavedPayload) SetStatus(v string) {
	o.Status = &v
}

// GetTranscriptionText returns the TranscriptionText field value if set, zero value otherwise.
func (o *CallRecordingTranscriptionSavedPayload) GetTranscriptionText() string {
	if o == nil || IsNil(o.TranscriptionText) {
		var ret string
		return ret
	}
	return *o.TranscriptionText
}

// GetTranscriptionTextOk returns a tuple with the TranscriptionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingTranscriptionSavedPayload) GetTranscriptionTextOk() (*string, bool) {
	if o == nil || IsNil(o.TranscriptionText) {
		return nil, false
	}
	return o.TranscriptionText, true
}

// HasTranscriptionText returns a boolean if a field has been set.
func (o *CallRecordingTranscriptionSavedPayload) HasTranscriptionText() bool {
	if o != nil && !IsNil(o.TranscriptionText) {
		return true
	}

	return false
}

// SetTranscriptionText gets a reference to the given string and assigns it to the TranscriptionText field.
func (o *CallRecordingTranscriptionSavedPayload) SetTranscriptionText(v string) {
	o.TranscriptionText = &v
}

func (o CallRecordingTranscriptionSavedPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRecordingTranscriptionSavedPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlId) {
		toSerialize["call_control_id"] = o.CallControlId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CallingPartyType) {
		toSerialize["calling_party_type"] = o.CallingPartyType
	}
	if !IsNil(o.RecordingId) {
		toSerialize["recording_id"] = o.RecordingId
	}
	if !IsNil(o.RecordingTranscriptionId) {
		toSerialize["recording_transcription_id"] = o.RecordingTranscriptionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TranscriptionText) {
		toSerialize["transcription_text"] = o.TranscriptionText
	}
	return toSerialize, nil
}

type NullableCallRecordingTranscriptionSavedPayload struct {
	value *CallRecordingTranscriptionSavedPayload
	isSet bool
}

func (v NullableCallRecordingTranscriptionSavedPayload) Get() *CallRecordingTranscriptionSavedPayload {
	return v.value
}

func (v *NullableCallRecordingTranscriptionSavedPayload) Set(val *CallRecordingTranscriptionSavedPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecordingTranscriptionSavedPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecordingTranscriptionSavedPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecordingTranscriptionSavedPayload(val *CallRecordingTranscriptionSavedPayload) *NullableCallRecordingTranscriptionSavedPayload {
	return &NullableCallRecordingTranscriptionSavedPayload{value: val, isSet: true}
}

func (v NullableCallRecordingTranscriptionSavedPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecordingTranscriptionSavedPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


