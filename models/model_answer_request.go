/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the AnswerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerRequest{}

// AnswerRequest struct for AnswerRequest
type AnswerRequest struct {
	// Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.
	BillingGroupId *string `json:"billing_group_id,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	// Custom headers to be added to the SIP INVITE response.
	CustomHeaders []CustomSipHeader `json:"custom_headers,omitempty"`
	// The list of comma-separated codecs in a preferred order for the forked media to be received.
	PreferredCodecs *string `json:"preferred_codecs,omitempty"`
	// SIP headers to be added to the SIP INVITE response. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers,omitempty"`
	SoundModifications *SoundModifications `json:"sound_modifications,omitempty"`
	// The destination WebSocket address where the stream is going to be delivered.
	StreamUrl *string `json:"stream_url,omitempty"`
	// Specifies which track should be streamed.
	StreamTrack *string `json:"stream_track,omitempty"`
	StreamBidirectionalMode *StreamBidirectionalMode `json:"stream_bidirectional_mode,omitempty"`
	StreamBidirectionalCodec *StreamBidirectionalCodec `json:"stream_bidirectional_codec,omitempty"`
	StreamBidirectionalTargetLegs *StreamBidirectionalTargetLegs `json:"stream_bidirectional_target_legs,omitempty"`
	// Generate silence RTP packets when no transmission available.
	SendSilenceWhenIdle *bool `json:"send_silence_when_idle,omitempty"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookUrl *string `json:"webhook_url,omitempty"`
	// HTTP request type used for `webhook_url`.
	WebhookUrlMethod *string `json:"webhook_url_method,omitempty"`
	// Enable transcription upon call answer. The default value is false.
	Transcription *bool `json:"transcription,omitempty"`
	TranscriptionConfig *TranscriptionStartRequest `json:"transcription_config,omitempty"`
	// Start recording automatically after an event. Disabled by default.
	Record *string `json:"record,omitempty"`
	// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
	RecordChannels *string `json:"record_channels,omitempty"`
	// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
	RecordFormat *string `json:"record_format,omitempty"`
	// Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).
	RecordMaxLength *int32 `json:"record_max_length,omitempty"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).
	RecordTimeoutSecs *int32 `json:"record_timeout_secs,omitempty"`
	// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).
	RecordTrack *string `json:"record_track,omitempty"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	RecordTrim *string `json:"record_trim,omitempty"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.
	RecordCustomFileName *string `json:"record_custom_file_name,omitempty"`
}

// NewAnswerRequest instantiates a new AnswerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerRequest() *AnswerRequest {
	this := AnswerRequest{}
	var streamTrack string = "inbound_track"
	this.StreamTrack = &streamTrack
	var streamBidirectionalMode StreamBidirectionalMode = MP3
	this.StreamBidirectionalMode = &streamBidirectionalMode
	var streamBidirectionalCodec StreamBidirectionalCodec = PCMU
	this.StreamBidirectionalCodec = &streamBidirectionalCodec
	var streamBidirectionalTargetLegs StreamBidirectionalTargetLegs = OPPOSITE
	this.StreamBidirectionalTargetLegs = &streamBidirectionalTargetLegs
	var sendSilenceWhenIdle bool = false
	this.SendSilenceWhenIdle = &sendSilenceWhenIdle
	var webhookUrlMethod string = "POST"
	this.WebhookUrlMethod = &webhookUrlMethod
	var transcription bool = false
	this.Transcription = &transcription
	var recordChannels string = "dual"
	this.RecordChannels = &recordChannels
	var recordFormat string = "mp3"
	this.RecordFormat = &recordFormat
	var recordMaxLength int32 = 0
	this.RecordMaxLength = &recordMaxLength
	var recordTimeoutSecs int32 = 0
	this.RecordTimeoutSecs = &recordTimeoutSecs
	var recordTrack string = "both"
	this.RecordTrack = &recordTrack
	return &this
}

// NewAnswerRequestWithDefaults instantiates a new AnswerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerRequestWithDefaults() *AnswerRequest {
	this := AnswerRequest{}
	var streamTrack string = "inbound_track"
	this.StreamTrack = &streamTrack
	var streamBidirectionalMode StreamBidirectionalMode = MP3
	this.StreamBidirectionalMode = &streamBidirectionalMode
	var streamBidirectionalCodec StreamBidirectionalCodec = PCMU
	this.StreamBidirectionalCodec = &streamBidirectionalCodec
	var streamBidirectionalTargetLegs StreamBidirectionalTargetLegs = OPPOSITE
	this.StreamBidirectionalTargetLegs = &streamBidirectionalTargetLegs
	var sendSilenceWhenIdle bool = false
	this.SendSilenceWhenIdle = &sendSilenceWhenIdle
	var webhookUrlMethod string = "POST"
	this.WebhookUrlMethod = &webhookUrlMethod
	var transcription bool = false
	this.Transcription = &transcription
	var recordChannels string = "dual"
	this.RecordChannels = &recordChannels
	var recordFormat string = "mp3"
	this.RecordFormat = &recordFormat
	var recordMaxLength int32 = 0
	this.RecordMaxLength = &recordMaxLength
	var recordTimeoutSecs int32 = 0
	this.RecordTimeoutSecs = &recordTimeoutSecs
	var recordTrack string = "both"
	this.RecordTrack = &recordTrack
	return &this
}

// GetBillingGroupId returns the BillingGroupId field value if set, zero value otherwise.
func (o *AnswerRequest) GetBillingGroupId() string {
	if o == nil || IsNil(o.BillingGroupId) {
		var ret string
		return ret
	}
	return *o.BillingGroupId
}

// GetBillingGroupIdOk returns a tuple with the BillingGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetBillingGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.BillingGroupId) {
		return nil, false
	}
	return o.BillingGroupId, true
}

// HasBillingGroupId returns a boolean if a field has been set.
func (o *AnswerRequest) HasBillingGroupId() bool {
	if o != nil && !IsNil(o.BillingGroupId) {
		return true
	}

	return false
}

// SetBillingGroupId gets a reference to the given string and assigns it to the BillingGroupId field.
func (o *AnswerRequest) SetBillingGroupId(v string) {
	o.BillingGroupId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *AnswerRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *AnswerRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *AnswerRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *AnswerRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *AnswerRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *AnswerRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *AnswerRequest) GetCustomHeaders() []CustomSipHeader {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret []CustomSipHeader
		return ret
	}
	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetCustomHeadersOk() ([]CustomSipHeader, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *AnswerRequest) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given []CustomSipHeader and assigns it to the CustomHeaders field.
func (o *AnswerRequest) SetCustomHeaders(v []CustomSipHeader) {
	o.CustomHeaders = v
}

// GetPreferredCodecs returns the PreferredCodecs field value if set, zero value otherwise.
func (o *AnswerRequest) GetPreferredCodecs() string {
	if o == nil || IsNil(o.PreferredCodecs) {
		var ret string
		return ret
	}
	return *o.PreferredCodecs
}

// GetPreferredCodecsOk returns a tuple with the PreferredCodecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetPreferredCodecsOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredCodecs) {
		return nil, false
	}
	return o.PreferredCodecs, true
}

// HasPreferredCodecs returns a boolean if a field has been set.
func (o *AnswerRequest) HasPreferredCodecs() bool {
	if o != nil && !IsNil(o.PreferredCodecs) {
		return true
	}

	return false
}

// SetPreferredCodecs gets a reference to the given string and assigns it to the PreferredCodecs field.
func (o *AnswerRequest) SetPreferredCodecs(v string) {
	o.PreferredCodecs = &v
}

// GetSipHeaders returns the SipHeaders field value if set, zero value otherwise.
func (o *AnswerRequest) GetSipHeaders() []SipHeader {
	if o == nil || IsNil(o.SipHeaders) {
		var ret []SipHeader
		return ret
	}
	return o.SipHeaders
}

// GetSipHeadersOk returns a tuple with the SipHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetSipHeadersOk() ([]SipHeader, bool) {
	if o == nil || IsNil(o.SipHeaders) {
		return nil, false
	}
	return o.SipHeaders, true
}

// HasSipHeaders returns a boolean if a field has been set.
func (o *AnswerRequest) HasSipHeaders() bool {
	if o != nil && !IsNil(o.SipHeaders) {
		return true
	}

	return false
}

// SetSipHeaders gets a reference to the given []SipHeader and assigns it to the SipHeaders field.
func (o *AnswerRequest) SetSipHeaders(v []SipHeader) {
	o.SipHeaders = v
}

// GetSoundModifications returns the SoundModifications field value if set, zero value otherwise.
func (o *AnswerRequest) GetSoundModifications() SoundModifications {
	if o == nil || IsNil(o.SoundModifications) {
		var ret SoundModifications
		return ret
	}
	return *o.SoundModifications
}

// GetSoundModificationsOk returns a tuple with the SoundModifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetSoundModificationsOk() (*SoundModifications, bool) {
	if o == nil || IsNil(o.SoundModifications) {
		return nil, false
	}
	return o.SoundModifications, true
}

// HasSoundModifications returns a boolean if a field has been set.
func (o *AnswerRequest) HasSoundModifications() bool {
	if o != nil && !IsNil(o.SoundModifications) {
		return true
	}

	return false
}

// SetSoundModifications gets a reference to the given SoundModifications and assigns it to the SoundModifications field.
func (o *AnswerRequest) SetSoundModifications(v SoundModifications) {
	o.SoundModifications = &v
}

// GetStreamUrl returns the StreamUrl field value if set, zero value otherwise.
func (o *AnswerRequest) GetStreamUrl() string {
	if o == nil || IsNil(o.StreamUrl) {
		var ret string
		return ret
	}
	return *o.StreamUrl
}

// GetStreamUrlOk returns a tuple with the StreamUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetStreamUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StreamUrl) {
		return nil, false
	}
	return o.StreamUrl, true
}

// HasStreamUrl returns a boolean if a field has been set.
func (o *AnswerRequest) HasStreamUrl() bool {
	if o != nil && !IsNil(o.StreamUrl) {
		return true
	}

	return false
}

// SetStreamUrl gets a reference to the given string and assigns it to the StreamUrl field.
func (o *AnswerRequest) SetStreamUrl(v string) {
	o.StreamUrl = &v
}

// GetStreamTrack returns the StreamTrack field value if set, zero value otherwise.
func (o *AnswerRequest) GetStreamTrack() string {
	if o == nil || IsNil(o.StreamTrack) {
		var ret string
		return ret
	}
	return *o.StreamTrack
}

// GetStreamTrackOk returns a tuple with the StreamTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetStreamTrackOk() (*string, bool) {
	if o == nil || IsNil(o.StreamTrack) {
		return nil, false
	}
	return o.StreamTrack, true
}

// HasStreamTrack returns a boolean if a field has been set.
func (o *AnswerRequest) HasStreamTrack() bool {
	if o != nil && !IsNil(o.StreamTrack) {
		return true
	}

	return false
}

// SetStreamTrack gets a reference to the given string and assigns it to the StreamTrack field.
func (o *AnswerRequest) SetStreamTrack(v string) {
	o.StreamTrack = &v
}

// GetStreamBidirectionalMode returns the StreamBidirectionalMode field value if set, zero value otherwise.
func (o *AnswerRequest) GetStreamBidirectionalMode() StreamBidirectionalMode {
	if o == nil || IsNil(o.StreamBidirectionalMode) {
		var ret StreamBidirectionalMode
		return ret
	}
	return *o.StreamBidirectionalMode
}

// GetStreamBidirectionalModeOk returns a tuple with the StreamBidirectionalMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetStreamBidirectionalModeOk() (*StreamBidirectionalMode, bool) {
	if o == nil || IsNil(o.StreamBidirectionalMode) {
		return nil, false
	}
	return o.StreamBidirectionalMode, true
}

// HasStreamBidirectionalMode returns a boolean if a field has been set.
func (o *AnswerRequest) HasStreamBidirectionalMode() bool {
	if o != nil && !IsNil(o.StreamBidirectionalMode) {
		return true
	}

	return false
}

// SetStreamBidirectionalMode gets a reference to the given StreamBidirectionalMode and assigns it to the StreamBidirectionalMode field.
func (o *AnswerRequest) SetStreamBidirectionalMode(v StreamBidirectionalMode) {
	o.StreamBidirectionalMode = &v
}

// GetStreamBidirectionalCodec returns the StreamBidirectionalCodec field value if set, zero value otherwise.
func (o *AnswerRequest) GetStreamBidirectionalCodec() StreamBidirectionalCodec {
	if o == nil || IsNil(o.StreamBidirectionalCodec) {
		var ret StreamBidirectionalCodec
		return ret
	}
	return *o.StreamBidirectionalCodec
}

// GetStreamBidirectionalCodecOk returns a tuple with the StreamBidirectionalCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetStreamBidirectionalCodecOk() (*StreamBidirectionalCodec, bool) {
	if o == nil || IsNil(o.StreamBidirectionalCodec) {
		return nil, false
	}
	return o.StreamBidirectionalCodec, true
}

// HasStreamBidirectionalCodec returns a boolean if a field has been set.
func (o *AnswerRequest) HasStreamBidirectionalCodec() bool {
	if o != nil && !IsNil(o.StreamBidirectionalCodec) {
		return true
	}

	return false
}

// SetStreamBidirectionalCodec gets a reference to the given StreamBidirectionalCodec and assigns it to the StreamBidirectionalCodec field.
func (o *AnswerRequest) SetStreamBidirectionalCodec(v StreamBidirectionalCodec) {
	o.StreamBidirectionalCodec = &v
}

// GetStreamBidirectionalTargetLegs returns the StreamBidirectionalTargetLegs field value if set, zero value otherwise.
func (o *AnswerRequest) GetStreamBidirectionalTargetLegs() StreamBidirectionalTargetLegs {
	if o == nil || IsNil(o.StreamBidirectionalTargetLegs) {
		var ret StreamBidirectionalTargetLegs
		return ret
	}
	return *o.StreamBidirectionalTargetLegs
}

// GetStreamBidirectionalTargetLegsOk returns a tuple with the StreamBidirectionalTargetLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetStreamBidirectionalTargetLegsOk() (*StreamBidirectionalTargetLegs, bool) {
	if o == nil || IsNil(o.StreamBidirectionalTargetLegs) {
		return nil, false
	}
	return o.StreamBidirectionalTargetLegs, true
}

// HasStreamBidirectionalTargetLegs returns a boolean if a field has been set.
func (o *AnswerRequest) HasStreamBidirectionalTargetLegs() bool {
	if o != nil && !IsNil(o.StreamBidirectionalTargetLegs) {
		return true
	}

	return false
}

// SetStreamBidirectionalTargetLegs gets a reference to the given StreamBidirectionalTargetLegs and assigns it to the StreamBidirectionalTargetLegs field.
func (o *AnswerRequest) SetStreamBidirectionalTargetLegs(v StreamBidirectionalTargetLegs) {
	o.StreamBidirectionalTargetLegs = &v
}

// GetSendSilenceWhenIdle returns the SendSilenceWhenIdle field value if set, zero value otherwise.
func (o *AnswerRequest) GetSendSilenceWhenIdle() bool {
	if o == nil || IsNil(o.SendSilenceWhenIdle) {
		var ret bool
		return ret
	}
	return *o.SendSilenceWhenIdle
}

// GetSendSilenceWhenIdleOk returns a tuple with the SendSilenceWhenIdle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetSendSilenceWhenIdleOk() (*bool, bool) {
	if o == nil || IsNil(o.SendSilenceWhenIdle) {
		return nil, false
	}
	return o.SendSilenceWhenIdle, true
}

// HasSendSilenceWhenIdle returns a boolean if a field has been set.
func (o *AnswerRequest) HasSendSilenceWhenIdle() bool {
	if o != nil && !IsNil(o.SendSilenceWhenIdle) {
		return true
	}

	return false
}

// SetSendSilenceWhenIdle gets a reference to the given bool and assigns it to the SendSilenceWhenIdle field.
func (o *AnswerRequest) SetSendSilenceWhenIdle(v bool) {
	o.SendSilenceWhenIdle = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *AnswerRequest) GetWebhookUrl() string {
	if o == nil || IsNil(o.WebhookUrl) {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrl) {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *AnswerRequest) HasWebhookUrl() bool {
	if o != nil && !IsNil(o.WebhookUrl) {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *AnswerRequest) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetWebhookUrlMethod returns the WebhookUrlMethod field value if set, zero value otherwise.
func (o *AnswerRequest) GetWebhookUrlMethod() string {
	if o == nil || IsNil(o.WebhookUrlMethod) {
		var ret string
		return ret
	}
	return *o.WebhookUrlMethod
}

// GetWebhookUrlMethodOk returns a tuple with the WebhookUrlMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetWebhookUrlMethodOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrlMethod) {
		return nil, false
	}
	return o.WebhookUrlMethod, true
}

// HasWebhookUrlMethod returns a boolean if a field has been set.
func (o *AnswerRequest) HasWebhookUrlMethod() bool {
	if o != nil && !IsNil(o.WebhookUrlMethod) {
		return true
	}

	return false
}

// SetWebhookUrlMethod gets a reference to the given string and assigns it to the WebhookUrlMethod field.
func (o *AnswerRequest) SetWebhookUrlMethod(v string) {
	o.WebhookUrlMethod = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *AnswerRequest) GetTranscription() bool {
	if o == nil || IsNil(o.Transcription) {
		var ret bool
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetTranscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *AnswerRequest) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given bool and assigns it to the Transcription field.
func (o *AnswerRequest) SetTranscription(v bool) {
	o.Transcription = &v
}

// GetTranscriptionConfig returns the TranscriptionConfig field value if set, zero value otherwise.
func (o *AnswerRequest) GetTranscriptionConfig() TranscriptionStartRequest {
	if o == nil || IsNil(o.TranscriptionConfig) {
		var ret TranscriptionStartRequest
		return ret
	}
	return *o.TranscriptionConfig
}

// GetTranscriptionConfigOk returns a tuple with the TranscriptionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetTranscriptionConfigOk() (*TranscriptionStartRequest, bool) {
	if o == nil || IsNil(o.TranscriptionConfig) {
		return nil, false
	}
	return o.TranscriptionConfig, true
}

// HasTranscriptionConfig returns a boolean if a field has been set.
func (o *AnswerRequest) HasTranscriptionConfig() bool {
	if o != nil && !IsNil(o.TranscriptionConfig) {
		return true
	}

	return false
}

// SetTranscriptionConfig gets a reference to the given TranscriptionStartRequest and assigns it to the TranscriptionConfig field.
func (o *AnswerRequest) SetTranscriptionConfig(v TranscriptionStartRequest) {
	o.TranscriptionConfig = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecord() string {
	if o == nil || IsNil(o.Record) {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordOk() (*string, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *AnswerRequest) SetRecord(v string) {
	o.Record = &v
}

// GetRecordChannels returns the RecordChannels field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordChannels() string {
	if o == nil || IsNil(o.RecordChannels) {
		var ret string
		return ret
	}
	return *o.RecordChannels
}

// GetRecordChannelsOk returns a tuple with the RecordChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.RecordChannels) {
		return nil, false
	}
	return o.RecordChannels, true
}

// HasRecordChannels returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordChannels() bool {
	if o != nil && !IsNil(o.RecordChannels) {
		return true
	}

	return false
}

// SetRecordChannels gets a reference to the given string and assigns it to the RecordChannels field.
func (o *AnswerRequest) SetRecordChannels(v string) {
	o.RecordChannels = &v
}

// GetRecordFormat returns the RecordFormat field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordFormat() string {
	if o == nil || IsNil(o.RecordFormat) {
		var ret string
		return ret
	}
	return *o.RecordFormat
}

// GetRecordFormatOk returns a tuple with the RecordFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordFormatOk() (*string, bool) {
	if o == nil || IsNil(o.RecordFormat) {
		return nil, false
	}
	return o.RecordFormat, true
}

// HasRecordFormat returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordFormat() bool {
	if o != nil && !IsNil(o.RecordFormat) {
		return true
	}

	return false
}

// SetRecordFormat gets a reference to the given string and assigns it to the RecordFormat field.
func (o *AnswerRequest) SetRecordFormat(v string) {
	o.RecordFormat = &v
}

// GetRecordMaxLength returns the RecordMaxLength field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordMaxLength() int32 {
	if o == nil || IsNil(o.RecordMaxLength) {
		var ret int32
		return ret
	}
	return *o.RecordMaxLength
}

// GetRecordMaxLengthOk returns a tuple with the RecordMaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordMaxLength) {
		return nil, false
	}
	return o.RecordMaxLength, true
}

// HasRecordMaxLength returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordMaxLength() bool {
	if o != nil && !IsNil(o.RecordMaxLength) {
		return true
	}

	return false
}

// SetRecordMaxLength gets a reference to the given int32 and assigns it to the RecordMaxLength field.
func (o *AnswerRequest) SetRecordMaxLength(v int32) {
	o.RecordMaxLength = &v
}

// GetRecordTimeoutSecs returns the RecordTimeoutSecs field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordTimeoutSecs() int32 {
	if o == nil || IsNil(o.RecordTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.RecordTimeoutSecs
}

// GetRecordTimeoutSecsOk returns a tuple with the RecordTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordTimeoutSecs) {
		return nil, false
	}
	return o.RecordTimeoutSecs, true
}

// HasRecordTimeoutSecs returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordTimeoutSecs() bool {
	if o != nil && !IsNil(o.RecordTimeoutSecs) {
		return true
	}

	return false
}

// SetRecordTimeoutSecs gets a reference to the given int32 and assigns it to the RecordTimeoutSecs field.
func (o *AnswerRequest) SetRecordTimeoutSecs(v int32) {
	o.RecordTimeoutSecs = &v
}

// GetRecordTrack returns the RecordTrack field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordTrack() string {
	if o == nil || IsNil(o.RecordTrack) {
		var ret string
		return ret
	}
	return *o.RecordTrack
}

// GetRecordTrackOk returns a tuple with the RecordTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordTrackOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTrack) {
		return nil, false
	}
	return o.RecordTrack, true
}

// HasRecordTrack returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordTrack() bool {
	if o != nil && !IsNil(o.RecordTrack) {
		return true
	}

	return false
}

// SetRecordTrack gets a reference to the given string and assigns it to the RecordTrack field.
func (o *AnswerRequest) SetRecordTrack(v string) {
	o.RecordTrack = &v
}

// GetRecordTrim returns the RecordTrim field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordTrim() string {
	if o == nil || IsNil(o.RecordTrim) {
		var ret string
		return ret
	}
	return *o.RecordTrim
}

// GetRecordTrimOk returns a tuple with the RecordTrim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordTrimOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTrim) {
		return nil, false
	}
	return o.RecordTrim, true
}

// HasRecordTrim returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordTrim() bool {
	if o != nil && !IsNil(o.RecordTrim) {
		return true
	}

	return false
}

// SetRecordTrim gets a reference to the given string and assigns it to the RecordTrim field.
func (o *AnswerRequest) SetRecordTrim(v string) {
	o.RecordTrim = &v
}

// GetRecordCustomFileName returns the RecordCustomFileName field value if set, zero value otherwise.
func (o *AnswerRequest) GetRecordCustomFileName() string {
	if o == nil || IsNil(o.RecordCustomFileName) {
		var ret string
		return ret
	}
	return *o.RecordCustomFileName
}

// GetRecordCustomFileNameOk returns a tuple with the RecordCustomFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerRequest) GetRecordCustomFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.RecordCustomFileName) {
		return nil, false
	}
	return o.RecordCustomFileName, true
}

// HasRecordCustomFileName returns a boolean if a field has been set.
func (o *AnswerRequest) HasRecordCustomFileName() bool {
	if o != nil && !IsNil(o.RecordCustomFileName) {
		return true
	}

	return false
}

// SetRecordCustomFileName gets a reference to the given string and assigns it to the RecordCustomFileName field.
func (o *AnswerRequest) SetRecordCustomFileName(v string) {
	o.RecordCustomFileName = &v
}

func (o AnswerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingGroupId) {
		toSerialize["billing_group_id"] = o.BillingGroupId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if !IsNil(o.PreferredCodecs) {
		toSerialize["preferred_codecs"] = o.PreferredCodecs
	}
	if !IsNil(o.SipHeaders) {
		toSerialize["sip_headers"] = o.SipHeaders
	}
	if !IsNil(o.SoundModifications) {
		toSerialize["sound_modifications"] = o.SoundModifications
	}
	if !IsNil(o.StreamUrl) {
		toSerialize["stream_url"] = o.StreamUrl
	}
	if !IsNil(o.StreamTrack) {
		toSerialize["stream_track"] = o.StreamTrack
	}
	if !IsNil(o.StreamBidirectionalMode) {
		toSerialize["stream_bidirectional_mode"] = o.StreamBidirectionalMode
	}
	if !IsNil(o.StreamBidirectionalCodec) {
		toSerialize["stream_bidirectional_codec"] = o.StreamBidirectionalCodec
	}
	if !IsNil(o.StreamBidirectionalTargetLegs) {
		toSerialize["stream_bidirectional_target_legs"] = o.StreamBidirectionalTargetLegs
	}
	if !IsNil(o.SendSilenceWhenIdle) {
		toSerialize["send_silence_when_idle"] = o.SendSilenceWhenIdle
	}
	if !IsNil(o.WebhookUrl) {
		toSerialize["webhook_url"] = o.WebhookUrl
	}
	if !IsNil(o.WebhookUrlMethod) {
		toSerialize["webhook_url_method"] = o.WebhookUrlMethod
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.TranscriptionConfig) {
		toSerialize["transcription_config"] = o.TranscriptionConfig
	}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.RecordChannels) {
		toSerialize["record_channels"] = o.RecordChannels
	}
	if !IsNil(o.RecordFormat) {
		toSerialize["record_format"] = o.RecordFormat
	}
	if !IsNil(o.RecordMaxLength) {
		toSerialize["record_max_length"] = o.RecordMaxLength
	}
	if !IsNil(o.RecordTimeoutSecs) {
		toSerialize["record_timeout_secs"] = o.RecordTimeoutSecs
	}
	if !IsNil(o.RecordTrack) {
		toSerialize["record_track"] = o.RecordTrack
	}
	if !IsNil(o.RecordTrim) {
		toSerialize["record_trim"] = o.RecordTrim
	}
	if !IsNil(o.RecordCustomFileName) {
		toSerialize["record_custom_file_name"] = o.RecordCustomFileName
	}
	return toSerialize, nil
}

type NullableAnswerRequest struct {
	value *AnswerRequest
	isSet bool
}

func (v NullableAnswerRequest) Get() *AnswerRequest {
	return v.value
}

func (v *NullableAnswerRequest) Set(val *AnswerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerRequest(val *AnswerRequest) *NullableAnswerRequest {
	return &NullableAnswerRequest{value: val, isSet: true}
}

func (v NullableAnswerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


