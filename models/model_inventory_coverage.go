/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the InventoryCoverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryCoverage{}

// InventoryCoverage struct for InventoryCoverage
type InventoryCoverage struct {
	Group *string `json:"group,omitempty"`
	GroupType *string `json:"group_type,omitempty"`
	NumberRange *int32 `json:"number_range,omitempty"`
	NumberType *string `json:"number_type,omitempty"`
	PhoneNumberType *string `json:"phone_number_type,omitempty"`
	CoverageType *string `json:"coverage_type,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	Count *int32 `json:"count,omitempty"`
	// Indicates if the phone number requires advance requirements.
	AdvanceRequirements *bool `json:"advance_requirements,omitempty"`
}

// NewInventoryCoverage instantiates a new InventoryCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryCoverage() *InventoryCoverage {
	this := InventoryCoverage{}
	return &this
}

// NewInventoryCoverageWithDefaults instantiates a new InventoryCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryCoverageWithDefaults() *InventoryCoverage {
	this := InventoryCoverage{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *InventoryCoverage) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *InventoryCoverage) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *InventoryCoverage) SetGroup(v string) {
	o.Group = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *InventoryCoverage) GetGroupType() string {
	if o == nil || IsNil(o.GroupType) {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *InventoryCoverage) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *InventoryCoverage) SetGroupType(v string) {
	o.GroupType = &v
}

// GetNumberRange returns the NumberRange field value if set, zero value otherwise.
func (o *InventoryCoverage) GetNumberRange() int32 {
	if o == nil || IsNil(o.NumberRange) {
		var ret int32
		return ret
	}
	return *o.NumberRange
}

// GetNumberRangeOk returns a tuple with the NumberRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetNumberRangeOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberRange) {
		return nil, false
	}
	return o.NumberRange, true
}

// HasNumberRange returns a boolean if a field has been set.
func (o *InventoryCoverage) HasNumberRange() bool {
	if o != nil && !IsNil(o.NumberRange) {
		return true
	}

	return false
}

// SetNumberRange gets a reference to the given int32 and assigns it to the NumberRange field.
func (o *InventoryCoverage) SetNumberRange(v int32) {
	o.NumberRange = &v
}

// GetNumberType returns the NumberType field value if set, zero value otherwise.
func (o *InventoryCoverage) GetNumberType() string {
	if o == nil || IsNil(o.NumberType) {
		var ret string
		return ret
	}
	return *o.NumberType
}

// GetNumberTypeOk returns a tuple with the NumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NumberType) {
		return nil, false
	}
	return o.NumberType, true
}

// HasNumberType returns a boolean if a field has been set.
func (o *InventoryCoverage) HasNumberType() bool {
	if o != nil && !IsNil(o.NumberType) {
		return true
	}

	return false
}

// SetNumberType gets a reference to the given string and assigns it to the NumberType field.
func (o *InventoryCoverage) SetNumberType(v string) {
	o.NumberType = &v
}

// GetPhoneNumberType returns the PhoneNumberType field value if set, zero value otherwise.
func (o *InventoryCoverage) GetPhoneNumberType() string {
	if o == nil || IsNil(o.PhoneNumberType) {
		var ret string
		return ret
	}
	return *o.PhoneNumberType
}

// GetPhoneNumberTypeOk returns a tuple with the PhoneNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetPhoneNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumberType) {
		return nil, false
	}
	return o.PhoneNumberType, true
}

// HasPhoneNumberType returns a boolean if a field has been set.
func (o *InventoryCoverage) HasPhoneNumberType() bool {
	if o != nil && !IsNil(o.PhoneNumberType) {
		return true
	}

	return false
}

// SetPhoneNumberType gets a reference to the given string and assigns it to the PhoneNumberType field.
func (o *InventoryCoverage) SetPhoneNumberType(v string) {
	o.PhoneNumberType = &v
}

// GetCoverageType returns the CoverageType field value if set, zero value otherwise.
func (o *InventoryCoverage) GetCoverageType() string {
	if o == nil || IsNil(o.CoverageType) {
		var ret string
		return ret
	}
	return *o.CoverageType
}

// GetCoverageTypeOk returns a tuple with the CoverageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetCoverageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CoverageType) {
		return nil, false
	}
	return o.CoverageType, true
}

// HasCoverageType returns a boolean if a field has been set.
func (o *InventoryCoverage) HasCoverageType() bool {
	if o != nil && !IsNil(o.CoverageType) {
		return true
	}

	return false
}

// SetCoverageType gets a reference to the given string and assigns it to the CoverageType field.
func (o *InventoryCoverage) SetCoverageType(v string) {
	o.CoverageType = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *InventoryCoverage) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *InventoryCoverage) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *InventoryCoverage) SetRecordType(v string) {
	o.RecordType = &v
}

// GetAdministrativeArea returns the AdministrativeArea field value if set, zero value otherwise.
func (o *InventoryCoverage) GetAdministrativeArea() string {
	if o == nil || IsNil(o.AdministrativeArea) {
		var ret string
		return ret
	}
	return *o.AdministrativeArea
}

// GetAdministrativeAreaOk returns a tuple with the AdministrativeArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetAdministrativeAreaOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrativeArea) {
		return nil, false
	}
	return o.AdministrativeArea, true
}

// HasAdministrativeArea returns a boolean if a field has been set.
func (o *InventoryCoverage) HasAdministrativeArea() bool {
	if o != nil && !IsNil(o.AdministrativeArea) {
		return true
	}

	return false
}

// SetAdministrativeArea gets a reference to the given string and assigns it to the AdministrativeArea field.
func (o *InventoryCoverage) SetAdministrativeArea(v string) {
	o.AdministrativeArea = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *InventoryCoverage) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *InventoryCoverage) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *InventoryCoverage) SetCount(v int32) {
	o.Count = &v
}

// GetAdvanceRequirements returns the AdvanceRequirements field value if set, zero value otherwise.
func (o *InventoryCoverage) GetAdvanceRequirements() bool {
	if o == nil || IsNil(o.AdvanceRequirements) {
		var ret bool
		return ret
	}
	return *o.AdvanceRequirements
}

// GetAdvanceRequirementsOk returns a tuple with the AdvanceRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryCoverage) GetAdvanceRequirementsOk() (*bool, bool) {
	if o == nil || IsNil(o.AdvanceRequirements) {
		return nil, false
	}
	return o.AdvanceRequirements, true
}

// HasAdvanceRequirements returns a boolean if a field has been set.
func (o *InventoryCoverage) HasAdvanceRequirements() bool {
	if o != nil && !IsNil(o.AdvanceRequirements) {
		return true
	}

	return false
}

// SetAdvanceRequirements gets a reference to the given bool and assigns it to the AdvanceRequirements field.
func (o *InventoryCoverage) SetAdvanceRequirements(v bool) {
	o.AdvanceRequirements = &v
}

func (o InventoryCoverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryCoverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.GroupType) {
		toSerialize["group_type"] = o.GroupType
	}
	if !IsNil(o.NumberRange) {
		toSerialize["number_range"] = o.NumberRange
	}
	if !IsNil(o.NumberType) {
		toSerialize["number_type"] = o.NumberType
	}
	if !IsNil(o.PhoneNumberType) {
		toSerialize["phone_number_type"] = o.PhoneNumberType
	}
	if !IsNil(o.CoverageType) {
		toSerialize["coverage_type"] = o.CoverageType
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.AdministrativeArea) {
		toSerialize["administrative_area"] = o.AdministrativeArea
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.AdvanceRequirements) {
		toSerialize["advance_requirements"] = o.AdvanceRequirements
	}
	return toSerialize, nil
}

type NullableInventoryCoverage struct {
	value *InventoryCoverage
	isSet bool
}

func (v NullableInventoryCoverage) Get() *InventoryCoverage {
	return v.value
}

func (v *NullableInventoryCoverage) Set(val *InventoryCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryCoverage(val *InventoryCoverage) *NullableInventoryCoverage {
	return &NullableInventoryCoverage{value: val, isSet: true}
}

func (v NullableInventoryCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


