/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallForkStartedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallForkStartedEvent{}

// CallForkStartedEvent struct for CallForkStartedEvent
type CallForkStartedEvent struct {
	Data *CallForkStarted `json:"data,omitempty"`
}

// NewCallForkStartedEvent instantiates a new CallForkStartedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallForkStartedEvent() *CallForkStartedEvent {
	this := CallForkStartedEvent{}
	return &this
}

// NewCallForkStartedEventWithDefaults instantiates a new CallForkStartedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallForkStartedEventWithDefaults() *CallForkStartedEvent {
	this := CallForkStartedEvent{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CallForkStartedEvent) GetData() CallForkStarted {
	if o == nil || IsNil(o.Data) {
		var ret CallForkStarted
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallForkStartedEvent) GetDataOk() (*CallForkStarted, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CallForkStartedEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given CallForkStarted and assigns it to the Data field.
func (o *CallForkStartedEvent) SetData(v CallForkStarted) {
	o.Data = &v
}

func (o CallForkStartedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallForkStartedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableCallForkStartedEvent struct {
	value *CallForkStartedEvent
	isSet bool
}

func (v NullableCallForkStartedEvent) Get() *CallForkStartedEvent {
	return v.value
}

func (v *NullableCallForkStartedEvent) Set(val *CallForkStartedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCallForkStartedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCallForkStartedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallForkStartedEvent(val *CallForkStartedEvent) *NullableCallForkStartedEvent {
	return &NullableCallForkStartedEvent{value: val, isSet: true}
}

func (v NullableCallForkStartedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallForkStartedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


