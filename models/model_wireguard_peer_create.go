/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WireguardPeerCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WireguardPeerCreate{}

// WireguardPeerCreate struct for WireguardPeerCreate
type WireguardPeerCreate struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The WireGuard `PublicKey`.<br /><br />If you do not provide a Public Key, a new Public and Private key pair will be generated for you.
	PublicKey *string `json:"public_key,omitempty"`
	// ISO 8601 formatted date-time indicating when peer sent traffic last time.
	LastSeen *string `json:"last_seen,omitempty"`
	// The id of the wireguard interface associated with the peer.
	WireguardInterfaceId string `json:"wireguard_interface_id"`
	// Your WireGuard `Interface.PrivateKey`.<br /><br />This attribute is only ever utlised if, on POST, you do NOT provide your own `public_key`. In which case, a new Public and Private key pair will be generated for you. When your `private_key` is returned, you must save this immediately as we do not save it within Telnyx. If you lose your Private Key, it can not be recovered.
	PrivateKey *string `json:"private_key,omitempty"`
}

type _WireguardPeerCreate WireguardPeerCreate

// NewWireguardPeerCreate instantiates a new WireguardPeerCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWireguardPeerCreate(wireguardInterfaceId string) *WireguardPeerCreate {
	this := WireguardPeerCreate{}
	this.WireguardInterfaceId = wireguardInterfaceId
	return &this
}

// NewWireguardPeerCreateWithDefaults instantiates a new WireguardPeerCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWireguardPeerCreateWithDefaults() *WireguardPeerCreate {
	this := WireguardPeerCreate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WireguardPeerCreate) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *WireguardPeerCreate) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *WireguardPeerCreate) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *WireguardPeerCreate) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *WireguardPeerCreate) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetLastSeen() string {
	if o == nil || IsNil(o.LastSeen) {
		var ret string
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetLastSeenOk() (*string, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given string and assigns it to the LastSeen field.
func (o *WireguardPeerCreate) SetLastSeen(v string) {
	o.LastSeen = &v
}

// GetWireguardInterfaceId returns the WireguardInterfaceId field value
func (o *WireguardPeerCreate) GetWireguardInterfaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WireguardInterfaceId
}

// GetWireguardInterfaceIdOk returns a tuple with the WireguardInterfaceId field value
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetWireguardInterfaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WireguardInterfaceId, true
}

// SetWireguardInterfaceId sets field value
func (o *WireguardPeerCreate) SetWireguardInterfaceId(v string) {
	o.WireguardInterfaceId = v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *WireguardPeerCreate) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardPeerCreate) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *WireguardPeerCreate) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *WireguardPeerCreate) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

func (o WireguardPeerCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WireguardPeerCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	toSerialize["wireguard_interface_id"] = o.WireguardInterfaceId
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	return toSerialize, nil
}

func (o *WireguardPeerCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wireguard_interface_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWireguardPeerCreate := _WireguardPeerCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWireguardPeerCreate)

	if err != nil {
		return err
	}

	*o = WireguardPeerCreate(varWireguardPeerCreate)

	return err
}

type NullableWireguardPeerCreate struct {
	value *WireguardPeerCreate
	isSet bool
}

func (v NullableWireguardPeerCreate) Get() *WireguardPeerCreate {
	return v.value
}

func (v *NullableWireguardPeerCreate) Set(val *WireguardPeerCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableWireguardPeerCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableWireguardPeerCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWireguardPeerCreate(val *WireguardPeerCreate) *NullableWireguardPeerCreate {
	return &NullableWireguardPeerCreate{value: val, isSet: true}
}

func (v NullableWireguardPeerCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWireguardPeerCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


