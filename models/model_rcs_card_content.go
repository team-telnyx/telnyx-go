/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSCardContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSCardContent{}

// RCSCardContent struct for RCSCardContent
type RCSCardContent struct {
	// Title of the card (at most 200 characters)
	Title *string `json:"title,omitempty"`
	// Description of the card (at most 2000 characters)
	Description *string `json:"description,omitempty"`
	Media *RCSMedia `json:"media,omitempty"`
	// List of suggestions to include in the card. Maximum 10 suggestions.
	Suggestions []RCSSuggestion `json:"suggestions,omitempty"`
}

// NewRCSCardContent instantiates a new RCSCardContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSCardContent() *RCSCardContent {
	this := RCSCardContent{}
	return &this
}

// NewRCSCardContentWithDefaults instantiates a new RCSCardContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSCardContentWithDefaults() *RCSCardContent {
	this := RCSCardContent{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RCSCardContent) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCardContent) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RCSCardContent) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RCSCardContent) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RCSCardContent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCardContent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RCSCardContent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RCSCardContent) SetDescription(v string) {
	o.Description = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *RCSCardContent) GetMedia() RCSMedia {
	if o == nil || IsNil(o.Media) {
		var ret RCSMedia
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCardContent) GetMediaOk() (*RCSMedia, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *RCSCardContent) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given RCSMedia and assigns it to the Media field.
func (o *RCSCardContent) SetMedia(v RCSMedia) {
	o.Media = &v
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise.
func (o *RCSCardContent) GetSuggestions() []RCSSuggestion {
	if o == nil || IsNil(o.Suggestions) {
		var ret []RCSSuggestion
		return ret
	}
	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCardContent) GetSuggestionsOk() ([]RCSSuggestion, bool) {
	if o == nil || IsNil(o.Suggestions) {
		return nil, false
	}
	return o.Suggestions, true
}

// HasSuggestions returns a boolean if a field has been set.
func (o *RCSCardContent) HasSuggestions() bool {
	if o != nil && !IsNil(o.Suggestions) {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given []RCSSuggestion and assigns it to the Suggestions field.
func (o *RCSCardContent) SetSuggestions(v []RCSSuggestion) {
	o.Suggestions = v
}

func (o RCSCardContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSCardContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Suggestions) {
		toSerialize["suggestions"] = o.Suggestions
	}
	return toSerialize, nil
}

type NullableRCSCardContent struct {
	value *RCSCardContent
	isSet bool
}

func (v NullableRCSCardContent) Get() *RCSCardContent {
	return v.value
}

func (v *NullableRCSCardContent) Set(val *RCSCardContent) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSCardContent) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSCardContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSCardContent(val *RCSCardContent) *NullableRCSCardContent {
	return &NullableRCSCardContent{value: val, isSet: true}
}

func (v NullableRCSCardContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSCardContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


