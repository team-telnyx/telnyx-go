/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the InterruptionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterruptionSettings{}

// InterruptionSettings Settings for handling user interruptions during assistant speech
type InterruptionSettings struct {
	// When true, allows users to interrupt the assistant while speaking
	Enable *bool `json:"enable,omitempty"`
}

// NewInterruptionSettings instantiates a new InterruptionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterruptionSettings() *InterruptionSettings {
	this := InterruptionSettings{}
	var enable bool = true
	this.Enable = &enable
	return &this
}

// NewInterruptionSettingsWithDefaults instantiates a new InterruptionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterruptionSettingsWithDefaults() *InterruptionSettings {
	this := InterruptionSettings{}
	var enable bool = true
	this.Enable = &enable
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *InterruptionSettings) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterruptionSettings) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *InterruptionSettings) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *InterruptionSettings) SetEnable(v bool) {
	o.Enable = &v
}

func (o InterruptionSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterruptionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	return toSerialize, nil
}

type NullableInterruptionSettings struct {
	value *InterruptionSettings
	isSet bool
}

func (v NullableInterruptionSettings) Get() *InterruptionSettings {
	return v.value
}

func (v *NullableInterruptionSettings) Set(val *InterruptionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableInterruptionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableInterruptionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterruptionSettings(val *InterruptionSettings) *NullableInterruptionSettings {
	return &NullableInterruptionSettings{value: val, isSet: true}
}

func (v NullableInterruptionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterruptionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


