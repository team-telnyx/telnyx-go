/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// StreamStatus The status of the Stream you wish to update.
type StreamStatus string

// List of StreamStatus
const (
	STOPPED StreamStatus = "stopped"
)

// All allowed values of StreamStatus enum
var AllowedStreamStatusEnumValues = []StreamStatus{
	"stopped",
}

func (v *StreamStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamStatus(value)
	for _, existing := range AllowedStreamStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamStatus", value)
}

// NewStreamStatusFromValue returns a pointer to a valid StreamStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamStatusFromValue(v string) (*StreamStatus, error) {
	ev := StreamStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamStatus: valid values are %v", v, AllowedStreamStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamStatus) IsValid() bool {
	for _, existing := range AllowedStreamStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamStatus value
func (v StreamStatus) Ptr() *StreamStatus {
	return &v
}

type NullableStreamStatus struct {
	value *StreamStatus
	isSet bool
}

func (v NullableStreamStatus) Get() *StreamStatus {
	return v.value
}

func (v *NullableStreamStatus) Set(val *StreamStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamStatus(val *StreamStatus) *NullableStreamStatus {
	return &NullableStreamStatus{value: val, isSet: true}
}

func (v NullableStreamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

