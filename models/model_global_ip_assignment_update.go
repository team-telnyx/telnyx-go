/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the GlobalIpAssignmentUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalIpAssignmentUpdate{}

// GlobalIpAssignmentUpdate struct for GlobalIpAssignmentUpdate
type GlobalIpAssignmentUpdate struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	GlobalIpId interface{} `json:"global_ip_id,omitempty"`
	WireguardPeerId interface{} `json:"wireguard_peer_id,omitempty"`
	Status *InterfaceStatus `json:"status,omitempty"`
	// Wireguard peer is connected.
	IsConnected *bool `json:"is_connected,omitempty"`
	// Enable/disable BGP announcement.
	IsInMaintenance *bool `json:"is_in_maintenance,omitempty"`
	// Status of BGP announcement.
	IsAnnounced *bool `json:"is_announced,omitempty"`
}

// NewGlobalIpAssignmentUpdate instantiates a new GlobalIpAssignmentUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalIpAssignmentUpdate() *GlobalIpAssignmentUpdate {
	this := GlobalIpAssignmentUpdate{}
	return &this
}

// NewGlobalIpAssignmentUpdateWithDefaults instantiates a new GlobalIpAssignmentUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalIpAssignmentUpdateWithDefaults() *GlobalIpAssignmentUpdate {
	this := GlobalIpAssignmentUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GlobalIpAssignmentUpdate) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *GlobalIpAssignmentUpdate) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *GlobalIpAssignmentUpdate) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *GlobalIpAssignmentUpdate) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetGlobalIpId returns the GlobalIpId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GlobalIpAssignmentUpdate) GetGlobalIpId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GlobalIpId
}

// GetGlobalIpIdOk returns a tuple with the GlobalIpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GlobalIpAssignmentUpdate) GetGlobalIpIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GlobalIpId) {
		return nil, false
	}
	return &o.GlobalIpId, true
}

// HasGlobalIpId returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasGlobalIpId() bool {
	if o != nil && !IsNil(o.GlobalIpId) {
		return true
	}

	return false
}

// SetGlobalIpId gets a reference to the given interface{} and assigns it to the GlobalIpId field.
func (o *GlobalIpAssignmentUpdate) SetGlobalIpId(v interface{}) {
	o.GlobalIpId = v
}

// GetWireguardPeerId returns the WireguardPeerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GlobalIpAssignmentUpdate) GetWireguardPeerId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.WireguardPeerId
}

// GetWireguardPeerIdOk returns a tuple with the WireguardPeerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GlobalIpAssignmentUpdate) GetWireguardPeerIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.WireguardPeerId) {
		return nil, false
	}
	return &o.WireguardPeerId, true
}

// HasWireguardPeerId returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasWireguardPeerId() bool {
	if o != nil && !IsNil(o.WireguardPeerId) {
		return true
	}

	return false
}

// SetWireguardPeerId gets a reference to the given interface{} and assigns it to the WireguardPeerId field.
func (o *GlobalIpAssignmentUpdate) SetWireguardPeerId(v interface{}) {
	o.WireguardPeerId = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetStatus() InterfaceStatus {
	if o == nil || IsNil(o.Status) {
		var ret InterfaceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetStatusOk() (*InterfaceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InterfaceStatus and assigns it to the Status field.
func (o *GlobalIpAssignmentUpdate) SetStatus(v InterfaceStatus) {
	o.Status = &v
}

// GetIsConnected returns the IsConnected field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetIsConnected() bool {
	if o == nil || IsNil(o.IsConnected) {
		var ret bool
		return ret
	}
	return *o.IsConnected
}

// GetIsConnectedOk returns a tuple with the IsConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetIsConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConnected) {
		return nil, false
	}
	return o.IsConnected, true
}

// HasIsConnected returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasIsConnected() bool {
	if o != nil && !IsNil(o.IsConnected) {
		return true
	}

	return false
}

// SetIsConnected gets a reference to the given bool and assigns it to the IsConnected field.
func (o *GlobalIpAssignmentUpdate) SetIsConnected(v bool) {
	o.IsConnected = &v
}

// GetIsInMaintenance returns the IsInMaintenance field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetIsInMaintenance() bool {
	if o == nil || IsNil(o.IsInMaintenance) {
		var ret bool
		return ret
	}
	return *o.IsInMaintenance
}

// GetIsInMaintenanceOk returns a tuple with the IsInMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetIsInMaintenanceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInMaintenance) {
		return nil, false
	}
	return o.IsInMaintenance, true
}

// HasIsInMaintenance returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasIsInMaintenance() bool {
	if o != nil && !IsNil(o.IsInMaintenance) {
		return true
	}

	return false
}

// SetIsInMaintenance gets a reference to the given bool and assigns it to the IsInMaintenance field.
func (o *GlobalIpAssignmentUpdate) SetIsInMaintenance(v bool) {
	o.IsInMaintenance = &v
}

// GetIsAnnounced returns the IsAnnounced field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUpdate) GetIsAnnounced() bool {
	if o == nil || IsNil(o.IsAnnounced) {
		var ret bool
		return ret
	}
	return *o.IsAnnounced
}

// GetIsAnnouncedOk returns a tuple with the IsAnnounced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUpdate) GetIsAnnouncedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnnounced) {
		return nil, false
	}
	return o.IsAnnounced, true
}

// HasIsAnnounced returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUpdate) HasIsAnnounced() bool {
	if o != nil && !IsNil(o.IsAnnounced) {
		return true
	}

	return false
}

// SetIsAnnounced gets a reference to the given bool and assigns it to the IsAnnounced field.
func (o *GlobalIpAssignmentUpdate) SetIsAnnounced(v bool) {
	o.IsAnnounced = &v
}

func (o GlobalIpAssignmentUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalIpAssignmentUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.GlobalIpId != nil {
		toSerialize["global_ip_id"] = o.GlobalIpId
	}
	if o.WireguardPeerId != nil {
		toSerialize["wireguard_peer_id"] = o.WireguardPeerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.IsConnected) {
		toSerialize["is_connected"] = o.IsConnected
	}
	if !IsNil(o.IsInMaintenance) {
		toSerialize["is_in_maintenance"] = o.IsInMaintenance
	}
	if !IsNil(o.IsAnnounced) {
		toSerialize["is_announced"] = o.IsAnnounced
	}
	return toSerialize, nil
}

type NullableGlobalIpAssignmentUpdate struct {
	value *GlobalIpAssignmentUpdate
	isSet bool
}

func (v NullableGlobalIpAssignmentUpdate) Get() *GlobalIpAssignmentUpdate {
	return v.value
}

func (v *NullableGlobalIpAssignmentUpdate) Set(val *GlobalIpAssignmentUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalIpAssignmentUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalIpAssignmentUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalIpAssignmentUpdate(val *GlobalIpAssignmentUpdate) *NullableGlobalIpAssignmentUpdate {
	return &NullableGlobalIpAssignmentUpdate{value: val, isSet: true}
}

func (v NullableGlobalIpAssignmentUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalIpAssignmentUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


