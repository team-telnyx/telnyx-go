/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCSOpenUrlAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSOpenUrlAction{}

// RCSOpenUrlAction Opens the user's default web browser app to the specified URL.
type RCSOpenUrlAction struct {
	Url string `json:"url"`
	// URL open application, browser or webview.
	Application string `json:"application"`
	WebviewViewMode string `json:"webview_view_mode"`
	// Accessbility description for webview.
	Description *string `json:"description,omitempty"`
}

type _RCSOpenUrlAction RCSOpenUrlAction

// NewRCSOpenUrlAction instantiates a new RCSOpenUrlAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSOpenUrlAction(url string, application string, webviewViewMode string) *RCSOpenUrlAction {
	this := RCSOpenUrlAction{}
	this.Url = url
	this.Application = application
	this.WebviewViewMode = webviewViewMode
	return &this
}

// NewRCSOpenUrlActionWithDefaults instantiates a new RCSOpenUrlAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSOpenUrlActionWithDefaults() *RCSOpenUrlAction {
	this := RCSOpenUrlAction{}
	return &this
}

// GetUrl returns the Url field value
func (o *RCSOpenUrlAction) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RCSOpenUrlAction) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RCSOpenUrlAction) SetUrl(v string) {
	o.Url = v
}

// GetApplication returns the Application field value
func (o *RCSOpenUrlAction) GetApplication() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value
// and a boolean to check if the value has been set.
func (o *RCSOpenUrlAction) GetApplicationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Application, true
}

// SetApplication sets field value
func (o *RCSOpenUrlAction) SetApplication(v string) {
	o.Application = v
}

// GetWebviewViewMode returns the WebviewViewMode field value
func (o *RCSOpenUrlAction) GetWebviewViewMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebviewViewMode
}

// GetWebviewViewModeOk returns a tuple with the WebviewViewMode field value
// and a boolean to check if the value has been set.
func (o *RCSOpenUrlAction) GetWebviewViewModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebviewViewMode, true
}

// SetWebviewViewMode sets field value
func (o *RCSOpenUrlAction) SetWebviewViewMode(v string) {
	o.WebviewViewMode = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RCSOpenUrlAction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSOpenUrlAction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RCSOpenUrlAction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RCSOpenUrlAction) SetDescription(v string) {
	o.Description = &v
}

func (o RCSOpenUrlAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSOpenUrlAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["application"] = o.Application
	toSerialize["webview_view_mode"] = o.WebviewViewMode
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *RCSOpenUrlAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"application",
		"webview_view_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCSOpenUrlAction := _RCSOpenUrlAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCSOpenUrlAction)

	if err != nil {
		return err
	}

	*o = RCSOpenUrlAction(varRCSOpenUrlAction)

	return err
}

type NullableRCSOpenUrlAction struct {
	value *RCSOpenUrlAction
	isSet bool
}

func (v NullableRCSOpenUrlAction) Get() *RCSOpenUrlAction {
	return v.value
}

func (v *NullableRCSOpenUrlAction) Set(val *RCSOpenUrlAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSOpenUrlAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSOpenUrlAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSOpenUrlAction(val *RCSOpenUrlAction) *NullableRCSOpenUrlAction {
	return &NullableRCSOpenUrlAction{value: val, isSet: true}
}

func (v NullableRCSOpenUrlAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSOpenUrlAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


