/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// EnabledFeatures If `telephony` is enabled, the assistant will be able to make and receive calls. If `messaging` is enabled, the assistant will be able to send and receive messages.
type EnabledFeatures string

// List of EnabledFeatures
const (
	TELEPHONY EnabledFeatures = "telephony"
	MESSAGING EnabledFeatures = "messaging"
)

// All allowed values of EnabledFeatures enum
var AllowedEnabledFeaturesEnumValues = []EnabledFeatures{
	"telephony",
	"messaging",
}

func (v *EnabledFeatures) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnabledFeatures(value)
	for _, existing := range AllowedEnabledFeaturesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnabledFeatures", value)
}

// NewEnabledFeaturesFromValue returns a pointer to a valid EnabledFeatures
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnabledFeaturesFromValue(v string) (*EnabledFeatures, error) {
	ev := EnabledFeatures(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnabledFeatures: valid values are %v", v, AllowedEnabledFeaturesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnabledFeatures) IsValid() bool {
	for _, existing := range AllowedEnabledFeaturesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnabledFeatures value
func (v EnabledFeatures) Ptr() *EnabledFeatures {
	return &v
}

type NullableEnabledFeatures struct {
	value *EnabledFeatures
	isSet bool
}

func (v NullableEnabledFeatures) Get() *EnabledFeatures {
	return v.value
}

func (v *NullableEnabledFeatures) Set(val *EnabledFeatures) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledFeatures(val *EnabledFeatures) *NullableEnabledFeatures {
	return &NullableEnabledFeatures{value: val, isSet: true}
}

func (v NullableEnabledFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

