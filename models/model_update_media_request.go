/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the UpdateMediaRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMediaRequest{}

// UpdateMediaRequest struct for UpdateMediaRequest
type UpdateMediaRequest struct {
	// The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.
	MediaUrl *string `json:"media_url,omitempty"`
	// The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.
	TtlSecs *int32 `json:"ttl_secs,omitempty"`
}

// NewUpdateMediaRequest instantiates a new UpdateMediaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMediaRequest() *UpdateMediaRequest {
	this := UpdateMediaRequest{}
	return &this
}

// NewUpdateMediaRequestWithDefaults instantiates a new UpdateMediaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMediaRequestWithDefaults() *UpdateMediaRequest {
	this := UpdateMediaRequest{}
	return &this
}

// GetMediaUrl returns the MediaUrl field value if set, zero value otherwise.
func (o *UpdateMediaRequest) GetMediaUrl() string {
	if o == nil || IsNil(o.MediaUrl) {
		var ret string
		return ret
	}
	return *o.MediaUrl
}

// GetMediaUrlOk returns a tuple with the MediaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMediaRequest) GetMediaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MediaUrl) {
		return nil, false
	}
	return o.MediaUrl, true
}

// HasMediaUrl returns a boolean if a field has been set.
func (o *UpdateMediaRequest) HasMediaUrl() bool {
	if o != nil && !IsNil(o.MediaUrl) {
		return true
	}

	return false
}

// SetMediaUrl gets a reference to the given string and assigns it to the MediaUrl field.
func (o *UpdateMediaRequest) SetMediaUrl(v string) {
	o.MediaUrl = &v
}

// GetTtlSecs returns the TtlSecs field value if set, zero value otherwise.
func (o *UpdateMediaRequest) GetTtlSecs() int32 {
	if o == nil || IsNil(o.TtlSecs) {
		var ret int32
		return ret
	}
	return *o.TtlSecs
}

// GetTtlSecsOk returns a tuple with the TtlSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMediaRequest) GetTtlSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TtlSecs) {
		return nil, false
	}
	return o.TtlSecs, true
}

// HasTtlSecs returns a boolean if a field has been set.
func (o *UpdateMediaRequest) HasTtlSecs() bool {
	if o != nil && !IsNil(o.TtlSecs) {
		return true
	}

	return false
}

// SetTtlSecs gets a reference to the given int32 and assigns it to the TtlSecs field.
func (o *UpdateMediaRequest) SetTtlSecs(v int32) {
	o.TtlSecs = &v
}

func (o UpdateMediaRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMediaRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaUrl) {
		toSerialize["media_url"] = o.MediaUrl
	}
	if !IsNil(o.TtlSecs) {
		toSerialize["ttl_secs"] = o.TtlSecs
	}
	return toSerialize, nil
}

type NullableUpdateMediaRequest struct {
	value *UpdateMediaRequest
	isSet bool
}

func (v NullableUpdateMediaRequest) Get() *UpdateMediaRequest {
	return v.value
}

func (v *NullableUpdateMediaRequest) Set(val *UpdateMediaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMediaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMediaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMediaRequest(val *UpdateMediaRequest) *NullableUpdateMediaRequest {
	return &NullableUpdateMediaRequest{value: val, isSet: true}
}

func (v NullableUpdateMediaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMediaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


