/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the DocReqsRequirementTypeAcceptanceCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocReqsRequirementTypeAcceptanceCriteria{}

// DocReqsRequirementTypeAcceptanceCriteria Specifies objective criteria for acceptance
type DocReqsRequirementTypeAcceptanceCriteria struct {
	// Specifies time-based acceptance criteria
	TimeLimit *string `json:"time_limit,omitempty"`
	// Specifies geography-based acceptance criteria
	LocalityLimit *string `json:"locality_limit,omitempty"`
	// Specifies the list of strictly possible values for the requirement. Ignored when empty
	AcceptableValues []string `json:"acceptable_values,omitempty"`
	// Maximum length allowed for the value
	MaxLength *int32 `json:"max_length,omitempty"`
	// Minimum length allowed for the value
	MinLength *int32 `json:"min_length,omitempty"`
	// Specifies the allowed characters as a string
	AcceptableCharacters *string `json:"acceptable_characters,omitempty"`
	// Specifies whether string matching should be case sensitive
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
	// A regular expression pattern that the value must match
	Regex *string `json:"regex,omitempty"`
}

// NewDocReqsRequirementTypeAcceptanceCriteria instantiates a new DocReqsRequirementTypeAcceptanceCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocReqsRequirementTypeAcceptanceCriteria() *DocReqsRequirementTypeAcceptanceCriteria {
	this := DocReqsRequirementTypeAcceptanceCriteria{}
	return &this
}

// NewDocReqsRequirementTypeAcceptanceCriteriaWithDefaults instantiates a new DocReqsRequirementTypeAcceptanceCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocReqsRequirementTypeAcceptanceCriteriaWithDefaults() *DocReqsRequirementTypeAcceptanceCriteria {
	this := DocReqsRequirementTypeAcceptanceCriteria{}
	return &this
}

// GetTimeLimit returns the TimeLimit field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetTimeLimit() string {
	if o == nil || IsNil(o.TimeLimit) {
		var ret string
		return ret
	}
	return *o.TimeLimit
}

// GetTimeLimitOk returns a tuple with the TimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetTimeLimitOk() (*string, bool) {
	if o == nil || IsNil(o.TimeLimit) {
		return nil, false
	}
	return o.TimeLimit, true
}

// HasTimeLimit returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasTimeLimit() bool {
	if o != nil && !IsNil(o.TimeLimit) {
		return true
	}

	return false
}

// SetTimeLimit gets a reference to the given string and assigns it to the TimeLimit field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetTimeLimit(v string) {
	o.TimeLimit = &v
}

// GetLocalityLimit returns the LocalityLimit field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetLocalityLimit() string {
	if o == nil || IsNil(o.LocalityLimit) {
		var ret string
		return ret
	}
	return *o.LocalityLimit
}

// GetLocalityLimitOk returns a tuple with the LocalityLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetLocalityLimitOk() (*string, bool) {
	if o == nil || IsNil(o.LocalityLimit) {
		return nil, false
	}
	return o.LocalityLimit, true
}

// HasLocalityLimit returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasLocalityLimit() bool {
	if o != nil && !IsNil(o.LocalityLimit) {
		return true
	}

	return false
}

// SetLocalityLimit gets a reference to the given string and assigns it to the LocalityLimit field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetLocalityLimit(v string) {
	o.LocalityLimit = &v
}

// GetAcceptableValues returns the AcceptableValues field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetAcceptableValues() []string {
	if o == nil || IsNil(o.AcceptableValues) {
		var ret []string
		return ret
	}
	return o.AcceptableValues
}

// GetAcceptableValuesOk returns a tuple with the AcceptableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetAcceptableValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.AcceptableValues) {
		return nil, false
	}
	return o.AcceptableValues, true
}

// HasAcceptableValues returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasAcceptableValues() bool {
	if o != nil && !IsNil(o.AcceptableValues) {
		return true
	}

	return false
}

// SetAcceptableValues gets a reference to the given []string and assigns it to the AcceptableValues field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetAcceptableValues(v []string) {
	o.AcceptableValues = v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetAcceptableCharacters returns the AcceptableCharacters field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetAcceptableCharacters() string {
	if o == nil || IsNil(o.AcceptableCharacters) {
		var ret string
		return ret
	}
	return *o.AcceptableCharacters
}

// GetAcceptableCharactersOk returns a tuple with the AcceptableCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetAcceptableCharactersOk() (*string, bool) {
	if o == nil || IsNil(o.AcceptableCharacters) {
		return nil, false
	}
	return o.AcceptableCharacters, true
}

// HasAcceptableCharacters returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasAcceptableCharacters() bool {
	if o != nil && !IsNil(o.AcceptableCharacters) {
		return true
	}

	return false
}

// SetAcceptableCharacters gets a reference to the given string and assigns it to the AcceptableCharacters field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetAcceptableCharacters(v string) {
	o.AcceptableCharacters = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetRegex() string {
	if o == nil || IsNil(o.Regex) {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) GetRegexOk() (*string, bool) {
	if o == nil || IsNil(o.Regex) {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *DocReqsRequirementTypeAcceptanceCriteria) HasRegex() bool {
	if o != nil && !IsNil(o.Regex) {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *DocReqsRequirementTypeAcceptanceCriteria) SetRegex(v string) {
	o.Regex = &v
}

func (o DocReqsRequirementTypeAcceptanceCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocReqsRequirementTypeAcceptanceCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeLimit) {
		toSerialize["time_limit"] = o.TimeLimit
	}
	if !IsNil(o.LocalityLimit) {
		toSerialize["locality_limit"] = o.LocalityLimit
	}
	if !IsNil(o.AcceptableValues) {
		toSerialize["acceptable_values"] = o.AcceptableValues
	}
	if !IsNil(o.MaxLength) {
		toSerialize["max_length"] = o.MaxLength
	}
	if !IsNil(o.MinLength) {
		toSerialize["min_length"] = o.MinLength
	}
	if !IsNil(o.AcceptableCharacters) {
		toSerialize["acceptable_characters"] = o.AcceptableCharacters
	}
	if !IsNil(o.CaseSensitive) {
		toSerialize["case_sensitive"] = o.CaseSensitive
	}
	if !IsNil(o.Regex) {
		toSerialize["regex"] = o.Regex
	}
	return toSerialize, nil
}

type NullableDocReqsRequirementTypeAcceptanceCriteria struct {
	value *DocReqsRequirementTypeAcceptanceCriteria
	isSet bool
}

func (v NullableDocReqsRequirementTypeAcceptanceCriteria) Get() *DocReqsRequirementTypeAcceptanceCriteria {
	return v.value
}

func (v *NullableDocReqsRequirementTypeAcceptanceCriteria) Set(val *DocReqsRequirementTypeAcceptanceCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableDocReqsRequirementTypeAcceptanceCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableDocReqsRequirementTypeAcceptanceCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocReqsRequirementTypeAcceptanceCriteria(val *DocReqsRequirementTypeAcceptanceCriteria) *NullableDocReqsRequirementTypeAcceptanceCriteria {
	return &NullableDocReqsRequirementTypeAcceptanceCriteria{value: val, isSet: true}
}

func (v NullableDocReqsRequirementTypeAcceptanceCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocReqsRequirementTypeAcceptanceCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


