/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BackgroundTasksQueryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackgroundTasksQueryResponse{}

// BackgroundTasksQueryResponse struct for BackgroundTasksQueryResponse
type BackgroundTasksQueryResponse struct {
	UserId string `json:"user_id"`
	TaskId string `json:"task_id"`
	TaskName string `json:"task_name"`
	Status BackgroundTaskStatus `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	Bucket *string `json:"bucket,omitempty"`
}

type _BackgroundTasksQueryResponse BackgroundTasksQueryResponse

// NewBackgroundTasksQueryResponse instantiates a new BackgroundTasksQueryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackgroundTasksQueryResponse(userId string, taskId string, taskName string, status BackgroundTaskStatus, createdAt time.Time) *BackgroundTasksQueryResponse {
	this := BackgroundTasksQueryResponse{}
	this.UserId = userId
	this.TaskId = taskId
	this.TaskName = taskName
	this.Status = status
	this.CreatedAt = createdAt
	return &this
}

// NewBackgroundTasksQueryResponseWithDefaults instantiates a new BackgroundTasksQueryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackgroundTasksQueryResponseWithDefaults() *BackgroundTasksQueryResponse {
	this := BackgroundTasksQueryResponse{}
	return &this
}

// GetUserId returns the UserId field value
func (o *BackgroundTasksQueryResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *BackgroundTasksQueryResponse) SetUserId(v string) {
	o.UserId = v
}

// GetTaskId returns the TaskId field value
func (o *BackgroundTasksQueryResponse) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *BackgroundTasksQueryResponse) SetTaskId(v string) {
	o.TaskId = v
}

// GetTaskName returns the TaskName field value
func (o *BackgroundTasksQueryResponse) GetTaskName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetTaskNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskName, true
}

// SetTaskName sets field value
func (o *BackgroundTasksQueryResponse) SetTaskName(v string) {
	o.TaskName = v
}

// GetStatus returns the Status field value
func (o *BackgroundTasksQueryResponse) GetStatus() BackgroundTaskStatus {
	if o == nil {
		var ret BackgroundTaskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetStatusOk() (*BackgroundTaskStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BackgroundTasksQueryResponse) SetStatus(v BackgroundTaskStatus) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BackgroundTasksQueryResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BackgroundTasksQueryResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *BackgroundTasksQueryResponse) GetFinishedAt() time.Time {
	if o == nil || IsNil(o.FinishedAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *BackgroundTasksQueryResponse) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *BackgroundTasksQueryResponse) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *BackgroundTasksQueryResponse) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackgroundTasksQueryResponse) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *BackgroundTasksQueryResponse) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *BackgroundTasksQueryResponse) SetBucket(v string) {
	o.Bucket = &v
}

func (o BackgroundTasksQueryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackgroundTasksQueryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["task_id"] = o.TaskId
	toSerialize["task_name"] = o.TaskName
	toSerialize["status"] = o.Status
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.FinishedAt) {
		toSerialize["finished_at"] = o.FinishedAt
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	return toSerialize, nil
}

func (o *BackgroundTasksQueryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"task_id",
		"task_name",
		"status",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackgroundTasksQueryResponse := _BackgroundTasksQueryResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackgroundTasksQueryResponse)

	if err != nil {
		return err
	}

	*o = BackgroundTasksQueryResponse(varBackgroundTasksQueryResponse)

	return err
}

type NullableBackgroundTasksQueryResponse struct {
	value *BackgroundTasksQueryResponse
	isSet bool
}

func (v NullableBackgroundTasksQueryResponse) Get() *BackgroundTasksQueryResponse {
	return v.value
}

func (v *NullableBackgroundTasksQueryResponse) Set(val *BackgroundTasksQueryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackgroundTasksQueryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackgroundTasksQueryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackgroundTasksQueryResponse(val *BackgroundTasksQueryResponse) *NullableBackgroundTasksQueryResponse {
	return &NullableBackgroundTasksQueryResponse{value: val, isSet: true}
}

func (v NullableBackgroundTasksQueryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackgroundTasksQueryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


