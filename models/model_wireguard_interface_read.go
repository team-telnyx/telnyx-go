/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the WireguardInterfaceRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WireguardInterfaceRead{}

// WireguardInterfaceRead struct for WireguardInterfaceRead
type WireguardInterfaceRead struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The id of the network associated with the interface.
	NetworkId *string `json:"network_id,omitempty"`
	// A user specified name for the interface.
	Name *string `json:"name,omitempty"`
	Status *InterfaceStatus `json:"status,omitempty"`
	// The Telnyx WireGuard peers `Peer.endpoint` value.
	Endpoint *string `json:"endpoint,omitempty"`
	// The Telnyx WireGuard peers `Peer.PublicKey`.
	PublicKey *string `json:"public_key,omitempty"`
	// Enable SIP traffic forwarding over VPN interface.
	EnableSipTrunking *bool `json:"enable_sip_trunking,omitempty"`
	// The region interface is deployed to.
	RegionCode *string `json:"region_code,omitempty"`
	Region *RegionOutRegion `json:"region,omitempty"`
}

// NewWireguardInterfaceRead instantiates a new WireguardInterfaceRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWireguardInterfaceRead() *WireguardInterfaceRead {
	this := WireguardInterfaceRead{}
	return &this
}

// NewWireguardInterfaceReadWithDefaults instantiates a new WireguardInterfaceRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWireguardInterfaceReadWithDefaults() *WireguardInterfaceRead {
	this := WireguardInterfaceRead{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WireguardInterfaceRead) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *WireguardInterfaceRead) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *WireguardInterfaceRead) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *WireguardInterfaceRead) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetNetworkId() string {
	if o == nil || IsNil(o.NetworkId) {
		var ret string
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetNetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given string and assigns it to the NetworkId field.
func (o *WireguardInterfaceRead) SetNetworkId(v string) {
	o.NetworkId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WireguardInterfaceRead) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetStatus() InterfaceStatus {
	if o == nil || IsNil(o.Status) {
		var ret InterfaceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetStatusOk() (*InterfaceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InterfaceStatus and assigns it to the Status field.
func (o *WireguardInterfaceRead) SetStatus(v InterfaceStatus) {
	o.Status = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *WireguardInterfaceRead) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *WireguardInterfaceRead) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetEnableSipTrunking returns the EnableSipTrunking field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetEnableSipTrunking() bool {
	if o == nil || IsNil(o.EnableSipTrunking) {
		var ret bool
		return ret
	}
	return *o.EnableSipTrunking
}

// GetEnableSipTrunkingOk returns a tuple with the EnableSipTrunking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetEnableSipTrunkingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSipTrunking) {
		return nil, false
	}
	return o.EnableSipTrunking, true
}

// HasEnableSipTrunking returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasEnableSipTrunking() bool {
	if o != nil && !IsNil(o.EnableSipTrunking) {
		return true
	}

	return false
}

// SetEnableSipTrunking gets a reference to the given bool and assigns it to the EnableSipTrunking field.
func (o *WireguardInterfaceRead) SetEnableSipTrunking(v bool) {
	o.EnableSipTrunking = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *WireguardInterfaceRead) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *WireguardInterfaceRead) GetRegion() RegionOutRegion {
	if o == nil || IsNil(o.Region) {
		var ret RegionOutRegion
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceRead) GetRegionOk() (*RegionOutRegion, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *WireguardInterfaceRead) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given RegionOutRegion and assigns it to the Region field.
func (o *WireguardInterfaceRead) SetRegion(v RegionOutRegion) {
	o.Region = &v
}

func (o WireguardInterfaceRead) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WireguardInterfaceRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.NetworkId) {
		toSerialize["network_id"] = o.NetworkId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.EnableSipTrunking) {
		toSerialize["enable_sip_trunking"] = o.EnableSipTrunking
	}
	if !IsNil(o.RegionCode) {
		toSerialize["region_code"] = o.RegionCode
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableWireguardInterfaceRead struct {
	value *WireguardInterfaceRead
	isSet bool
}

func (v NullableWireguardInterfaceRead) Get() *WireguardInterfaceRead {
	return v.value
}

func (v *NullableWireguardInterfaceRead) Set(val *WireguardInterfaceRead) {
	v.value = val
	v.isSet = true
}

func (v NullableWireguardInterfaceRead) IsSet() bool {
	return v.isSet
}

func (v *NullableWireguardInterfaceRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWireguardInterfaceRead(val *WireguardInterfaceRead) *NullableWireguardInterfaceRead {
	return &NullableWireguardInterfaceRead{value: val, isSet: true}
}

func (v NullableWireguardInterfaceRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWireguardInterfaceRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


