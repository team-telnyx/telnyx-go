/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CostInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostInformation{}

// CostInformation struct for CostInformation
type CostInformation struct {
	UpfrontCost *string `json:"upfront_cost,omitempty"`
	MonthlyCost *string `json:"monthly_cost,omitempty"`
	// The ISO 4217 code for the currency.
	Currency *string `json:"currency,omitempty"`
}

// NewCostInformation instantiates a new CostInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostInformation() *CostInformation {
	this := CostInformation{}
	return &this
}

// NewCostInformationWithDefaults instantiates a new CostInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostInformationWithDefaults() *CostInformation {
	this := CostInformation{}
	return &this
}

// GetUpfrontCost returns the UpfrontCost field value if set, zero value otherwise.
func (o *CostInformation) GetUpfrontCost() string {
	if o == nil || IsNil(o.UpfrontCost) {
		var ret string
		return ret
	}
	return *o.UpfrontCost
}

// GetUpfrontCostOk returns a tuple with the UpfrontCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostInformation) GetUpfrontCostOk() (*string, bool) {
	if o == nil || IsNil(o.UpfrontCost) {
		return nil, false
	}
	return o.UpfrontCost, true
}

// HasUpfrontCost returns a boolean if a field has been set.
func (o *CostInformation) HasUpfrontCost() bool {
	if o != nil && !IsNil(o.UpfrontCost) {
		return true
	}

	return false
}

// SetUpfrontCost gets a reference to the given string and assigns it to the UpfrontCost field.
func (o *CostInformation) SetUpfrontCost(v string) {
	o.UpfrontCost = &v
}

// GetMonthlyCost returns the MonthlyCost field value if set, zero value otherwise.
func (o *CostInformation) GetMonthlyCost() string {
	if o == nil || IsNil(o.MonthlyCost) {
		var ret string
		return ret
	}
	return *o.MonthlyCost
}

// GetMonthlyCostOk returns a tuple with the MonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostInformation) GetMonthlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.MonthlyCost) {
		return nil, false
	}
	return o.MonthlyCost, true
}

// HasMonthlyCost returns a boolean if a field has been set.
func (o *CostInformation) HasMonthlyCost() bool {
	if o != nil && !IsNil(o.MonthlyCost) {
		return true
	}

	return false
}

// SetMonthlyCost gets a reference to the given string and assigns it to the MonthlyCost field.
func (o *CostInformation) SetMonthlyCost(v string) {
	o.MonthlyCost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CostInformation) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostInformation) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CostInformation) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CostInformation) SetCurrency(v string) {
	o.Currency = &v
}

func (o CostInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpfrontCost) {
		toSerialize["upfront_cost"] = o.UpfrontCost
	}
	if !IsNil(o.MonthlyCost) {
		toSerialize["monthly_cost"] = o.MonthlyCost
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

type NullableCostInformation struct {
	value *CostInformation
	isSet bool
}

func (v NullableCostInformation) Get() *CostInformation {
	return v.value
}

func (v *NullableCostInformation) Set(val *CostInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableCostInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableCostInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostInformation(val *CostInformation) *NullableCostInformation {
	return &NullableCostInformation{value: val, isSet: true}
}

func (v NullableCostInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


