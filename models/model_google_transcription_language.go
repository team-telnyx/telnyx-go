/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// GoogleTranscriptionLanguage Language to use for speech recognition
type GoogleTranscriptionLanguage string

// List of GoogleTranscriptionLanguage
const (
	AF GoogleTranscriptionLanguage = "af"
	SQ GoogleTranscriptionLanguage = "sq"
	AM GoogleTranscriptionLanguage = "am"
	AR GoogleTranscriptionLanguage = "ar"
	HY GoogleTranscriptionLanguage = "hy"
	AZ GoogleTranscriptionLanguage = "az"
	EU GoogleTranscriptionLanguage = "eu"
	BN GoogleTranscriptionLanguage = "bn"
	BS GoogleTranscriptionLanguage = "bs"
	BG GoogleTranscriptionLanguage = "bg"
	MY GoogleTranscriptionLanguage = "my"
	CA GoogleTranscriptionLanguage = "ca"
	YUE GoogleTranscriptionLanguage = "yue"
	ZH GoogleTranscriptionLanguage = "zh"
	HR GoogleTranscriptionLanguage = "hr"
	CS GoogleTranscriptionLanguage = "cs"
	DA GoogleTranscriptionLanguage = "da"
	NL GoogleTranscriptionLanguage = "nl"
	EN GoogleTranscriptionLanguage = "en"
	ET GoogleTranscriptionLanguage = "et"
	FIL GoogleTranscriptionLanguage = "fil"
	FI GoogleTranscriptionLanguage = "fi"
	FR GoogleTranscriptionLanguage = "fr"
	GL GoogleTranscriptionLanguage = "gl"
	KA GoogleTranscriptionLanguage = "ka"
	DE GoogleTranscriptionLanguage = "de"
	EL GoogleTranscriptionLanguage = "el"
	GU GoogleTranscriptionLanguage = "gu"
	IW GoogleTranscriptionLanguage = "iw"
	HI GoogleTranscriptionLanguage = "hi"
	HU GoogleTranscriptionLanguage = "hu"
	IS GoogleTranscriptionLanguage = "is"
	ID GoogleTranscriptionLanguage = "id"
	IT GoogleTranscriptionLanguage = "it"
	JA GoogleTranscriptionLanguage = "ja"
	JV GoogleTranscriptionLanguage = "jv"
	KN GoogleTranscriptionLanguage = "kn"
	KK GoogleTranscriptionLanguage = "kk"
	KM GoogleTranscriptionLanguage = "km"
	KO GoogleTranscriptionLanguage = "ko"
	LO GoogleTranscriptionLanguage = "lo"
	LV GoogleTranscriptionLanguage = "lv"
	LT GoogleTranscriptionLanguage = "lt"
	MK GoogleTranscriptionLanguage = "mk"
	MS GoogleTranscriptionLanguage = "ms"
	ML GoogleTranscriptionLanguage = "ml"
	MR GoogleTranscriptionLanguage = "mr"
	MN GoogleTranscriptionLanguage = "mn"
	NE GoogleTranscriptionLanguage = "ne"
	NO GoogleTranscriptionLanguage = "no"
	FA GoogleTranscriptionLanguage = "fa"
	PL GoogleTranscriptionLanguage = "pl"
	PT GoogleTranscriptionLanguage = "pt"
	PA GoogleTranscriptionLanguage = "pa"
	RO GoogleTranscriptionLanguage = "ro"
	RU GoogleTranscriptionLanguage = "ru"
	RW GoogleTranscriptionLanguage = "rw"
	SR GoogleTranscriptionLanguage = "sr"
	SI GoogleTranscriptionLanguage = "si"
	SK GoogleTranscriptionLanguage = "sk"
	SL GoogleTranscriptionLanguage = "sl"
	SS GoogleTranscriptionLanguage = "ss"
	ST GoogleTranscriptionLanguage = "st"
	ES GoogleTranscriptionLanguage = "es"
	SU GoogleTranscriptionLanguage = "su"
	SW GoogleTranscriptionLanguage = "sw"
	SV GoogleTranscriptionLanguage = "sv"
	TA GoogleTranscriptionLanguage = "ta"
	TE GoogleTranscriptionLanguage = "te"
	TH GoogleTranscriptionLanguage = "th"
	TN GoogleTranscriptionLanguage = "tn"
	TR GoogleTranscriptionLanguage = "tr"
	TS GoogleTranscriptionLanguage = "ts"
	UK GoogleTranscriptionLanguage = "uk"
	UR GoogleTranscriptionLanguage = "ur"
	UZ GoogleTranscriptionLanguage = "uz"
	VE GoogleTranscriptionLanguage = "ve"
	VI GoogleTranscriptionLanguage = "vi"
	XH GoogleTranscriptionLanguage = "xh"
	ZU GoogleTranscriptionLanguage = "zu"
)

// All allowed values of GoogleTranscriptionLanguage enum
var AllowedGoogleTranscriptionLanguageEnumValues = []GoogleTranscriptionLanguage{
	"af",
	"sq",
	"am",
	"ar",
	"hy",
	"az",
	"eu",
	"bn",
	"bs",
	"bg",
	"my",
	"ca",
	"yue",
	"zh",
	"hr",
	"cs",
	"da",
	"nl",
	"en",
	"et",
	"fil",
	"fi",
	"fr",
	"gl",
	"ka",
	"de",
	"el",
	"gu",
	"iw",
	"hi",
	"hu",
	"is",
	"id",
	"it",
	"ja",
	"jv",
	"kn",
	"kk",
	"km",
	"ko",
	"lo",
	"lv",
	"lt",
	"mk",
	"ms",
	"ml",
	"mr",
	"mn",
	"ne",
	"no",
	"fa",
	"pl",
	"pt",
	"pa",
	"ro",
	"ru",
	"rw",
	"sr",
	"si",
	"sk",
	"sl",
	"ss",
	"st",
	"es",
	"su",
	"sw",
	"sv",
	"ta",
	"te",
	"th",
	"tn",
	"tr",
	"ts",
	"uk",
	"ur",
	"uz",
	"ve",
	"vi",
	"xh",
	"zu",
}

func (v *GoogleTranscriptionLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GoogleTranscriptionLanguage(value)
	for _, existing := range AllowedGoogleTranscriptionLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GoogleTranscriptionLanguage", value)
}

// NewGoogleTranscriptionLanguageFromValue returns a pointer to a valid GoogleTranscriptionLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGoogleTranscriptionLanguageFromValue(v string) (*GoogleTranscriptionLanguage, error) {
	ev := GoogleTranscriptionLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GoogleTranscriptionLanguage: valid values are %v", v, AllowedGoogleTranscriptionLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GoogleTranscriptionLanguage) IsValid() bool {
	for _, existing := range AllowedGoogleTranscriptionLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GoogleTranscriptionLanguage value
func (v GoogleTranscriptionLanguage) Ptr() *GoogleTranscriptionLanguage {
	return &v
}

type NullableGoogleTranscriptionLanguage struct {
	value *GoogleTranscriptionLanguage
	isSet bool
}

func (v NullableGoogleTranscriptionLanguage) Get() *GoogleTranscriptionLanguage {
	return v.value
}

func (v *NullableGoogleTranscriptionLanguage) Set(val *GoogleTranscriptionLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleTranscriptionLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleTranscriptionLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleTranscriptionLanguage(val *GoogleTranscriptionLanguage) *NullableGoogleTranscriptionLanguage {
	return &NullableGoogleTranscriptionLanguage{value: val, isSet: true}
}

func (v NullableGoogleTranscriptionLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleTranscriptionLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

