/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadMediaRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadMediaRequest{}

// UploadMediaRequest struct for UploadMediaRequest
type UploadMediaRequest struct {
	// The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.
	MediaUrl string `json:"media_url"`
	// The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.
	TtlSecs *int32 `json:"ttl_secs,omitempty"`
	// The unique identifier of a file.
	MediaName *string `json:"media_name,omitempty"`
}

type _UploadMediaRequest UploadMediaRequest

// NewUploadMediaRequest instantiates a new UploadMediaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadMediaRequest(mediaUrl string) *UploadMediaRequest {
	this := UploadMediaRequest{}
	this.MediaUrl = mediaUrl
	return &this
}

// NewUploadMediaRequestWithDefaults instantiates a new UploadMediaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadMediaRequestWithDefaults() *UploadMediaRequest {
	this := UploadMediaRequest{}
	return &this
}

// GetMediaUrl returns the MediaUrl field value
func (o *UploadMediaRequest) GetMediaUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaUrl
}

// GetMediaUrlOk returns a tuple with the MediaUrl field value
// and a boolean to check if the value has been set.
func (o *UploadMediaRequest) GetMediaUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaUrl, true
}

// SetMediaUrl sets field value
func (o *UploadMediaRequest) SetMediaUrl(v string) {
	o.MediaUrl = v
}

// GetTtlSecs returns the TtlSecs field value if set, zero value otherwise.
func (o *UploadMediaRequest) GetTtlSecs() int32 {
	if o == nil || IsNil(o.TtlSecs) {
		var ret int32
		return ret
	}
	return *o.TtlSecs
}

// GetTtlSecsOk returns a tuple with the TtlSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadMediaRequest) GetTtlSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TtlSecs) {
		return nil, false
	}
	return o.TtlSecs, true
}

// HasTtlSecs returns a boolean if a field has been set.
func (o *UploadMediaRequest) HasTtlSecs() bool {
	if o != nil && !IsNil(o.TtlSecs) {
		return true
	}

	return false
}

// SetTtlSecs gets a reference to the given int32 and assigns it to the TtlSecs field.
func (o *UploadMediaRequest) SetTtlSecs(v int32) {
	o.TtlSecs = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *UploadMediaRequest) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadMediaRequest) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *UploadMediaRequest) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *UploadMediaRequest) SetMediaName(v string) {
	o.MediaName = &v
}

func (o UploadMediaRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadMediaRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["media_url"] = o.MediaUrl
	if !IsNil(o.TtlSecs) {
		toSerialize["ttl_secs"] = o.TtlSecs
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	return toSerialize, nil
}

func (o *UploadMediaRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"media_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadMediaRequest := _UploadMediaRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadMediaRequest)

	if err != nil {
		return err
	}

	*o = UploadMediaRequest(varUploadMediaRequest)

	return err
}

type NullableUploadMediaRequest struct {
	value *UploadMediaRequest
	isSet bool
}

func (v NullableUploadMediaRequest) Get() *UploadMediaRequest {
	return v.value
}

func (v *NullableUploadMediaRequest) Set(val *UploadMediaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadMediaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadMediaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadMediaRequest(val *UploadMediaRequest) *NullableUploadMediaRequest {
	return &NullableUploadMediaRequest{value: val, isSet: true}
}

func (v NullableUploadMediaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadMediaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


