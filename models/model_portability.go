/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the Portability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Portability{}

// Portability struct for Portability
type Portability struct {
	// Local Routing Number, if assigned to the requested phone number
	Lrn *string `json:"lrn,omitempty"`
	// Indicates whether or not the requested phone number has been ported
	PortedStatus *string `json:"ported_status,omitempty"`
	// ISO-formatted date when the requested phone number has been ported
	PortedDate *string `json:"ported_date,omitempty"`
	// Operating Company Name (OCN) as per the Local Exchange Routing Guide (LERG) database
	Ocn *string `json:"ocn,omitempty"`
	// Type of number
	LineType *string `json:"line_type,omitempty"`
	// SPID (Service Provider ID)
	Spid *string `json:"spid,omitempty"`
	// Service provider name
	SpidCarrierName *string `json:"spid_carrier_name,omitempty"`
	// Service provider type
	SpidCarrierType *string `json:"spid_carrier_type,omitempty"`
	// Alternative SPID (Service Provider ID). Often used when a carrier is using a number from another carrier
	Altspid *string `json:"altspid,omitempty"`
	// Alternative service provider name
	AltspidCarrierName *string `json:"altspid_carrier_name,omitempty"`
	// Alternative service provider type
	AltspidCarrierType *string `json:"altspid_carrier_type,omitempty"`
	// City name extracted from the locality in the Local Exchange Routing Guide (LERG) database
	City *string `json:"city,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewPortability instantiates a new Portability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortability() *Portability {
	this := Portability{}
	return &this
}

// NewPortabilityWithDefaults instantiates a new Portability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortabilityWithDefaults() *Portability {
	this := Portability{}
	return &this
}

// GetLrn returns the Lrn field value if set, zero value otherwise.
func (o *Portability) GetLrn() string {
	if o == nil || IsNil(o.Lrn) {
		var ret string
		return ret
	}
	return *o.Lrn
}

// GetLrnOk returns a tuple with the Lrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetLrnOk() (*string, bool) {
	if o == nil || IsNil(o.Lrn) {
		return nil, false
	}
	return o.Lrn, true
}

// HasLrn returns a boolean if a field has been set.
func (o *Portability) HasLrn() bool {
	if o != nil && !IsNil(o.Lrn) {
		return true
	}

	return false
}

// SetLrn gets a reference to the given string and assigns it to the Lrn field.
func (o *Portability) SetLrn(v string) {
	o.Lrn = &v
}

// GetPortedStatus returns the PortedStatus field value if set, zero value otherwise.
func (o *Portability) GetPortedStatus() string {
	if o == nil || IsNil(o.PortedStatus) {
		var ret string
		return ret
	}
	return *o.PortedStatus
}

// GetPortedStatusOk returns a tuple with the PortedStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetPortedStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PortedStatus) {
		return nil, false
	}
	return o.PortedStatus, true
}

// HasPortedStatus returns a boolean if a field has been set.
func (o *Portability) HasPortedStatus() bool {
	if o != nil && !IsNil(o.PortedStatus) {
		return true
	}

	return false
}

// SetPortedStatus gets a reference to the given string and assigns it to the PortedStatus field.
func (o *Portability) SetPortedStatus(v string) {
	o.PortedStatus = &v
}

// GetPortedDate returns the PortedDate field value if set, zero value otherwise.
func (o *Portability) GetPortedDate() string {
	if o == nil || IsNil(o.PortedDate) {
		var ret string
		return ret
	}
	return *o.PortedDate
}

// GetPortedDateOk returns a tuple with the PortedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetPortedDateOk() (*string, bool) {
	if o == nil || IsNil(o.PortedDate) {
		return nil, false
	}
	return o.PortedDate, true
}

// HasPortedDate returns a boolean if a field has been set.
func (o *Portability) HasPortedDate() bool {
	if o != nil && !IsNil(o.PortedDate) {
		return true
	}

	return false
}

// SetPortedDate gets a reference to the given string and assigns it to the PortedDate field.
func (o *Portability) SetPortedDate(v string) {
	o.PortedDate = &v
}

// GetOcn returns the Ocn field value if set, zero value otherwise.
func (o *Portability) GetOcn() string {
	if o == nil || IsNil(o.Ocn) {
		var ret string
		return ret
	}
	return *o.Ocn
}

// GetOcnOk returns a tuple with the Ocn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetOcnOk() (*string, bool) {
	if o == nil || IsNil(o.Ocn) {
		return nil, false
	}
	return o.Ocn, true
}

// HasOcn returns a boolean if a field has been set.
func (o *Portability) HasOcn() bool {
	if o != nil && !IsNil(o.Ocn) {
		return true
	}

	return false
}

// SetOcn gets a reference to the given string and assigns it to the Ocn field.
func (o *Portability) SetOcn(v string) {
	o.Ocn = &v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *Portability) GetLineType() string {
	if o == nil || IsNil(o.LineType) {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetLineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LineType) {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *Portability) HasLineType() bool {
	if o != nil && !IsNil(o.LineType) {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *Portability) SetLineType(v string) {
	o.LineType = &v
}

// GetSpid returns the Spid field value if set, zero value otherwise.
func (o *Portability) GetSpid() string {
	if o == nil || IsNil(o.Spid) {
		var ret string
		return ret
	}
	return *o.Spid
}

// GetSpidOk returns a tuple with the Spid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetSpidOk() (*string, bool) {
	if o == nil || IsNil(o.Spid) {
		return nil, false
	}
	return o.Spid, true
}

// HasSpid returns a boolean if a field has been set.
func (o *Portability) HasSpid() bool {
	if o != nil && !IsNil(o.Spid) {
		return true
	}

	return false
}

// SetSpid gets a reference to the given string and assigns it to the Spid field.
func (o *Portability) SetSpid(v string) {
	o.Spid = &v
}

// GetSpidCarrierName returns the SpidCarrierName field value if set, zero value otherwise.
func (o *Portability) GetSpidCarrierName() string {
	if o == nil || IsNil(o.SpidCarrierName) {
		var ret string
		return ret
	}
	return *o.SpidCarrierName
}

// GetSpidCarrierNameOk returns a tuple with the SpidCarrierName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetSpidCarrierNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpidCarrierName) {
		return nil, false
	}
	return o.SpidCarrierName, true
}

// HasSpidCarrierName returns a boolean if a field has been set.
func (o *Portability) HasSpidCarrierName() bool {
	if o != nil && !IsNil(o.SpidCarrierName) {
		return true
	}

	return false
}

// SetSpidCarrierName gets a reference to the given string and assigns it to the SpidCarrierName field.
func (o *Portability) SetSpidCarrierName(v string) {
	o.SpidCarrierName = &v
}

// GetSpidCarrierType returns the SpidCarrierType field value if set, zero value otherwise.
func (o *Portability) GetSpidCarrierType() string {
	if o == nil || IsNil(o.SpidCarrierType) {
		var ret string
		return ret
	}
	return *o.SpidCarrierType
}

// GetSpidCarrierTypeOk returns a tuple with the SpidCarrierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetSpidCarrierTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SpidCarrierType) {
		return nil, false
	}
	return o.SpidCarrierType, true
}

// HasSpidCarrierType returns a boolean if a field has been set.
func (o *Portability) HasSpidCarrierType() bool {
	if o != nil && !IsNil(o.SpidCarrierType) {
		return true
	}

	return false
}

// SetSpidCarrierType gets a reference to the given string and assigns it to the SpidCarrierType field.
func (o *Portability) SetSpidCarrierType(v string) {
	o.SpidCarrierType = &v
}

// GetAltspid returns the Altspid field value if set, zero value otherwise.
func (o *Portability) GetAltspid() string {
	if o == nil || IsNil(o.Altspid) {
		var ret string
		return ret
	}
	return *o.Altspid
}

// GetAltspidOk returns a tuple with the Altspid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetAltspidOk() (*string, bool) {
	if o == nil || IsNil(o.Altspid) {
		return nil, false
	}
	return o.Altspid, true
}

// HasAltspid returns a boolean if a field has been set.
func (o *Portability) HasAltspid() bool {
	if o != nil && !IsNil(o.Altspid) {
		return true
	}

	return false
}

// SetAltspid gets a reference to the given string and assigns it to the Altspid field.
func (o *Portability) SetAltspid(v string) {
	o.Altspid = &v
}

// GetAltspidCarrierName returns the AltspidCarrierName field value if set, zero value otherwise.
func (o *Portability) GetAltspidCarrierName() string {
	if o == nil || IsNil(o.AltspidCarrierName) {
		var ret string
		return ret
	}
	return *o.AltspidCarrierName
}

// GetAltspidCarrierNameOk returns a tuple with the AltspidCarrierName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetAltspidCarrierNameOk() (*string, bool) {
	if o == nil || IsNil(o.AltspidCarrierName) {
		return nil, false
	}
	return o.AltspidCarrierName, true
}

// HasAltspidCarrierName returns a boolean if a field has been set.
func (o *Portability) HasAltspidCarrierName() bool {
	if o != nil && !IsNil(o.AltspidCarrierName) {
		return true
	}

	return false
}

// SetAltspidCarrierName gets a reference to the given string and assigns it to the AltspidCarrierName field.
func (o *Portability) SetAltspidCarrierName(v string) {
	o.AltspidCarrierName = &v
}

// GetAltspidCarrierType returns the AltspidCarrierType field value if set, zero value otherwise.
func (o *Portability) GetAltspidCarrierType() string {
	if o == nil || IsNil(o.AltspidCarrierType) {
		var ret string
		return ret
	}
	return *o.AltspidCarrierType
}

// GetAltspidCarrierTypeOk returns a tuple with the AltspidCarrierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetAltspidCarrierTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AltspidCarrierType) {
		return nil, false
	}
	return o.AltspidCarrierType, true
}

// HasAltspidCarrierType returns a boolean if a field has been set.
func (o *Portability) HasAltspidCarrierType() bool {
	if o != nil && !IsNil(o.AltspidCarrierType) {
		return true
	}

	return false
}

// SetAltspidCarrierType gets a reference to the given string and assigns it to the AltspidCarrierType field.
func (o *Portability) SetAltspidCarrierType(v string) {
	o.AltspidCarrierType = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Portability) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Portability) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Portability) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Portability) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Portability) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Portability) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Portability) SetState(v string) {
	o.State = &v
}

func (o Portability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Portability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lrn) {
		toSerialize["lrn"] = o.Lrn
	}
	if !IsNil(o.PortedStatus) {
		toSerialize["ported_status"] = o.PortedStatus
	}
	if !IsNil(o.PortedDate) {
		toSerialize["ported_date"] = o.PortedDate
	}
	if !IsNil(o.Ocn) {
		toSerialize["ocn"] = o.Ocn
	}
	if !IsNil(o.LineType) {
		toSerialize["line_type"] = o.LineType
	}
	if !IsNil(o.Spid) {
		toSerialize["spid"] = o.Spid
	}
	if !IsNil(o.SpidCarrierName) {
		toSerialize["spid_carrier_name"] = o.SpidCarrierName
	}
	if !IsNil(o.SpidCarrierType) {
		toSerialize["spid_carrier_type"] = o.SpidCarrierType
	}
	if !IsNil(o.Altspid) {
		toSerialize["altspid"] = o.Altspid
	}
	if !IsNil(o.AltspidCarrierName) {
		toSerialize["altspid_carrier_name"] = o.AltspidCarrierName
	}
	if !IsNil(o.AltspidCarrierType) {
		toSerialize["altspid_carrier_type"] = o.AltspidCarrierType
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullablePortability struct {
	value *Portability
	isSet bool
}

func (v NullablePortability) Get() *Portability {
	return v.value
}

func (v *NullablePortability) Set(val *Portability) {
	v.value = val
	v.isSet = true
}

func (v NullablePortability) IsSet() bool {
	return v.isSet
}

func (v *NullablePortability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortability(val *Portability) *NullablePortability {
	return &NullablePortability{value: val, isSet: true}
}

func (v NullablePortability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


