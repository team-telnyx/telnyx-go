/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExportPortoutsCSVReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportPortoutsCSVReport{}

// ExportPortoutsCSVReport The parameters for generating a port-outs CSV report.
type ExportPortoutsCSVReport struct {
	Filters ExportPortoutsCSVReportFilters `json:"filters"`
}

type _ExportPortoutsCSVReport ExportPortoutsCSVReport

// NewExportPortoutsCSVReport instantiates a new ExportPortoutsCSVReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportPortoutsCSVReport(filters ExportPortoutsCSVReportFilters) *ExportPortoutsCSVReport {
	this := ExportPortoutsCSVReport{}
	this.Filters = filters
	return &this
}

// NewExportPortoutsCSVReportWithDefaults instantiates a new ExportPortoutsCSVReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportPortoutsCSVReportWithDefaults() *ExportPortoutsCSVReport {
	this := ExportPortoutsCSVReport{}
	return &this
}

// GetFilters returns the Filters field value
func (o *ExportPortoutsCSVReport) GetFilters() ExportPortoutsCSVReportFilters {
	if o == nil {
		var ret ExportPortoutsCSVReportFilters
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *ExportPortoutsCSVReport) GetFiltersOk() (*ExportPortoutsCSVReportFilters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filters, true
}

// SetFilters sets field value
func (o *ExportPortoutsCSVReport) SetFilters(v ExportPortoutsCSVReportFilters) {
	o.Filters = v
}

func (o ExportPortoutsCSVReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportPortoutsCSVReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filters"] = o.Filters
	return toSerialize, nil
}

func (o *ExportPortoutsCSVReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportPortoutsCSVReport := _ExportPortoutsCSVReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExportPortoutsCSVReport)

	if err != nil {
		return err
	}

	*o = ExportPortoutsCSVReport(varExportPortoutsCSVReport)

	return err
}

type NullableExportPortoutsCSVReport struct {
	value *ExportPortoutsCSVReport
	isSet bool
}

func (v NullableExportPortoutsCSVReport) Get() *ExportPortoutsCSVReport {
	return v.value
}

func (v *NullableExportPortoutsCSVReport) Set(val *ExportPortoutsCSVReport) {
	v.value = val
	v.isSet = true
}

func (v NullableExportPortoutsCSVReport) IsSet() bool {
	return v.isSet
}

func (v *NullableExportPortoutsCSVReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportPortoutsCSVReport(val *ExportPortoutsCSVReport) *NullableExportPortoutsCSVReport {
	return &NullableExportPortoutsCSVReport{value: val, isSet: true}
}

func (v NullableExportPortoutsCSVReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportPortoutsCSVReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


