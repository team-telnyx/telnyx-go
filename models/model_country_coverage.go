/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CountryCoverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryCoverage{}

// CountryCoverage struct for CountryCoverage
type CountryCoverage struct {
	// Country ISO code
	Code *string `json:"code,omitempty"`
	Numbers *bool `json:"numbers,omitempty"`
	// Set of features supported
	Features []string `json:"features,omitempty"`
	// Phone number type
	PhoneNumberType []string `json:"phone_number_type,omitempty"`
	// Supports reservable
	Reservable *bool `json:"reservable,omitempty"`
	// Supports quickship
	Quickship *bool `json:"quickship,omitempty"`
	InternationalSms *bool `json:"international_sms,omitempty"`
	P2p *bool `json:"p2p,omitempty"`
	Local *CountryCoverageLocal `json:"local,omitempty"`
	TollFree *CountryCoverageLocal `json:"toll_free,omitempty"`
	Mobile map[string]interface{} `json:"mobile,omitempty"`
	National map[string]interface{} `json:"national,omitempty"`
	// Indicates whether country can be queried with inventory coverage endpoint
	InventoryCoverage *bool `json:"inventory_coverage,omitempty"`
	SharedCost map[string]interface{} `json:"shared_cost,omitempty"`
}

// NewCountryCoverage instantiates a new CountryCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryCoverage() *CountryCoverage {
	this := CountryCoverage{}
	return &this
}

// NewCountryCoverageWithDefaults instantiates a new CountryCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryCoverageWithDefaults() *CountryCoverage {
	this := CountryCoverage{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CountryCoverage) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CountryCoverage) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CountryCoverage) SetCode(v string) {
	o.Code = &v
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *CountryCoverage) GetNumbers() bool {
	if o == nil || IsNil(o.Numbers) {
		var ret bool
		return ret
	}
	return *o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetNumbersOk() (*bool, bool) {
	if o == nil || IsNil(o.Numbers) {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *CountryCoverage) HasNumbers() bool {
	if o != nil && !IsNil(o.Numbers) {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given bool and assigns it to the Numbers field.
func (o *CountryCoverage) SetNumbers(v bool) {
	o.Numbers = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *CountryCoverage) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *CountryCoverage) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *CountryCoverage) SetFeatures(v []string) {
	o.Features = v
}

// GetPhoneNumberType returns the PhoneNumberType field value if set, zero value otherwise.
func (o *CountryCoverage) GetPhoneNumberType() []string {
	if o == nil || IsNil(o.PhoneNumberType) {
		var ret []string
		return ret
	}
	return o.PhoneNumberType
}

// GetPhoneNumberTypeOk returns a tuple with the PhoneNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetPhoneNumberTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.PhoneNumberType) {
		return nil, false
	}
	return o.PhoneNumberType, true
}

// HasPhoneNumberType returns a boolean if a field has been set.
func (o *CountryCoverage) HasPhoneNumberType() bool {
	if o != nil && !IsNil(o.PhoneNumberType) {
		return true
	}

	return false
}

// SetPhoneNumberType gets a reference to the given []string and assigns it to the PhoneNumberType field.
func (o *CountryCoverage) SetPhoneNumberType(v []string) {
	o.PhoneNumberType = v
}

// GetReservable returns the Reservable field value if set, zero value otherwise.
func (o *CountryCoverage) GetReservable() bool {
	if o == nil || IsNil(o.Reservable) {
		var ret bool
		return ret
	}
	return *o.Reservable
}

// GetReservableOk returns a tuple with the Reservable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetReservableOk() (*bool, bool) {
	if o == nil || IsNil(o.Reservable) {
		return nil, false
	}
	return o.Reservable, true
}

// HasReservable returns a boolean if a field has been set.
func (o *CountryCoverage) HasReservable() bool {
	if o != nil && !IsNil(o.Reservable) {
		return true
	}

	return false
}

// SetReservable gets a reference to the given bool and assigns it to the Reservable field.
func (o *CountryCoverage) SetReservable(v bool) {
	o.Reservable = &v
}

// GetQuickship returns the Quickship field value if set, zero value otherwise.
func (o *CountryCoverage) GetQuickship() bool {
	if o == nil || IsNil(o.Quickship) {
		var ret bool
		return ret
	}
	return *o.Quickship
}

// GetQuickshipOk returns a tuple with the Quickship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetQuickshipOk() (*bool, bool) {
	if o == nil || IsNil(o.Quickship) {
		return nil, false
	}
	return o.Quickship, true
}

// HasQuickship returns a boolean if a field has been set.
func (o *CountryCoverage) HasQuickship() bool {
	if o != nil && !IsNil(o.Quickship) {
		return true
	}

	return false
}

// SetQuickship gets a reference to the given bool and assigns it to the Quickship field.
func (o *CountryCoverage) SetQuickship(v bool) {
	o.Quickship = &v
}

// GetInternationalSms returns the InternationalSms field value if set, zero value otherwise.
func (o *CountryCoverage) GetInternationalSms() bool {
	if o == nil || IsNil(o.InternationalSms) {
		var ret bool
		return ret
	}
	return *o.InternationalSms
}

// GetInternationalSmsOk returns a tuple with the InternationalSms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetInternationalSmsOk() (*bool, bool) {
	if o == nil || IsNil(o.InternationalSms) {
		return nil, false
	}
	return o.InternationalSms, true
}

// HasInternationalSms returns a boolean if a field has been set.
func (o *CountryCoverage) HasInternationalSms() bool {
	if o != nil && !IsNil(o.InternationalSms) {
		return true
	}

	return false
}

// SetInternationalSms gets a reference to the given bool and assigns it to the InternationalSms field.
func (o *CountryCoverage) SetInternationalSms(v bool) {
	o.InternationalSms = &v
}

// GetP2p returns the P2p field value if set, zero value otherwise.
func (o *CountryCoverage) GetP2p() bool {
	if o == nil || IsNil(o.P2p) {
		var ret bool
		return ret
	}
	return *o.P2p
}

// GetP2pOk returns a tuple with the P2p field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetP2pOk() (*bool, bool) {
	if o == nil || IsNil(o.P2p) {
		return nil, false
	}
	return o.P2p, true
}

// HasP2p returns a boolean if a field has been set.
func (o *CountryCoverage) HasP2p() bool {
	if o != nil && !IsNil(o.P2p) {
		return true
	}

	return false
}

// SetP2p gets a reference to the given bool and assigns it to the P2p field.
func (o *CountryCoverage) SetP2p(v bool) {
	o.P2p = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *CountryCoverage) GetLocal() CountryCoverageLocal {
	if o == nil || IsNil(o.Local) {
		var ret CountryCoverageLocal
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetLocalOk() (*CountryCoverageLocal, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *CountryCoverage) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given CountryCoverageLocal and assigns it to the Local field.
func (o *CountryCoverage) SetLocal(v CountryCoverageLocal) {
	o.Local = &v
}

// GetTollFree returns the TollFree field value if set, zero value otherwise.
func (o *CountryCoverage) GetTollFree() CountryCoverageLocal {
	if o == nil || IsNil(o.TollFree) {
		var ret CountryCoverageLocal
		return ret
	}
	return *o.TollFree
}

// GetTollFreeOk returns a tuple with the TollFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetTollFreeOk() (*CountryCoverageLocal, bool) {
	if o == nil || IsNil(o.TollFree) {
		return nil, false
	}
	return o.TollFree, true
}

// HasTollFree returns a boolean if a field has been set.
func (o *CountryCoverage) HasTollFree() bool {
	if o != nil && !IsNil(o.TollFree) {
		return true
	}

	return false
}

// SetTollFree gets a reference to the given CountryCoverageLocal and assigns it to the TollFree field.
func (o *CountryCoverage) SetTollFree(v CountryCoverageLocal) {
	o.TollFree = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *CountryCoverage) GetMobile() map[string]interface{} {
	if o == nil || IsNil(o.Mobile) {
		var ret map[string]interface{}
		return ret
	}
	return o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetMobileOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Mobile) {
		return map[string]interface{}{}, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *CountryCoverage) HasMobile() bool {
	if o != nil && !IsNil(o.Mobile) {
		return true
	}

	return false
}

// SetMobile gets a reference to the given map[string]interface{} and assigns it to the Mobile field.
func (o *CountryCoverage) SetMobile(v map[string]interface{}) {
	o.Mobile = v
}

// GetNational returns the National field value if set, zero value otherwise.
func (o *CountryCoverage) GetNational() map[string]interface{} {
	if o == nil || IsNil(o.National) {
		var ret map[string]interface{}
		return ret
	}
	return o.National
}

// GetNationalOk returns a tuple with the National field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetNationalOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.National) {
		return map[string]interface{}{}, false
	}
	return o.National, true
}

// HasNational returns a boolean if a field has been set.
func (o *CountryCoverage) HasNational() bool {
	if o != nil && !IsNil(o.National) {
		return true
	}

	return false
}

// SetNational gets a reference to the given map[string]interface{} and assigns it to the National field.
func (o *CountryCoverage) SetNational(v map[string]interface{}) {
	o.National = v
}

// GetInventoryCoverage returns the InventoryCoverage field value if set, zero value otherwise.
func (o *CountryCoverage) GetInventoryCoverage() bool {
	if o == nil || IsNil(o.InventoryCoverage) {
		var ret bool
		return ret
	}
	return *o.InventoryCoverage
}

// GetInventoryCoverageOk returns a tuple with the InventoryCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetInventoryCoverageOk() (*bool, bool) {
	if o == nil || IsNil(o.InventoryCoverage) {
		return nil, false
	}
	return o.InventoryCoverage, true
}

// HasInventoryCoverage returns a boolean if a field has been set.
func (o *CountryCoverage) HasInventoryCoverage() bool {
	if o != nil && !IsNil(o.InventoryCoverage) {
		return true
	}

	return false
}

// SetInventoryCoverage gets a reference to the given bool and assigns it to the InventoryCoverage field.
func (o *CountryCoverage) SetInventoryCoverage(v bool) {
	o.InventoryCoverage = &v
}

// GetSharedCost returns the SharedCost field value if set, zero value otherwise.
func (o *CountryCoverage) GetSharedCost() map[string]interface{} {
	if o == nil || IsNil(o.SharedCost) {
		var ret map[string]interface{}
		return ret
	}
	return o.SharedCost
}

// GetSharedCostOk returns a tuple with the SharedCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCoverage) GetSharedCostOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SharedCost) {
		return map[string]interface{}{}, false
	}
	return o.SharedCost, true
}

// HasSharedCost returns a boolean if a field has been set.
func (o *CountryCoverage) HasSharedCost() bool {
	if o != nil && !IsNil(o.SharedCost) {
		return true
	}

	return false
}

// SetSharedCost gets a reference to the given map[string]interface{} and assigns it to the SharedCost field.
func (o *CountryCoverage) SetSharedCost(v map[string]interface{}) {
	o.SharedCost = v
}

func (o CountryCoverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryCoverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Numbers) {
		toSerialize["numbers"] = o.Numbers
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.PhoneNumberType) {
		toSerialize["phone_number_type"] = o.PhoneNumberType
	}
	if !IsNil(o.Reservable) {
		toSerialize["reservable"] = o.Reservable
	}
	if !IsNil(o.Quickship) {
		toSerialize["quickship"] = o.Quickship
	}
	if !IsNil(o.InternationalSms) {
		toSerialize["international_sms"] = o.InternationalSms
	}
	if !IsNil(o.P2p) {
		toSerialize["p2p"] = o.P2p
	}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	if !IsNil(o.TollFree) {
		toSerialize["toll_free"] = o.TollFree
	}
	if !IsNil(o.Mobile) {
		toSerialize["mobile"] = o.Mobile
	}
	if !IsNil(o.National) {
		toSerialize["national"] = o.National
	}
	if !IsNil(o.InventoryCoverage) {
		toSerialize["inventory_coverage"] = o.InventoryCoverage
	}
	if !IsNil(o.SharedCost) {
		toSerialize["shared_cost"] = o.SharedCost
	}
	return toSerialize, nil
}

type NullableCountryCoverage struct {
	value *CountryCoverage
	isSet bool
}

func (v NullableCountryCoverage) Get() *CountryCoverage {
	return v.value
}

func (v *NullableCountryCoverage) Set(val *CountryCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCoverage(val *CountryCoverage) *NullableCountryCoverage {
	return &NullableCountryCoverage{value: val, isSet: true}
}

func (v NullableCountryCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


