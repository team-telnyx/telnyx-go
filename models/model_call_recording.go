/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallRecording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRecording{}

// CallRecording The call recording settings for a phone number.
type CallRecording struct {
	// When enabled, any inbound call to this number will be recorded.
	InboundCallRecordingEnabled *bool `json:"inbound_call_recording_enabled,omitempty"`
	// The audio file format for calls being recorded.
	InboundCallRecordingFormat *string `json:"inbound_call_recording_format,omitempty"`
	// When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
	InboundCallRecordingChannels *string `json:"inbound_call_recording_channels,omitempty"`
}

// NewCallRecording instantiates a new CallRecording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRecording() *CallRecording {
	this := CallRecording{}
	var inboundCallRecordingEnabled bool = false
	this.InboundCallRecordingEnabled = &inboundCallRecordingEnabled
	var inboundCallRecordingFormat string = "wav"
	this.InboundCallRecordingFormat = &inboundCallRecordingFormat
	var inboundCallRecordingChannels string = "single"
	this.InboundCallRecordingChannels = &inboundCallRecordingChannels
	return &this
}

// NewCallRecordingWithDefaults instantiates a new CallRecording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordingWithDefaults() *CallRecording {
	this := CallRecording{}
	var inboundCallRecordingEnabled bool = false
	this.InboundCallRecordingEnabled = &inboundCallRecordingEnabled
	var inboundCallRecordingFormat string = "wav"
	this.InboundCallRecordingFormat = &inboundCallRecordingFormat
	var inboundCallRecordingChannels string = "single"
	this.InboundCallRecordingChannels = &inboundCallRecordingChannels
	return &this
}

// GetInboundCallRecordingEnabled returns the InboundCallRecordingEnabled field value if set, zero value otherwise.
func (o *CallRecording) GetInboundCallRecordingEnabled() bool {
	if o == nil || IsNil(o.InboundCallRecordingEnabled) {
		var ret bool
		return ret
	}
	return *o.InboundCallRecordingEnabled
}

// GetInboundCallRecordingEnabledOk returns a tuple with the InboundCallRecordingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecording) GetInboundCallRecordingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InboundCallRecordingEnabled) {
		return nil, false
	}
	return o.InboundCallRecordingEnabled, true
}

// HasInboundCallRecordingEnabled returns a boolean if a field has been set.
func (o *CallRecording) HasInboundCallRecordingEnabled() bool {
	if o != nil && !IsNil(o.InboundCallRecordingEnabled) {
		return true
	}

	return false
}

// SetInboundCallRecordingEnabled gets a reference to the given bool and assigns it to the InboundCallRecordingEnabled field.
func (o *CallRecording) SetInboundCallRecordingEnabled(v bool) {
	o.InboundCallRecordingEnabled = &v
}

// GetInboundCallRecordingFormat returns the InboundCallRecordingFormat field value if set, zero value otherwise.
func (o *CallRecording) GetInboundCallRecordingFormat() string {
	if o == nil || IsNil(o.InboundCallRecordingFormat) {
		var ret string
		return ret
	}
	return *o.InboundCallRecordingFormat
}

// GetInboundCallRecordingFormatOk returns a tuple with the InboundCallRecordingFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecording) GetInboundCallRecordingFormatOk() (*string, bool) {
	if o == nil || IsNil(o.InboundCallRecordingFormat) {
		return nil, false
	}
	return o.InboundCallRecordingFormat, true
}

// HasInboundCallRecordingFormat returns a boolean if a field has been set.
func (o *CallRecording) HasInboundCallRecordingFormat() bool {
	if o != nil && !IsNil(o.InboundCallRecordingFormat) {
		return true
	}

	return false
}

// SetInboundCallRecordingFormat gets a reference to the given string and assigns it to the InboundCallRecordingFormat field.
func (o *CallRecording) SetInboundCallRecordingFormat(v string) {
	o.InboundCallRecordingFormat = &v
}

// GetInboundCallRecordingChannels returns the InboundCallRecordingChannels field value if set, zero value otherwise.
func (o *CallRecording) GetInboundCallRecordingChannels() string {
	if o == nil || IsNil(o.InboundCallRecordingChannels) {
		var ret string
		return ret
	}
	return *o.InboundCallRecordingChannels
}

// GetInboundCallRecordingChannelsOk returns a tuple with the InboundCallRecordingChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecording) GetInboundCallRecordingChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.InboundCallRecordingChannels) {
		return nil, false
	}
	return o.InboundCallRecordingChannels, true
}

// HasInboundCallRecordingChannels returns a boolean if a field has been set.
func (o *CallRecording) HasInboundCallRecordingChannels() bool {
	if o != nil && !IsNil(o.InboundCallRecordingChannels) {
		return true
	}

	return false
}

// SetInboundCallRecordingChannels gets a reference to the given string and assigns it to the InboundCallRecordingChannels field.
func (o *CallRecording) SetInboundCallRecordingChannels(v string) {
	o.InboundCallRecordingChannels = &v
}

func (o CallRecording) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRecording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InboundCallRecordingEnabled) {
		toSerialize["inbound_call_recording_enabled"] = o.InboundCallRecordingEnabled
	}
	if !IsNil(o.InboundCallRecordingFormat) {
		toSerialize["inbound_call_recording_format"] = o.InboundCallRecordingFormat
	}
	if !IsNil(o.InboundCallRecordingChannels) {
		toSerialize["inbound_call_recording_channels"] = o.InboundCallRecordingChannels
	}
	return toSerialize, nil
}

type NullableCallRecording struct {
	value *CallRecording
	isSet bool
}

func (v NullableCallRecording) Get() *CallRecording {
	return v.value
}

func (v *NullableCallRecording) Set(val *CallRecording) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecording) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecording(val *CallRecording) *NullableCallRecording {
	return &NullableCallRecording{value: val, isSet: true}
}

func (v NullableCallRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


