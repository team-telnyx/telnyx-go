/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the StopStreamingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopStreamingRequest{}

// StopStreamingRequest struct for StopStreamingRequest
type StopStreamingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	// Identifies the stream. If the `stream_id` is not provided the command stops all streams associated with a given `call_control_id`.
	StreamId *string `json:"stream_id,omitempty"`
}

// NewStopStreamingRequest instantiates a new StopStreamingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopStreamingRequest() *StopStreamingRequest {
	this := StopStreamingRequest{}
	return &this
}

// NewStopStreamingRequestWithDefaults instantiates a new StopStreamingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopStreamingRequestWithDefaults() *StopStreamingRequest {
	this := StopStreamingRequest{}
	return &this
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *StopStreamingRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopStreamingRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *StopStreamingRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *StopStreamingRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *StopStreamingRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopStreamingRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *StopStreamingRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *StopStreamingRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *StopStreamingRequest) GetStreamId() string {
	if o == nil || IsNil(o.StreamId) {
		var ret string
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopStreamingRequest) GetStreamIdOk() (*string, bool) {
	if o == nil || IsNil(o.StreamId) {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *StopStreamingRequest) HasStreamId() bool {
	if o != nil && !IsNil(o.StreamId) {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given string and assigns it to the StreamId field.
func (o *StopStreamingRequest) SetStreamId(v string) {
	o.StreamId = &v
}

func (o StopStreamingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopStreamingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.StreamId) {
		toSerialize["stream_id"] = o.StreamId
	}
	return toSerialize, nil
}

type NullableStopStreamingRequest struct {
	value *StopStreamingRequest
	isSet bool
}

func (v NullableStopStreamingRequest) Get() *StopStreamingRequest {
	return v.value
}

func (v *NullableStopStreamingRequest) Set(val *StopStreamingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStopStreamingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStopStreamingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopStreamingRequest(val *StopStreamingRequest) *NullableStopStreamingRequest {
	return &NullableStopStreamingRequest{value: val, isSet: true}
}

func (v NullableStopStreamingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopStreamingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


