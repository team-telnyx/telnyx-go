/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetEnumEndpoint200Response - struct for GetEnumEndpoint200Response
type GetEnumEndpoint200Response struct {
	ArrayOfEnumListResponseInner *[]EnumListResponseInner
	MapmapOfStringAny *map[string]interface{}
}

// []EnumListResponseInnerAsGetEnumEndpoint200Response is a convenience function that returns []EnumListResponseInner wrapped in GetEnumEndpoint200Response
func ArrayOfEnumListResponseInnerAsGetEnumEndpoint200Response(v *[]EnumListResponseInner) GetEnumEndpoint200Response {
	return GetEnumEndpoint200Response{
		ArrayOfEnumListResponseInner: v,
	}
}

// map[string]interface{}AsGetEnumEndpoint200Response is a convenience function that returns map[string]interface{} wrapped in GetEnumEndpoint200Response
func MapmapOfStringAnyAsGetEnumEndpoint200Response(v *map[string]interface{}) GetEnumEndpoint200Response {
	return GetEnumEndpoint200Response{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetEnumEndpoint200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfEnumListResponseInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfEnumListResponseInner)
	if err == nil {
		jsonArrayOfEnumListResponseInner, _ := json.Marshal(dst.ArrayOfEnumListResponseInner)
		if string(jsonArrayOfEnumListResponseInner) == "{}" { // empty struct
			dst.ArrayOfEnumListResponseInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfEnumListResponseInner); err != nil {
				dst.ArrayOfEnumListResponseInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfEnumListResponseInner = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfEnumListResponseInner = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetEnumEndpoint200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetEnumEndpoint200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetEnumEndpoint200Response) MarshalJSON() ([]byte, error) {
	if src.ArrayOfEnumListResponseInner != nil {
		return json.Marshal(&src.ArrayOfEnumListResponseInner)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetEnumEndpoint200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfEnumListResponseInner != nil {
		return obj.ArrayOfEnumListResponseInner
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetEnumEndpoint200Response) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfEnumListResponseInner != nil {
		return *obj.ArrayOfEnumListResponseInner
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableGetEnumEndpoint200Response struct {
	value *GetEnumEndpoint200Response
	isSet bool
}

func (v NullableGetEnumEndpoint200Response) Get() *GetEnumEndpoint200Response {
	return v.value
}

func (v *NullableGetEnumEndpoint200Response) Set(val *GetEnumEndpoint200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnumEndpoint200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnumEndpoint200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnumEndpoint200Response(val *GetEnumEndpoint200Response) *NullableGetEnumEndpoint200Response {
	return &NullableGetEnumEndpoint200Response{value: val, isSet: true}
}

func (v NullableGetEnumEndpoint200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnumEndpoint200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


