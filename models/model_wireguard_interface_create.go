/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WireguardInterfaceCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WireguardInterfaceCreate{}

// WireguardInterfaceCreate struct for WireguardInterfaceCreate
type WireguardInterfaceCreate struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The id of the network associated with the interface.
	NetworkId string `json:"network_id"`
	// A user specified name for the interface.
	Name *string `json:"name,omitempty"`
	Status *InterfaceStatus `json:"status,omitempty"`
	// The Telnyx WireGuard peers `Peer.endpoint` value.
	Endpoint *string `json:"endpoint,omitempty"`
	// The Telnyx WireGuard peers `Peer.PublicKey`.
	PublicKey *string `json:"public_key,omitempty"`
	// Enable SIP traffic forwarding over VPN interface.
	EnableSipTrunking *bool `json:"enable_sip_trunking,omitempty"`
	// The region the interface should be deployed to.
	RegionCode string `json:"region_code"`
}

type _WireguardInterfaceCreate WireguardInterfaceCreate

// NewWireguardInterfaceCreate instantiates a new WireguardInterfaceCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWireguardInterfaceCreate(networkId string, regionCode string) *WireguardInterfaceCreate {
	this := WireguardInterfaceCreate{}
	this.NetworkId = networkId
	this.RegionCode = regionCode
	return &this
}

// NewWireguardInterfaceCreateWithDefaults instantiates a new WireguardInterfaceCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWireguardInterfaceCreateWithDefaults() *WireguardInterfaceCreate {
	this := WireguardInterfaceCreate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WireguardInterfaceCreate) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *WireguardInterfaceCreate) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *WireguardInterfaceCreate) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *WireguardInterfaceCreate) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetNetworkId returns the NetworkId field value
func (o *WireguardInterfaceCreate) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *WireguardInterfaceCreate) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WireguardInterfaceCreate) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetStatus() InterfaceStatus {
	if o == nil || IsNil(o.Status) {
		var ret InterfaceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetStatusOk() (*InterfaceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InterfaceStatus and assigns it to the Status field.
func (o *WireguardInterfaceCreate) SetStatus(v InterfaceStatus) {
	o.Status = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *WireguardInterfaceCreate) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *WireguardInterfaceCreate) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetEnableSipTrunking returns the EnableSipTrunking field value if set, zero value otherwise.
func (o *WireguardInterfaceCreate) GetEnableSipTrunking() bool {
	if o == nil || IsNil(o.EnableSipTrunking) {
		var ret bool
		return ret
	}
	return *o.EnableSipTrunking
}

// GetEnableSipTrunkingOk returns a tuple with the EnableSipTrunking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetEnableSipTrunkingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSipTrunking) {
		return nil, false
	}
	return o.EnableSipTrunking, true
}

// HasEnableSipTrunking returns a boolean if a field has been set.
func (o *WireguardInterfaceCreate) HasEnableSipTrunking() bool {
	if o != nil && !IsNil(o.EnableSipTrunking) {
		return true
	}

	return false
}

// SetEnableSipTrunking gets a reference to the given bool and assigns it to the EnableSipTrunking field.
func (o *WireguardInterfaceCreate) SetEnableSipTrunking(v bool) {
	o.EnableSipTrunking = &v
}

// GetRegionCode returns the RegionCode field value
func (o *WireguardInterfaceCreate) GetRegionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value
// and a boolean to check if the value has been set.
func (o *WireguardInterfaceCreate) GetRegionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionCode, true
}

// SetRegionCode sets field value
func (o *WireguardInterfaceCreate) SetRegionCode(v string) {
	o.RegionCode = v
}

func (o WireguardInterfaceCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WireguardInterfaceCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["network_id"] = o.NetworkId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.EnableSipTrunking) {
		toSerialize["enable_sip_trunking"] = o.EnableSipTrunking
	}
	toSerialize["region_code"] = o.RegionCode
	return toSerialize, nil
}

func (o *WireguardInterfaceCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
		"region_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWireguardInterfaceCreate := _WireguardInterfaceCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWireguardInterfaceCreate)

	if err != nil {
		return err
	}

	*o = WireguardInterfaceCreate(varWireguardInterfaceCreate)

	return err
}

type NullableWireguardInterfaceCreate struct {
	value *WireguardInterfaceCreate
	isSet bool
}

func (v NullableWireguardInterfaceCreate) Get() *WireguardInterfaceCreate {
	return v.value
}

func (v *NullableWireguardInterfaceCreate) Set(val *WireguardInterfaceCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableWireguardInterfaceCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableWireguardInterfaceCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWireguardInterfaceCreate(val *WireguardInterfaceCreate) *NullableWireguardInterfaceCreate {
	return &NullableWireguardInterfaceCreate{value: val, isSet: true}
}

func (v NullableWireguardInterfaceCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWireguardInterfaceCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


