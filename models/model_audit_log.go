/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the AuditLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLog{}

// AuditLog struct for AuditLog
type AuditLog struct {
	// Unique identifier for the audit log entry.
	Id *string `json:"id,omitempty"`
	// Unique identifier for the user who made the change.
	UserId *string `json:"user_id,omitempty"`
	// The type of the resource being audited.
	RecordType *string `json:"record_type,omitempty"`
	// Unique identifier for the resource that was changed.
	ResourceId *string `json:"resource_id,omitempty"`
	// An alternate identifier for a resource which may be considered unique enough to identify the resource but is not the primary identifier for the resource. For example, this field could be used to store the phone number value for a phone number when the primary database identifier is a separate distinct value.
	AlternateResourceId NullableString `json:"alternate_resource_id,omitempty"`
	// Indicates if the change was made by Telnyx on your behalf, the organization owner, a member of your organization, or in the case of managed accounts, the account manager.
	ChangeMadeBy *string `json:"change_made_by,omitempty"`
	// Details of the changes made to the resource.
	Changes []AuditEventChanges `json:"changes,omitempty"`
	// Unique identifier for the organization that owns the resource.
	OrganizationId *string `json:"organization_id,omitempty"`
	// The type of change that occurred.
	ChangeType *string `json:"change_type,omitempty"`
	// ISO 8601 formatted date indicating when the change occurred.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewAuditLog instantiates a new AuditLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLog() *AuditLog {
	this := AuditLog{}
	return &this
}

// NewAuditLogWithDefaults instantiates a new AuditLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogWithDefaults() *AuditLog {
	this := AuditLog{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditLog) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditLog) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditLog) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AuditLog) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AuditLog) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AuditLog) SetUserId(v string) {
	o.UserId = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *AuditLog) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *AuditLog) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *AuditLog) SetRecordType(v string) {
	o.RecordType = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *AuditLog) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *AuditLog) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *AuditLog) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetAlternateResourceId returns the AlternateResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLog) GetAlternateResourceId() string {
	if o == nil || IsNil(o.AlternateResourceId.Get()) {
		var ret string
		return ret
	}
	return *o.AlternateResourceId.Get()
}

// GetAlternateResourceIdOk returns a tuple with the AlternateResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLog) GetAlternateResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlternateResourceId.Get(), o.AlternateResourceId.IsSet()
}

// HasAlternateResourceId returns a boolean if a field has been set.
func (o *AuditLog) HasAlternateResourceId() bool {
	if o != nil && o.AlternateResourceId.IsSet() {
		return true
	}

	return false
}

// SetAlternateResourceId gets a reference to the given NullableString and assigns it to the AlternateResourceId field.
func (o *AuditLog) SetAlternateResourceId(v string) {
	o.AlternateResourceId.Set(&v)
}
// SetAlternateResourceIdNil sets the value for AlternateResourceId to be an explicit nil
func (o *AuditLog) SetAlternateResourceIdNil() {
	o.AlternateResourceId.Set(nil)
}

// UnsetAlternateResourceId ensures that no value is present for AlternateResourceId, not even an explicit nil
func (o *AuditLog) UnsetAlternateResourceId() {
	o.AlternateResourceId.Unset()
}

// GetChangeMadeBy returns the ChangeMadeBy field value if set, zero value otherwise.
func (o *AuditLog) GetChangeMadeBy() string {
	if o == nil || IsNil(o.ChangeMadeBy) {
		var ret string
		return ret
	}
	return *o.ChangeMadeBy
}

// GetChangeMadeByOk returns a tuple with the ChangeMadeBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetChangeMadeByOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeMadeBy) {
		return nil, false
	}
	return o.ChangeMadeBy, true
}

// HasChangeMadeBy returns a boolean if a field has been set.
func (o *AuditLog) HasChangeMadeBy() bool {
	if o != nil && !IsNil(o.ChangeMadeBy) {
		return true
	}

	return false
}

// SetChangeMadeBy gets a reference to the given string and assigns it to the ChangeMadeBy field.
func (o *AuditLog) SetChangeMadeBy(v string) {
	o.ChangeMadeBy = &v
}

// GetChanges returns the Changes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLog) GetChanges() []AuditEventChanges {
	if o == nil {
		var ret []AuditEventChanges
		return ret
	}
	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLog) GetChangesOk() ([]AuditEventChanges, bool) {
	if o == nil || IsNil(o.Changes) {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *AuditLog) HasChanges() bool {
	if o != nil && !IsNil(o.Changes) {
		return true
	}

	return false
}

// SetChanges gets a reference to the given []AuditEventChanges and assigns it to the Changes field.
func (o *AuditLog) SetChanges(v []AuditEventChanges) {
	o.Changes = v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *AuditLog) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *AuditLog) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *AuditLog) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *AuditLog) GetChangeType() string {
	if o == nil || IsNil(o.ChangeType) {
		var ret string
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetChangeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeType) {
		return nil, false
	}
	return o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *AuditLog) HasChangeType() bool {
	if o != nil && !IsNil(o.ChangeType) {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given string and assigns it to the ChangeType field.
func (o *AuditLog) SetChangeType(v string) {
	o.ChangeType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuditLog) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLog) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuditLog) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AuditLog) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o AuditLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	if o.AlternateResourceId.IsSet() {
		toSerialize["alternate_resource_id"] = o.AlternateResourceId.Get()
	}
	if !IsNil(o.ChangeMadeBy) {
		toSerialize["change_made_by"] = o.ChangeMadeBy
	}
	if o.Changes != nil {
		toSerialize["changes"] = o.Changes
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.ChangeType) {
		toSerialize["change_type"] = o.ChangeType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableAuditLog struct {
	value *AuditLog
	isSet bool
}

func (v NullableAuditLog) Get() *AuditLog {
	return v.value
}

func (v *NullableAuditLog) Set(val *AuditLog) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLog) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLog(val *AuditLog) *NullableAuditLog {
	return &NullableAuditLog{value: val, isSet: true}
}

func (v NullableAuditLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


