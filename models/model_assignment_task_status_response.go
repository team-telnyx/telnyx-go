/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AssignmentTaskStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignmentTaskStatusResponse{}

// AssignmentTaskStatusResponse struct for AssignmentTaskStatusResponse
type AssignmentTaskStatusResponse struct {
	TaskId string `json:"taskId"`
	// The status of the task associated with assigning a messaging profile to a campaign.
	Status TaskStatus `json:"status"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _AssignmentTaskStatusResponse AssignmentTaskStatusResponse

// NewAssignmentTaskStatusResponse instantiates a new AssignmentTaskStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignmentTaskStatusResponse(taskId string, status TaskStatus) *AssignmentTaskStatusResponse {
	this := AssignmentTaskStatusResponse{}
	this.TaskId = taskId
	this.Status = status
	return &this
}

// NewAssignmentTaskStatusResponseWithDefaults instantiates a new AssignmentTaskStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentTaskStatusResponseWithDefaults() *AssignmentTaskStatusResponse {
	this := AssignmentTaskStatusResponse{}
	return &this
}

// GetTaskId returns the TaskId field value
func (o *AssignmentTaskStatusResponse) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *AssignmentTaskStatusResponse) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *AssignmentTaskStatusResponse) SetTaskId(v string) {
	o.TaskId = v
}

// GetStatus returns the Status field value
func (o *AssignmentTaskStatusResponse) GetStatus() TaskStatus {
	if o == nil {
		var ret TaskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AssignmentTaskStatusResponse) GetStatusOk() (*TaskStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AssignmentTaskStatusResponse) SetStatus(v TaskStatus) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AssignmentTaskStatusResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignmentTaskStatusResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AssignmentTaskStatusResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AssignmentTaskStatusResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AssignmentTaskStatusResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignmentTaskStatusResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AssignmentTaskStatusResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AssignmentTaskStatusResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AssignmentTaskStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignmentTaskStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskId"] = o.TaskId
	toSerialize["status"] = o.Status
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *AssignmentTaskStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignmentTaskStatusResponse := _AssignmentTaskStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignmentTaskStatusResponse)

	if err != nil {
		return err
	}

	*o = AssignmentTaskStatusResponse(varAssignmentTaskStatusResponse)

	return err
}

type NullableAssignmentTaskStatusResponse struct {
	value *AssignmentTaskStatusResponse
	isSet bool
}

func (v NullableAssignmentTaskStatusResponse) Get() *AssignmentTaskStatusResponse {
	return v.value
}

func (v *NullableAssignmentTaskStatusResponse) Set(val *AssignmentTaskStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignmentTaskStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignmentTaskStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignmentTaskStatusResponse(val *AssignmentTaskStatusResponse) *NullableAssignmentTaskStatusResponse {
	return &NullableAssignmentTaskStatusResponse{value: val, isSet: true}
}

func (v NullableAssignmentTaskStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignmentTaskStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


