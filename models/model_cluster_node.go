/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterNode{}

// ClusterNode struct for ClusterNode
type ClusterNode struct {
	// The corresponding source file of your embedded storage bucket that the node is from.
	Filename string `json:"filename"`
	// The text of the node.
	Text string `json:"text"`
}

type _ClusterNode ClusterNode

// NewClusterNode instantiates a new ClusterNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNode(filename string, text string) *ClusterNode {
	this := ClusterNode{}
	this.Filename = filename
	this.Text = text
	return &this
}

// NewClusterNodeWithDefaults instantiates a new ClusterNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNodeWithDefaults() *ClusterNode {
	this := ClusterNode{}
	return &this
}

// GetFilename returns the Filename field value
func (o *ClusterNode) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *ClusterNode) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *ClusterNode) SetFilename(v string) {
	o.Filename = v
}

// GetText returns the Text field value
func (o *ClusterNode) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ClusterNode) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ClusterNode) SetText(v string) {
	o.Text = v
}

func (o ClusterNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *ClusterNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterNode := _ClusterNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterNode)

	if err != nil {
		return err
	}

	*o = ClusterNode(varClusterNode)

	return err
}

type NullableClusterNode struct {
	value *ClusterNode
	isSet bool
}

func (v NullableClusterNode) Get() *ClusterNode {
	return v.value
}

func (v *NullableClusterNode) Set(val *ClusterNode) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNode) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNode(val *ClusterNode) *NullableClusterNode {
	return &NullableClusterNode{value: val, isSet: true}
}

func (v NullableClusterNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


