/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SIMCardRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardRegistration{}

// SIMCardRegistration struct for SIMCardRegistration
type SIMCardRegistration struct {
	// The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.
	SimCardGroupId *string `json:"sim_card_group_id,omitempty"`
	// Searchable tags associated with the SIM card
	Tags []string `json:"tags,omitempty"`
	RegistrationCodes []string `json:"registration_codes"`
	// Status on which the SIM card will be set after being successful registered.
	Status *string `json:"status,omitempty"`
}

type _SIMCardRegistration SIMCardRegistration

// NewSIMCardRegistration instantiates a new SIMCardRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardRegistration(registrationCodes []string) *SIMCardRegistration {
	this := SIMCardRegistration{}
	this.RegistrationCodes = registrationCodes
	var status string = "enabled"
	this.Status = &status
	return &this
}

// NewSIMCardRegistrationWithDefaults instantiates a new SIMCardRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardRegistrationWithDefaults() *SIMCardRegistration {
	this := SIMCardRegistration{}
	var status string = "enabled"
	this.Status = &status
	return &this
}

// GetSimCardGroupId returns the SimCardGroupId field value if set, zero value otherwise.
func (o *SIMCardRegistration) GetSimCardGroupId() string {
	if o == nil || IsNil(o.SimCardGroupId) {
		var ret string
		return ret
	}
	return *o.SimCardGroupId
}

// GetSimCardGroupIdOk returns a tuple with the SimCardGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardRegistration) GetSimCardGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SimCardGroupId) {
		return nil, false
	}
	return o.SimCardGroupId, true
}

// HasSimCardGroupId returns a boolean if a field has been set.
func (o *SIMCardRegistration) HasSimCardGroupId() bool {
	if o != nil && !IsNil(o.SimCardGroupId) {
		return true
	}

	return false
}

// SetSimCardGroupId gets a reference to the given string and assigns it to the SimCardGroupId field.
func (o *SIMCardRegistration) SetSimCardGroupId(v string) {
	o.SimCardGroupId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SIMCardRegistration) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardRegistration) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SIMCardRegistration) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SIMCardRegistration) SetTags(v []string) {
	o.Tags = v
}

// GetRegistrationCodes returns the RegistrationCodes field value
func (o *SIMCardRegistration) GetRegistrationCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RegistrationCodes
}

// GetRegistrationCodesOk returns a tuple with the RegistrationCodes field value
// and a boolean to check if the value has been set.
func (o *SIMCardRegistration) GetRegistrationCodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationCodes, true
}

// SetRegistrationCodes sets field value
func (o *SIMCardRegistration) SetRegistrationCodes(v []string) {
	o.RegistrationCodes = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SIMCardRegistration) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardRegistration) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SIMCardRegistration) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SIMCardRegistration) SetStatus(v string) {
	o.Status = &v
}

func (o SIMCardRegistration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SimCardGroupId) {
		toSerialize["sim_card_group_id"] = o.SimCardGroupId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["registration_codes"] = o.RegistrationCodes
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *SIMCardRegistration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registration_codes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSIMCardRegistration := _SIMCardRegistration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSIMCardRegistration)

	if err != nil {
		return err
	}

	*o = SIMCardRegistration(varSIMCardRegistration)

	return err
}

type NullableSIMCardRegistration struct {
	value *SIMCardRegistration
	isSet bool
}

func (v NullableSIMCardRegistration) Get() *SIMCardRegistration {
	return v.value
}

func (v *NullableSIMCardRegistration) Set(val *SIMCardRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardRegistration(val *SIMCardRegistration) *NullableSIMCardRegistration {
	return &NullableSIMCardRegistration{value: val, isSet: true}
}

func (v NullableSIMCardRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


