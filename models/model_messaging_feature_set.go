/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessagingFeatureSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagingFeatureSet{}

// MessagingFeatureSet The set of features available for a specific messaging use case (SMS or MMS). Features can vary depending on the characteristics the phone number, as well as its current product configuration. 
type MessagingFeatureSet struct {
	// Send messages to and receive messages from numbers in the same country.
	DomesticTwoWay bool `json:"domestic_two_way"`
	// Receive messages from numbers in other countries.
	InternationalInbound bool `json:"international_inbound"`
	// Send messages to numbers in other countries.
	InternationalOutbound bool `json:"international_outbound"`
}

type _MessagingFeatureSet MessagingFeatureSet

// NewMessagingFeatureSet instantiates a new MessagingFeatureSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagingFeatureSet(domesticTwoWay bool, internationalInbound bool, internationalOutbound bool) *MessagingFeatureSet {
	this := MessagingFeatureSet{}
	this.DomesticTwoWay = domesticTwoWay
	this.InternationalInbound = internationalInbound
	this.InternationalOutbound = internationalOutbound
	return &this
}

// NewMessagingFeatureSetWithDefaults instantiates a new MessagingFeatureSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagingFeatureSetWithDefaults() *MessagingFeatureSet {
	this := MessagingFeatureSet{}
	return &this
}

// GetDomesticTwoWay returns the DomesticTwoWay field value
func (o *MessagingFeatureSet) GetDomesticTwoWay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DomesticTwoWay
}

// GetDomesticTwoWayOk returns a tuple with the DomesticTwoWay field value
// and a boolean to check if the value has been set.
func (o *MessagingFeatureSet) GetDomesticTwoWayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomesticTwoWay, true
}

// SetDomesticTwoWay sets field value
func (o *MessagingFeatureSet) SetDomesticTwoWay(v bool) {
	o.DomesticTwoWay = v
}

// GetInternationalInbound returns the InternationalInbound field value
func (o *MessagingFeatureSet) GetInternationalInbound() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InternationalInbound
}

// GetInternationalInboundOk returns a tuple with the InternationalInbound field value
// and a boolean to check if the value has been set.
func (o *MessagingFeatureSet) GetInternationalInboundOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternationalInbound, true
}

// SetInternationalInbound sets field value
func (o *MessagingFeatureSet) SetInternationalInbound(v bool) {
	o.InternationalInbound = v
}

// GetInternationalOutbound returns the InternationalOutbound field value
func (o *MessagingFeatureSet) GetInternationalOutbound() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InternationalOutbound
}

// GetInternationalOutboundOk returns a tuple with the InternationalOutbound field value
// and a boolean to check if the value has been set.
func (o *MessagingFeatureSet) GetInternationalOutboundOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternationalOutbound, true
}

// SetInternationalOutbound sets field value
func (o *MessagingFeatureSet) SetInternationalOutbound(v bool) {
	o.InternationalOutbound = v
}

func (o MessagingFeatureSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagingFeatureSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domestic_two_way"] = o.DomesticTwoWay
	toSerialize["international_inbound"] = o.InternationalInbound
	toSerialize["international_outbound"] = o.InternationalOutbound
	return toSerialize, nil
}

func (o *MessagingFeatureSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domestic_two_way",
		"international_inbound",
		"international_outbound",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessagingFeatureSet := _MessagingFeatureSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessagingFeatureSet)

	if err != nil {
		return err
	}

	*o = MessagingFeatureSet(varMessagingFeatureSet)

	return err
}

type NullableMessagingFeatureSet struct {
	value *MessagingFeatureSet
	isSet bool
}

func (v NullableMessagingFeatureSet) Get() *MessagingFeatureSet {
	return v.value
}

func (v *NullableMessagingFeatureSet) Set(val *MessagingFeatureSet) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagingFeatureSet) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagingFeatureSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagingFeatureSet(val *MessagingFeatureSet) *NullableMessagingFeatureSet {
	return &NullableMessagingFeatureSet{value: val, isSet: true}
}

func (v NullableMessagingFeatureSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagingFeatureSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


