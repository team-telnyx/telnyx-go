/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// BrandRelationship Brand relationship to the CSP.
type BrandRelationship string

// List of BrandRelationship
const (
	BASIC_ACCOUNT BrandRelationship = "BASIC_ACCOUNT"
	SMALL_ACCOUNT BrandRelationship = "SMALL_ACCOUNT"
	MEDIUM_ACCOUNT BrandRelationship = "MEDIUM_ACCOUNT"
	LARGE_ACCOUNT BrandRelationship = "LARGE_ACCOUNT"
	KEY_ACCOUNT BrandRelationship = "KEY_ACCOUNT"
)

// All allowed values of BrandRelationship enum
var AllowedBrandRelationshipEnumValues = []BrandRelationship{
	"BASIC_ACCOUNT",
	"SMALL_ACCOUNT",
	"MEDIUM_ACCOUNT",
	"LARGE_ACCOUNT",
	"KEY_ACCOUNT",
}

func (v *BrandRelationship) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BrandRelationship(value)
	for _, existing := range AllowedBrandRelationshipEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BrandRelationship", value)
}

// NewBrandRelationshipFromValue returns a pointer to a valid BrandRelationship
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBrandRelationshipFromValue(v string) (*BrandRelationship, error) {
	ev := BrandRelationship(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BrandRelationship: valid values are %v", v, AllowedBrandRelationshipEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BrandRelationship) IsValid() bool {
	for _, existing := range AllowedBrandRelationshipEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BrandRelationship value
func (v BrandRelationship) Ptr() *BrandRelationship {
	return &v
}

type NullableBrandRelationship struct {
	value *BrandRelationship
	isSet bool
}

func (v NullableBrandRelationship) Get() *BrandRelationship {
	return v.value
}

func (v *NullableBrandRelationship) Set(val *BrandRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandRelationship(val *BrandRelationship) *NullableBrandRelationship {
	return &NullableBrandRelationship{value: val, isSet: true}
}

func (v NullableBrandRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

