/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallRequestConferenceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRequestConferenceConfig{}

// CallRequestConferenceConfig Optional configuration parameters to dial new participant into a conference.
type CallRequestConferenceConfig struct {
	// Conference ID to be joined
	Id *string `json:"id,omitempty"`
	// Conference name to be joined
	ConferenceName *string `json:"conference_name,omitempty"`
	// Controls the moment when dialled call is joined into conference. If set to `true` user will be joined as soon as media is available (ringback). If `false` user will be joined when call is answered. Defaults to `true`
	EarlyMedia *bool `json:"early_media,omitempty"`
	// Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".
	EndConferenceOnExit *bool `json:"end_conference_on_exit,omitempty"`
	// Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".
	SoftEndConferenceOnExit *bool `json:"soft_end_conference_on_exit,omitempty"`
	// Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".
	Hold *bool `json:"hold,omitempty"`
	// The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".
	HoldAudioUrl *string `json:"hold_audio_url,omitempty"`
	// The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".
	HoldMediaName *string `json:"hold_media_name,omitempty"`
	// Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".
	Mute *bool `json:"mute,omitempty"`
	// Whether the conference should be started after the participant joins the conference. Defaults to \"false\".
	StartConferenceOnEnter *bool `json:"start_conference_on_enter,omitempty"`
	// Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".
	StartConferenceOnCreate *bool `json:"start_conference_on_create,omitempty"`
	// Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".
	SupervisorRole *string `json:"supervisor_role,omitempty"`
	// Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.
	WhisperCallControlIds []string `json:"whisper_call_control_ids,omitempty"`
	// Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.
	BeepEnabled *string `json:"beep_enabled,omitempty"`
}

// NewCallRequestConferenceConfig instantiates a new CallRequestConferenceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRequestConferenceConfig() *CallRequestConferenceConfig {
	this := CallRequestConferenceConfig{}
	var earlyMedia bool = true
	this.EarlyMedia = &earlyMedia
	return &this
}

// NewCallRequestConferenceConfigWithDefaults instantiates a new CallRequestConferenceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRequestConferenceConfigWithDefaults() *CallRequestConferenceConfig {
	this := CallRequestConferenceConfig{}
	var earlyMedia bool = true
	this.EarlyMedia = &earlyMedia
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CallRequestConferenceConfig) SetId(v string) {
	o.Id = &v
}

// GetConferenceName returns the ConferenceName field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetConferenceName() string {
	if o == nil || IsNil(o.ConferenceName) {
		var ret string
		return ret
	}
	return *o.ConferenceName
}

// GetConferenceNameOk returns a tuple with the ConferenceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetConferenceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceName) {
		return nil, false
	}
	return o.ConferenceName, true
}

// HasConferenceName returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasConferenceName() bool {
	if o != nil && !IsNil(o.ConferenceName) {
		return true
	}

	return false
}

// SetConferenceName gets a reference to the given string and assigns it to the ConferenceName field.
func (o *CallRequestConferenceConfig) SetConferenceName(v string) {
	o.ConferenceName = &v
}

// GetEarlyMedia returns the EarlyMedia field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetEarlyMedia() bool {
	if o == nil || IsNil(o.EarlyMedia) {
		var ret bool
		return ret
	}
	return *o.EarlyMedia
}

// GetEarlyMediaOk returns a tuple with the EarlyMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetEarlyMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.EarlyMedia) {
		return nil, false
	}
	return o.EarlyMedia, true
}

// HasEarlyMedia returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasEarlyMedia() bool {
	if o != nil && !IsNil(o.EarlyMedia) {
		return true
	}

	return false
}

// SetEarlyMedia gets a reference to the given bool and assigns it to the EarlyMedia field.
func (o *CallRequestConferenceConfig) SetEarlyMedia(v bool) {
	o.EarlyMedia = &v
}

// GetEndConferenceOnExit returns the EndConferenceOnExit field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetEndConferenceOnExit() bool {
	if o == nil || IsNil(o.EndConferenceOnExit) {
		var ret bool
		return ret
	}
	return *o.EndConferenceOnExit
}

// GetEndConferenceOnExitOk returns a tuple with the EndConferenceOnExit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetEndConferenceOnExitOk() (*bool, bool) {
	if o == nil || IsNil(o.EndConferenceOnExit) {
		return nil, false
	}
	return o.EndConferenceOnExit, true
}

// HasEndConferenceOnExit returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasEndConferenceOnExit() bool {
	if o != nil && !IsNil(o.EndConferenceOnExit) {
		return true
	}

	return false
}

// SetEndConferenceOnExit gets a reference to the given bool and assigns it to the EndConferenceOnExit field.
func (o *CallRequestConferenceConfig) SetEndConferenceOnExit(v bool) {
	o.EndConferenceOnExit = &v
}

// GetSoftEndConferenceOnExit returns the SoftEndConferenceOnExit field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetSoftEndConferenceOnExit() bool {
	if o == nil || IsNil(o.SoftEndConferenceOnExit) {
		var ret bool
		return ret
	}
	return *o.SoftEndConferenceOnExit
}

// GetSoftEndConferenceOnExitOk returns a tuple with the SoftEndConferenceOnExit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetSoftEndConferenceOnExitOk() (*bool, bool) {
	if o == nil || IsNil(o.SoftEndConferenceOnExit) {
		return nil, false
	}
	return o.SoftEndConferenceOnExit, true
}

// HasSoftEndConferenceOnExit returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasSoftEndConferenceOnExit() bool {
	if o != nil && !IsNil(o.SoftEndConferenceOnExit) {
		return true
	}

	return false
}

// SetSoftEndConferenceOnExit gets a reference to the given bool and assigns it to the SoftEndConferenceOnExit field.
func (o *CallRequestConferenceConfig) SetSoftEndConferenceOnExit(v bool) {
	o.SoftEndConferenceOnExit = &v
}

// GetHold returns the Hold field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetHold() bool {
	if o == nil || IsNil(o.Hold) {
		var ret bool
		return ret
	}
	return *o.Hold
}

// GetHoldOk returns a tuple with the Hold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Hold) {
		return nil, false
	}
	return o.Hold, true
}

// HasHold returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasHold() bool {
	if o != nil && !IsNil(o.Hold) {
		return true
	}

	return false
}

// SetHold gets a reference to the given bool and assigns it to the Hold field.
func (o *CallRequestConferenceConfig) SetHold(v bool) {
	o.Hold = &v
}

// GetHoldAudioUrl returns the HoldAudioUrl field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetHoldAudioUrl() string {
	if o == nil || IsNil(o.HoldAudioUrl) {
		var ret string
		return ret
	}
	return *o.HoldAudioUrl
}

// GetHoldAudioUrlOk returns a tuple with the HoldAudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetHoldAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HoldAudioUrl) {
		return nil, false
	}
	return o.HoldAudioUrl, true
}

// HasHoldAudioUrl returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasHoldAudioUrl() bool {
	if o != nil && !IsNil(o.HoldAudioUrl) {
		return true
	}

	return false
}

// SetHoldAudioUrl gets a reference to the given string and assigns it to the HoldAudioUrl field.
func (o *CallRequestConferenceConfig) SetHoldAudioUrl(v string) {
	o.HoldAudioUrl = &v
}

// GetHoldMediaName returns the HoldMediaName field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetHoldMediaName() string {
	if o == nil || IsNil(o.HoldMediaName) {
		var ret string
		return ret
	}
	return *o.HoldMediaName
}

// GetHoldMediaNameOk returns a tuple with the HoldMediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetHoldMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.HoldMediaName) {
		return nil, false
	}
	return o.HoldMediaName, true
}

// HasHoldMediaName returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasHoldMediaName() bool {
	if o != nil && !IsNil(o.HoldMediaName) {
		return true
	}

	return false
}

// SetHoldMediaName gets a reference to the given string and assigns it to the HoldMediaName field.
func (o *CallRequestConferenceConfig) SetHoldMediaName(v string) {
	o.HoldMediaName = &v
}

// GetMute returns the Mute field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetMute() bool {
	if o == nil || IsNil(o.Mute) {
		var ret bool
		return ret
	}
	return *o.Mute
}

// GetMuteOk returns a tuple with the Mute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetMuteOk() (*bool, bool) {
	if o == nil || IsNil(o.Mute) {
		return nil, false
	}
	return o.Mute, true
}

// HasMute returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasMute() bool {
	if o != nil && !IsNil(o.Mute) {
		return true
	}

	return false
}

// SetMute gets a reference to the given bool and assigns it to the Mute field.
func (o *CallRequestConferenceConfig) SetMute(v bool) {
	o.Mute = &v
}

// GetStartConferenceOnEnter returns the StartConferenceOnEnter field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetStartConferenceOnEnter() bool {
	if o == nil || IsNil(o.StartConferenceOnEnter) {
		var ret bool
		return ret
	}
	return *o.StartConferenceOnEnter
}

// GetStartConferenceOnEnterOk returns a tuple with the StartConferenceOnEnter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetStartConferenceOnEnterOk() (*bool, bool) {
	if o == nil || IsNil(o.StartConferenceOnEnter) {
		return nil, false
	}
	return o.StartConferenceOnEnter, true
}

// HasStartConferenceOnEnter returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasStartConferenceOnEnter() bool {
	if o != nil && !IsNil(o.StartConferenceOnEnter) {
		return true
	}

	return false
}

// SetStartConferenceOnEnter gets a reference to the given bool and assigns it to the StartConferenceOnEnter field.
func (o *CallRequestConferenceConfig) SetStartConferenceOnEnter(v bool) {
	o.StartConferenceOnEnter = &v
}

// GetStartConferenceOnCreate returns the StartConferenceOnCreate field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetStartConferenceOnCreate() bool {
	if o == nil || IsNil(o.StartConferenceOnCreate) {
		var ret bool
		return ret
	}
	return *o.StartConferenceOnCreate
}

// GetStartConferenceOnCreateOk returns a tuple with the StartConferenceOnCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetStartConferenceOnCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.StartConferenceOnCreate) {
		return nil, false
	}
	return o.StartConferenceOnCreate, true
}

// HasStartConferenceOnCreate returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasStartConferenceOnCreate() bool {
	if o != nil && !IsNil(o.StartConferenceOnCreate) {
		return true
	}

	return false
}

// SetStartConferenceOnCreate gets a reference to the given bool and assigns it to the StartConferenceOnCreate field.
func (o *CallRequestConferenceConfig) SetStartConferenceOnCreate(v bool) {
	o.StartConferenceOnCreate = &v
}

// GetSupervisorRole returns the SupervisorRole field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetSupervisorRole() string {
	if o == nil || IsNil(o.SupervisorRole) {
		var ret string
		return ret
	}
	return *o.SupervisorRole
}

// GetSupervisorRoleOk returns a tuple with the SupervisorRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetSupervisorRoleOk() (*string, bool) {
	if o == nil || IsNil(o.SupervisorRole) {
		return nil, false
	}
	return o.SupervisorRole, true
}

// HasSupervisorRole returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasSupervisorRole() bool {
	if o != nil && !IsNil(o.SupervisorRole) {
		return true
	}

	return false
}

// SetSupervisorRole gets a reference to the given string and assigns it to the SupervisorRole field.
func (o *CallRequestConferenceConfig) SetSupervisorRole(v string) {
	o.SupervisorRole = &v
}

// GetWhisperCallControlIds returns the WhisperCallControlIds field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetWhisperCallControlIds() []string {
	if o == nil || IsNil(o.WhisperCallControlIds) {
		var ret []string
		return ret
	}
	return o.WhisperCallControlIds
}

// GetWhisperCallControlIdsOk returns a tuple with the WhisperCallControlIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetWhisperCallControlIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WhisperCallControlIds) {
		return nil, false
	}
	return o.WhisperCallControlIds, true
}

// HasWhisperCallControlIds returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasWhisperCallControlIds() bool {
	if o != nil && !IsNil(o.WhisperCallControlIds) {
		return true
	}

	return false
}

// SetWhisperCallControlIds gets a reference to the given []string and assigns it to the WhisperCallControlIds field.
func (o *CallRequestConferenceConfig) SetWhisperCallControlIds(v []string) {
	o.WhisperCallControlIds = v
}

// GetBeepEnabled returns the BeepEnabled field value if set, zero value otherwise.
func (o *CallRequestConferenceConfig) GetBeepEnabled() string {
	if o == nil || IsNil(o.BeepEnabled) {
		var ret string
		return ret
	}
	return *o.BeepEnabled
}

// GetBeepEnabledOk returns a tuple with the BeepEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequestConferenceConfig) GetBeepEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.BeepEnabled) {
		return nil, false
	}
	return o.BeepEnabled, true
}

// HasBeepEnabled returns a boolean if a field has been set.
func (o *CallRequestConferenceConfig) HasBeepEnabled() bool {
	if o != nil && !IsNil(o.BeepEnabled) {
		return true
	}

	return false
}

// SetBeepEnabled gets a reference to the given string and assigns it to the BeepEnabled field.
func (o *CallRequestConferenceConfig) SetBeepEnabled(v string) {
	o.BeepEnabled = &v
}

func (o CallRequestConferenceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRequestConferenceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ConferenceName) {
		toSerialize["conference_name"] = o.ConferenceName
	}
	if !IsNil(o.EarlyMedia) {
		toSerialize["early_media"] = o.EarlyMedia
	}
	if !IsNil(o.EndConferenceOnExit) {
		toSerialize["end_conference_on_exit"] = o.EndConferenceOnExit
	}
	if !IsNil(o.SoftEndConferenceOnExit) {
		toSerialize["soft_end_conference_on_exit"] = o.SoftEndConferenceOnExit
	}
	if !IsNil(o.Hold) {
		toSerialize["hold"] = o.Hold
	}
	if !IsNil(o.HoldAudioUrl) {
		toSerialize["hold_audio_url"] = o.HoldAudioUrl
	}
	if !IsNil(o.HoldMediaName) {
		toSerialize["hold_media_name"] = o.HoldMediaName
	}
	if !IsNil(o.Mute) {
		toSerialize["mute"] = o.Mute
	}
	if !IsNil(o.StartConferenceOnEnter) {
		toSerialize["start_conference_on_enter"] = o.StartConferenceOnEnter
	}
	if !IsNil(o.StartConferenceOnCreate) {
		toSerialize["start_conference_on_create"] = o.StartConferenceOnCreate
	}
	if !IsNil(o.SupervisorRole) {
		toSerialize["supervisor_role"] = o.SupervisorRole
	}
	if !IsNil(o.WhisperCallControlIds) {
		toSerialize["whisper_call_control_ids"] = o.WhisperCallControlIds
	}
	if !IsNil(o.BeepEnabled) {
		toSerialize["beep_enabled"] = o.BeepEnabled
	}
	return toSerialize, nil
}

type NullableCallRequestConferenceConfig struct {
	value *CallRequestConferenceConfig
	isSet bool
}

func (v NullableCallRequestConferenceConfig) Get() *CallRequestConferenceConfig {
	return v.value
}

func (v *NullableCallRequestConferenceConfig) Set(val *CallRequestConferenceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRequestConferenceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRequestConferenceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRequestConferenceConfig(val *CallRequestConferenceConfig) *NullableCallRequestConferenceConfig {
	return &NullableCallRequestConferenceConfig{value: val, isSet: true}
}

func (v NullableCallRequestConferenceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRequestConferenceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


