/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AssistantToolsInner - struct for AssistantToolsInner
type AssistantToolsInner struct {
	BookAppointmentTool *BookAppointmentTool
	CheckAvailabilityTool *CheckAvailabilityTool
	DTMFTool *DTMFTool
	HangupTool *HangupTool
	RetrievalTool *RetrievalTool
	TransferTool *TransferTool
	WebhookTool *WebhookTool
}

// BookAppointmentToolAsAssistantToolsInner is a convenience function that returns BookAppointmentTool wrapped in AssistantToolsInner
func BookAppointmentToolAsAssistantToolsInner(v *BookAppointmentTool) AssistantToolsInner {
	return AssistantToolsInner{
		BookAppointmentTool: v,
	}
}

// CheckAvailabilityToolAsAssistantToolsInner is a convenience function that returns CheckAvailabilityTool wrapped in AssistantToolsInner
func CheckAvailabilityToolAsAssistantToolsInner(v *CheckAvailabilityTool) AssistantToolsInner {
	return AssistantToolsInner{
		CheckAvailabilityTool: v,
	}
}

// DTMFToolAsAssistantToolsInner is a convenience function that returns DTMFTool wrapped in AssistantToolsInner
func DTMFToolAsAssistantToolsInner(v *DTMFTool) AssistantToolsInner {
	return AssistantToolsInner{
		DTMFTool: v,
	}
}

// HangupToolAsAssistantToolsInner is a convenience function that returns HangupTool wrapped in AssistantToolsInner
func HangupToolAsAssistantToolsInner(v *HangupTool) AssistantToolsInner {
	return AssistantToolsInner{
		HangupTool: v,
	}
}

// RetrievalToolAsAssistantToolsInner is a convenience function that returns RetrievalTool wrapped in AssistantToolsInner
func RetrievalToolAsAssistantToolsInner(v *RetrievalTool) AssistantToolsInner {
	return AssistantToolsInner{
		RetrievalTool: v,
	}
}

// TransferToolAsAssistantToolsInner is a convenience function that returns TransferTool wrapped in AssistantToolsInner
func TransferToolAsAssistantToolsInner(v *TransferTool) AssistantToolsInner {
	return AssistantToolsInner{
		TransferTool: v,
	}
}

// WebhookToolAsAssistantToolsInner is a convenience function that returns WebhookTool wrapped in AssistantToolsInner
func WebhookToolAsAssistantToolsInner(v *WebhookTool) AssistantToolsInner {
	return AssistantToolsInner{
		WebhookTool: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssistantToolsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BookAppointmentTool
	err = newStrictDecoder(data).Decode(&dst.BookAppointmentTool)
	if err == nil {
		jsonBookAppointmentTool, _ := json.Marshal(dst.BookAppointmentTool)
		if string(jsonBookAppointmentTool) == "{}" { // empty struct
			dst.BookAppointmentTool = nil
		} else {
			if err = validator.Validate(dst.BookAppointmentTool); err != nil {
				dst.BookAppointmentTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookAppointmentTool = nil
	}

	// try to unmarshal data into CheckAvailabilityTool
	err = newStrictDecoder(data).Decode(&dst.CheckAvailabilityTool)
	if err == nil {
		jsonCheckAvailabilityTool, _ := json.Marshal(dst.CheckAvailabilityTool)
		if string(jsonCheckAvailabilityTool) == "{}" { // empty struct
			dst.CheckAvailabilityTool = nil
		} else {
			if err = validator.Validate(dst.CheckAvailabilityTool); err != nil {
				dst.CheckAvailabilityTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.CheckAvailabilityTool = nil
	}

	// try to unmarshal data into DTMFTool
	err = newStrictDecoder(data).Decode(&dst.DTMFTool)
	if err == nil {
		jsonDTMFTool, _ := json.Marshal(dst.DTMFTool)
		if string(jsonDTMFTool) == "{}" { // empty struct
			dst.DTMFTool = nil
		} else {
			if err = validator.Validate(dst.DTMFTool); err != nil {
				dst.DTMFTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.DTMFTool = nil
	}

	// try to unmarshal data into HangupTool
	err = newStrictDecoder(data).Decode(&dst.HangupTool)
	if err == nil {
		jsonHangupTool, _ := json.Marshal(dst.HangupTool)
		if string(jsonHangupTool) == "{}" { // empty struct
			dst.HangupTool = nil
		} else {
			if err = validator.Validate(dst.HangupTool); err != nil {
				dst.HangupTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.HangupTool = nil
	}

	// try to unmarshal data into RetrievalTool
	err = newStrictDecoder(data).Decode(&dst.RetrievalTool)
	if err == nil {
		jsonRetrievalTool, _ := json.Marshal(dst.RetrievalTool)
		if string(jsonRetrievalTool) == "{}" { // empty struct
			dst.RetrievalTool = nil
		} else {
			if err = validator.Validate(dst.RetrievalTool); err != nil {
				dst.RetrievalTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.RetrievalTool = nil
	}

	// try to unmarshal data into TransferTool
	err = newStrictDecoder(data).Decode(&dst.TransferTool)
	if err == nil {
		jsonTransferTool, _ := json.Marshal(dst.TransferTool)
		if string(jsonTransferTool) == "{}" { // empty struct
			dst.TransferTool = nil
		} else {
			if err = validator.Validate(dst.TransferTool); err != nil {
				dst.TransferTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransferTool = nil
	}

	// try to unmarshal data into WebhookTool
	err = newStrictDecoder(data).Decode(&dst.WebhookTool)
	if err == nil {
		jsonWebhookTool, _ := json.Marshal(dst.WebhookTool)
		if string(jsonWebhookTool) == "{}" { // empty struct
			dst.WebhookTool = nil
		} else {
			if err = validator.Validate(dst.WebhookTool); err != nil {
				dst.WebhookTool = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookTool = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BookAppointmentTool = nil
		dst.CheckAvailabilityTool = nil
		dst.DTMFTool = nil
		dst.HangupTool = nil
		dst.RetrievalTool = nil
		dst.TransferTool = nil
		dst.WebhookTool = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AssistantToolsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AssistantToolsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssistantToolsInner) MarshalJSON() ([]byte, error) {
	if src.BookAppointmentTool != nil {
		return json.Marshal(&src.BookAppointmentTool)
	}

	if src.CheckAvailabilityTool != nil {
		return json.Marshal(&src.CheckAvailabilityTool)
	}

	if src.DTMFTool != nil {
		return json.Marshal(&src.DTMFTool)
	}

	if src.HangupTool != nil {
		return json.Marshal(&src.HangupTool)
	}

	if src.RetrievalTool != nil {
		return json.Marshal(&src.RetrievalTool)
	}

	if src.TransferTool != nil {
		return json.Marshal(&src.TransferTool)
	}

	if src.WebhookTool != nil {
		return json.Marshal(&src.WebhookTool)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssistantToolsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BookAppointmentTool != nil {
		return obj.BookAppointmentTool
	}

	if obj.CheckAvailabilityTool != nil {
		return obj.CheckAvailabilityTool
	}

	if obj.DTMFTool != nil {
		return obj.DTMFTool
	}

	if obj.HangupTool != nil {
		return obj.HangupTool
	}

	if obj.RetrievalTool != nil {
		return obj.RetrievalTool
	}

	if obj.TransferTool != nil {
		return obj.TransferTool
	}

	if obj.WebhookTool != nil {
		return obj.WebhookTool
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AssistantToolsInner) GetActualInstanceValue() (interface{}) {
	if obj.BookAppointmentTool != nil {
		return *obj.BookAppointmentTool
	}

	if obj.CheckAvailabilityTool != nil {
		return *obj.CheckAvailabilityTool
	}

	if obj.DTMFTool != nil {
		return *obj.DTMFTool
	}

	if obj.HangupTool != nil {
		return *obj.HangupTool
	}

	if obj.RetrievalTool != nil {
		return *obj.RetrievalTool
	}

	if obj.TransferTool != nil {
		return *obj.TransferTool
	}

	if obj.WebhookTool != nil {
		return *obj.WebhookTool
	}

	// all schemas are nil
	return nil
}

type NullableAssistantToolsInner struct {
	value *AssistantToolsInner
	isSet bool
}

func (v NullableAssistantToolsInner) Get() *AssistantToolsInner {
	return v.value
}

func (v *NullableAssistantToolsInner) Set(val *AssistantToolsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantToolsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantToolsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantToolsInner(val *AssistantToolsInner) *NullableAssistantToolsInner {
	return &NullableAssistantToolsInner{value: val, isSet: true}
}

func (v NullableAssistantToolsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantToolsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


