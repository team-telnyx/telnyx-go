/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateBrand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBrand{}

// CreateBrand struct for CreateBrand
type CreateBrand struct {
	// Entity type behind the brand. This is the form of business establishment.
	EntityType EntityType `json:"entityType"`
	// Display name, marketing name, or DBA name of the brand.
	DisplayName string `json:"displayName"`
	// (Required for Non-profit/private/public) Legal company name.
	CompanyName *string `json:"companyName,omitempty"`
	// First name of business contact.
	FirstName *string `json:"firstName,omitempty"`
	// Last name of business contact.
	LastName *string `json:"lastName,omitempty"`
	// (Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.
	Ein *string `json:"ein,omitempty"`
	// Valid phone number in e.164 international format.
	Phone *string `json:"phone,omitempty"`
	// Street number and name.
	Street *string `json:"street,omitempty"`
	// City name
	City *string `json:"city,omitempty"`
	// State. Must be 2 letters code for United States.
	State *string `json:"state,omitempty"`
	// Postal codes. Use 5 digit zipcode for United States
	PostalCode *string `json:"postalCode,omitempty"`
	// ISO2 2 characters country code. Example: US - United States
	Country string `json:"country"`
	// Valid email address of brand support contact.
	Email string `json:"email"`
	// (Required for public company) stock symbol.
	StockSymbol *string `json:"stockSymbol,omitempty"`
	// (Required for public company) stock exchange.
	StockExchange *StockExchange `json:"stockExchange,omitempty"`
	// IP address of the browser requesting to create brand identity.
	IpAddress *string `json:"ipAddress,omitempty"`
	// Brand website URL.
	Website *string `json:"website,omitempty"`
	// Vertical or industry segment of the brand.
	Vertical Vertical `json:"vertical"`
	IsReseller *bool `json:"isReseller,omitempty"`
	// Mock brand for testing purposes. Defaults to false.
	Mock *bool `json:"mock,omitempty"`
	// Valid mobile phone number in e.164 international format.
	MobilePhone *string `json:"mobilePhone,omitempty"`
	// Business contact email.  Required if `entityType` is `PUBLIC_PROFIT`.
	BusinessContactEmail *string `json:"businessContactEmail,omitempty"`
	// Webhook URL for brand status updates.
	WebhookURL *string `json:"webhookURL,omitempty"`
	// Webhook failover URL for brand status updates.
	WebhookFailoverURL *string `json:"webhookFailoverURL,omitempty"`
}

type _CreateBrand CreateBrand

// NewCreateBrand instantiates a new CreateBrand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBrand(entityType EntityType, displayName string, country string, email string, vertical Vertical) *CreateBrand {
	this := CreateBrand{}
	this.EntityType = entityType
	this.DisplayName = displayName
	this.Country = country
	this.Email = email
	this.Vertical = vertical
	var isReseller bool = false
	this.IsReseller = &isReseller
	var mock bool = false
	this.Mock = &mock
	return &this
}

// NewCreateBrandWithDefaults instantiates a new CreateBrand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBrandWithDefaults() *CreateBrand {
	this := CreateBrand{}
	var isReseller bool = false
	this.IsReseller = &isReseller
	var mock bool = false
	this.Mock = &mock
	return &this
}

// GetEntityType returns the EntityType field value
func (o *CreateBrand) GetEntityType() EntityType {
	if o == nil {
		var ret EntityType
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetEntityTypeOk() (*EntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CreateBrand) SetEntityType(v EntityType) {
	o.EntityType = v
}

// GetDisplayName returns the DisplayName field value
func (o *CreateBrand) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CreateBrand) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *CreateBrand) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *CreateBrand) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *CreateBrand) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *CreateBrand) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *CreateBrand) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *CreateBrand) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *CreateBrand) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *CreateBrand) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *CreateBrand) SetLastName(v string) {
	o.LastName = &v
}

// GetEin returns the Ein field value if set, zero value otherwise.
func (o *CreateBrand) GetEin() string {
	if o == nil || IsNil(o.Ein) {
		var ret string
		return ret
	}
	return *o.Ein
}

// GetEinOk returns a tuple with the Ein field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetEinOk() (*string, bool) {
	if o == nil || IsNil(o.Ein) {
		return nil, false
	}
	return o.Ein, true
}

// HasEin returns a boolean if a field has been set.
func (o *CreateBrand) HasEin() bool {
	if o != nil && !IsNil(o.Ein) {
		return true
	}

	return false
}

// SetEin gets a reference to the given string and assigns it to the Ein field.
func (o *CreateBrand) SetEin(v string) {
	o.Ein = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *CreateBrand) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *CreateBrand) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *CreateBrand) SetPhone(v string) {
	o.Phone = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *CreateBrand) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *CreateBrand) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *CreateBrand) SetStreet(v string) {
	o.Street = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CreateBrand) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CreateBrand) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CreateBrand) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CreateBrand) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CreateBrand) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CreateBrand) SetState(v string) {
	o.State = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *CreateBrand) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *CreateBrand) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *CreateBrand) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetCountry returns the Country field value
func (o *CreateBrand) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CreateBrand) SetCountry(v string) {
	o.Country = v
}

// GetEmail returns the Email field value
func (o *CreateBrand) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateBrand) SetEmail(v string) {
	o.Email = v
}

// GetStockSymbol returns the StockSymbol field value if set, zero value otherwise.
func (o *CreateBrand) GetStockSymbol() string {
	if o == nil || IsNil(o.StockSymbol) {
		var ret string
		return ret
	}
	return *o.StockSymbol
}

// GetStockSymbolOk returns a tuple with the StockSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetStockSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.StockSymbol) {
		return nil, false
	}
	return o.StockSymbol, true
}

// HasStockSymbol returns a boolean if a field has been set.
func (o *CreateBrand) HasStockSymbol() bool {
	if o != nil && !IsNil(o.StockSymbol) {
		return true
	}

	return false
}

// SetStockSymbol gets a reference to the given string and assigns it to the StockSymbol field.
func (o *CreateBrand) SetStockSymbol(v string) {
	o.StockSymbol = &v
}

// GetStockExchange returns the StockExchange field value if set, zero value otherwise.
func (o *CreateBrand) GetStockExchange() StockExchange {
	if o == nil || IsNil(o.StockExchange) {
		var ret StockExchange
		return ret
	}
	return *o.StockExchange
}

// GetStockExchangeOk returns a tuple with the StockExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetStockExchangeOk() (*StockExchange, bool) {
	if o == nil || IsNil(o.StockExchange) {
		return nil, false
	}
	return o.StockExchange, true
}

// HasStockExchange returns a boolean if a field has been set.
func (o *CreateBrand) HasStockExchange() bool {
	if o != nil && !IsNil(o.StockExchange) {
		return true
	}

	return false
}

// SetStockExchange gets a reference to the given StockExchange and assigns it to the StockExchange field.
func (o *CreateBrand) SetStockExchange(v StockExchange) {
	o.StockExchange = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *CreateBrand) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *CreateBrand) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *CreateBrand) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *CreateBrand) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *CreateBrand) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *CreateBrand) SetWebsite(v string) {
	o.Website = &v
}

// GetVertical returns the Vertical field value
func (o *CreateBrand) GetVertical() Vertical {
	if o == nil {
		var ret Vertical
		return ret
	}

	return o.Vertical
}

// GetVerticalOk returns a tuple with the Vertical field value
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetVerticalOk() (*Vertical, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vertical, true
}

// SetVertical sets field value
func (o *CreateBrand) SetVertical(v Vertical) {
	o.Vertical = v
}

// GetIsReseller returns the IsReseller field value if set, zero value otherwise.
func (o *CreateBrand) GetIsReseller() bool {
	if o == nil || IsNil(o.IsReseller) {
		var ret bool
		return ret
	}
	return *o.IsReseller
}

// GetIsResellerOk returns a tuple with the IsReseller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetIsResellerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReseller) {
		return nil, false
	}
	return o.IsReseller, true
}

// HasIsReseller returns a boolean if a field has been set.
func (o *CreateBrand) HasIsReseller() bool {
	if o != nil && !IsNil(o.IsReseller) {
		return true
	}

	return false
}

// SetIsReseller gets a reference to the given bool and assigns it to the IsReseller field.
func (o *CreateBrand) SetIsReseller(v bool) {
	o.IsReseller = &v
}

// GetMock returns the Mock field value if set, zero value otherwise.
func (o *CreateBrand) GetMock() bool {
	if o == nil || IsNil(o.Mock) {
		var ret bool
		return ret
	}
	return *o.Mock
}

// GetMockOk returns a tuple with the Mock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetMockOk() (*bool, bool) {
	if o == nil || IsNil(o.Mock) {
		return nil, false
	}
	return o.Mock, true
}

// HasMock returns a boolean if a field has been set.
func (o *CreateBrand) HasMock() bool {
	if o != nil && !IsNil(o.Mock) {
		return true
	}

	return false
}

// SetMock gets a reference to the given bool and assigns it to the Mock field.
func (o *CreateBrand) SetMock(v bool) {
	o.Mock = &v
}

// GetMobilePhone returns the MobilePhone field value if set, zero value otherwise.
func (o *CreateBrand) GetMobilePhone() string {
	if o == nil || IsNil(o.MobilePhone) {
		var ret string
		return ret
	}
	return *o.MobilePhone
}

// GetMobilePhoneOk returns a tuple with the MobilePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetMobilePhoneOk() (*string, bool) {
	if o == nil || IsNil(o.MobilePhone) {
		return nil, false
	}
	return o.MobilePhone, true
}

// HasMobilePhone returns a boolean if a field has been set.
func (o *CreateBrand) HasMobilePhone() bool {
	if o != nil && !IsNil(o.MobilePhone) {
		return true
	}

	return false
}

// SetMobilePhone gets a reference to the given string and assigns it to the MobilePhone field.
func (o *CreateBrand) SetMobilePhone(v string) {
	o.MobilePhone = &v
}

// GetBusinessContactEmail returns the BusinessContactEmail field value if set, zero value otherwise.
func (o *CreateBrand) GetBusinessContactEmail() string {
	if o == nil || IsNil(o.BusinessContactEmail) {
		var ret string
		return ret
	}
	return *o.BusinessContactEmail
}

// GetBusinessContactEmailOk returns a tuple with the BusinessContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetBusinessContactEmailOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessContactEmail) {
		return nil, false
	}
	return o.BusinessContactEmail, true
}

// HasBusinessContactEmail returns a boolean if a field has been set.
func (o *CreateBrand) HasBusinessContactEmail() bool {
	if o != nil && !IsNil(o.BusinessContactEmail) {
		return true
	}

	return false
}

// SetBusinessContactEmail gets a reference to the given string and assigns it to the BusinessContactEmail field.
func (o *CreateBrand) SetBusinessContactEmail(v string) {
	o.BusinessContactEmail = &v
}

// GetWebhookURL returns the WebhookURL field value if set, zero value otherwise.
func (o *CreateBrand) GetWebhookURL() string {
	if o == nil || IsNil(o.WebhookURL) {
		var ret string
		return ret
	}
	return *o.WebhookURL
}

// GetWebhookURLOk returns a tuple with the WebhookURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetWebhookURLOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookURL) {
		return nil, false
	}
	return o.WebhookURL, true
}

// HasWebhookURL returns a boolean if a field has been set.
func (o *CreateBrand) HasWebhookURL() bool {
	if o != nil && !IsNil(o.WebhookURL) {
		return true
	}

	return false
}

// SetWebhookURL gets a reference to the given string and assigns it to the WebhookURL field.
func (o *CreateBrand) SetWebhookURL(v string) {
	o.WebhookURL = &v
}

// GetWebhookFailoverURL returns the WebhookFailoverURL field value if set, zero value otherwise.
func (o *CreateBrand) GetWebhookFailoverURL() string {
	if o == nil || IsNil(o.WebhookFailoverURL) {
		var ret string
		return ret
	}
	return *o.WebhookFailoverURL
}

// GetWebhookFailoverURLOk returns a tuple with the WebhookFailoverURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBrand) GetWebhookFailoverURLOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookFailoverURL) {
		return nil, false
	}
	return o.WebhookFailoverURL, true
}

// HasWebhookFailoverURL returns a boolean if a field has been set.
func (o *CreateBrand) HasWebhookFailoverURL() bool {
	if o != nil && !IsNil(o.WebhookFailoverURL) {
		return true
	}

	return false
}

// SetWebhookFailoverURL gets a reference to the given string and assigns it to the WebhookFailoverURL field.
func (o *CreateBrand) SetWebhookFailoverURL(v string) {
	o.WebhookFailoverURL = &v
}

func (o CreateBrand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBrand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityType"] = o.EntityType
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Ein) {
		toSerialize["ein"] = o.Ein
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	toSerialize["country"] = o.Country
	toSerialize["email"] = o.Email
	if !IsNil(o.StockSymbol) {
		toSerialize["stockSymbol"] = o.StockSymbol
	}
	if !IsNil(o.StockExchange) {
		toSerialize["stockExchange"] = o.StockExchange
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	toSerialize["vertical"] = o.Vertical
	if !IsNil(o.IsReseller) {
		toSerialize["isReseller"] = o.IsReseller
	}
	if !IsNil(o.Mock) {
		toSerialize["mock"] = o.Mock
	}
	if !IsNil(o.MobilePhone) {
		toSerialize["mobilePhone"] = o.MobilePhone
	}
	if !IsNil(o.BusinessContactEmail) {
		toSerialize["businessContactEmail"] = o.BusinessContactEmail
	}
	if !IsNil(o.WebhookURL) {
		toSerialize["webhookURL"] = o.WebhookURL
	}
	if !IsNil(o.WebhookFailoverURL) {
		toSerialize["webhookFailoverURL"] = o.WebhookFailoverURL
	}
	return toSerialize, nil
}

func (o *CreateBrand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityType",
		"displayName",
		"country",
		"email",
		"vertical",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBrand := _CreateBrand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateBrand)

	if err != nil {
		return err
	}

	*o = CreateBrand(varCreateBrand)

	return err
}

type NullableCreateBrand struct {
	value *CreateBrand
	isSet bool
}

func (v NullableCreateBrand) Get() *CreateBrand {
	return v.value
}

func (v *NullableCreateBrand) Set(val *CreateBrand) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBrand) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBrand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBrand(val *CreateBrand) *NullableCreateBrand {
	return &NullableCreateBrand{value: val, isSet: true}
}

func (v NullableCreateBrand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBrand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


