/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaginationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationResponse{}

// PaginationResponse struct for PaginationResponse
type PaginationResponse struct {
	// Total number of results returned.
	TotalResults int32 `json:"total_results"`
	// Total number of pages from the results.
	TotalPages int32 `json:"total_pages"`
	// The current page number.
	PageNumber int32 `json:"page_number"`
	// The number of results per page.
	PageSize int32 `json:"page_size"`
}

type _PaginationResponse PaginationResponse

// NewPaginationResponse instantiates a new PaginationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationResponse(totalResults int32, totalPages int32, pageNumber int32, pageSize int32) *PaginationResponse {
	this := PaginationResponse{}
	this.TotalResults = totalResults
	this.TotalPages = totalPages
	this.PageNumber = pageNumber
	this.PageSize = pageSize
	return &this
}

// NewPaginationResponseWithDefaults instantiates a new PaginationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationResponseWithDefaults() *PaginationResponse {
	this := PaginationResponse{}
	return &this
}

// GetTotalResults returns the TotalResults field value
func (o *PaginationResponse) GetTotalResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value
// and a boolean to check if the value has been set.
func (o *PaginationResponse) GetTotalResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalResults, true
}

// SetTotalResults sets field value
func (o *PaginationResponse) SetTotalResults(v int32) {
	o.TotalResults = v
}

// GetTotalPages returns the TotalPages field value
func (o *PaginationResponse) GetTotalPages() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value
// and a boolean to check if the value has been set.
func (o *PaginationResponse) GetTotalPagesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPages, true
}

// SetTotalPages sets field value
func (o *PaginationResponse) SetTotalPages(v int32) {
	o.TotalPages = v
}

// GetPageNumber returns the PageNumber field value
func (o *PaginationResponse) GetPageNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value
// and a boolean to check if the value has been set.
func (o *PaginationResponse) GetPageNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageNumber, true
}

// SetPageNumber sets field value
func (o *PaginationResponse) SetPageNumber(v int32) {
	o.PageNumber = v
}

// GetPageSize returns the PageSize field value
func (o *PaginationResponse) GetPageSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *PaginationResponse) GetPageSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *PaginationResponse) SetPageSize(v int32) {
	o.PageSize = v
}

func (o PaginationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total_results"] = o.TotalResults
	toSerialize["total_pages"] = o.TotalPages
	toSerialize["page_number"] = o.PageNumber
	toSerialize["page_size"] = o.PageSize
	return toSerialize, nil
}

func (o *PaginationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_results",
		"total_pages",
		"page_number",
		"page_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginationResponse := _PaginationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaginationResponse)

	if err != nil {
		return err
	}

	*o = PaginationResponse(varPaginationResponse)

	return err
}

type NullablePaginationResponse struct {
	value *PaginationResponse
	isSet bool
}

func (v NullablePaginationResponse) Get() *PaginationResponse {
	return v.value
}

func (v *NullablePaginationResponse) Set(val *PaginationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationResponse(val *PaginationResponse) *NullablePaginationResponse {
	return &NullablePaginationResponse{value: val, isSet: true}
}

func (v NullablePaginationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


