/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DTMFTool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DTMFTool{}

// DTMFTool struct for DTMFTool
type DTMFTool struct {
	Type string `json:"type"`
	SendDtmf map[string]interface{} `json:"send_dtmf"`
}

type _DTMFTool DTMFTool

// NewDTMFTool instantiates a new DTMFTool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDTMFTool(type_ string, sendDtmf map[string]interface{}) *DTMFTool {
	this := DTMFTool{}
	this.Type = type_
	this.SendDtmf = sendDtmf
	return &this
}

// NewDTMFToolWithDefaults instantiates a new DTMFTool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDTMFToolWithDefaults() *DTMFTool {
	this := DTMFTool{}
	return &this
}

// GetType returns the Type field value
func (o *DTMFTool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DTMFTool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DTMFTool) SetType(v string) {
	o.Type = v
}

// GetSendDtmf returns the SendDtmf field value
func (o *DTMFTool) GetSendDtmf() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.SendDtmf
}

// GetSendDtmfOk returns a tuple with the SendDtmf field value
// and a boolean to check if the value has been set.
func (o *DTMFTool) GetSendDtmfOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.SendDtmf, true
}

// SetSendDtmf sets field value
func (o *DTMFTool) SetSendDtmf(v map[string]interface{}) {
	o.SendDtmf = v
}

func (o DTMFTool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DTMFTool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["send_dtmf"] = o.SendDtmf
	return toSerialize, nil
}

func (o *DTMFTool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"send_dtmf",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDTMFTool := _DTMFTool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDTMFTool)

	if err != nil {
		return err
	}

	*o = DTMFTool(varDTMFTool)

	return err
}

type NullableDTMFTool struct {
	value *DTMFTool
	isSet bool
}

func (v NullableDTMFTool) Get() *DTMFTool {
	return v.value
}

func (v *NullableDTMFTool) Set(val *DTMFTool) {
	v.value = val
	v.isSet = true
}

func (v NullableDTMFTool) IsSet() bool {
	return v.isSet
}

func (v *NullableDTMFTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDTMFTool(val *DTMFTool) *NullableDTMFTool {
	return &NullableDTMFTool{value: val, isSet: true}
}

func (v NullableDTMFTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDTMFTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


