/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// SupportedEmbeddingModels Supported models to vectorize and embed documents.
type SupportedEmbeddingModels string

// List of SupportedEmbeddingModels
const (
	THENLPER_GTE_LARGE SupportedEmbeddingModels = "thenlper/gte-large"
	INTFLOAT_MULTILINGUAL_E5_LARGE SupportedEmbeddingModels = "intfloat/multilingual-e5-large"
)

// All allowed values of SupportedEmbeddingModels enum
var AllowedSupportedEmbeddingModelsEnumValues = []SupportedEmbeddingModels{
	"thenlper/gte-large",
	"intfloat/multilingual-e5-large",
}

func (v *SupportedEmbeddingModels) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupportedEmbeddingModels(value)
	for _, existing := range AllowedSupportedEmbeddingModelsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupportedEmbeddingModels", value)
}

// NewSupportedEmbeddingModelsFromValue returns a pointer to a valid SupportedEmbeddingModels
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportedEmbeddingModelsFromValue(v string) (*SupportedEmbeddingModels, error) {
	ev := SupportedEmbeddingModels(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportedEmbeddingModels: valid values are %v", v, AllowedSupportedEmbeddingModelsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportedEmbeddingModels) IsValid() bool {
	for _, existing := range AllowedSupportedEmbeddingModelsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupportedEmbeddingModels value
func (v SupportedEmbeddingModels) Ptr() *SupportedEmbeddingModels {
	return &v
}

type NullableSupportedEmbeddingModels struct {
	value *SupportedEmbeddingModels
	isSet bool
}

func (v NullableSupportedEmbeddingModels) Get() *SupportedEmbeddingModels {
	return v.value
}

func (v *NullableSupportedEmbeddingModels) Set(val *SupportedEmbeddingModels) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedEmbeddingModels) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedEmbeddingModels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedEmbeddingModels(val *SupportedEmbeddingModels) *NullableSupportedEmbeddingModels {
	return &NullableSupportedEmbeddingModels{value: val, isSet: true}
}

func (v NullableSupportedEmbeddingModels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedEmbeddingModels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

