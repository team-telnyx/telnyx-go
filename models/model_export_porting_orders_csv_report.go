/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExportPortingOrdersCSVReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportPortingOrdersCSVReport{}

// ExportPortingOrdersCSVReport The parameters for generating a porting orders CSV report.
type ExportPortingOrdersCSVReport struct {
	Filters ExportPortingOrdersCSVReportFilters `json:"filters"`
}

type _ExportPortingOrdersCSVReport ExportPortingOrdersCSVReport

// NewExportPortingOrdersCSVReport instantiates a new ExportPortingOrdersCSVReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportPortingOrdersCSVReport(filters ExportPortingOrdersCSVReportFilters) *ExportPortingOrdersCSVReport {
	this := ExportPortingOrdersCSVReport{}
	this.Filters = filters
	return &this
}

// NewExportPortingOrdersCSVReportWithDefaults instantiates a new ExportPortingOrdersCSVReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportPortingOrdersCSVReportWithDefaults() *ExportPortingOrdersCSVReport {
	this := ExportPortingOrdersCSVReport{}
	return &this
}

// GetFilters returns the Filters field value
func (o *ExportPortingOrdersCSVReport) GetFilters() ExportPortingOrdersCSVReportFilters {
	if o == nil {
		var ret ExportPortingOrdersCSVReportFilters
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *ExportPortingOrdersCSVReport) GetFiltersOk() (*ExportPortingOrdersCSVReportFilters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filters, true
}

// SetFilters sets field value
func (o *ExportPortingOrdersCSVReport) SetFilters(v ExportPortingOrdersCSVReportFilters) {
	o.Filters = v
}

func (o ExportPortingOrdersCSVReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportPortingOrdersCSVReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filters"] = o.Filters
	return toSerialize, nil
}

func (o *ExportPortingOrdersCSVReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportPortingOrdersCSVReport := _ExportPortingOrdersCSVReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExportPortingOrdersCSVReport)

	if err != nil {
		return err
	}

	*o = ExportPortingOrdersCSVReport(varExportPortingOrdersCSVReport)

	return err
}

type NullableExportPortingOrdersCSVReport struct {
	value *ExportPortingOrdersCSVReport
	isSet bool
}

func (v NullableExportPortingOrdersCSVReport) Get() *ExportPortingOrdersCSVReport {
	return v.value
}

func (v *NullableExportPortingOrdersCSVReport) Set(val *ExportPortingOrdersCSVReport) {
	v.value = val
	v.isSet = true
}

func (v NullableExportPortingOrdersCSVReport) IsSet() bool {
	return v.isSet
}

func (v *NullableExportPortingOrdersCSVReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportPortingOrdersCSVReport(val *ExportPortingOrdersCSVReport) *NullableExportPortingOrdersCSVReport {
	return &NullableExportPortingOrdersCSVReport{value: val, isSet: true}
}

func (v NullableExportPortingOrdersCSVReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportPortingOrdersCSVReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


