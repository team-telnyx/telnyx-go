/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateConferenceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateConferenceRequest{}

// CreateConferenceRequest struct for CreateConferenceRequest
type CreateConferenceRequest struct {
	// Unique identifier and token for controlling the call
	CallControlId string `json:"call_control_id"`
	// Name of the conference
	Name string `json:"name"`
	// Whether a beep sound should be played when participants join and/or leave the conference.
	BeepEnabled *string `json:"beep_enabled,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. The client_state will be updated for the creator call leg and will be used for all webhooks related to the created conference.
	ClientState *string `json:"client_state,omitempty"`
	// Toggle background comfort noise.
	ComfortNoise *bool `json:"comfort_noise,omitempty"`
	// Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.
	CommandId *string `json:"command_id,omitempty"`
	// Time length (minutes) after which the conference will end.
	DurationMinutes *int32 `json:"duration_minutes,omitempty"`
	// The URL of a file to be played to participants joining the conference. The URL can point to either a WAV or MP3 file. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\".
	HoldAudioUrl *string `json:"hold_audio_url,omitempty"`
	// The media_name of a file to be played to participants joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\".
	HoldMediaName *string `json:"hold_media_name,omitempty"`
	// The maximum number of active conference participants to allow. Must be between 2 and 800. Defaults to 250
	MaxParticipants *int32 `json:"max_participants,omitempty"`
	// Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".
	StartConferenceOnCreate *bool `json:"start_conference_on_create,omitempty"`
}

type _CreateConferenceRequest CreateConferenceRequest

// NewCreateConferenceRequest instantiates a new CreateConferenceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateConferenceRequest(callControlId string, name string) *CreateConferenceRequest {
	this := CreateConferenceRequest{}
	this.CallControlId = callControlId
	this.Name = name
	var beepEnabled string = "never"
	this.BeepEnabled = &beepEnabled
	var comfortNoise bool = true
	this.ComfortNoise = &comfortNoise
	return &this
}

// NewCreateConferenceRequestWithDefaults instantiates a new CreateConferenceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateConferenceRequestWithDefaults() *CreateConferenceRequest {
	this := CreateConferenceRequest{}
	var beepEnabled string = "never"
	this.BeepEnabled = &beepEnabled
	var comfortNoise bool = true
	this.ComfortNoise = &comfortNoise
	return &this
}

// GetCallControlId returns the CallControlId field value
func (o *CreateConferenceRequest) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *CreateConferenceRequest) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetName returns the Name field value
func (o *CreateConferenceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateConferenceRequest) SetName(v string) {
	o.Name = v
}

// GetBeepEnabled returns the BeepEnabled field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetBeepEnabled() string {
	if o == nil || IsNil(o.BeepEnabled) {
		var ret string
		return ret
	}
	return *o.BeepEnabled
}

// GetBeepEnabledOk returns a tuple with the BeepEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetBeepEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.BeepEnabled) {
		return nil, false
	}
	return o.BeepEnabled, true
}

// HasBeepEnabled returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasBeepEnabled() bool {
	if o != nil && !IsNil(o.BeepEnabled) {
		return true
	}

	return false
}

// SetBeepEnabled gets a reference to the given string and assigns it to the BeepEnabled field.
func (o *CreateConferenceRequest) SetBeepEnabled(v string) {
	o.BeepEnabled = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *CreateConferenceRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetComfortNoise returns the ComfortNoise field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetComfortNoise() bool {
	if o == nil || IsNil(o.ComfortNoise) {
		var ret bool
		return ret
	}
	return *o.ComfortNoise
}

// GetComfortNoiseOk returns a tuple with the ComfortNoise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetComfortNoiseOk() (*bool, bool) {
	if o == nil || IsNil(o.ComfortNoise) {
		return nil, false
	}
	return o.ComfortNoise, true
}

// HasComfortNoise returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasComfortNoise() bool {
	if o != nil && !IsNil(o.ComfortNoise) {
		return true
	}

	return false
}

// SetComfortNoise gets a reference to the given bool and assigns it to the ComfortNoise field.
func (o *CreateConferenceRequest) SetComfortNoise(v bool) {
	o.ComfortNoise = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *CreateConferenceRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetDurationMinutes returns the DurationMinutes field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetDurationMinutes() int32 {
	if o == nil || IsNil(o.DurationMinutes) {
		var ret int32
		return ret
	}
	return *o.DurationMinutes
}

// GetDurationMinutesOk returns a tuple with the DurationMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetDurationMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.DurationMinutes) {
		return nil, false
	}
	return o.DurationMinutes, true
}

// HasDurationMinutes returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasDurationMinutes() bool {
	if o != nil && !IsNil(o.DurationMinutes) {
		return true
	}

	return false
}

// SetDurationMinutes gets a reference to the given int32 and assigns it to the DurationMinutes field.
func (o *CreateConferenceRequest) SetDurationMinutes(v int32) {
	o.DurationMinutes = &v
}

// GetHoldAudioUrl returns the HoldAudioUrl field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetHoldAudioUrl() string {
	if o == nil || IsNil(o.HoldAudioUrl) {
		var ret string
		return ret
	}
	return *o.HoldAudioUrl
}

// GetHoldAudioUrlOk returns a tuple with the HoldAudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetHoldAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HoldAudioUrl) {
		return nil, false
	}
	return o.HoldAudioUrl, true
}

// HasHoldAudioUrl returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasHoldAudioUrl() bool {
	if o != nil && !IsNil(o.HoldAudioUrl) {
		return true
	}

	return false
}

// SetHoldAudioUrl gets a reference to the given string and assigns it to the HoldAudioUrl field.
func (o *CreateConferenceRequest) SetHoldAudioUrl(v string) {
	o.HoldAudioUrl = &v
}

// GetHoldMediaName returns the HoldMediaName field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetHoldMediaName() string {
	if o == nil || IsNil(o.HoldMediaName) {
		var ret string
		return ret
	}
	return *o.HoldMediaName
}

// GetHoldMediaNameOk returns a tuple with the HoldMediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetHoldMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.HoldMediaName) {
		return nil, false
	}
	return o.HoldMediaName, true
}

// HasHoldMediaName returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasHoldMediaName() bool {
	if o != nil && !IsNil(o.HoldMediaName) {
		return true
	}

	return false
}

// SetHoldMediaName gets a reference to the given string and assigns it to the HoldMediaName field.
func (o *CreateConferenceRequest) SetHoldMediaName(v string) {
	o.HoldMediaName = &v
}

// GetMaxParticipants returns the MaxParticipants field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetMaxParticipants() int32 {
	if o == nil || IsNil(o.MaxParticipants) {
		var ret int32
		return ret
	}
	return *o.MaxParticipants
}

// GetMaxParticipantsOk returns a tuple with the MaxParticipants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetMaxParticipantsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxParticipants) {
		return nil, false
	}
	return o.MaxParticipants, true
}

// HasMaxParticipants returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasMaxParticipants() bool {
	if o != nil && !IsNil(o.MaxParticipants) {
		return true
	}

	return false
}

// SetMaxParticipants gets a reference to the given int32 and assigns it to the MaxParticipants field.
func (o *CreateConferenceRequest) SetMaxParticipants(v int32) {
	o.MaxParticipants = &v
}

// GetStartConferenceOnCreate returns the StartConferenceOnCreate field value if set, zero value otherwise.
func (o *CreateConferenceRequest) GetStartConferenceOnCreate() bool {
	if o == nil || IsNil(o.StartConferenceOnCreate) {
		var ret bool
		return ret
	}
	return *o.StartConferenceOnCreate
}

// GetStartConferenceOnCreateOk returns a tuple with the StartConferenceOnCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConferenceRequest) GetStartConferenceOnCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.StartConferenceOnCreate) {
		return nil, false
	}
	return o.StartConferenceOnCreate, true
}

// HasStartConferenceOnCreate returns a boolean if a field has been set.
func (o *CreateConferenceRequest) HasStartConferenceOnCreate() bool {
	if o != nil && !IsNil(o.StartConferenceOnCreate) {
		return true
	}

	return false
}

// SetStartConferenceOnCreate gets a reference to the given bool and assigns it to the StartConferenceOnCreate field.
func (o *CreateConferenceRequest) SetStartConferenceOnCreate(v bool) {
	o.StartConferenceOnCreate = &v
}

func (o CreateConferenceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateConferenceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_control_id"] = o.CallControlId
	toSerialize["name"] = o.Name
	if !IsNil(o.BeepEnabled) {
		toSerialize["beep_enabled"] = o.BeepEnabled
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.ComfortNoise) {
		toSerialize["comfort_noise"] = o.ComfortNoise
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.DurationMinutes) {
		toSerialize["duration_minutes"] = o.DurationMinutes
	}
	if !IsNil(o.HoldAudioUrl) {
		toSerialize["hold_audio_url"] = o.HoldAudioUrl
	}
	if !IsNil(o.HoldMediaName) {
		toSerialize["hold_media_name"] = o.HoldMediaName
	}
	if !IsNil(o.MaxParticipants) {
		toSerialize["max_participants"] = o.MaxParticipants
	}
	if !IsNil(o.StartConferenceOnCreate) {
		toSerialize["start_conference_on_create"] = o.StartConferenceOnCreate
	}
	return toSerialize, nil
}

func (o *CreateConferenceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_control_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateConferenceRequest := _CreateConferenceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateConferenceRequest)

	if err != nil {
		return err
	}

	*o = CreateConferenceRequest(varCreateConferenceRequest)

	return err
}

type NullableCreateConferenceRequest struct {
	value *CreateConferenceRequest
	isSet bool
}

func (v NullableCreateConferenceRequest) Get() *CreateConferenceRequest {
	return v.value
}

func (v *NullableCreateConferenceRequest) Set(val *CreateConferenceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConferenceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConferenceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConferenceRequest(val *CreateConferenceRequest) *NullableCreateConferenceRequest {
	return &NullableCreateConferenceRequest{value: val, isSet: true}
}

func (v NullableCreateConferenceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConferenceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


