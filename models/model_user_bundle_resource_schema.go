/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserBundleResourceSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserBundleResourceSchema{}

// UserBundleResourceSchema struct for UserBundleResourceSchema
type UserBundleResourceSchema struct {
	// Resource's ID.
	Id string `json:"id"`
	// The resource itself (usually a phone number).
	Resource string `json:"resource"`
	// The type of the resource (usually 'number').
	ResourceType string `json:"resource_type"`
	// Date the resource was created.
	CreatedAt string `json:"created_at"`
	// Date the resource was last updated.
	UpdatedAt NullableString `json:"updated_at,omitempty"`
}

type _UserBundleResourceSchema UserBundleResourceSchema

// NewUserBundleResourceSchema instantiates a new UserBundleResourceSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBundleResourceSchema(id string, resource string, resourceType string, createdAt string) *UserBundleResourceSchema {
	this := UserBundleResourceSchema{}
	this.Id = id
	this.Resource = resource
	this.ResourceType = resourceType
	this.CreatedAt = createdAt
	return &this
}

// NewUserBundleResourceSchemaWithDefaults instantiates a new UserBundleResourceSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBundleResourceSchemaWithDefaults() *UserBundleResourceSchema {
	this := UserBundleResourceSchema{}
	return &this
}

// GetId returns the Id field value
func (o *UserBundleResourceSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserBundleResourceSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserBundleResourceSchema) SetId(v string) {
	o.Id = v
}

// GetResource returns the Resource field value
func (o *UserBundleResourceSchema) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *UserBundleResourceSchema) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *UserBundleResourceSchema) SetResource(v string) {
	o.Resource = v
}

// GetResourceType returns the ResourceType field value
func (o *UserBundleResourceSchema) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *UserBundleResourceSchema) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *UserBundleResourceSchema) SetResourceType(v string) {
	o.ResourceType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserBundleResourceSchema) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserBundleResourceSchema) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserBundleResourceSchema) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserBundleResourceSchema) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserBundleResourceSchema) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserBundleResourceSchema) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableString and assigns it to the UpdatedAt field.
func (o *UserBundleResourceSchema) SetUpdatedAt(v string) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *UserBundleResourceSchema) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *UserBundleResourceSchema) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o UserBundleResourceSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBundleResourceSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["resource"] = o.Resource
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["created_at"] = o.CreatedAt
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

func (o *UserBundleResourceSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"resource",
		"resource_type",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserBundleResourceSchema := _UserBundleResourceSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserBundleResourceSchema)

	if err != nil {
		return err
	}

	*o = UserBundleResourceSchema(varUserBundleResourceSchema)

	return err
}

type NullableUserBundleResourceSchema struct {
	value *UserBundleResourceSchema
	isSet bool
}

func (v NullableUserBundleResourceSchema) Get() *UserBundleResourceSchema {
	return v.value
}

func (v *NullableUserBundleResourceSchema) Set(val *UserBundleResourceSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBundleResourceSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBundleResourceSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBundleResourceSchema(val *UserBundleResourceSchema) *NullableUserBundleResourceSchema {
	return &NullableUserBundleResourceSchema{value: val, isSet: true}
}

func (v NullableUserBundleResourceSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBundleResourceSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


