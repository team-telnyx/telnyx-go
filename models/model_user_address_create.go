/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserAddressCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAddressCreate{}

// UserAddressCreate struct for UserAddressCreate
type UserAddressCreate struct {
	// A customer reference string for customer look ups.
	CustomerReference *string `json:"customer_reference,omitempty"`
	// The first name associated with the address. An address must have either a first last name or a business name.
	FirstName string `json:"first_name"`
	// The last name associated with the address. An address must have either a first last name or a business name.
	LastName string `json:"last_name"`
	// The business name associated with the address. An address must have either a first last name or a business name.
	BusinessName string `json:"business_name"`
	// The phone number associated with the address.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The primary street address information about the address.
	StreetAddress string `json:"street_address"`
	// Additional street address information about the address such as, but not limited to, unit number or apartment number.
	ExtendedAddress *string `json:"extended_address,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the city of the address.
	Locality string `json:"locality"`
	// The locality of the address. For US addresses, this corresponds to the state of the address.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// The borough of the address. This field is not used for addresses in the US but is used for some international addresses.
	Borough *string `json:"borough,omitempty"`
	// The postal code of the address.
	PostalCode *string `json:"postal_code,omitempty"`
	// The two-character (ISO 3166-1 alpha-2) country code of the address.
	CountryCode string `json:"country_code"`
	// An optional boolean value specifying if verification of the address should be skipped or not. UserAddresses are generally used for shipping addresses, and failure to validate your shipping address will likely result in a failure to deliver SIM cards or other items ordered from Telnyx. Do not use this parameter unless you are sure that the address is correct even though it cannot be validated. If this is set to any value other than true, verification of the address will be attempted, and the user address will not be allowed if verification fails. If verification fails but suggested values are available that might make the address correct, they will be present in the response as well. If this value is set to true, then the verification will not be attempted. Defaults to false (verification will be performed).
	SkipAddressVerification *string `json:"skip_address_verification,omitempty"`
}

type _UserAddressCreate UserAddressCreate

// NewUserAddressCreate instantiates a new UserAddressCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAddressCreate(firstName string, lastName string, businessName string, streetAddress string, locality string, countryCode string) *UserAddressCreate {
	this := UserAddressCreate{}
	this.FirstName = firstName
	this.LastName = lastName
	this.BusinessName = businessName
	this.StreetAddress = streetAddress
	this.Locality = locality
	this.CountryCode = countryCode
	var skipAddressVerification string = "false"
	this.SkipAddressVerification = &skipAddressVerification
	return &this
}

// NewUserAddressCreateWithDefaults instantiates a new UserAddressCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAddressCreateWithDefaults() *UserAddressCreate {
	this := UserAddressCreate{}
	var skipAddressVerification string = "false"
	this.SkipAddressVerification = &skipAddressVerification
	return &this
}

// GetCustomerReference returns the CustomerReference field value if set, zero value otherwise.
func (o *UserAddressCreate) GetCustomerReference() string {
	if o == nil || IsNil(o.CustomerReference) {
		var ret string
		return ret
	}
	return *o.CustomerReference
}

// GetCustomerReferenceOk returns a tuple with the CustomerReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetCustomerReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerReference) {
		return nil, false
	}
	return o.CustomerReference, true
}

// HasCustomerReference returns a boolean if a field has been set.
func (o *UserAddressCreate) HasCustomerReference() bool {
	if o != nil && !IsNil(o.CustomerReference) {
		return true
	}

	return false
}

// SetCustomerReference gets a reference to the given string and assigns it to the CustomerReference field.
func (o *UserAddressCreate) SetCustomerReference(v string) {
	o.CustomerReference = &v
}

// GetFirstName returns the FirstName field value
func (o *UserAddressCreate) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UserAddressCreate) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UserAddressCreate) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UserAddressCreate) SetLastName(v string) {
	o.LastName = v
}

// GetBusinessName returns the BusinessName field value
func (o *UserAddressCreate) GetBusinessName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BusinessName
}

// GetBusinessNameOk returns a tuple with the BusinessName field value
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetBusinessNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusinessName, true
}

// SetBusinessName sets field value
func (o *UserAddressCreate) SetBusinessName(v string) {
	o.BusinessName = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *UserAddressCreate) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *UserAddressCreate) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *UserAddressCreate) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetStreetAddress returns the StreetAddress field value
func (o *UserAddressCreate) GetStreetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetStreetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreetAddress, true
}

// SetStreetAddress sets field value
func (o *UserAddressCreate) SetStreetAddress(v string) {
	o.StreetAddress = v
}

// GetExtendedAddress returns the ExtendedAddress field value if set, zero value otherwise.
func (o *UserAddressCreate) GetExtendedAddress() string {
	if o == nil || IsNil(o.ExtendedAddress) {
		var ret string
		return ret
	}
	return *o.ExtendedAddress
}

// GetExtendedAddressOk returns a tuple with the ExtendedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetExtendedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendedAddress) {
		return nil, false
	}
	return o.ExtendedAddress, true
}

// HasExtendedAddress returns a boolean if a field has been set.
func (o *UserAddressCreate) HasExtendedAddress() bool {
	if o != nil && !IsNil(o.ExtendedAddress) {
		return true
	}

	return false
}

// SetExtendedAddress gets a reference to the given string and assigns it to the ExtendedAddress field.
func (o *UserAddressCreate) SetExtendedAddress(v string) {
	o.ExtendedAddress = &v
}

// GetLocality returns the Locality field value
func (o *UserAddressCreate) GetLocality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetLocalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locality, true
}

// SetLocality sets field value
func (o *UserAddressCreate) SetLocality(v string) {
	o.Locality = v
}

// GetAdministrativeArea returns the AdministrativeArea field value if set, zero value otherwise.
func (o *UserAddressCreate) GetAdministrativeArea() string {
	if o == nil || IsNil(o.AdministrativeArea) {
		var ret string
		return ret
	}
	return *o.AdministrativeArea
}

// GetAdministrativeAreaOk returns a tuple with the AdministrativeArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetAdministrativeAreaOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrativeArea) {
		return nil, false
	}
	return o.AdministrativeArea, true
}

// HasAdministrativeArea returns a boolean if a field has been set.
func (o *UserAddressCreate) HasAdministrativeArea() bool {
	if o != nil && !IsNil(o.AdministrativeArea) {
		return true
	}

	return false
}

// SetAdministrativeArea gets a reference to the given string and assigns it to the AdministrativeArea field.
func (o *UserAddressCreate) SetAdministrativeArea(v string) {
	o.AdministrativeArea = &v
}

// GetNeighborhood returns the Neighborhood field value if set, zero value otherwise.
func (o *UserAddressCreate) GetNeighborhood() string {
	if o == nil || IsNil(o.Neighborhood) {
		var ret string
		return ret
	}
	return *o.Neighborhood
}

// GetNeighborhoodOk returns a tuple with the Neighborhood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetNeighborhoodOk() (*string, bool) {
	if o == nil || IsNil(o.Neighborhood) {
		return nil, false
	}
	return o.Neighborhood, true
}

// HasNeighborhood returns a boolean if a field has been set.
func (o *UserAddressCreate) HasNeighborhood() bool {
	if o != nil && !IsNil(o.Neighborhood) {
		return true
	}

	return false
}

// SetNeighborhood gets a reference to the given string and assigns it to the Neighborhood field.
func (o *UserAddressCreate) SetNeighborhood(v string) {
	o.Neighborhood = &v
}

// GetBorough returns the Borough field value if set, zero value otherwise.
func (o *UserAddressCreate) GetBorough() string {
	if o == nil || IsNil(o.Borough) {
		var ret string
		return ret
	}
	return *o.Borough
}

// GetBoroughOk returns a tuple with the Borough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetBoroughOk() (*string, bool) {
	if o == nil || IsNil(o.Borough) {
		return nil, false
	}
	return o.Borough, true
}

// HasBorough returns a boolean if a field has been set.
func (o *UserAddressCreate) HasBorough() bool {
	if o != nil && !IsNil(o.Borough) {
		return true
	}

	return false
}

// SetBorough gets a reference to the given string and assigns it to the Borough field.
func (o *UserAddressCreate) SetBorough(v string) {
	o.Borough = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *UserAddressCreate) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *UserAddressCreate) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *UserAddressCreate) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetCountryCode returns the CountryCode field value
func (o *UserAddressCreate) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *UserAddressCreate) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetSkipAddressVerification returns the SkipAddressVerification field value if set, zero value otherwise.
func (o *UserAddressCreate) GetSkipAddressVerification() string {
	if o == nil || IsNil(o.SkipAddressVerification) {
		var ret string
		return ret
	}
	return *o.SkipAddressVerification
}

// GetSkipAddressVerificationOk returns a tuple with the SkipAddressVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAddressCreate) GetSkipAddressVerificationOk() (*string, bool) {
	if o == nil || IsNil(o.SkipAddressVerification) {
		return nil, false
	}
	return o.SkipAddressVerification, true
}

// HasSkipAddressVerification returns a boolean if a field has been set.
func (o *UserAddressCreate) HasSkipAddressVerification() bool {
	if o != nil && !IsNil(o.SkipAddressVerification) {
		return true
	}

	return false
}

// SetSkipAddressVerification gets a reference to the given string and assigns it to the SkipAddressVerification field.
func (o *UserAddressCreate) SetSkipAddressVerification(v string) {
	o.SkipAddressVerification = &v
}

func (o UserAddressCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAddressCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerReference) {
		toSerialize["customer_reference"] = o.CustomerReference
	}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["business_name"] = o.BusinessName
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	toSerialize["street_address"] = o.StreetAddress
	if !IsNil(o.ExtendedAddress) {
		toSerialize["extended_address"] = o.ExtendedAddress
	}
	toSerialize["locality"] = o.Locality
	if !IsNil(o.AdministrativeArea) {
		toSerialize["administrative_area"] = o.AdministrativeArea
	}
	if !IsNil(o.Neighborhood) {
		toSerialize["neighborhood"] = o.Neighborhood
	}
	if !IsNil(o.Borough) {
		toSerialize["borough"] = o.Borough
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	toSerialize["country_code"] = o.CountryCode
	if !IsNil(o.SkipAddressVerification) {
		toSerialize["skip_address_verification"] = o.SkipAddressVerification
	}
	return toSerialize, nil
}

func (o *UserAddressCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"last_name",
		"business_name",
		"street_address",
		"locality",
		"country_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAddressCreate := _UserAddressCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAddressCreate)

	if err != nil {
		return err
	}

	*o = UserAddressCreate(varUserAddressCreate)

	return err
}

type NullableUserAddressCreate struct {
	value *UserAddressCreate
	isSet bool
}

func (v NullableUserAddressCreate) Get() *UserAddressCreate {
	return v.value
}

func (v *NullableUserAddressCreate) Set(val *UserAddressCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAddressCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAddressCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAddressCreate(val *UserAddressCreate) *NullableUserAddressCreate {
	return &NullableUserAddressCreate{value: val, isSet: true}
}

func (v NullableUserAddressCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAddressCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


