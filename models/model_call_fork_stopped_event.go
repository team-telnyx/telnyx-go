/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallForkStoppedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallForkStoppedEvent{}

// CallForkStoppedEvent struct for CallForkStoppedEvent
type CallForkStoppedEvent struct {
	Data *CallForkStopped `json:"data,omitempty"`
}

// NewCallForkStoppedEvent instantiates a new CallForkStoppedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallForkStoppedEvent() *CallForkStoppedEvent {
	this := CallForkStoppedEvent{}
	return &this
}

// NewCallForkStoppedEventWithDefaults instantiates a new CallForkStoppedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallForkStoppedEventWithDefaults() *CallForkStoppedEvent {
	this := CallForkStoppedEvent{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CallForkStoppedEvent) GetData() CallForkStopped {
	if o == nil || IsNil(o.Data) {
		var ret CallForkStopped
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallForkStoppedEvent) GetDataOk() (*CallForkStopped, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CallForkStoppedEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given CallForkStopped and assigns it to the Data field.
func (o *CallForkStoppedEvent) SetData(v CallForkStopped) {
	o.Data = &v
}

func (o CallForkStoppedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallForkStoppedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableCallForkStoppedEvent struct {
	value *CallForkStoppedEvent
	isSet bool
}

func (v NullableCallForkStoppedEvent) Get() *CallForkStoppedEvent {
	return v.value
}

func (v *NullableCallForkStoppedEvent) Set(val *CallForkStoppedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCallForkStoppedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCallForkStoppedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallForkStoppedEvent(val *CallForkStoppedEvent) *NullableCallForkStoppedEvent {
	return &NullableCallForkStoppedEvent{value: val, isSet: true}
}

func (v NullableCallForkStoppedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallForkStoppedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


