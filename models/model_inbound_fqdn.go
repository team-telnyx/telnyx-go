/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the InboundFqdn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InboundFqdn{}

// InboundFqdn struct for InboundFqdn
type InboundFqdn struct {
	// This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.
	AniNumberFormat *string `json:"ani_number_format,omitempty"`
	DnisNumberFormat *string `json:"dnis_number_format,omitempty"`
	// Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.
	Codecs []string `json:"codecs,omitempty"`
	// Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or null, other values are not allowed.
	DefaultRoutingMethod NullableString `json:"default_routing_method,omitempty"`
	// The default primary FQDN to use for the number. Only settable if the connection is of FQDN type. Value must be the ID of an FQDN set on the connection.
	DefaultPrimaryFqdnId NullableString `json:"default_primary_fqdn_id,omitempty"`
	// The default secondary FQDN to use for the number. Only settable if the connection is of FQDN type. Value must be the ID of an FQDN set on the connection.
	DefaultSecondaryFqdnId NullableString `json:"default_secondary_fqdn_id,omitempty"`
	// The default tertiary FQDN to use for the number. Only settable if the connection is of FQDN type. Value must be the ID of an FQDN set on the connection.
	DefaultTertiaryFqdnId NullableString `json:"default_tertiary_fqdn_id,omitempty"`
	// When set, this will limit the total number of inbound calls to phone numbers associated with this connection.
	ChannelLimit NullableInt32 `json:"channel_limit,omitempty"`
	// Generate ringback tone through 183 session progress message with early media.
	GenerateRingbackTone *bool `json:"generate_ringback_tone,omitempty"`
	// When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)
	IsupHeadersEnabled *bool `json:"isup_headers_enabled,omitempty"`
	// Enable PRACK messages as defined in RFC3262.
	PrackEnabled *bool `json:"prack_enabled,omitempty"`
	// Defaults to true.
	SipCompactHeadersEnabled *bool `json:"sip_compact_headers_enabled,omitempty"`
	// Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.
	SipRegion *string `json:"sip_region,omitempty"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.
	SipSubdomain NullableString `json:"sip_subdomain,omitempty"`
	// This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings *string `json:"sip_subdomain_receive_settings,omitempty"`
	// Time(sec) before aborting if connection is not made.
	Timeout1xxSecs *int32 `json:"timeout_1xx_secs,omitempty"`
	// Time(sec) before aborting if call is unanswered (min: 1, max: 600).
	Timeout2xxSecs *int32 `json:"timeout_2xx_secs,omitempty"`
	// When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.
	ShakenStirEnabled *bool `json:"shaken_stir_enabled,omitempty"`
}

// NewInboundFqdn instantiates a new InboundFqdn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInboundFqdn() *InboundFqdn {
	this := InboundFqdn{}
	var aniNumberFormat string = "E.164-national"
	this.AniNumberFormat = &aniNumberFormat
	var dnisNumberFormat string = "e164"
	this.DnisNumberFormat = &dnisNumberFormat
	var defaultRoutingMethod DEFAULT_ROUTING_METHOD = "sequential"
	this.DefaultRoutingMethod = *NewNullableString(&defaultRoutingMethod)
	var generateRingbackTone bool = false
	this.GenerateRingbackTone = &generateRingbackTone
	var isupHeadersEnabled bool = false
	this.IsupHeadersEnabled = &isupHeadersEnabled
	var prackEnabled bool = false
	this.PrackEnabled = &prackEnabled
	var sipCompactHeadersEnabled bool = true
	this.SipCompactHeadersEnabled = &sipCompactHeadersEnabled
	var sipRegion string = "US"
	this.SipRegion = &sipRegion
	var sipSubdomainReceiveSettings string = "from_anyone"
	this.SipSubdomainReceiveSettings = &sipSubdomainReceiveSettings
	var timeout1xxSecs int32 = 3
	this.Timeout1xxSecs = &timeout1xxSecs
	var timeout2xxSecs int32 = 90
	this.Timeout2xxSecs = &timeout2xxSecs
	var shakenStirEnabled bool = false
	this.ShakenStirEnabled = &shakenStirEnabled
	return &this
}

// NewInboundFqdnWithDefaults instantiates a new InboundFqdn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInboundFqdnWithDefaults() *InboundFqdn {
	this := InboundFqdn{}
	var aniNumberFormat string = "E.164-national"
	this.AniNumberFormat = &aniNumberFormat
	var dnisNumberFormat string = "e164"
	this.DnisNumberFormat = &dnisNumberFormat
	var defaultRoutingMethod DEFAULT_ROUTING_METHOD = "sequential"
	this.DefaultRoutingMethod = *NewNullableString(&defaultRoutingMethod)
	var generateRingbackTone bool = false
	this.GenerateRingbackTone = &generateRingbackTone
	var isupHeadersEnabled bool = false
	this.IsupHeadersEnabled = &isupHeadersEnabled
	var prackEnabled bool = false
	this.PrackEnabled = &prackEnabled
	var sipCompactHeadersEnabled bool = true
	this.SipCompactHeadersEnabled = &sipCompactHeadersEnabled
	var sipRegion string = "US"
	this.SipRegion = &sipRegion
	var sipSubdomainReceiveSettings string = "from_anyone"
	this.SipSubdomainReceiveSettings = &sipSubdomainReceiveSettings
	var timeout1xxSecs int32 = 3
	this.Timeout1xxSecs = &timeout1xxSecs
	var timeout2xxSecs int32 = 90
	this.Timeout2xxSecs = &timeout2xxSecs
	var shakenStirEnabled bool = false
	this.ShakenStirEnabled = &shakenStirEnabled
	return &this
}

// GetAniNumberFormat returns the AniNumberFormat field value if set, zero value otherwise.
func (o *InboundFqdn) GetAniNumberFormat() string {
	if o == nil || IsNil(o.AniNumberFormat) {
		var ret string
		return ret
	}
	return *o.AniNumberFormat
}

// GetAniNumberFormatOk returns a tuple with the AniNumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetAniNumberFormatOk() (*string, bool) {
	if o == nil || IsNil(o.AniNumberFormat) {
		return nil, false
	}
	return o.AniNumberFormat, true
}

// HasAniNumberFormat returns a boolean if a field has been set.
func (o *InboundFqdn) HasAniNumberFormat() bool {
	if o != nil && !IsNil(o.AniNumberFormat) {
		return true
	}

	return false
}

// SetAniNumberFormat gets a reference to the given string and assigns it to the AniNumberFormat field.
func (o *InboundFqdn) SetAniNumberFormat(v string) {
	o.AniNumberFormat = &v
}

// GetDnisNumberFormat returns the DnisNumberFormat field value if set, zero value otherwise.
func (o *InboundFqdn) GetDnisNumberFormat() string {
	if o == nil || IsNil(o.DnisNumberFormat) {
		var ret string
		return ret
	}
	return *o.DnisNumberFormat
}

// GetDnisNumberFormatOk returns a tuple with the DnisNumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetDnisNumberFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DnisNumberFormat) {
		return nil, false
	}
	return o.DnisNumberFormat, true
}

// HasDnisNumberFormat returns a boolean if a field has been set.
func (o *InboundFqdn) HasDnisNumberFormat() bool {
	if o != nil && !IsNil(o.DnisNumberFormat) {
		return true
	}

	return false
}

// SetDnisNumberFormat gets a reference to the given string and assigns it to the DnisNumberFormat field.
func (o *InboundFqdn) SetDnisNumberFormat(v string) {
	o.DnisNumberFormat = &v
}

// GetCodecs returns the Codecs field value if set, zero value otherwise.
func (o *InboundFqdn) GetCodecs() []string {
	if o == nil || IsNil(o.Codecs) {
		var ret []string
		return ret
	}
	return o.Codecs
}

// GetCodecsOk returns a tuple with the Codecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetCodecsOk() ([]string, bool) {
	if o == nil || IsNil(o.Codecs) {
		return nil, false
	}
	return o.Codecs, true
}

// HasCodecs returns a boolean if a field has been set.
func (o *InboundFqdn) HasCodecs() bool {
	if o != nil && !IsNil(o.Codecs) {
		return true
	}

	return false
}

// SetCodecs gets a reference to the given []string and assigns it to the Codecs field.
func (o *InboundFqdn) SetCodecs(v []string) {
	o.Codecs = v
}

// GetDefaultRoutingMethod returns the DefaultRoutingMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InboundFqdn) GetDefaultRoutingMethod() string {
	if o == nil || IsNil(o.DefaultRoutingMethod.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultRoutingMethod.Get()
}

// GetDefaultRoutingMethodOk returns a tuple with the DefaultRoutingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InboundFqdn) GetDefaultRoutingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRoutingMethod.Get(), o.DefaultRoutingMethod.IsSet()
}

// HasDefaultRoutingMethod returns a boolean if a field has been set.
func (o *InboundFqdn) HasDefaultRoutingMethod() bool {
	if o != nil && o.DefaultRoutingMethod.IsSet() {
		return true
	}

	return false
}

// SetDefaultRoutingMethod gets a reference to the given NullableString and assigns it to the DefaultRoutingMethod field.
func (o *InboundFqdn) SetDefaultRoutingMethod(v string) {
	o.DefaultRoutingMethod.Set(&v)
}
// SetDefaultRoutingMethodNil sets the value for DefaultRoutingMethod to be an explicit nil
func (o *InboundFqdn) SetDefaultRoutingMethodNil() {
	o.DefaultRoutingMethod.Set(nil)
}

// UnsetDefaultRoutingMethod ensures that no value is present for DefaultRoutingMethod, not even an explicit nil
func (o *InboundFqdn) UnsetDefaultRoutingMethod() {
	o.DefaultRoutingMethod.Unset()
}

// GetDefaultPrimaryFqdnId returns the DefaultPrimaryFqdnId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InboundFqdn) GetDefaultPrimaryFqdnId() string {
	if o == nil || IsNil(o.DefaultPrimaryFqdnId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultPrimaryFqdnId.Get()
}

// GetDefaultPrimaryFqdnIdOk returns a tuple with the DefaultPrimaryFqdnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InboundFqdn) GetDefaultPrimaryFqdnIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultPrimaryFqdnId.Get(), o.DefaultPrimaryFqdnId.IsSet()
}

// HasDefaultPrimaryFqdnId returns a boolean if a field has been set.
func (o *InboundFqdn) HasDefaultPrimaryFqdnId() bool {
	if o != nil && o.DefaultPrimaryFqdnId.IsSet() {
		return true
	}

	return false
}

// SetDefaultPrimaryFqdnId gets a reference to the given NullableString and assigns it to the DefaultPrimaryFqdnId field.
func (o *InboundFqdn) SetDefaultPrimaryFqdnId(v string) {
	o.DefaultPrimaryFqdnId.Set(&v)
}
// SetDefaultPrimaryFqdnIdNil sets the value for DefaultPrimaryFqdnId to be an explicit nil
func (o *InboundFqdn) SetDefaultPrimaryFqdnIdNil() {
	o.DefaultPrimaryFqdnId.Set(nil)
}

// UnsetDefaultPrimaryFqdnId ensures that no value is present for DefaultPrimaryFqdnId, not even an explicit nil
func (o *InboundFqdn) UnsetDefaultPrimaryFqdnId() {
	o.DefaultPrimaryFqdnId.Unset()
}

// GetDefaultSecondaryFqdnId returns the DefaultSecondaryFqdnId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InboundFqdn) GetDefaultSecondaryFqdnId() string {
	if o == nil || IsNil(o.DefaultSecondaryFqdnId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultSecondaryFqdnId.Get()
}

// GetDefaultSecondaryFqdnIdOk returns a tuple with the DefaultSecondaryFqdnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InboundFqdn) GetDefaultSecondaryFqdnIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSecondaryFqdnId.Get(), o.DefaultSecondaryFqdnId.IsSet()
}

// HasDefaultSecondaryFqdnId returns a boolean if a field has been set.
func (o *InboundFqdn) HasDefaultSecondaryFqdnId() bool {
	if o != nil && o.DefaultSecondaryFqdnId.IsSet() {
		return true
	}

	return false
}

// SetDefaultSecondaryFqdnId gets a reference to the given NullableString and assigns it to the DefaultSecondaryFqdnId field.
func (o *InboundFqdn) SetDefaultSecondaryFqdnId(v string) {
	o.DefaultSecondaryFqdnId.Set(&v)
}
// SetDefaultSecondaryFqdnIdNil sets the value for DefaultSecondaryFqdnId to be an explicit nil
func (o *InboundFqdn) SetDefaultSecondaryFqdnIdNil() {
	o.DefaultSecondaryFqdnId.Set(nil)
}

// UnsetDefaultSecondaryFqdnId ensures that no value is present for DefaultSecondaryFqdnId, not even an explicit nil
func (o *InboundFqdn) UnsetDefaultSecondaryFqdnId() {
	o.DefaultSecondaryFqdnId.Unset()
}

// GetDefaultTertiaryFqdnId returns the DefaultTertiaryFqdnId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InboundFqdn) GetDefaultTertiaryFqdnId() string {
	if o == nil || IsNil(o.DefaultTertiaryFqdnId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultTertiaryFqdnId.Get()
}

// GetDefaultTertiaryFqdnIdOk returns a tuple with the DefaultTertiaryFqdnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InboundFqdn) GetDefaultTertiaryFqdnIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultTertiaryFqdnId.Get(), o.DefaultTertiaryFqdnId.IsSet()
}

// HasDefaultTertiaryFqdnId returns a boolean if a field has been set.
func (o *InboundFqdn) HasDefaultTertiaryFqdnId() bool {
	if o != nil && o.DefaultTertiaryFqdnId.IsSet() {
		return true
	}

	return false
}

// SetDefaultTertiaryFqdnId gets a reference to the given NullableString and assigns it to the DefaultTertiaryFqdnId field.
func (o *InboundFqdn) SetDefaultTertiaryFqdnId(v string) {
	o.DefaultTertiaryFqdnId.Set(&v)
}
// SetDefaultTertiaryFqdnIdNil sets the value for DefaultTertiaryFqdnId to be an explicit nil
func (o *InboundFqdn) SetDefaultTertiaryFqdnIdNil() {
	o.DefaultTertiaryFqdnId.Set(nil)
}

// UnsetDefaultTertiaryFqdnId ensures that no value is present for DefaultTertiaryFqdnId, not even an explicit nil
func (o *InboundFqdn) UnsetDefaultTertiaryFqdnId() {
	o.DefaultTertiaryFqdnId.Unset()
}

// GetChannelLimit returns the ChannelLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InboundFqdn) GetChannelLimit() int32 {
	if o == nil || IsNil(o.ChannelLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.ChannelLimit.Get()
}

// GetChannelLimitOk returns a tuple with the ChannelLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InboundFqdn) GetChannelLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelLimit.Get(), o.ChannelLimit.IsSet()
}

// HasChannelLimit returns a boolean if a field has been set.
func (o *InboundFqdn) HasChannelLimit() bool {
	if o != nil && o.ChannelLimit.IsSet() {
		return true
	}

	return false
}

// SetChannelLimit gets a reference to the given NullableInt32 and assigns it to the ChannelLimit field.
func (o *InboundFqdn) SetChannelLimit(v int32) {
	o.ChannelLimit.Set(&v)
}
// SetChannelLimitNil sets the value for ChannelLimit to be an explicit nil
func (o *InboundFqdn) SetChannelLimitNil() {
	o.ChannelLimit.Set(nil)
}

// UnsetChannelLimit ensures that no value is present for ChannelLimit, not even an explicit nil
func (o *InboundFqdn) UnsetChannelLimit() {
	o.ChannelLimit.Unset()
}

// GetGenerateRingbackTone returns the GenerateRingbackTone field value if set, zero value otherwise.
func (o *InboundFqdn) GetGenerateRingbackTone() bool {
	if o == nil || IsNil(o.GenerateRingbackTone) {
		var ret bool
		return ret
	}
	return *o.GenerateRingbackTone
}

// GetGenerateRingbackToneOk returns a tuple with the GenerateRingbackTone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetGenerateRingbackToneOk() (*bool, bool) {
	if o == nil || IsNil(o.GenerateRingbackTone) {
		return nil, false
	}
	return o.GenerateRingbackTone, true
}

// HasGenerateRingbackTone returns a boolean if a field has been set.
func (o *InboundFqdn) HasGenerateRingbackTone() bool {
	if o != nil && !IsNil(o.GenerateRingbackTone) {
		return true
	}

	return false
}

// SetGenerateRingbackTone gets a reference to the given bool and assigns it to the GenerateRingbackTone field.
func (o *InboundFqdn) SetGenerateRingbackTone(v bool) {
	o.GenerateRingbackTone = &v
}

// GetIsupHeadersEnabled returns the IsupHeadersEnabled field value if set, zero value otherwise.
func (o *InboundFqdn) GetIsupHeadersEnabled() bool {
	if o == nil || IsNil(o.IsupHeadersEnabled) {
		var ret bool
		return ret
	}
	return *o.IsupHeadersEnabled
}

// GetIsupHeadersEnabledOk returns a tuple with the IsupHeadersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetIsupHeadersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsupHeadersEnabled) {
		return nil, false
	}
	return o.IsupHeadersEnabled, true
}

// HasIsupHeadersEnabled returns a boolean if a field has been set.
func (o *InboundFqdn) HasIsupHeadersEnabled() bool {
	if o != nil && !IsNil(o.IsupHeadersEnabled) {
		return true
	}

	return false
}

// SetIsupHeadersEnabled gets a reference to the given bool and assigns it to the IsupHeadersEnabled field.
func (o *InboundFqdn) SetIsupHeadersEnabled(v bool) {
	o.IsupHeadersEnabled = &v
}

// GetPrackEnabled returns the PrackEnabled field value if set, zero value otherwise.
func (o *InboundFqdn) GetPrackEnabled() bool {
	if o == nil || IsNil(o.PrackEnabled) {
		var ret bool
		return ret
	}
	return *o.PrackEnabled
}

// GetPrackEnabledOk returns a tuple with the PrackEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetPrackEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PrackEnabled) {
		return nil, false
	}
	return o.PrackEnabled, true
}

// HasPrackEnabled returns a boolean if a field has been set.
func (o *InboundFqdn) HasPrackEnabled() bool {
	if o != nil && !IsNil(o.PrackEnabled) {
		return true
	}

	return false
}

// SetPrackEnabled gets a reference to the given bool and assigns it to the PrackEnabled field.
func (o *InboundFqdn) SetPrackEnabled(v bool) {
	o.PrackEnabled = &v
}

// GetSipCompactHeadersEnabled returns the SipCompactHeadersEnabled field value if set, zero value otherwise.
func (o *InboundFqdn) GetSipCompactHeadersEnabled() bool {
	if o == nil || IsNil(o.SipCompactHeadersEnabled) {
		var ret bool
		return ret
	}
	return *o.SipCompactHeadersEnabled
}

// GetSipCompactHeadersEnabledOk returns a tuple with the SipCompactHeadersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetSipCompactHeadersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SipCompactHeadersEnabled) {
		return nil, false
	}
	return o.SipCompactHeadersEnabled, true
}

// HasSipCompactHeadersEnabled returns a boolean if a field has been set.
func (o *InboundFqdn) HasSipCompactHeadersEnabled() bool {
	if o != nil && !IsNil(o.SipCompactHeadersEnabled) {
		return true
	}

	return false
}

// SetSipCompactHeadersEnabled gets a reference to the given bool and assigns it to the SipCompactHeadersEnabled field.
func (o *InboundFqdn) SetSipCompactHeadersEnabled(v bool) {
	o.SipCompactHeadersEnabled = &v
}

// GetSipRegion returns the SipRegion field value if set, zero value otherwise.
func (o *InboundFqdn) GetSipRegion() string {
	if o == nil || IsNil(o.SipRegion) {
		var ret string
		return ret
	}
	return *o.SipRegion
}

// GetSipRegionOk returns a tuple with the SipRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetSipRegionOk() (*string, bool) {
	if o == nil || IsNil(o.SipRegion) {
		return nil, false
	}
	return o.SipRegion, true
}

// HasSipRegion returns a boolean if a field has been set.
func (o *InboundFqdn) HasSipRegion() bool {
	if o != nil && !IsNil(o.SipRegion) {
		return true
	}

	return false
}

// SetSipRegion gets a reference to the given string and assigns it to the SipRegion field.
func (o *InboundFqdn) SetSipRegion(v string) {
	o.SipRegion = &v
}

// GetSipSubdomain returns the SipSubdomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InboundFqdn) GetSipSubdomain() string {
	if o == nil || IsNil(o.SipSubdomain.Get()) {
		var ret string
		return ret
	}
	return *o.SipSubdomain.Get()
}

// GetSipSubdomainOk returns a tuple with the SipSubdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InboundFqdn) GetSipSubdomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SipSubdomain.Get(), o.SipSubdomain.IsSet()
}

// HasSipSubdomain returns a boolean if a field has been set.
func (o *InboundFqdn) HasSipSubdomain() bool {
	if o != nil && o.SipSubdomain.IsSet() {
		return true
	}

	return false
}

// SetSipSubdomain gets a reference to the given NullableString and assigns it to the SipSubdomain field.
func (o *InboundFqdn) SetSipSubdomain(v string) {
	o.SipSubdomain.Set(&v)
}
// SetSipSubdomainNil sets the value for SipSubdomain to be an explicit nil
func (o *InboundFqdn) SetSipSubdomainNil() {
	o.SipSubdomain.Set(nil)
}

// UnsetSipSubdomain ensures that no value is present for SipSubdomain, not even an explicit nil
func (o *InboundFqdn) UnsetSipSubdomain() {
	o.SipSubdomain.Unset()
}

// GetSipSubdomainReceiveSettings returns the SipSubdomainReceiveSettings field value if set, zero value otherwise.
func (o *InboundFqdn) GetSipSubdomainReceiveSettings() string {
	if o == nil || IsNil(o.SipSubdomainReceiveSettings) {
		var ret string
		return ret
	}
	return *o.SipSubdomainReceiveSettings
}

// GetSipSubdomainReceiveSettingsOk returns a tuple with the SipSubdomainReceiveSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetSipSubdomainReceiveSettingsOk() (*string, bool) {
	if o == nil || IsNil(o.SipSubdomainReceiveSettings) {
		return nil, false
	}
	return o.SipSubdomainReceiveSettings, true
}

// HasSipSubdomainReceiveSettings returns a boolean if a field has been set.
func (o *InboundFqdn) HasSipSubdomainReceiveSettings() bool {
	if o != nil && !IsNil(o.SipSubdomainReceiveSettings) {
		return true
	}

	return false
}

// SetSipSubdomainReceiveSettings gets a reference to the given string and assigns it to the SipSubdomainReceiveSettings field.
func (o *InboundFqdn) SetSipSubdomainReceiveSettings(v string) {
	o.SipSubdomainReceiveSettings = &v
}

// GetTimeout1xxSecs returns the Timeout1xxSecs field value if set, zero value otherwise.
func (o *InboundFqdn) GetTimeout1xxSecs() int32 {
	if o == nil || IsNil(o.Timeout1xxSecs) {
		var ret int32
		return ret
	}
	return *o.Timeout1xxSecs
}

// GetTimeout1xxSecsOk returns a tuple with the Timeout1xxSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetTimeout1xxSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout1xxSecs) {
		return nil, false
	}
	return o.Timeout1xxSecs, true
}

// HasTimeout1xxSecs returns a boolean if a field has been set.
func (o *InboundFqdn) HasTimeout1xxSecs() bool {
	if o != nil && !IsNil(o.Timeout1xxSecs) {
		return true
	}

	return false
}

// SetTimeout1xxSecs gets a reference to the given int32 and assigns it to the Timeout1xxSecs field.
func (o *InboundFqdn) SetTimeout1xxSecs(v int32) {
	o.Timeout1xxSecs = &v
}

// GetTimeout2xxSecs returns the Timeout2xxSecs field value if set, zero value otherwise.
func (o *InboundFqdn) GetTimeout2xxSecs() int32 {
	if o == nil || IsNil(o.Timeout2xxSecs) {
		var ret int32
		return ret
	}
	return *o.Timeout2xxSecs
}

// GetTimeout2xxSecsOk returns a tuple with the Timeout2xxSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetTimeout2xxSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout2xxSecs) {
		return nil, false
	}
	return o.Timeout2xxSecs, true
}

// HasTimeout2xxSecs returns a boolean if a field has been set.
func (o *InboundFqdn) HasTimeout2xxSecs() bool {
	if o != nil && !IsNil(o.Timeout2xxSecs) {
		return true
	}

	return false
}

// SetTimeout2xxSecs gets a reference to the given int32 and assigns it to the Timeout2xxSecs field.
func (o *InboundFqdn) SetTimeout2xxSecs(v int32) {
	o.Timeout2xxSecs = &v
}

// GetShakenStirEnabled returns the ShakenStirEnabled field value if set, zero value otherwise.
func (o *InboundFqdn) GetShakenStirEnabled() bool {
	if o == nil || IsNil(o.ShakenStirEnabled) {
		var ret bool
		return ret
	}
	return *o.ShakenStirEnabled
}

// GetShakenStirEnabledOk returns a tuple with the ShakenStirEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundFqdn) GetShakenStirEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ShakenStirEnabled) {
		return nil, false
	}
	return o.ShakenStirEnabled, true
}

// HasShakenStirEnabled returns a boolean if a field has been set.
func (o *InboundFqdn) HasShakenStirEnabled() bool {
	if o != nil && !IsNil(o.ShakenStirEnabled) {
		return true
	}

	return false
}

// SetShakenStirEnabled gets a reference to the given bool and assigns it to the ShakenStirEnabled field.
func (o *InboundFqdn) SetShakenStirEnabled(v bool) {
	o.ShakenStirEnabled = &v
}

func (o InboundFqdn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InboundFqdn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AniNumberFormat) {
		toSerialize["ani_number_format"] = o.AniNumberFormat
	}
	if !IsNil(o.DnisNumberFormat) {
		toSerialize["dnis_number_format"] = o.DnisNumberFormat
	}
	if !IsNil(o.Codecs) {
		toSerialize["codecs"] = o.Codecs
	}
	if o.DefaultRoutingMethod.IsSet() {
		toSerialize["default_routing_method"] = o.DefaultRoutingMethod.Get()
	}
	if o.DefaultPrimaryFqdnId.IsSet() {
		toSerialize["default_primary_fqdn_id"] = o.DefaultPrimaryFqdnId.Get()
	}
	if o.DefaultSecondaryFqdnId.IsSet() {
		toSerialize["default_secondary_fqdn_id"] = o.DefaultSecondaryFqdnId.Get()
	}
	if o.DefaultTertiaryFqdnId.IsSet() {
		toSerialize["default_tertiary_fqdn_id"] = o.DefaultTertiaryFqdnId.Get()
	}
	if o.ChannelLimit.IsSet() {
		toSerialize["channel_limit"] = o.ChannelLimit.Get()
	}
	if !IsNil(o.GenerateRingbackTone) {
		toSerialize["generate_ringback_tone"] = o.GenerateRingbackTone
	}
	if !IsNil(o.IsupHeadersEnabled) {
		toSerialize["isup_headers_enabled"] = o.IsupHeadersEnabled
	}
	if !IsNil(o.PrackEnabled) {
		toSerialize["prack_enabled"] = o.PrackEnabled
	}
	if !IsNil(o.SipCompactHeadersEnabled) {
		toSerialize["sip_compact_headers_enabled"] = o.SipCompactHeadersEnabled
	}
	if !IsNil(o.SipRegion) {
		toSerialize["sip_region"] = o.SipRegion
	}
	if o.SipSubdomain.IsSet() {
		toSerialize["sip_subdomain"] = o.SipSubdomain.Get()
	}
	if !IsNil(o.SipSubdomainReceiveSettings) {
		toSerialize["sip_subdomain_receive_settings"] = o.SipSubdomainReceiveSettings
	}
	if !IsNil(o.Timeout1xxSecs) {
		toSerialize["timeout_1xx_secs"] = o.Timeout1xxSecs
	}
	if !IsNil(o.Timeout2xxSecs) {
		toSerialize["timeout_2xx_secs"] = o.Timeout2xxSecs
	}
	if !IsNil(o.ShakenStirEnabled) {
		toSerialize["shaken_stir_enabled"] = o.ShakenStirEnabled
	}
	return toSerialize, nil
}

type NullableInboundFqdn struct {
	value *InboundFqdn
	isSet bool
}

func (v NullableInboundFqdn) Get() *InboundFqdn {
	return v.value
}

func (v *NullableInboundFqdn) Set(val *InboundFqdn) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundFqdn) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundFqdn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundFqdn(val *InboundFqdn) *NullableInboundFqdn {
	return &NullableInboundFqdn{value: val, isSet: true}
}

func (v NullableInboundFqdn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundFqdn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


