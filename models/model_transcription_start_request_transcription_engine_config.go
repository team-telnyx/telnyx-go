/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TranscriptionStartRequestTranscriptionEngineConfig - struct for TranscriptionStartRequestTranscriptionEngineConfig
type TranscriptionStartRequestTranscriptionEngineConfig struct {
	TranscriptionEngineAConfig *TranscriptionEngineAConfig
	TranscriptionEngineBConfig *TranscriptionEngineBConfig
}

// TranscriptionEngineAConfigAsTranscriptionStartRequestTranscriptionEngineConfig is a convenience function that returns TranscriptionEngineAConfig wrapped in TranscriptionStartRequestTranscriptionEngineConfig
func TranscriptionEngineAConfigAsTranscriptionStartRequestTranscriptionEngineConfig(v *TranscriptionEngineAConfig) TranscriptionStartRequestTranscriptionEngineConfig {
	return TranscriptionStartRequestTranscriptionEngineConfig{
		TranscriptionEngineAConfig: v,
	}
}

// TranscriptionEngineBConfigAsTranscriptionStartRequestTranscriptionEngineConfig is a convenience function that returns TranscriptionEngineBConfig wrapped in TranscriptionStartRequestTranscriptionEngineConfig
func TranscriptionEngineBConfigAsTranscriptionStartRequestTranscriptionEngineConfig(v *TranscriptionEngineBConfig) TranscriptionStartRequestTranscriptionEngineConfig {
	return TranscriptionStartRequestTranscriptionEngineConfig{
		TranscriptionEngineBConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TranscriptionStartRequestTranscriptionEngineConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TranscriptionEngineAConfig
	err = newStrictDecoder(data).Decode(&dst.TranscriptionEngineAConfig)
	if err == nil {
		jsonTranscriptionEngineAConfig, _ := json.Marshal(dst.TranscriptionEngineAConfig)
		if string(jsonTranscriptionEngineAConfig) == "{}" { // empty struct
			dst.TranscriptionEngineAConfig = nil
		} else {
			if err = validator.Validate(dst.TranscriptionEngineAConfig); err != nil {
				dst.TranscriptionEngineAConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.TranscriptionEngineAConfig = nil
	}

	// try to unmarshal data into TranscriptionEngineBConfig
	err = newStrictDecoder(data).Decode(&dst.TranscriptionEngineBConfig)
	if err == nil {
		jsonTranscriptionEngineBConfig, _ := json.Marshal(dst.TranscriptionEngineBConfig)
		if string(jsonTranscriptionEngineBConfig) == "{}" { // empty struct
			dst.TranscriptionEngineBConfig = nil
		} else {
			if err = validator.Validate(dst.TranscriptionEngineBConfig); err != nil {
				dst.TranscriptionEngineBConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.TranscriptionEngineBConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TranscriptionEngineAConfig = nil
		dst.TranscriptionEngineBConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TranscriptionStartRequestTranscriptionEngineConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TranscriptionStartRequestTranscriptionEngineConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TranscriptionStartRequestTranscriptionEngineConfig) MarshalJSON() ([]byte, error) {
	if src.TranscriptionEngineAConfig != nil {
		return json.Marshal(&src.TranscriptionEngineAConfig)
	}

	if src.TranscriptionEngineBConfig != nil {
		return json.Marshal(&src.TranscriptionEngineBConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TranscriptionStartRequestTranscriptionEngineConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TranscriptionEngineAConfig != nil {
		return obj.TranscriptionEngineAConfig
	}

	if obj.TranscriptionEngineBConfig != nil {
		return obj.TranscriptionEngineBConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TranscriptionStartRequestTranscriptionEngineConfig) GetActualInstanceValue() (interface{}) {
	if obj.TranscriptionEngineAConfig != nil {
		return *obj.TranscriptionEngineAConfig
	}

	if obj.TranscriptionEngineBConfig != nil {
		return *obj.TranscriptionEngineBConfig
	}

	// all schemas are nil
	return nil
}

type NullableTranscriptionStartRequestTranscriptionEngineConfig struct {
	value *TranscriptionStartRequestTranscriptionEngineConfig
	isSet bool
}

func (v NullableTranscriptionStartRequestTranscriptionEngineConfig) Get() *TranscriptionStartRequestTranscriptionEngineConfig {
	return v.value
}

func (v *NullableTranscriptionStartRequestTranscriptionEngineConfig) Set(val *TranscriptionStartRequestTranscriptionEngineConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionStartRequestTranscriptionEngineConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionStartRequestTranscriptionEngineConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionStartRequestTranscriptionEngineConfig(val *TranscriptionStartRequestTranscriptionEngineConfig) *NullableTranscriptionStartRequestTranscriptionEngineConfig {
	return &NullableTranscriptionStartRequestTranscriptionEngineConfig{value: val, isSet: true}
}

func (v NullableTranscriptionStartRequestTranscriptionEngineConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionStartRequestTranscriptionEngineConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


