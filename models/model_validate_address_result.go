/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidateAddressResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateAddressResult{}

// ValidateAddressResult struct for ValidateAddressResult
type ValidateAddressResult struct {
	// Indicates whether an address is valid or invalid.
	Result string `json:"result"`
	Suggested ValidateAddressField `json:"suggested"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	Errors []Error `json:"errors,omitempty"`
}

type _ValidateAddressResult ValidateAddressResult

// NewValidateAddressResult instantiates a new ValidateAddressResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateAddressResult(result string, suggested ValidateAddressField) *ValidateAddressResult {
	this := ValidateAddressResult{}
	this.Result = result
	this.Suggested = suggested
	return &this
}

// NewValidateAddressResultWithDefaults instantiates a new ValidateAddressResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateAddressResultWithDefaults() *ValidateAddressResult {
	this := ValidateAddressResult{}
	return &this
}

// GetResult returns the Result field value
func (o *ValidateAddressResult) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressResult) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *ValidateAddressResult) SetResult(v string) {
	o.Result = v
}

// GetSuggested returns the Suggested field value
func (o *ValidateAddressResult) GetSuggested() ValidateAddressField {
	if o == nil {
		var ret ValidateAddressField
		return ret
	}

	return o.Suggested
}

// GetSuggestedOk returns a tuple with the Suggested field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressResult) GetSuggestedOk() (ValidateAddressField, bool) {
	if o == nil {
		return ValidateAddressField{}, false
	}
	return o.Suggested, true
}

// SetSuggested sets field value
func (o *ValidateAddressResult) SetSuggested(v ValidateAddressField) {
	o.Suggested = v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *ValidateAddressResult) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressResult) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *ValidateAddressResult) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *ValidateAddressResult) SetRecordType(v string) {
	o.RecordType = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ValidateAddressResult) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressResult) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ValidateAddressResult) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *ValidateAddressResult) SetErrors(v []Error) {
	o.Errors = v
}

func (o ValidateAddressResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateAddressResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["suggested"] = o.Suggested
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *ValidateAddressResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"suggested",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidateAddressResult := _ValidateAddressResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidateAddressResult)

	if err != nil {
		return err
	}

	*o = ValidateAddressResult(varValidateAddressResult)

	return err
}

type NullableValidateAddressResult struct {
	value *ValidateAddressResult
	isSet bool
}

func (v NullableValidateAddressResult) Get() *ValidateAddressResult {
	return v.value
}

func (v *NullableValidateAddressResult) Set(val *ValidateAddressResult) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateAddressResult) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateAddressResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateAddressResult(val *ValidateAddressResult) *NullableValidateAddressResult {
	return &NullableValidateAddressResult{value: val, isSet: true}
}

func (v NullableValidateAddressResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateAddressResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


