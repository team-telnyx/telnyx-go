/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferenceCommandResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceCommandResponse{}

// ConferenceCommandResponse struct for ConferenceCommandResponse
type ConferenceCommandResponse struct {
	Data *ConferenceCommandResult `json:"data,omitempty"`
}

// NewConferenceCommandResponse instantiates a new ConferenceCommandResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceCommandResponse() *ConferenceCommandResponse {
	this := ConferenceCommandResponse{}
	return &this
}

// NewConferenceCommandResponseWithDefaults instantiates a new ConferenceCommandResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceCommandResponseWithDefaults() *ConferenceCommandResponse {
	this := ConferenceCommandResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConferenceCommandResponse) GetData() ConferenceCommandResult {
	if o == nil || IsNil(o.Data) {
		var ret ConferenceCommandResult
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceCommandResponse) GetDataOk() (*ConferenceCommandResult, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConferenceCommandResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ConferenceCommandResult and assigns it to the Data field.
func (o *ConferenceCommandResponse) SetData(v ConferenceCommandResult) {
	o.Data = &v
}

func (o ConferenceCommandResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceCommandResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableConferenceCommandResponse struct {
	value *ConferenceCommandResponse
	isSet bool
}

func (v NullableConferenceCommandResponse) Get() *ConferenceCommandResponse {
	return v.value
}

func (v *NullableConferenceCommandResponse) Set(val *ConferenceCommandResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceCommandResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceCommandResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceCommandResponse(val *ConferenceCommandResponse) *NullableConferenceCommandResponse {
	return &NullableConferenceCommandResponse{value: val, isSet: true}
}

func (v NullableConferenceCommandResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceCommandResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


