/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MessageDetailRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageDetailRecord{}

// MessageDetailRecord struct for MessageDetailRecord
type MessageDetailRecord struct {
	// Unique identifier of the message
	Uuid *string `json:"uuid,omitempty"`
	// Identifier of the Telnyx account who owns the message
	UserId *string `json:"user_id,omitempty"`
	// Message completion time
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Message creation time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Message updated time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Time when the message was sent
	SentAt *time.Time `json:"sent_at,omitempty"`
	// Country-specific carrier used to send or receive the message
	Carrier *string `json:"carrier,omitempty"`
	// Fee charged by certain carriers in order to deliver certain message types. Telnyx passes this fee on to the customer according to our pricing table
	CarrierFee *string `json:"carrier_fee,omitempty"`
	// The recipient of the message (to parameter in the Messaging API)
	Cld *string `json:"cld,omitempty"`
	// The sender of the message (from parameter in the Messaging API). For Alphanumeric ID messages, this is the sender ID value
	Cli *string `json:"cli,omitempty"`
	// Two-letter representation of the country of the cld property using the ISO 3166-1 alpha-2 format
	CountryCode *string `json:"country_code,omitempty"`
	// Final webhook delivery status
	DeliveryStatus *string `json:"delivery_status,omitempty"`
	// Failover customer-provided URL which Telnyx posts delivery status webhooks to
	DeliveryStatusFailoverUrl *string `json:"delivery_status_failover_url,omitempty"`
	// Primary customer-provided URL which Telnyx posts delivery status webhooks to
	DeliveryStatusWebhookUrl *string `json:"delivery_status_webhook_url,omitempty"`
	// Logical direction of the message from the Telnyx customer's perspective. It's inbound when the Telnyx customer receives the message, or outbound otherwise
	Direction *string `json:"direction,omitempty"`
	// Indicates whether this is a Free-To-End-User (FTEU) short code message
	Fteu *bool `json:"fteu,omitempty"`
	// Mobile country code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID
	Mcc *string `json:"mcc,omitempty"`
	// Mobile network code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID
	Mnc *string `json:"mnc,omitempty"`
	// Describes the Messaging service used to send the message. Available services are: Short Message Service (SMS), Multimedia Messaging Service (MMS), and Rich Communication Services (RCS)
	MessageType *string `json:"message_type,omitempty"`
	// Indicates whether both sender and recipient numbers are Telnyx-managed
	OnNet *bool `json:"on_net,omitempty"`
	// Unique identifier of the Messaging Profile used to send or receive the message
	ProfileId *string `json:"profile_id,omitempty"`
	// Name of the Messaging Profile used to send or receive the message
	ProfileName *string `json:"profile_name,omitempty"`
	// Two-letter representation of the country of the cli property using the ISO 3166-1 alpha-2 format
	SourceCountryCode *string `json:"source_country_code,omitempty"`
	// Final status of the message after the delivery attempt
	Status *string `json:"status,omitempty"`
	// Comma-separated tags assigned to the Telnyx number associated with the message
	Tags *string `json:"tags,omitempty"`
	// Currency amount per billing unit used to calculate the Telnyx billing cost
	Rate *string `json:"rate,omitempty"`
	// Telnyx account currency used to describe monetary values, including billing cost
	Currency *string `json:"currency,omitempty"`
	// Amount, in the user currency, for the Telnyx billing cost
	Cost *string `json:"cost,omitempty"`
	// Telnyx API error codes returned by the Telnyx gateway
	Errors []string `json:"errors,omitempty"`
	// Number of message parts. The message is broken down in multiple parts when its length surpasses the limit of 160 characters
	Parts *int32 `json:"parts,omitempty"`
	// Identifies the record schema
	RecordType string `json:"record_type"`
}

type _MessageDetailRecord MessageDetailRecord

// NewMessageDetailRecord instantiates a new MessageDetailRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageDetailRecord(recordType string) *MessageDetailRecord {
	this := MessageDetailRecord{}
	this.RecordType = recordType
	return &this
}

// NewMessageDetailRecordWithDefaults instantiates a new MessageDetailRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageDetailRecordWithDefaults() *MessageDetailRecord {
	this := MessageDetailRecord{}
	var recordType string = "message_detail_record"
	this.RecordType = recordType
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MessageDetailRecord) SetUuid(v string) {
	o.Uuid = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *MessageDetailRecord) SetUserId(v string) {
	o.UserId = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *MessageDetailRecord) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *MessageDetailRecord) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *MessageDetailRecord) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetSentAt() time.Time {
	if o == nil || IsNil(o.SentAt) {
		var ret time.Time
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetSentAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasSentAt() bool {
	if o != nil && !IsNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given time.Time and assigns it to the SentAt field.
func (o *MessageDetailRecord) SetSentAt(v time.Time) {
	o.SentAt = &v
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCarrier() string {
	if o == nil || IsNil(o.Carrier) {
		var ret string
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCarrierOk() (*string, bool) {
	if o == nil || IsNil(o.Carrier) {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCarrier() bool {
	if o != nil && !IsNil(o.Carrier) {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given string and assigns it to the Carrier field.
func (o *MessageDetailRecord) SetCarrier(v string) {
	o.Carrier = &v
}

// GetCarrierFee returns the CarrierFee field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCarrierFee() string {
	if o == nil || IsNil(o.CarrierFee) {
		var ret string
		return ret
	}
	return *o.CarrierFee
}

// GetCarrierFeeOk returns a tuple with the CarrierFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCarrierFeeOk() (*string, bool) {
	if o == nil || IsNil(o.CarrierFee) {
		return nil, false
	}
	return o.CarrierFee, true
}

// HasCarrierFee returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCarrierFee() bool {
	if o != nil && !IsNil(o.CarrierFee) {
		return true
	}

	return false
}

// SetCarrierFee gets a reference to the given string and assigns it to the CarrierFee field.
func (o *MessageDetailRecord) SetCarrierFee(v string) {
	o.CarrierFee = &v
}

// GetCld returns the Cld field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCld() string {
	if o == nil || IsNil(o.Cld) {
		var ret string
		return ret
	}
	return *o.Cld
}

// GetCldOk returns a tuple with the Cld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCldOk() (*string, bool) {
	if o == nil || IsNil(o.Cld) {
		return nil, false
	}
	return o.Cld, true
}

// HasCld returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCld() bool {
	if o != nil && !IsNil(o.Cld) {
		return true
	}

	return false
}

// SetCld gets a reference to the given string and assigns it to the Cld field.
func (o *MessageDetailRecord) SetCld(v string) {
	o.Cld = &v
}

// GetCli returns the Cli field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCli() string {
	if o == nil || IsNil(o.Cli) {
		var ret string
		return ret
	}
	return *o.Cli
}

// GetCliOk returns a tuple with the Cli field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCliOk() (*string, bool) {
	if o == nil || IsNil(o.Cli) {
		return nil, false
	}
	return o.Cli, true
}

// HasCli returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCli() bool {
	if o != nil && !IsNil(o.Cli) {
		return true
	}

	return false
}

// SetCli gets a reference to the given string and assigns it to the Cli field.
func (o *MessageDetailRecord) SetCli(v string) {
	o.Cli = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *MessageDetailRecord) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetDeliveryStatus returns the DeliveryStatus field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetDeliveryStatus() string {
	if o == nil || IsNil(o.DeliveryStatus) {
		var ret string
		return ret
	}
	return *o.DeliveryStatus
}

// GetDeliveryStatusOk returns a tuple with the DeliveryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetDeliveryStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryStatus) {
		return nil, false
	}
	return o.DeliveryStatus, true
}

// HasDeliveryStatus returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasDeliveryStatus() bool {
	if o != nil && !IsNil(o.DeliveryStatus) {
		return true
	}

	return false
}

// SetDeliveryStatus gets a reference to the given string and assigns it to the DeliveryStatus field.
func (o *MessageDetailRecord) SetDeliveryStatus(v string) {
	o.DeliveryStatus = &v
}

// GetDeliveryStatusFailoverUrl returns the DeliveryStatusFailoverUrl field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetDeliveryStatusFailoverUrl() string {
	if o == nil || IsNil(o.DeliveryStatusFailoverUrl) {
		var ret string
		return ret
	}
	return *o.DeliveryStatusFailoverUrl
}

// GetDeliveryStatusFailoverUrlOk returns a tuple with the DeliveryStatusFailoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetDeliveryStatusFailoverUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryStatusFailoverUrl) {
		return nil, false
	}
	return o.DeliveryStatusFailoverUrl, true
}

// HasDeliveryStatusFailoverUrl returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasDeliveryStatusFailoverUrl() bool {
	if o != nil && !IsNil(o.DeliveryStatusFailoverUrl) {
		return true
	}

	return false
}

// SetDeliveryStatusFailoverUrl gets a reference to the given string and assigns it to the DeliveryStatusFailoverUrl field.
func (o *MessageDetailRecord) SetDeliveryStatusFailoverUrl(v string) {
	o.DeliveryStatusFailoverUrl = &v
}

// GetDeliveryStatusWebhookUrl returns the DeliveryStatusWebhookUrl field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetDeliveryStatusWebhookUrl() string {
	if o == nil || IsNil(o.DeliveryStatusWebhookUrl) {
		var ret string
		return ret
	}
	return *o.DeliveryStatusWebhookUrl
}

// GetDeliveryStatusWebhookUrlOk returns a tuple with the DeliveryStatusWebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetDeliveryStatusWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryStatusWebhookUrl) {
		return nil, false
	}
	return o.DeliveryStatusWebhookUrl, true
}

// HasDeliveryStatusWebhookUrl returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasDeliveryStatusWebhookUrl() bool {
	if o != nil && !IsNil(o.DeliveryStatusWebhookUrl) {
		return true
	}

	return false
}

// SetDeliveryStatusWebhookUrl gets a reference to the given string and assigns it to the DeliveryStatusWebhookUrl field.
func (o *MessageDetailRecord) SetDeliveryStatusWebhookUrl(v string) {
	o.DeliveryStatusWebhookUrl = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *MessageDetailRecord) SetDirection(v string) {
	o.Direction = &v
}

// GetFteu returns the Fteu field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetFteu() bool {
	if o == nil || IsNil(o.Fteu) {
		var ret bool
		return ret
	}
	return *o.Fteu
}

// GetFteuOk returns a tuple with the Fteu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetFteuOk() (*bool, bool) {
	if o == nil || IsNil(o.Fteu) {
		return nil, false
	}
	return o.Fteu, true
}

// HasFteu returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasFteu() bool {
	if o != nil && !IsNil(o.Fteu) {
		return true
	}

	return false
}

// SetFteu gets a reference to the given bool and assigns it to the Fteu field.
func (o *MessageDetailRecord) SetFteu(v bool) {
	o.Fteu = &v
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetMcc() string {
	if o == nil || IsNil(o.Mcc) {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetMccOk() (*string, bool) {
	if o == nil || IsNil(o.Mcc) {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasMcc() bool {
	if o != nil && !IsNil(o.Mcc) {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *MessageDetailRecord) SetMcc(v string) {
	o.Mcc = &v
}

// GetMnc returns the Mnc field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetMnc() string {
	if o == nil || IsNil(o.Mnc) {
		var ret string
		return ret
	}
	return *o.Mnc
}

// GetMncOk returns a tuple with the Mnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetMncOk() (*string, bool) {
	if o == nil || IsNil(o.Mnc) {
		return nil, false
	}
	return o.Mnc, true
}

// HasMnc returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasMnc() bool {
	if o != nil && !IsNil(o.Mnc) {
		return true
	}

	return false
}

// SetMnc gets a reference to the given string and assigns it to the Mnc field.
func (o *MessageDetailRecord) SetMnc(v string) {
	o.Mnc = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *MessageDetailRecord) SetMessageType(v string) {
	o.MessageType = &v
}

// GetOnNet returns the OnNet field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetOnNet() bool {
	if o == nil || IsNil(o.OnNet) {
		var ret bool
		return ret
	}
	return *o.OnNet
}

// GetOnNetOk returns a tuple with the OnNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetOnNetOk() (*bool, bool) {
	if o == nil || IsNil(o.OnNet) {
		return nil, false
	}
	return o.OnNet, true
}

// HasOnNet returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasOnNet() bool {
	if o != nil && !IsNil(o.OnNet) {
		return true
	}

	return false
}

// SetOnNet gets a reference to the given bool and assigns it to the OnNet field.
func (o *MessageDetailRecord) SetOnNet(v bool) {
	o.OnNet = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetProfileId() string {
	if o == nil || IsNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *MessageDetailRecord) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *MessageDetailRecord) SetProfileName(v string) {
	o.ProfileName = &v
}

// GetSourceCountryCode returns the SourceCountryCode field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetSourceCountryCode() string {
	if o == nil || IsNil(o.SourceCountryCode) {
		var ret string
		return ret
	}
	return *o.SourceCountryCode
}

// GetSourceCountryCodeOk returns a tuple with the SourceCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetSourceCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCountryCode) {
		return nil, false
	}
	return o.SourceCountryCode, true
}

// HasSourceCountryCode returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasSourceCountryCode() bool {
	if o != nil && !IsNil(o.SourceCountryCode) {
		return true
	}

	return false
}

// SetSourceCountryCode gets a reference to the given string and assigns it to the SourceCountryCode field.
func (o *MessageDetailRecord) SetSourceCountryCode(v string) {
	o.SourceCountryCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MessageDetailRecord) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *MessageDetailRecord) SetTags(v string) {
	o.Tags = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetRate() string {
	if o == nil || IsNil(o.Rate) {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetRateOk() (*string, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *MessageDetailRecord) SetRate(v string) {
	o.Rate = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *MessageDetailRecord) SetCurrency(v string) {
	o.Currency = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetCost() string {
	if o == nil || IsNil(o.Cost) {
		var ret string
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetCostOk() (*string, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given string and assigns it to the Cost field.
func (o *MessageDetailRecord) SetCost(v string) {
	o.Cost = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *MessageDetailRecord) SetErrors(v []string) {
	o.Errors = v
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *MessageDetailRecord) GetParts() int32 {
	if o == nil || IsNil(o.Parts) {
		var ret int32
		return ret
	}
	return *o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetPartsOk() (*int32, bool) {
	if o == nil || IsNil(o.Parts) {
		return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *MessageDetailRecord) HasParts() bool {
	if o != nil && !IsNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given int32 and assigns it to the Parts field.
func (o *MessageDetailRecord) SetParts(v int32) {
	o.Parts = &v
}

// GetRecordType returns the RecordType field value
func (o *MessageDetailRecord) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *MessageDetailRecord) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *MessageDetailRecord) SetRecordType(v string) {
	o.RecordType = v
}

func (o MessageDetailRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageDetailRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.SentAt) {
		toSerialize["sent_at"] = o.SentAt
	}
	if !IsNil(o.Carrier) {
		toSerialize["carrier"] = o.Carrier
	}
	if !IsNil(o.CarrierFee) {
		toSerialize["carrier_fee"] = o.CarrierFee
	}
	if !IsNil(o.Cld) {
		toSerialize["cld"] = o.Cld
	}
	if !IsNil(o.Cli) {
		toSerialize["cli"] = o.Cli
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.DeliveryStatus) {
		toSerialize["delivery_status"] = o.DeliveryStatus
	}
	if !IsNil(o.DeliveryStatusFailoverUrl) {
		toSerialize["delivery_status_failover_url"] = o.DeliveryStatusFailoverUrl
	}
	if !IsNil(o.DeliveryStatusWebhookUrl) {
		toSerialize["delivery_status_webhook_url"] = o.DeliveryStatusWebhookUrl
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Fteu) {
		toSerialize["fteu"] = o.Fteu
	}
	if !IsNil(o.Mcc) {
		toSerialize["mcc"] = o.Mcc
	}
	if !IsNil(o.Mnc) {
		toSerialize["mnc"] = o.Mnc
	}
	if !IsNil(o.MessageType) {
		toSerialize["message_type"] = o.MessageType
	}
	if !IsNil(o.OnNet) {
		toSerialize["on_net"] = o.OnNet
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profile_id"] = o.ProfileId
	}
	if !IsNil(o.ProfileName) {
		toSerialize["profile_name"] = o.ProfileName
	}
	if !IsNil(o.SourceCountryCode) {
		toSerialize["source_country_code"] = o.SourceCountryCode
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Parts) {
		toSerialize["parts"] = o.Parts
	}
	toSerialize["record_type"] = o.RecordType
	return toSerialize, nil
}

func (o *MessageDetailRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageDetailRecord := _MessageDetailRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageDetailRecord)

	if err != nil {
		return err
	}

	*o = MessageDetailRecord(varMessageDetailRecord)

	return err
}

type NullableMessageDetailRecord struct {
	value *MessageDetailRecord
	isSet bool
}

func (v NullableMessageDetailRecord) Get() *MessageDetailRecord {
	return v.value
}

func (v *NullableMessageDetailRecord) Set(val *MessageDetailRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDetailRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDetailRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDetailRecord(val *MessageDetailRecord) *NullableMessageDetailRecord {
	return &NullableMessageDetailRecord{value: val, isSet: true}
}

func (v NullableMessageDetailRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDetailRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


