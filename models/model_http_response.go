/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the HttpResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpResponse{}

// HttpResponse Response details, optional.
type HttpResponse struct {
	Status *int32 `json:"status,omitempty"`
	// List of headers, limited to 10kB.
	Headers [][]string `json:"headers,omitempty"`
	// Raw response body, limited to 10kB.
	Body *string `json:"body,omitempty"`
}

// NewHttpResponse instantiates a new HttpResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpResponse() *HttpResponse {
	this := HttpResponse{}
	return &this
}

// NewHttpResponseWithDefaults instantiates a new HttpResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpResponseWithDefaults() *HttpResponse {
	this := HttpResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HttpResponse) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpResponse) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HttpResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *HttpResponse) SetStatus(v int32) {
	o.Status = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpResponse) GetHeaders() [][]string {
	if o == nil || IsNil(o.Headers) {
		var ret [][]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpResponse) GetHeadersOk() ([][]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpResponse) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given [][]string and assigns it to the Headers field.
func (o *HttpResponse) SetHeaders(v [][]string) {
	o.Headers = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *HttpResponse) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpResponse) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *HttpResponse) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *HttpResponse) SetBody(v string) {
	o.Body = &v
}

func (o HttpResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	return toSerialize, nil
}

type NullableHttpResponse struct {
	value *HttpResponse
	isSet bool
}

func (v NullableHttpResponse) Get() *HttpResponse {
	return v.value
}

func (v *NullableHttpResponse) Set(val *HttpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpResponse(val *HttpResponse) *NullableHttpResponse {
	return &NullableHttpResponse{value: val, isSet: true}
}

func (v NullableHttpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


