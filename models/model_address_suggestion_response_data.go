/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the AddressSuggestionResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressSuggestionResponseData{}

// AddressSuggestionResponseData struct for AddressSuggestionResponseData
type AddressSuggestionResponseData struct {
	// Indicates if the address suggestions are accepted.
	Accepted *bool `json:"accepted,omitempty"`
	// The UUID of the location.
	Id *string `json:"id,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
}

// NewAddressSuggestionResponseData instantiates a new AddressSuggestionResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressSuggestionResponseData() *AddressSuggestionResponseData {
	this := AddressSuggestionResponseData{}
	return &this
}

// NewAddressSuggestionResponseDataWithDefaults instantiates a new AddressSuggestionResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressSuggestionResponseDataWithDefaults() *AddressSuggestionResponseData {
	this := AddressSuggestionResponseData{}
	return &this
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *AddressSuggestionResponseData) GetAccepted() bool {
	if o == nil || IsNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressSuggestionResponseData) GetAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *AddressSuggestionResponseData) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *AddressSuggestionResponseData) SetAccepted(v bool) {
	o.Accepted = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddressSuggestionResponseData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressSuggestionResponseData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddressSuggestionResponseData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddressSuggestionResponseData) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *AddressSuggestionResponseData) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressSuggestionResponseData) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *AddressSuggestionResponseData) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *AddressSuggestionResponseData) SetRecordType(v string) {
	o.RecordType = &v
}

func (o AddressSuggestionResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressSuggestionResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullableAddressSuggestionResponseData struct {
	value *AddressSuggestionResponseData
	isSet bool
}

func (v NullableAddressSuggestionResponseData) Get() *AddressSuggestionResponseData {
	return v.value
}

func (v *NullableAddressSuggestionResponseData) Set(val *AddressSuggestionResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressSuggestionResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressSuggestionResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressSuggestionResponseData(val *AddressSuggestionResponseData) *NullableAddressSuggestionResponseData {
	return &NullableAddressSuggestionResponseData{value: val, isSet: true}
}

func (v NullableAddressSuggestionResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressSuggestionResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


