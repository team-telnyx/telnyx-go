/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the PurchaseESim202Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseESim202Response{}

// PurchaseESim202Response struct for PurchaseESim202Response
type PurchaseESim202Response struct {
	// Successfully registered SIM cards.
	Data []SimpleSIMCard `json:"data,omitempty"`
	Errors []Error `json:"errors,omitempty"`
}

// NewPurchaseESim202Response instantiates a new PurchaseESim202Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseESim202Response() *PurchaseESim202Response {
	this := PurchaseESim202Response{}
	return &this
}

// NewPurchaseESim202ResponseWithDefaults instantiates a new PurchaseESim202Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseESim202ResponseWithDefaults() *PurchaseESim202Response {
	this := PurchaseESim202Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PurchaseESim202Response) GetData() []SimpleSIMCard {
	if o == nil || IsNil(o.Data) {
		var ret []SimpleSIMCard
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseESim202Response) GetDataOk() ([]SimpleSIMCard, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PurchaseESim202Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []SimpleSIMCard and assigns it to the Data field.
func (o *PurchaseESim202Response) SetData(v []SimpleSIMCard) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *PurchaseESim202Response) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseESim202Response) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *PurchaseESim202Response) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *PurchaseESim202Response) SetErrors(v []Error) {
	o.Errors = v
}

func (o PurchaseESim202Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseESim202Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullablePurchaseESim202Response struct {
	value *PurchaseESim202Response
	isSet bool
}

func (v NullablePurchaseESim202Response) Get() *PurchaseESim202Response {
	return v.value
}

func (v *NullablePurchaseESim202Response) Set(val *PurchaseESim202Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseESim202Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseESim202Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseESim202Response(val *PurchaseESim202Response) *NullablePurchaseESim202Response {
	return &NullablePurchaseESim202Response{value: val, isSet: true}
}

func (v NullablePurchaseESim202Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseESim202Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


