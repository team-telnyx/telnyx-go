/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the OutboundCallRecording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutboundCallRecording{}

// OutboundCallRecording struct for OutboundCallRecording
type OutboundCallRecording struct {
	// Specifies which calls are recorded.
	CallRecordingType *string `json:"call_recording_type,omitempty"`
	// When call_recording_type is 'by_caller_phone_number', only outbound calls using one of these numbers will be recorded. Numbers must be specified in E164 format.
	CallRecordingCallerPhoneNumbers []string `json:"call_recording_caller_phone_numbers,omitempty"`
	// When using 'dual' channels, the final audio file will be a stereo recording with the first leg on channel A, and the rest on channel B.
	CallRecordingChannels *string `json:"call_recording_channels,omitempty"`
	// The audio file format for calls being recorded.
	CallRecordingFormat *string `json:"call_recording_format,omitempty"`
}

// NewOutboundCallRecording instantiates a new OutboundCallRecording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutboundCallRecording() *OutboundCallRecording {
	this := OutboundCallRecording{}
	var callRecordingChannels string = "single"
	this.CallRecordingChannels = &callRecordingChannels
	var callRecordingFormat string = "wav"
	this.CallRecordingFormat = &callRecordingFormat
	return &this
}

// NewOutboundCallRecordingWithDefaults instantiates a new OutboundCallRecording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutboundCallRecordingWithDefaults() *OutboundCallRecording {
	this := OutboundCallRecording{}
	var callRecordingChannels string = "single"
	this.CallRecordingChannels = &callRecordingChannels
	var callRecordingFormat string = "wav"
	this.CallRecordingFormat = &callRecordingFormat
	return &this
}

// GetCallRecordingType returns the CallRecordingType field value if set, zero value otherwise.
func (o *OutboundCallRecording) GetCallRecordingType() string {
	if o == nil || IsNil(o.CallRecordingType) {
		var ret string
		return ret
	}
	return *o.CallRecordingType
}

// GetCallRecordingTypeOk returns a tuple with the CallRecordingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundCallRecording) GetCallRecordingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CallRecordingType) {
		return nil, false
	}
	return o.CallRecordingType, true
}

// HasCallRecordingType returns a boolean if a field has been set.
func (o *OutboundCallRecording) HasCallRecordingType() bool {
	if o != nil && !IsNil(o.CallRecordingType) {
		return true
	}

	return false
}

// SetCallRecordingType gets a reference to the given string and assigns it to the CallRecordingType field.
func (o *OutboundCallRecording) SetCallRecordingType(v string) {
	o.CallRecordingType = &v
}

// GetCallRecordingCallerPhoneNumbers returns the CallRecordingCallerPhoneNumbers field value if set, zero value otherwise.
func (o *OutboundCallRecording) GetCallRecordingCallerPhoneNumbers() []string {
	if o == nil || IsNil(o.CallRecordingCallerPhoneNumbers) {
		var ret []string
		return ret
	}
	return o.CallRecordingCallerPhoneNumbers
}

// GetCallRecordingCallerPhoneNumbersOk returns a tuple with the CallRecordingCallerPhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundCallRecording) GetCallRecordingCallerPhoneNumbersOk() ([]string, bool) {
	if o == nil || IsNil(o.CallRecordingCallerPhoneNumbers) {
		return nil, false
	}
	return o.CallRecordingCallerPhoneNumbers, true
}

// HasCallRecordingCallerPhoneNumbers returns a boolean if a field has been set.
func (o *OutboundCallRecording) HasCallRecordingCallerPhoneNumbers() bool {
	if o != nil && !IsNil(o.CallRecordingCallerPhoneNumbers) {
		return true
	}

	return false
}

// SetCallRecordingCallerPhoneNumbers gets a reference to the given []string and assigns it to the CallRecordingCallerPhoneNumbers field.
func (o *OutboundCallRecording) SetCallRecordingCallerPhoneNumbers(v []string) {
	o.CallRecordingCallerPhoneNumbers = v
}

// GetCallRecordingChannels returns the CallRecordingChannels field value if set, zero value otherwise.
func (o *OutboundCallRecording) GetCallRecordingChannels() string {
	if o == nil || IsNil(o.CallRecordingChannels) {
		var ret string
		return ret
	}
	return *o.CallRecordingChannels
}

// GetCallRecordingChannelsOk returns a tuple with the CallRecordingChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundCallRecording) GetCallRecordingChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.CallRecordingChannels) {
		return nil, false
	}
	return o.CallRecordingChannels, true
}

// HasCallRecordingChannels returns a boolean if a field has been set.
func (o *OutboundCallRecording) HasCallRecordingChannels() bool {
	if o != nil && !IsNil(o.CallRecordingChannels) {
		return true
	}

	return false
}

// SetCallRecordingChannels gets a reference to the given string and assigns it to the CallRecordingChannels field.
func (o *OutboundCallRecording) SetCallRecordingChannels(v string) {
	o.CallRecordingChannels = &v
}

// GetCallRecordingFormat returns the CallRecordingFormat field value if set, zero value otherwise.
func (o *OutboundCallRecording) GetCallRecordingFormat() string {
	if o == nil || IsNil(o.CallRecordingFormat) {
		var ret string
		return ret
	}
	return *o.CallRecordingFormat
}

// GetCallRecordingFormatOk returns a tuple with the CallRecordingFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundCallRecording) GetCallRecordingFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CallRecordingFormat) {
		return nil, false
	}
	return o.CallRecordingFormat, true
}

// HasCallRecordingFormat returns a boolean if a field has been set.
func (o *OutboundCallRecording) HasCallRecordingFormat() bool {
	if o != nil && !IsNil(o.CallRecordingFormat) {
		return true
	}

	return false
}

// SetCallRecordingFormat gets a reference to the given string and assigns it to the CallRecordingFormat field.
func (o *OutboundCallRecording) SetCallRecordingFormat(v string) {
	o.CallRecordingFormat = &v
}

func (o OutboundCallRecording) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutboundCallRecording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallRecordingType) {
		toSerialize["call_recording_type"] = o.CallRecordingType
	}
	if !IsNil(o.CallRecordingCallerPhoneNumbers) {
		toSerialize["call_recording_caller_phone_numbers"] = o.CallRecordingCallerPhoneNumbers
	}
	if !IsNil(o.CallRecordingChannels) {
		toSerialize["call_recording_channels"] = o.CallRecordingChannels
	}
	if !IsNil(o.CallRecordingFormat) {
		toSerialize["call_recording_format"] = o.CallRecordingFormat
	}
	return toSerialize, nil
}

type NullableOutboundCallRecording struct {
	value *OutboundCallRecording
	isSet bool
}

func (v NullableOutboundCallRecording) Get() *OutboundCallRecording {
	return v.value
}

func (v *NullableOutboundCallRecording) Set(val *OutboundCallRecording) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundCallRecording) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundCallRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundCallRecording(val *OutboundCallRecording) *NullableOutboundCallRecording {
	return &NullableOutboundCallRecording{value: val, isSet: true}
}

func (v NullableOutboundCallRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundCallRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


