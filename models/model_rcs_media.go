/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSMedia type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSMedia{}

// RCSMedia A media file within a rich card.
type RCSMedia struct {
	// The height of the media within a rich card with a vertical layout. For a standalone card with horizontal layout, height is not customizable, and this field is ignored.
	Height *string `json:"height,omitempty"`
	ContentInfo *RCSContentInfo `json:"content_info,omitempty"`
}

// NewRCSMedia instantiates a new RCSMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSMedia() *RCSMedia {
	this := RCSMedia{}
	return &this
}

// NewRCSMediaWithDefaults instantiates a new RCSMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSMediaWithDefaults() *RCSMedia {
	this := RCSMedia{}
	return &this
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *RCSMedia) GetHeight() string {
	if o == nil || IsNil(o.Height) {
		var ret string
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSMedia) GetHeightOk() (*string, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *RCSMedia) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given string and assigns it to the Height field.
func (o *RCSMedia) SetHeight(v string) {
	o.Height = &v
}

// GetContentInfo returns the ContentInfo field value if set, zero value otherwise.
func (o *RCSMedia) GetContentInfo() RCSContentInfo {
	if o == nil || IsNil(o.ContentInfo) {
		var ret RCSContentInfo
		return ret
	}
	return *o.ContentInfo
}

// GetContentInfoOk returns a tuple with the ContentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSMedia) GetContentInfoOk() (*RCSContentInfo, bool) {
	if o == nil || IsNil(o.ContentInfo) {
		return nil, false
	}
	return o.ContentInfo, true
}

// HasContentInfo returns a boolean if a field has been set.
func (o *RCSMedia) HasContentInfo() bool {
	if o != nil && !IsNil(o.ContentInfo) {
		return true
	}

	return false
}

// SetContentInfo gets a reference to the given RCSContentInfo and assigns it to the ContentInfo field.
func (o *RCSMedia) SetContentInfo(v RCSContentInfo) {
	o.ContentInfo = &v
}

func (o RCSMedia) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSMedia) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.ContentInfo) {
		toSerialize["content_info"] = o.ContentInfo
	}
	return toSerialize, nil
}

type NullableRCSMedia struct {
	value *RCSMedia
	isSet bool
}

func (v NullableRCSMedia) Get() *RCSMedia {
	return v.value
}

func (v *NullableRCSMedia) Set(val *RCSMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSMedia(val *RCSMedia) *NullableRCSMedia {
	return &NullableRCSMedia{value: val, isSet: true}
}

func (v NullableRCSMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


