/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FqdnConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FqdnConnection{}

// FqdnConnection struct for FqdnConnection
type FqdnConnection struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// Defaults to true
	Active *bool `json:"active,omitempty"`
	AnchorsiteOverride *AnchorsiteOverride `json:"anchorsite_override,omitempty"`
	// A user-assigned name to help manage the connection.
	ConnectionName string `json:"connection_name"`
	TransportProtocol *FqdnConnectionTransportProtocol `json:"transport_protocol,omitempty"`
	// When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.
	DefaultOnHoldComfortNoiseEnabled *bool `json:"default_on_hold_comfort_noise_enabled,omitempty"`
	DtmfType *DtmfType `json:"dtmf_type,omitempty"`
	// Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.
	EncodeContactHeaderEnabled *bool `json:"encode_contact_header_enabled,omitempty"`
	EncryptedMedia NullableEncryptedMedia `json:"encrypted_media,omitempty"`
	// The connection is enabled for Microsoft Teams Direct Routing.
	MicrosoftTeamsSbc *bool `json:"microsoft_teams_sbc,omitempty"`
	// Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings.
	OnnetT38PassthroughEnabled *bool `json:"onnet_t38_passthrough_enabled,omitempty"`
	// The username for the FQDN connection.
	UserName *string `json:"user_name,omitempty"`
	// The password for the FQDN connection.
	Password *string `json:"password,omitempty"`
	// Defines if codecs should be passed on stream change.
	RtpPassCodecsOnStreamChange *bool `json:"rtp_pass_codecs_on_stream_change,omitempty"`
	// Indicates whether DTMF timestamp adjustment is enabled.
	AdjustDtmfTimestamp *bool `json:"adjust_dtmf_timestamp,omitempty"`
	// Indicates whether DTMF duration should be ignored.
	IgnoreDtmfDuration *bool `json:"ignore_dtmf_duration,omitempty"`
	// Indicates whether the mark bit should be ignored.
	IgnoreMarkBit *bool `json:"ignore_mark_bit,omitempty"`
	// Indicates whether call cost calculation is enabled.
	CallCostEnabled *bool `json:"call_cost_enabled,omitempty"`
	// Indicates whether noise suppression is enabled.
	NoiseSuppression *bool `json:"noise_suppression,omitempty"`
	// Indicates whether normalized timestamps should be sent.
	SendNormalizedTimestamps *bool `json:"send_normalized_timestamps,omitempty"`
	// Indicates whether third-party control is enabled.
	ThirdPartyControlEnabled *bool `json:"third_party_control_enabled,omitempty"`
	// The name for the TXT record associated with the FQDN connection.
	TxtName *string `json:"txt_name,omitempty"`
	// The value for the TXT record associated with the FQDN connection.
	TxtValue *string `json:"txt_value,omitempty"`
	// The time to live for the TXT record associated with the FQDN connection.
	TxtTtl *int32 `json:"txt_ttl,omitempty"`
	// Tags associated with the connection.
	Tags []string `json:"tags,omitempty"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.
	WebhookEventUrl *string `json:"webhook_event_url,omitempty"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverUrl NullableString `json:"webhook_event_failover_url,omitempty"`
	WebhookApiVersion *WebhookApiVersion `json:"webhook_api_version,omitempty"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs NullableInt32 `json:"webhook_timeout_secs,omitempty"`
	RtcpSettings *ConnectionRtcpSettings `json:"rtcp_settings,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	Inbound *InboundFqdn `json:"inbound,omitempty"`
	Outbound *OutboundFqdn `json:"outbound,omitempty"`
}

type _FqdnConnection FqdnConnection

// NewFqdnConnection instantiates a new FqdnConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFqdnConnection(connectionName string) *FqdnConnection {
	this := FqdnConnection{}
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	this.ConnectionName = connectionName
	var transportProtocol FqdnConnectionTransportProtocol = UDP
	this.TransportProtocol = &transportProtocol
	var defaultOnHoldComfortNoiseEnabled bool = true
	this.DefaultOnHoldComfortNoiseEnabled = &defaultOnHoldComfortNoiseEnabled
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var encodeContactHeaderEnabled bool = false
	this.EncodeContactHeaderEnabled = &encodeContactHeaderEnabled
	var microsoftTeamsSbc bool = false
	this.MicrosoftTeamsSbc = &microsoftTeamsSbc
	var onnetT38PassthroughEnabled bool = false
	this.OnnetT38PassthroughEnabled = &onnetT38PassthroughEnabled
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	var webhookApiVersion WebhookApiVersion = _1
	this.WebhookApiVersion = &webhookApiVersion
	return &this
}

// NewFqdnConnectionWithDefaults instantiates a new FqdnConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFqdnConnectionWithDefaults() *FqdnConnection {
	this := FqdnConnection{}
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	var transportProtocol FqdnConnectionTransportProtocol = UDP
	this.TransportProtocol = &transportProtocol
	var defaultOnHoldComfortNoiseEnabled bool = true
	this.DefaultOnHoldComfortNoiseEnabled = &defaultOnHoldComfortNoiseEnabled
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var encodeContactHeaderEnabled bool = false
	this.EncodeContactHeaderEnabled = &encodeContactHeaderEnabled
	var microsoftTeamsSbc bool = false
	this.MicrosoftTeamsSbc = &microsoftTeamsSbc
	var onnetT38PassthroughEnabled bool = false
	this.OnnetT38PassthroughEnabled = &onnetT38PassthroughEnabled
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	var webhookApiVersion WebhookApiVersion = _1
	this.WebhookApiVersion = &webhookApiVersion
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FqdnConnection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FqdnConnection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FqdnConnection) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *FqdnConnection) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *FqdnConnection) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *FqdnConnection) SetRecordType(v string) {
	o.RecordType = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *FqdnConnection) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *FqdnConnection) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *FqdnConnection) SetActive(v bool) {
	o.Active = &v
}

// GetAnchorsiteOverride returns the AnchorsiteOverride field value if set, zero value otherwise.
func (o *FqdnConnection) GetAnchorsiteOverride() AnchorsiteOverride {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		var ret AnchorsiteOverride
		return ret
	}
	return *o.AnchorsiteOverride
}

// GetAnchorsiteOverrideOk returns a tuple with the AnchorsiteOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetAnchorsiteOverrideOk() (*AnchorsiteOverride, bool) {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		return nil, false
	}
	return o.AnchorsiteOverride, true
}

// HasAnchorsiteOverride returns a boolean if a field has been set.
func (o *FqdnConnection) HasAnchorsiteOverride() bool {
	if o != nil && !IsNil(o.AnchorsiteOverride) {
		return true
	}

	return false
}

// SetAnchorsiteOverride gets a reference to the given AnchorsiteOverride and assigns it to the AnchorsiteOverride field.
func (o *FqdnConnection) SetAnchorsiteOverride(v AnchorsiteOverride) {
	o.AnchorsiteOverride = &v
}

// GetConnectionName returns the ConnectionName field value
func (o *FqdnConnection) GetConnectionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetConnectionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionName, true
}

// SetConnectionName sets field value
func (o *FqdnConnection) SetConnectionName(v string) {
	o.ConnectionName = v
}

// GetTransportProtocol returns the TransportProtocol field value if set, zero value otherwise.
func (o *FqdnConnection) GetTransportProtocol() FqdnConnectionTransportProtocol {
	if o == nil || IsNil(o.TransportProtocol) {
		var ret FqdnConnectionTransportProtocol
		return ret
	}
	return *o.TransportProtocol
}

// GetTransportProtocolOk returns a tuple with the TransportProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetTransportProtocolOk() (*FqdnConnectionTransportProtocol, bool) {
	if o == nil || IsNil(o.TransportProtocol) {
		return nil, false
	}
	return o.TransportProtocol, true
}

// HasTransportProtocol returns a boolean if a field has been set.
func (o *FqdnConnection) HasTransportProtocol() bool {
	if o != nil && !IsNil(o.TransportProtocol) {
		return true
	}

	return false
}

// SetTransportProtocol gets a reference to the given FqdnConnectionTransportProtocol and assigns it to the TransportProtocol field.
func (o *FqdnConnection) SetTransportProtocol(v FqdnConnectionTransportProtocol) {
	o.TransportProtocol = &v
}

// GetDefaultOnHoldComfortNoiseEnabled returns the DefaultOnHoldComfortNoiseEnabled field value if set, zero value otherwise.
func (o *FqdnConnection) GetDefaultOnHoldComfortNoiseEnabled() bool {
	if o == nil || IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		var ret bool
		return ret
	}
	return *o.DefaultOnHoldComfortNoiseEnabled
}

// GetDefaultOnHoldComfortNoiseEnabledOk returns a tuple with the DefaultOnHoldComfortNoiseEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetDefaultOnHoldComfortNoiseEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		return nil, false
	}
	return o.DefaultOnHoldComfortNoiseEnabled, true
}

// HasDefaultOnHoldComfortNoiseEnabled returns a boolean if a field has been set.
func (o *FqdnConnection) HasDefaultOnHoldComfortNoiseEnabled() bool {
	if o != nil && !IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		return true
	}

	return false
}

// SetDefaultOnHoldComfortNoiseEnabled gets a reference to the given bool and assigns it to the DefaultOnHoldComfortNoiseEnabled field.
func (o *FqdnConnection) SetDefaultOnHoldComfortNoiseEnabled(v bool) {
	o.DefaultOnHoldComfortNoiseEnabled = &v
}

// GetDtmfType returns the DtmfType field value if set, zero value otherwise.
func (o *FqdnConnection) GetDtmfType() DtmfType {
	if o == nil || IsNil(o.DtmfType) {
		var ret DtmfType
		return ret
	}
	return *o.DtmfType
}

// GetDtmfTypeOk returns a tuple with the DtmfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetDtmfTypeOk() (*DtmfType, bool) {
	if o == nil || IsNil(o.DtmfType) {
		return nil, false
	}
	return o.DtmfType, true
}

// HasDtmfType returns a boolean if a field has been set.
func (o *FqdnConnection) HasDtmfType() bool {
	if o != nil && !IsNil(o.DtmfType) {
		return true
	}

	return false
}

// SetDtmfType gets a reference to the given DtmfType and assigns it to the DtmfType field.
func (o *FqdnConnection) SetDtmfType(v DtmfType) {
	o.DtmfType = &v
}

// GetEncodeContactHeaderEnabled returns the EncodeContactHeaderEnabled field value if set, zero value otherwise.
func (o *FqdnConnection) GetEncodeContactHeaderEnabled() bool {
	if o == nil || IsNil(o.EncodeContactHeaderEnabled) {
		var ret bool
		return ret
	}
	return *o.EncodeContactHeaderEnabled
}

// GetEncodeContactHeaderEnabledOk returns a tuple with the EncodeContactHeaderEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetEncodeContactHeaderEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncodeContactHeaderEnabled) {
		return nil, false
	}
	return o.EncodeContactHeaderEnabled, true
}

// HasEncodeContactHeaderEnabled returns a boolean if a field has been set.
func (o *FqdnConnection) HasEncodeContactHeaderEnabled() bool {
	if o != nil && !IsNil(o.EncodeContactHeaderEnabled) {
		return true
	}

	return false
}

// SetEncodeContactHeaderEnabled gets a reference to the given bool and assigns it to the EncodeContactHeaderEnabled field.
func (o *FqdnConnection) SetEncodeContactHeaderEnabled(v bool) {
	o.EncodeContactHeaderEnabled = &v
}

// GetEncryptedMedia returns the EncryptedMedia field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FqdnConnection) GetEncryptedMedia() EncryptedMedia {
	if o == nil || IsNil(o.EncryptedMedia.Get()) {
		var ret EncryptedMedia
		return ret
	}
	return *o.EncryptedMedia.Get()
}

// GetEncryptedMediaOk returns a tuple with the EncryptedMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FqdnConnection) GetEncryptedMediaOk() (*EncryptedMedia, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptedMedia.Get(), o.EncryptedMedia.IsSet()
}

// HasEncryptedMedia returns a boolean if a field has been set.
func (o *FqdnConnection) HasEncryptedMedia() bool {
	if o != nil && o.EncryptedMedia.IsSet() {
		return true
	}

	return false
}

// SetEncryptedMedia gets a reference to the given NullableEncryptedMedia and assigns it to the EncryptedMedia field.
func (o *FqdnConnection) SetEncryptedMedia(v EncryptedMedia) {
	o.EncryptedMedia.Set(&v)
}
// SetEncryptedMediaNil sets the value for EncryptedMedia to be an explicit nil
func (o *FqdnConnection) SetEncryptedMediaNil() {
	o.EncryptedMedia.Set(nil)
}

// UnsetEncryptedMedia ensures that no value is present for EncryptedMedia, not even an explicit nil
func (o *FqdnConnection) UnsetEncryptedMedia() {
	o.EncryptedMedia.Unset()
}

// GetMicrosoftTeamsSbc returns the MicrosoftTeamsSbc field value if set, zero value otherwise.
func (o *FqdnConnection) GetMicrosoftTeamsSbc() bool {
	if o == nil || IsNil(o.MicrosoftTeamsSbc) {
		var ret bool
		return ret
	}
	return *o.MicrosoftTeamsSbc
}

// GetMicrosoftTeamsSbcOk returns a tuple with the MicrosoftTeamsSbc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetMicrosoftTeamsSbcOk() (*bool, bool) {
	if o == nil || IsNil(o.MicrosoftTeamsSbc) {
		return nil, false
	}
	return o.MicrosoftTeamsSbc, true
}

// HasMicrosoftTeamsSbc returns a boolean if a field has been set.
func (o *FqdnConnection) HasMicrosoftTeamsSbc() bool {
	if o != nil && !IsNil(o.MicrosoftTeamsSbc) {
		return true
	}

	return false
}

// SetMicrosoftTeamsSbc gets a reference to the given bool and assigns it to the MicrosoftTeamsSbc field.
func (o *FqdnConnection) SetMicrosoftTeamsSbc(v bool) {
	o.MicrosoftTeamsSbc = &v
}

// GetOnnetT38PassthroughEnabled returns the OnnetT38PassthroughEnabled field value if set, zero value otherwise.
func (o *FqdnConnection) GetOnnetT38PassthroughEnabled() bool {
	if o == nil || IsNil(o.OnnetT38PassthroughEnabled) {
		var ret bool
		return ret
	}
	return *o.OnnetT38PassthroughEnabled
}

// GetOnnetT38PassthroughEnabledOk returns a tuple with the OnnetT38PassthroughEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetOnnetT38PassthroughEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OnnetT38PassthroughEnabled) {
		return nil, false
	}
	return o.OnnetT38PassthroughEnabled, true
}

// HasOnnetT38PassthroughEnabled returns a boolean if a field has been set.
func (o *FqdnConnection) HasOnnetT38PassthroughEnabled() bool {
	if o != nil && !IsNil(o.OnnetT38PassthroughEnabled) {
		return true
	}

	return false
}

// SetOnnetT38PassthroughEnabled gets a reference to the given bool and assigns it to the OnnetT38PassthroughEnabled field.
func (o *FqdnConnection) SetOnnetT38PassthroughEnabled(v bool) {
	o.OnnetT38PassthroughEnabled = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *FqdnConnection) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *FqdnConnection) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *FqdnConnection) SetUserName(v string) {
	o.UserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FqdnConnection) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FqdnConnection) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *FqdnConnection) SetPassword(v string) {
	o.Password = &v
}

// GetRtpPassCodecsOnStreamChange returns the RtpPassCodecsOnStreamChange field value if set, zero value otherwise.
func (o *FqdnConnection) GetRtpPassCodecsOnStreamChange() bool {
	if o == nil || IsNil(o.RtpPassCodecsOnStreamChange) {
		var ret bool
		return ret
	}
	return *o.RtpPassCodecsOnStreamChange
}

// GetRtpPassCodecsOnStreamChangeOk returns a tuple with the RtpPassCodecsOnStreamChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetRtpPassCodecsOnStreamChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.RtpPassCodecsOnStreamChange) {
		return nil, false
	}
	return o.RtpPassCodecsOnStreamChange, true
}

// HasRtpPassCodecsOnStreamChange returns a boolean if a field has been set.
func (o *FqdnConnection) HasRtpPassCodecsOnStreamChange() bool {
	if o != nil && !IsNil(o.RtpPassCodecsOnStreamChange) {
		return true
	}

	return false
}

// SetRtpPassCodecsOnStreamChange gets a reference to the given bool and assigns it to the RtpPassCodecsOnStreamChange field.
func (o *FqdnConnection) SetRtpPassCodecsOnStreamChange(v bool) {
	o.RtpPassCodecsOnStreamChange = &v
}

// GetAdjustDtmfTimestamp returns the AdjustDtmfTimestamp field value if set, zero value otherwise.
func (o *FqdnConnection) GetAdjustDtmfTimestamp() bool {
	if o == nil || IsNil(o.AdjustDtmfTimestamp) {
		var ret bool
		return ret
	}
	return *o.AdjustDtmfTimestamp
}

// GetAdjustDtmfTimestampOk returns a tuple with the AdjustDtmfTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetAdjustDtmfTimestampOk() (*bool, bool) {
	if o == nil || IsNil(o.AdjustDtmfTimestamp) {
		return nil, false
	}
	return o.AdjustDtmfTimestamp, true
}

// HasAdjustDtmfTimestamp returns a boolean if a field has been set.
func (o *FqdnConnection) HasAdjustDtmfTimestamp() bool {
	if o != nil && !IsNil(o.AdjustDtmfTimestamp) {
		return true
	}

	return false
}

// SetAdjustDtmfTimestamp gets a reference to the given bool and assigns it to the AdjustDtmfTimestamp field.
func (o *FqdnConnection) SetAdjustDtmfTimestamp(v bool) {
	o.AdjustDtmfTimestamp = &v
}

// GetIgnoreDtmfDuration returns the IgnoreDtmfDuration field value if set, zero value otherwise.
func (o *FqdnConnection) GetIgnoreDtmfDuration() bool {
	if o == nil || IsNil(o.IgnoreDtmfDuration) {
		var ret bool
		return ret
	}
	return *o.IgnoreDtmfDuration
}

// GetIgnoreDtmfDurationOk returns a tuple with the IgnoreDtmfDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetIgnoreDtmfDurationOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDtmfDuration) {
		return nil, false
	}
	return o.IgnoreDtmfDuration, true
}

// HasIgnoreDtmfDuration returns a boolean if a field has been set.
func (o *FqdnConnection) HasIgnoreDtmfDuration() bool {
	if o != nil && !IsNil(o.IgnoreDtmfDuration) {
		return true
	}

	return false
}

// SetIgnoreDtmfDuration gets a reference to the given bool and assigns it to the IgnoreDtmfDuration field.
func (o *FqdnConnection) SetIgnoreDtmfDuration(v bool) {
	o.IgnoreDtmfDuration = &v
}

// GetIgnoreMarkBit returns the IgnoreMarkBit field value if set, zero value otherwise.
func (o *FqdnConnection) GetIgnoreMarkBit() bool {
	if o == nil || IsNil(o.IgnoreMarkBit) {
		var ret bool
		return ret
	}
	return *o.IgnoreMarkBit
}

// GetIgnoreMarkBitOk returns a tuple with the IgnoreMarkBit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetIgnoreMarkBitOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreMarkBit) {
		return nil, false
	}
	return o.IgnoreMarkBit, true
}

// HasIgnoreMarkBit returns a boolean if a field has been set.
func (o *FqdnConnection) HasIgnoreMarkBit() bool {
	if o != nil && !IsNil(o.IgnoreMarkBit) {
		return true
	}

	return false
}

// SetIgnoreMarkBit gets a reference to the given bool and assigns it to the IgnoreMarkBit field.
func (o *FqdnConnection) SetIgnoreMarkBit(v bool) {
	o.IgnoreMarkBit = &v
}

// GetCallCostEnabled returns the CallCostEnabled field value if set, zero value otherwise.
func (o *FqdnConnection) GetCallCostEnabled() bool {
	if o == nil || IsNil(o.CallCostEnabled) {
		var ret bool
		return ret
	}
	return *o.CallCostEnabled
}

// GetCallCostEnabledOk returns a tuple with the CallCostEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetCallCostEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CallCostEnabled) {
		return nil, false
	}
	return o.CallCostEnabled, true
}

// HasCallCostEnabled returns a boolean if a field has been set.
func (o *FqdnConnection) HasCallCostEnabled() bool {
	if o != nil && !IsNil(o.CallCostEnabled) {
		return true
	}

	return false
}

// SetCallCostEnabled gets a reference to the given bool and assigns it to the CallCostEnabled field.
func (o *FqdnConnection) SetCallCostEnabled(v bool) {
	o.CallCostEnabled = &v
}

// GetNoiseSuppression returns the NoiseSuppression field value if set, zero value otherwise.
func (o *FqdnConnection) GetNoiseSuppression() bool {
	if o == nil || IsNil(o.NoiseSuppression) {
		var ret bool
		return ret
	}
	return *o.NoiseSuppression
}

// GetNoiseSuppressionOk returns a tuple with the NoiseSuppression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetNoiseSuppressionOk() (*bool, bool) {
	if o == nil || IsNil(o.NoiseSuppression) {
		return nil, false
	}
	return o.NoiseSuppression, true
}

// HasNoiseSuppression returns a boolean if a field has been set.
func (o *FqdnConnection) HasNoiseSuppression() bool {
	if o != nil && !IsNil(o.NoiseSuppression) {
		return true
	}

	return false
}

// SetNoiseSuppression gets a reference to the given bool and assigns it to the NoiseSuppression field.
func (o *FqdnConnection) SetNoiseSuppression(v bool) {
	o.NoiseSuppression = &v
}

// GetSendNormalizedTimestamps returns the SendNormalizedTimestamps field value if set, zero value otherwise.
func (o *FqdnConnection) GetSendNormalizedTimestamps() bool {
	if o == nil || IsNil(o.SendNormalizedTimestamps) {
		var ret bool
		return ret
	}
	return *o.SendNormalizedTimestamps
}

// GetSendNormalizedTimestampsOk returns a tuple with the SendNormalizedTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetSendNormalizedTimestampsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendNormalizedTimestamps) {
		return nil, false
	}
	return o.SendNormalizedTimestamps, true
}

// HasSendNormalizedTimestamps returns a boolean if a field has been set.
func (o *FqdnConnection) HasSendNormalizedTimestamps() bool {
	if o != nil && !IsNil(o.SendNormalizedTimestamps) {
		return true
	}

	return false
}

// SetSendNormalizedTimestamps gets a reference to the given bool and assigns it to the SendNormalizedTimestamps field.
func (o *FqdnConnection) SetSendNormalizedTimestamps(v bool) {
	o.SendNormalizedTimestamps = &v
}

// GetThirdPartyControlEnabled returns the ThirdPartyControlEnabled field value if set, zero value otherwise.
func (o *FqdnConnection) GetThirdPartyControlEnabled() bool {
	if o == nil || IsNil(o.ThirdPartyControlEnabled) {
		var ret bool
		return ret
	}
	return *o.ThirdPartyControlEnabled
}

// GetThirdPartyControlEnabledOk returns a tuple with the ThirdPartyControlEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetThirdPartyControlEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ThirdPartyControlEnabled) {
		return nil, false
	}
	return o.ThirdPartyControlEnabled, true
}

// HasThirdPartyControlEnabled returns a boolean if a field has been set.
func (o *FqdnConnection) HasThirdPartyControlEnabled() bool {
	if o != nil && !IsNil(o.ThirdPartyControlEnabled) {
		return true
	}

	return false
}

// SetThirdPartyControlEnabled gets a reference to the given bool and assigns it to the ThirdPartyControlEnabled field.
func (o *FqdnConnection) SetThirdPartyControlEnabled(v bool) {
	o.ThirdPartyControlEnabled = &v
}

// GetTxtName returns the TxtName field value if set, zero value otherwise.
func (o *FqdnConnection) GetTxtName() string {
	if o == nil || IsNil(o.TxtName) {
		var ret string
		return ret
	}
	return *o.TxtName
}

// GetTxtNameOk returns a tuple with the TxtName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetTxtNameOk() (*string, bool) {
	if o == nil || IsNil(o.TxtName) {
		return nil, false
	}
	return o.TxtName, true
}

// HasTxtName returns a boolean if a field has been set.
func (o *FqdnConnection) HasTxtName() bool {
	if o != nil && !IsNil(o.TxtName) {
		return true
	}

	return false
}

// SetTxtName gets a reference to the given string and assigns it to the TxtName field.
func (o *FqdnConnection) SetTxtName(v string) {
	o.TxtName = &v
}

// GetTxtValue returns the TxtValue field value if set, zero value otherwise.
func (o *FqdnConnection) GetTxtValue() string {
	if o == nil || IsNil(o.TxtValue) {
		var ret string
		return ret
	}
	return *o.TxtValue
}

// GetTxtValueOk returns a tuple with the TxtValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetTxtValueOk() (*string, bool) {
	if o == nil || IsNil(o.TxtValue) {
		return nil, false
	}
	return o.TxtValue, true
}

// HasTxtValue returns a boolean if a field has been set.
func (o *FqdnConnection) HasTxtValue() bool {
	if o != nil && !IsNil(o.TxtValue) {
		return true
	}

	return false
}

// SetTxtValue gets a reference to the given string and assigns it to the TxtValue field.
func (o *FqdnConnection) SetTxtValue(v string) {
	o.TxtValue = &v
}

// GetTxtTtl returns the TxtTtl field value if set, zero value otherwise.
func (o *FqdnConnection) GetTxtTtl() int32 {
	if o == nil || IsNil(o.TxtTtl) {
		var ret int32
		return ret
	}
	return *o.TxtTtl
}

// GetTxtTtlOk returns a tuple with the TxtTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetTxtTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.TxtTtl) {
		return nil, false
	}
	return o.TxtTtl, true
}

// HasTxtTtl returns a boolean if a field has been set.
func (o *FqdnConnection) HasTxtTtl() bool {
	if o != nil && !IsNil(o.TxtTtl) {
		return true
	}

	return false
}

// SetTxtTtl gets a reference to the given int32 and assigns it to the TxtTtl field.
func (o *FqdnConnection) SetTxtTtl(v int32) {
	o.TxtTtl = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FqdnConnection) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FqdnConnection) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FqdnConnection) SetTags(v []string) {
	o.Tags = v
}

// GetWebhookEventUrl returns the WebhookEventUrl field value if set, zero value otherwise.
func (o *FqdnConnection) GetWebhookEventUrl() string {
	if o == nil || IsNil(o.WebhookEventUrl) {
		var ret string
		return ret
	}
	return *o.WebhookEventUrl
}

// GetWebhookEventUrlOk returns a tuple with the WebhookEventUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetWebhookEventUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookEventUrl) {
		return nil, false
	}
	return o.WebhookEventUrl, true
}

// HasWebhookEventUrl returns a boolean if a field has been set.
func (o *FqdnConnection) HasWebhookEventUrl() bool {
	if o != nil && !IsNil(o.WebhookEventUrl) {
		return true
	}

	return false
}

// SetWebhookEventUrl gets a reference to the given string and assigns it to the WebhookEventUrl field.
func (o *FqdnConnection) SetWebhookEventUrl(v string) {
	o.WebhookEventUrl = &v
}

// GetWebhookEventFailoverUrl returns the WebhookEventFailoverUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FqdnConnection) GetWebhookEventFailoverUrl() string {
	if o == nil || IsNil(o.WebhookEventFailoverUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookEventFailoverUrl.Get()
}

// GetWebhookEventFailoverUrlOk returns a tuple with the WebhookEventFailoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FqdnConnection) GetWebhookEventFailoverUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookEventFailoverUrl.Get(), o.WebhookEventFailoverUrl.IsSet()
}

// HasWebhookEventFailoverUrl returns a boolean if a field has been set.
func (o *FqdnConnection) HasWebhookEventFailoverUrl() bool {
	if o != nil && o.WebhookEventFailoverUrl.IsSet() {
		return true
	}

	return false
}

// SetWebhookEventFailoverUrl gets a reference to the given NullableString and assigns it to the WebhookEventFailoverUrl field.
func (o *FqdnConnection) SetWebhookEventFailoverUrl(v string) {
	o.WebhookEventFailoverUrl.Set(&v)
}
// SetWebhookEventFailoverUrlNil sets the value for WebhookEventFailoverUrl to be an explicit nil
func (o *FqdnConnection) SetWebhookEventFailoverUrlNil() {
	o.WebhookEventFailoverUrl.Set(nil)
}

// UnsetWebhookEventFailoverUrl ensures that no value is present for WebhookEventFailoverUrl, not even an explicit nil
func (o *FqdnConnection) UnsetWebhookEventFailoverUrl() {
	o.WebhookEventFailoverUrl.Unset()
}

// GetWebhookApiVersion returns the WebhookApiVersion field value if set, zero value otherwise.
func (o *FqdnConnection) GetWebhookApiVersion() WebhookApiVersion {
	if o == nil || IsNil(o.WebhookApiVersion) {
		var ret WebhookApiVersion
		return ret
	}
	return *o.WebhookApiVersion
}

// GetWebhookApiVersionOk returns a tuple with the WebhookApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetWebhookApiVersionOk() (*WebhookApiVersion, bool) {
	if o == nil || IsNil(o.WebhookApiVersion) {
		return nil, false
	}
	return o.WebhookApiVersion, true
}

// HasWebhookApiVersion returns a boolean if a field has been set.
func (o *FqdnConnection) HasWebhookApiVersion() bool {
	if o != nil && !IsNil(o.WebhookApiVersion) {
		return true
	}

	return false
}

// SetWebhookApiVersion gets a reference to the given WebhookApiVersion and assigns it to the WebhookApiVersion field.
func (o *FqdnConnection) SetWebhookApiVersion(v WebhookApiVersion) {
	o.WebhookApiVersion = &v
}

// GetWebhookTimeoutSecs returns the WebhookTimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FqdnConnection) GetWebhookTimeoutSecs() int32 {
	if o == nil || IsNil(o.WebhookTimeoutSecs.Get()) {
		var ret int32
		return ret
	}
	return *o.WebhookTimeoutSecs.Get()
}

// GetWebhookTimeoutSecsOk returns a tuple with the WebhookTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FqdnConnection) GetWebhookTimeoutSecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookTimeoutSecs.Get(), o.WebhookTimeoutSecs.IsSet()
}

// HasWebhookTimeoutSecs returns a boolean if a field has been set.
func (o *FqdnConnection) HasWebhookTimeoutSecs() bool {
	if o != nil && o.WebhookTimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetWebhookTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the WebhookTimeoutSecs field.
func (o *FqdnConnection) SetWebhookTimeoutSecs(v int32) {
	o.WebhookTimeoutSecs.Set(&v)
}
// SetWebhookTimeoutSecsNil sets the value for WebhookTimeoutSecs to be an explicit nil
func (o *FqdnConnection) SetWebhookTimeoutSecsNil() {
	o.WebhookTimeoutSecs.Set(nil)
}

// UnsetWebhookTimeoutSecs ensures that no value is present for WebhookTimeoutSecs, not even an explicit nil
func (o *FqdnConnection) UnsetWebhookTimeoutSecs() {
	o.WebhookTimeoutSecs.Unset()
}

// GetRtcpSettings returns the RtcpSettings field value if set, zero value otherwise.
func (o *FqdnConnection) GetRtcpSettings() ConnectionRtcpSettings {
	if o == nil || IsNil(o.RtcpSettings) {
		var ret ConnectionRtcpSettings
		return ret
	}
	return *o.RtcpSettings
}

// GetRtcpSettingsOk returns a tuple with the RtcpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetRtcpSettingsOk() (*ConnectionRtcpSettings, bool) {
	if o == nil || IsNil(o.RtcpSettings) {
		return nil, false
	}
	return o.RtcpSettings, true
}

// HasRtcpSettings returns a boolean if a field has been set.
func (o *FqdnConnection) HasRtcpSettings() bool {
	if o != nil && !IsNil(o.RtcpSettings) {
		return true
	}

	return false
}

// SetRtcpSettings gets a reference to the given ConnectionRtcpSettings and assigns it to the RtcpSettings field.
func (o *FqdnConnection) SetRtcpSettings(v ConnectionRtcpSettings) {
	o.RtcpSettings = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FqdnConnection) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FqdnConnection) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FqdnConnection) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FqdnConnection) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FqdnConnection) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *FqdnConnection) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *FqdnConnection) GetInbound() InboundFqdn {
	if o == nil || IsNil(o.Inbound) {
		var ret InboundFqdn
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetInboundOk() (*InboundFqdn, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *FqdnConnection) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given InboundFqdn and assigns it to the Inbound field.
func (o *FqdnConnection) SetInbound(v InboundFqdn) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *FqdnConnection) GetOutbound() OutboundFqdn {
	if o == nil || IsNil(o.Outbound) {
		var ret OutboundFqdn
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FqdnConnection) GetOutboundOk() (*OutboundFqdn, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *FqdnConnection) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given OutboundFqdn and assigns it to the Outbound field.
func (o *FqdnConnection) SetOutbound(v OutboundFqdn) {
	o.Outbound = &v
}

func (o FqdnConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FqdnConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AnchorsiteOverride) {
		toSerialize["anchorsite_override"] = o.AnchorsiteOverride
	}
	toSerialize["connection_name"] = o.ConnectionName
	if !IsNil(o.TransportProtocol) {
		toSerialize["transport_protocol"] = o.TransportProtocol
	}
	if !IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		toSerialize["default_on_hold_comfort_noise_enabled"] = o.DefaultOnHoldComfortNoiseEnabled
	}
	if !IsNil(o.DtmfType) {
		toSerialize["dtmf_type"] = o.DtmfType
	}
	if !IsNil(o.EncodeContactHeaderEnabled) {
		toSerialize["encode_contact_header_enabled"] = o.EncodeContactHeaderEnabled
	}
	if o.EncryptedMedia.IsSet() {
		toSerialize["encrypted_media"] = o.EncryptedMedia.Get()
	}
	if !IsNil(o.MicrosoftTeamsSbc) {
		toSerialize["microsoft_teams_sbc"] = o.MicrosoftTeamsSbc
	}
	if !IsNil(o.OnnetT38PassthroughEnabled) {
		toSerialize["onnet_t38_passthrough_enabled"] = o.OnnetT38PassthroughEnabled
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RtpPassCodecsOnStreamChange) {
		toSerialize["rtp_pass_codecs_on_stream_change"] = o.RtpPassCodecsOnStreamChange
	}
	if !IsNil(o.AdjustDtmfTimestamp) {
		toSerialize["adjust_dtmf_timestamp"] = o.AdjustDtmfTimestamp
	}
	if !IsNil(o.IgnoreDtmfDuration) {
		toSerialize["ignore_dtmf_duration"] = o.IgnoreDtmfDuration
	}
	if !IsNil(o.IgnoreMarkBit) {
		toSerialize["ignore_mark_bit"] = o.IgnoreMarkBit
	}
	if !IsNil(o.CallCostEnabled) {
		toSerialize["call_cost_enabled"] = o.CallCostEnabled
	}
	if !IsNil(o.NoiseSuppression) {
		toSerialize["noise_suppression"] = o.NoiseSuppression
	}
	if !IsNil(o.SendNormalizedTimestamps) {
		toSerialize["send_normalized_timestamps"] = o.SendNormalizedTimestamps
	}
	if !IsNil(o.ThirdPartyControlEnabled) {
		toSerialize["third_party_control_enabled"] = o.ThirdPartyControlEnabled
	}
	if !IsNil(o.TxtName) {
		toSerialize["txt_name"] = o.TxtName
	}
	if !IsNil(o.TxtValue) {
		toSerialize["txt_value"] = o.TxtValue
	}
	if !IsNil(o.TxtTtl) {
		toSerialize["txt_ttl"] = o.TxtTtl
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.WebhookEventUrl) {
		toSerialize["webhook_event_url"] = o.WebhookEventUrl
	}
	if o.WebhookEventFailoverUrl.IsSet() {
		toSerialize["webhook_event_failover_url"] = o.WebhookEventFailoverUrl.Get()
	}
	if !IsNil(o.WebhookApiVersion) {
		toSerialize["webhook_api_version"] = o.WebhookApiVersion
	}
	if o.WebhookTimeoutSecs.IsSet() {
		toSerialize["webhook_timeout_secs"] = o.WebhookTimeoutSecs.Get()
	}
	if !IsNil(o.RtcpSettings) {
		toSerialize["rtcp_settings"] = o.RtcpSettings
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	return toSerialize, nil
}

func (o *FqdnConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connection_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFqdnConnection := _FqdnConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFqdnConnection)

	if err != nil {
		return err
	}

	*o = FqdnConnection(varFqdnConnection)

	return err
}

type NullableFqdnConnection struct {
	value *FqdnConnection
	isSet bool
}

func (v NullableFqdnConnection) Get() *FqdnConnection {
	return v.value
}

func (v *NullableFqdnConnection) Set(val *FqdnConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableFqdnConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableFqdnConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFqdnConnection(val *FqdnConnection) *NullableFqdnConnection {
	return &NullableFqdnConnection{value: val, isSet: true}
}

func (v NullableFqdnConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFqdnConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


