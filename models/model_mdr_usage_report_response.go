/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the MdrUsageReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MdrUsageReportResponse{}

// MdrUsageReportResponse struct for MdrUsageReportResponse
type MdrUsageReportResponse struct {
	// Identifies the resource
	Id *string `json:"id,omitempty"`
	StartDate *time.Time `json:"start_date,omitempty"`
	EndDate *time.Time `json:"end_date,omitempty"`
	Connections []int64 `json:"connections,omitempty"`
	AggregationType *string `json:"aggregation_type,omitempty"`
	Status *string `json:"status,omitempty"`
	ReportUrl *string `json:"report_url,omitempty"`
	Result []MdrUsageRecord `json:"result,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Profiles *string `json:"profiles,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
}

// NewMdrUsageReportResponse instantiates a new MdrUsageReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMdrUsageReportResponse() *MdrUsageReportResponse {
	this := MdrUsageReportResponse{}
	return &this
}

// NewMdrUsageReportResponseWithDefaults instantiates a new MdrUsageReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMdrUsageReportResponseWithDefaults() *MdrUsageReportResponse {
	this := MdrUsageReportResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MdrUsageReportResponse) SetId(v string) {
	o.Id = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *MdrUsageReportResponse) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *MdrUsageReportResponse) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetConnections returns the Connections field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetConnections() []int64 {
	if o == nil || IsNil(o.Connections) {
		var ret []int64
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetConnectionsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []int64 and assigns it to the Connections field.
func (o *MdrUsageReportResponse) SetConnections(v []int64) {
	o.Connections = v
}

// GetAggregationType returns the AggregationType field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetAggregationType() string {
	if o == nil || IsNil(o.AggregationType) {
		var ret string
		return ret
	}
	return *o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetAggregationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AggregationType) {
		return nil, false
	}
	return o.AggregationType, true
}

// HasAggregationType returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasAggregationType() bool {
	if o != nil && !IsNil(o.AggregationType) {
		return true
	}

	return false
}

// SetAggregationType gets a reference to the given string and assigns it to the AggregationType field.
func (o *MdrUsageReportResponse) SetAggregationType(v string) {
	o.AggregationType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MdrUsageReportResponse) SetStatus(v string) {
	o.Status = &v
}

// GetReportUrl returns the ReportUrl field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetReportUrl() string {
	if o == nil || IsNil(o.ReportUrl) {
		var ret string
		return ret
	}
	return *o.ReportUrl
}

// GetReportUrlOk returns a tuple with the ReportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetReportUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReportUrl) {
		return nil, false
	}
	return o.ReportUrl, true
}

// HasReportUrl returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasReportUrl() bool {
	if o != nil && !IsNil(o.ReportUrl) {
		return true
	}

	return false
}

// SetReportUrl gets a reference to the given string and assigns it to the ReportUrl field.
func (o *MdrUsageReportResponse) SetReportUrl(v string) {
	o.ReportUrl = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetResult() []MdrUsageRecord {
	if o == nil || IsNil(o.Result) {
		var ret []MdrUsageRecord
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetResultOk() ([]MdrUsageRecord, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given []MdrUsageRecord and assigns it to the Result field.
func (o *MdrUsageReportResponse) SetResult(v []MdrUsageRecord) {
	o.Result = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *MdrUsageReportResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *MdrUsageReportResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetProfiles() string {
	if o == nil || IsNil(o.Profiles) {
		var ret string
		return ret
	}
	return *o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetProfilesOk() (*string, bool) {
	if o == nil || IsNil(o.Profiles) {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasProfiles() bool {
	if o != nil && !IsNil(o.Profiles) {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given string and assigns it to the Profiles field.
func (o *MdrUsageReportResponse) SetProfiles(v string) {
	o.Profiles = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *MdrUsageReportResponse) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdrUsageReportResponse) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *MdrUsageReportResponse) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *MdrUsageReportResponse) SetRecordType(v string) {
	o.RecordType = &v
}

func (o MdrUsageReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MdrUsageReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.Connections) {
		toSerialize["connections"] = o.Connections
	}
	if !IsNil(o.AggregationType) {
		toSerialize["aggregation_type"] = o.AggregationType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ReportUrl) {
		toSerialize["report_url"] = o.ReportUrl
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Profiles) {
		toSerialize["profiles"] = o.Profiles
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullableMdrUsageReportResponse struct {
	value *MdrUsageReportResponse
	isSet bool
}

func (v NullableMdrUsageReportResponse) Get() *MdrUsageReportResponse {
	return v.value
}

func (v *NullableMdrUsageReportResponse) Set(val *MdrUsageReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMdrUsageReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMdrUsageReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMdrUsageReportResponse(val *MdrUsageReportResponse) *NullableMdrUsageReportResponse {
	return &NullableMdrUsageReportResponse{value: val, isSet: true}
}

func (v NullableMdrUsageReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMdrUsageReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


