/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the TranscriptionEngineAConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranscriptionEngineAConfig{}

// TranscriptionEngineAConfig struct for TranscriptionEngineAConfig
type TranscriptionEngineAConfig struct {
	Language *GoogleTranscriptionLanguage `json:"language,omitempty"`
	// Whether to send also interim results. If set to false, only final results will be sent.
	InterimResults *bool `json:"interim_results,omitempty"`
	// Enables speaker diarization.
	EnableSpeakerDiarization *bool `json:"enable_speaker_diarization,omitempty"`
	// Defines minimum number of speakers in the conversation.
	MinSpeakerCount *int32 `json:"min_speaker_count,omitempty"`
	// Defines maximum number of speakers in the conversation.
	MaxSpeakerCount *int32 `json:"max_speaker_count,omitempty"`
	// Enables profanity_filter.
	ProfanityFilter *bool `json:"profanity_filter,omitempty"`
	// Enables enhanced transcription, this works for models `phone_call` and `video`.
	UseEnhanced *bool `json:"use_enhanced,omitempty"`
	// The model to use for transcription.
	Model *string `json:"model,omitempty"`
	// Hints to improve transcription accuracy.
	Hints []string `json:"hints,omitempty"`
	// Speech context to improve transcription accuracy.
	SpeechContext []TranscriptionEngineAConfigSpeechContextInner `json:"speech_context,omitempty"`
}

// NewTranscriptionEngineAConfig instantiates a new TranscriptionEngineAConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscriptionEngineAConfig() *TranscriptionEngineAConfig {
	this := TranscriptionEngineAConfig{}
	var language GoogleTranscriptionLanguage = EN
	this.Language = &language
	var interimResults bool = false
	this.InterimResults = &interimResults
	var enableSpeakerDiarization bool = false
	this.EnableSpeakerDiarization = &enableSpeakerDiarization
	var minSpeakerCount int32 = 2
	this.MinSpeakerCount = &minSpeakerCount
	var maxSpeakerCount int32 = 6
	this.MaxSpeakerCount = &maxSpeakerCount
	var profanityFilter bool = false
	this.ProfanityFilter = &profanityFilter
	var useEnhanced bool = false
	this.UseEnhanced = &useEnhanced
	return &this
}

// NewTranscriptionEngineAConfigWithDefaults instantiates a new TranscriptionEngineAConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionEngineAConfigWithDefaults() *TranscriptionEngineAConfig {
	this := TranscriptionEngineAConfig{}
	var language GoogleTranscriptionLanguage = EN
	this.Language = &language
	var interimResults bool = false
	this.InterimResults = &interimResults
	var enableSpeakerDiarization bool = false
	this.EnableSpeakerDiarization = &enableSpeakerDiarization
	var minSpeakerCount int32 = 2
	this.MinSpeakerCount = &minSpeakerCount
	var maxSpeakerCount int32 = 6
	this.MaxSpeakerCount = &maxSpeakerCount
	var profanityFilter bool = false
	this.ProfanityFilter = &profanityFilter
	var useEnhanced bool = false
	this.UseEnhanced = &useEnhanced
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetLanguage() GoogleTranscriptionLanguage {
	if o == nil || IsNil(o.Language) {
		var ret GoogleTranscriptionLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetLanguageOk() (*GoogleTranscriptionLanguage, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given GoogleTranscriptionLanguage and assigns it to the Language field.
func (o *TranscriptionEngineAConfig) SetLanguage(v GoogleTranscriptionLanguage) {
	o.Language = &v
}

// GetInterimResults returns the InterimResults field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetInterimResults() bool {
	if o == nil || IsNil(o.InterimResults) {
		var ret bool
		return ret
	}
	return *o.InterimResults
}

// GetInterimResultsOk returns a tuple with the InterimResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetInterimResultsOk() (*bool, bool) {
	if o == nil || IsNil(o.InterimResults) {
		return nil, false
	}
	return o.InterimResults, true
}

// HasInterimResults returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasInterimResults() bool {
	if o != nil && !IsNil(o.InterimResults) {
		return true
	}

	return false
}

// SetInterimResults gets a reference to the given bool and assigns it to the InterimResults field.
func (o *TranscriptionEngineAConfig) SetInterimResults(v bool) {
	o.InterimResults = &v
}

// GetEnableSpeakerDiarization returns the EnableSpeakerDiarization field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetEnableSpeakerDiarization() bool {
	if o == nil || IsNil(o.EnableSpeakerDiarization) {
		var ret bool
		return ret
	}
	return *o.EnableSpeakerDiarization
}

// GetEnableSpeakerDiarizationOk returns a tuple with the EnableSpeakerDiarization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetEnableSpeakerDiarizationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSpeakerDiarization) {
		return nil, false
	}
	return o.EnableSpeakerDiarization, true
}

// HasEnableSpeakerDiarization returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasEnableSpeakerDiarization() bool {
	if o != nil && !IsNil(o.EnableSpeakerDiarization) {
		return true
	}

	return false
}

// SetEnableSpeakerDiarization gets a reference to the given bool and assigns it to the EnableSpeakerDiarization field.
func (o *TranscriptionEngineAConfig) SetEnableSpeakerDiarization(v bool) {
	o.EnableSpeakerDiarization = &v
}

// GetMinSpeakerCount returns the MinSpeakerCount field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetMinSpeakerCount() int32 {
	if o == nil || IsNil(o.MinSpeakerCount) {
		var ret int32
		return ret
	}
	return *o.MinSpeakerCount
}

// GetMinSpeakerCountOk returns a tuple with the MinSpeakerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetMinSpeakerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSpeakerCount) {
		return nil, false
	}
	return o.MinSpeakerCount, true
}

// HasMinSpeakerCount returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasMinSpeakerCount() bool {
	if o != nil && !IsNil(o.MinSpeakerCount) {
		return true
	}

	return false
}

// SetMinSpeakerCount gets a reference to the given int32 and assigns it to the MinSpeakerCount field.
func (o *TranscriptionEngineAConfig) SetMinSpeakerCount(v int32) {
	o.MinSpeakerCount = &v
}

// GetMaxSpeakerCount returns the MaxSpeakerCount field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetMaxSpeakerCount() int32 {
	if o == nil || IsNil(o.MaxSpeakerCount) {
		var ret int32
		return ret
	}
	return *o.MaxSpeakerCount
}

// GetMaxSpeakerCountOk returns a tuple with the MaxSpeakerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetMaxSpeakerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSpeakerCount) {
		return nil, false
	}
	return o.MaxSpeakerCount, true
}

// HasMaxSpeakerCount returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasMaxSpeakerCount() bool {
	if o != nil && !IsNil(o.MaxSpeakerCount) {
		return true
	}

	return false
}

// SetMaxSpeakerCount gets a reference to the given int32 and assigns it to the MaxSpeakerCount field.
func (o *TranscriptionEngineAConfig) SetMaxSpeakerCount(v int32) {
	o.MaxSpeakerCount = &v
}

// GetProfanityFilter returns the ProfanityFilter field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetProfanityFilter() bool {
	if o == nil || IsNil(o.ProfanityFilter) {
		var ret bool
		return ret
	}
	return *o.ProfanityFilter
}

// GetProfanityFilterOk returns a tuple with the ProfanityFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetProfanityFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.ProfanityFilter) {
		return nil, false
	}
	return o.ProfanityFilter, true
}

// HasProfanityFilter returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasProfanityFilter() bool {
	if o != nil && !IsNil(o.ProfanityFilter) {
		return true
	}

	return false
}

// SetProfanityFilter gets a reference to the given bool and assigns it to the ProfanityFilter field.
func (o *TranscriptionEngineAConfig) SetProfanityFilter(v bool) {
	o.ProfanityFilter = &v
}

// GetUseEnhanced returns the UseEnhanced field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetUseEnhanced() bool {
	if o == nil || IsNil(o.UseEnhanced) {
		var ret bool
		return ret
	}
	return *o.UseEnhanced
}

// GetUseEnhancedOk returns a tuple with the UseEnhanced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetUseEnhancedOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnhanced) {
		return nil, false
	}
	return o.UseEnhanced, true
}

// HasUseEnhanced returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasUseEnhanced() bool {
	if o != nil && !IsNil(o.UseEnhanced) {
		return true
	}

	return false
}

// SetUseEnhanced gets a reference to the given bool and assigns it to the UseEnhanced field.
func (o *TranscriptionEngineAConfig) SetUseEnhanced(v bool) {
	o.UseEnhanced = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *TranscriptionEngineAConfig) SetModel(v string) {
	o.Model = &v
}

// GetHints returns the Hints field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetHints() []string {
	if o == nil || IsNil(o.Hints) {
		var ret []string
		return ret
	}
	return o.Hints
}

// GetHintsOk returns a tuple with the Hints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetHintsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hints) {
		return nil, false
	}
	return o.Hints, true
}

// HasHints returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasHints() bool {
	if o != nil && !IsNil(o.Hints) {
		return true
	}

	return false
}

// SetHints gets a reference to the given []string and assigns it to the Hints field.
func (o *TranscriptionEngineAConfig) SetHints(v []string) {
	o.Hints = v
}

// GetSpeechContext returns the SpeechContext field value if set, zero value otherwise.
func (o *TranscriptionEngineAConfig) GetSpeechContext() []TranscriptionEngineAConfigSpeechContextInner {
	if o == nil || IsNil(o.SpeechContext) {
		var ret []TranscriptionEngineAConfigSpeechContextInner
		return ret
	}
	return o.SpeechContext
}

// GetSpeechContextOk returns a tuple with the SpeechContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEngineAConfig) GetSpeechContextOk() ([]TranscriptionEngineAConfigSpeechContextInner, bool) {
	if o == nil || IsNil(o.SpeechContext) {
		return nil, false
	}
	return o.SpeechContext, true
}

// HasSpeechContext returns a boolean if a field has been set.
func (o *TranscriptionEngineAConfig) HasSpeechContext() bool {
	if o != nil && !IsNil(o.SpeechContext) {
		return true
	}

	return false
}

// SetSpeechContext gets a reference to the given []TranscriptionEngineAConfigSpeechContextInner and assigns it to the SpeechContext field.
func (o *TranscriptionEngineAConfig) SetSpeechContext(v []TranscriptionEngineAConfigSpeechContextInner) {
	o.SpeechContext = v
}

func (o TranscriptionEngineAConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranscriptionEngineAConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.InterimResults) {
		toSerialize["interim_results"] = o.InterimResults
	}
	if !IsNil(o.EnableSpeakerDiarization) {
		toSerialize["enable_speaker_diarization"] = o.EnableSpeakerDiarization
	}
	if !IsNil(o.MinSpeakerCount) {
		toSerialize["min_speaker_count"] = o.MinSpeakerCount
	}
	if !IsNil(o.MaxSpeakerCount) {
		toSerialize["max_speaker_count"] = o.MaxSpeakerCount
	}
	if !IsNil(o.ProfanityFilter) {
		toSerialize["profanity_filter"] = o.ProfanityFilter
	}
	if !IsNil(o.UseEnhanced) {
		toSerialize["use_enhanced"] = o.UseEnhanced
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Hints) {
		toSerialize["hints"] = o.Hints
	}
	if !IsNil(o.SpeechContext) {
		toSerialize["speech_context"] = o.SpeechContext
	}
	return toSerialize, nil
}

type NullableTranscriptionEngineAConfig struct {
	value *TranscriptionEngineAConfig
	isSet bool
}

func (v NullableTranscriptionEngineAConfig) Get() *TranscriptionEngineAConfig {
	return v.value
}

func (v *NullableTranscriptionEngineAConfig) Set(val *TranscriptionEngineAConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionEngineAConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionEngineAConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionEngineAConfig(val *TranscriptionEngineAConfig) *NullableTranscriptionEngineAConfig {
	return &NullableTranscriptionEngineAConfig{value: val, isSet: true}
}

func (v NullableTranscriptionEngineAConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionEngineAConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


