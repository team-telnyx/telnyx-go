/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCSCarouselCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSCarouselCard{}

// RCSCarouselCard Carousel of cards.
type RCSCarouselCard struct {
	// The width of the cards in the carousel.
	CardWidth string `json:"card_width"`
	// The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards.
	CardContents []RCSCardContent `json:"card_contents"`
}

type _RCSCarouselCard RCSCarouselCard

// NewRCSCarouselCard instantiates a new RCSCarouselCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSCarouselCard(cardWidth string, cardContents []RCSCardContent) *RCSCarouselCard {
	this := RCSCarouselCard{}
	this.CardWidth = cardWidth
	this.CardContents = cardContents
	return &this
}

// NewRCSCarouselCardWithDefaults instantiates a new RCSCarouselCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSCarouselCardWithDefaults() *RCSCarouselCard {
	this := RCSCarouselCard{}
	return &this
}

// GetCardWidth returns the CardWidth field value
func (o *RCSCarouselCard) GetCardWidth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CardWidth
}

// GetCardWidthOk returns a tuple with the CardWidth field value
// and a boolean to check if the value has been set.
func (o *RCSCarouselCard) GetCardWidthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardWidth, true
}

// SetCardWidth sets field value
func (o *RCSCarouselCard) SetCardWidth(v string) {
	o.CardWidth = v
}

// GetCardContents returns the CardContents field value
func (o *RCSCarouselCard) GetCardContents() []RCSCardContent {
	if o == nil {
		var ret []RCSCardContent
		return ret
	}

	return o.CardContents
}

// GetCardContentsOk returns a tuple with the CardContents field value
// and a boolean to check if the value has been set.
func (o *RCSCarouselCard) GetCardContentsOk() ([]RCSCardContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardContents, true
}

// SetCardContents sets field value
func (o *RCSCarouselCard) SetCardContents(v []RCSCardContent) {
	o.CardContents = v
}

func (o RCSCarouselCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSCarouselCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["card_width"] = o.CardWidth
	toSerialize["card_contents"] = o.CardContents
	return toSerialize, nil
}

func (o *RCSCarouselCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"card_width",
		"card_contents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCSCarouselCard := _RCSCarouselCard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCSCarouselCard)

	if err != nil {
		return err
	}

	*o = RCSCarouselCard(varRCSCarouselCard)

	return err
}

type NullableRCSCarouselCard struct {
	value *RCSCarouselCard
	isSet bool
}

func (v NullableRCSCarouselCard) Get() *RCSCarouselCard {
	return v.value
}

func (v *NullableRCSCarouselCard) Set(val *RCSCarouselCard) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSCarouselCard) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSCarouselCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSCarouselCard(val *RCSCarouselCard) *NullableRCSCarouselCard {
	return &NullableRCSCarouselCard{value: val, isSet: true}
}

func (v NullableRCSCarouselCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSCarouselCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


