/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the RCSAgentMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSAgentMessage{}

// RCSAgentMessage struct for RCSAgentMessage
type RCSAgentMessage struct {
	ContentMessage *RCSContentMessage `json:"content_message,omitempty"`
	Event *RCSEvent `json:"event,omitempty"`
	// Timestamp in UTC of when this message is considered expired
	ExpireTime *time.Time `json:"expire_time,omitempty"`
	// Duration in seconds ending with 's'
	Ttl *string `json:"ttl,omitempty"`
}

// NewRCSAgentMessage instantiates a new RCSAgentMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSAgentMessage() *RCSAgentMessage {
	this := RCSAgentMessage{}
	return &this
}

// NewRCSAgentMessageWithDefaults instantiates a new RCSAgentMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSAgentMessageWithDefaults() *RCSAgentMessage {
	this := RCSAgentMessage{}
	return &this
}

// GetContentMessage returns the ContentMessage field value if set, zero value otherwise.
func (o *RCSAgentMessage) GetContentMessage() RCSContentMessage {
	if o == nil || IsNil(o.ContentMessage) {
		var ret RCSContentMessage
		return ret
	}
	return *o.ContentMessage
}

// GetContentMessageOk returns a tuple with the ContentMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAgentMessage) GetContentMessageOk() (*RCSContentMessage, bool) {
	if o == nil || IsNil(o.ContentMessage) {
		return nil, false
	}
	return o.ContentMessage, true
}

// HasContentMessage returns a boolean if a field has been set.
func (o *RCSAgentMessage) HasContentMessage() bool {
	if o != nil && !IsNil(o.ContentMessage) {
		return true
	}

	return false
}

// SetContentMessage gets a reference to the given RCSContentMessage and assigns it to the ContentMessage field.
func (o *RCSAgentMessage) SetContentMessage(v RCSContentMessage) {
	o.ContentMessage = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *RCSAgentMessage) GetEvent() RCSEvent {
	if o == nil || IsNil(o.Event) {
		var ret RCSEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAgentMessage) GetEventOk() (*RCSEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *RCSAgentMessage) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given RCSEvent and assigns it to the Event field.
func (o *RCSAgentMessage) SetEvent(v RCSEvent) {
	o.Event = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *RCSAgentMessage) GetExpireTime() time.Time {
	if o == nil || IsNil(o.ExpireTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAgentMessage) GetExpireTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireTime) {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *RCSAgentMessage) HasExpireTime() bool {
	if o != nil && !IsNil(o.ExpireTime) {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given time.Time and assigns it to the ExpireTime field.
func (o *RCSAgentMessage) SetExpireTime(v time.Time) {
	o.ExpireTime = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RCSAgentMessage) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAgentMessage) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RCSAgentMessage) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *RCSAgentMessage) SetTtl(v string) {
	o.Ttl = &v
}

func (o RCSAgentMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSAgentMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentMessage) {
		toSerialize["content_message"] = o.ContentMessage
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.ExpireTime) {
		toSerialize["expire_time"] = o.ExpireTime
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	return toSerialize, nil
}

type NullableRCSAgentMessage struct {
	value *RCSAgentMessage
	isSet bool
}

func (v NullableRCSAgentMessage) Get() *RCSAgentMessage {
	return v.value
}

func (v *NullableRCSAgentMessage) Set(val *RCSAgentMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSAgentMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSAgentMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSAgentMessage(val *RCSAgentMessage) *NullableRCSAgentMessage {
	return &NullableRCSAgentMessage{value: val, isSet: true}
}

func (v NullableRCSAgentMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSAgentMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


