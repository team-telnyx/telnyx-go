/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Participant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Participant{}

// Participant struct for Participant
type Participant struct {
	RecordType string `json:"record_type"`
	// Uniquely identifies the participant
	Id string `json:"id"`
	// Uniquely identifies the call leg associated with the participant
	CallLegId string `json:"call_leg_id"`
	// Call Control ID associated with the partiipant of the conference
	CallControlId string `json:"call_control_id"`
	Conference ParticipantConference `json:"conference"`
	// Array of unique call_control_ids the participant can whisper to..
	WhisperCallControlIds []string `json:"whisper_call_control_ids"`
	// ISO 8601 formatted date of when the participant was created
	CreatedAt string `json:"created_at"`
	// ISO 8601 formatted date of when the participant was last updated
	UpdatedAt string `json:"updated_at"`
	// Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.
	EndConferenceOnExit bool `json:"end_conference_on_exit"`
	// Whether the conference will end after the participant leaves the conference.
	SoftEndConferenceOnExit bool `json:"soft_end_conference_on_exit"`
	// The status of the participant with respect to the lifecycle within the conference
	Status string `json:"status"`
	// Whether the participant is muted.
	Muted bool `json:"muted"`
	// Whether the participant is put on_hold.
	OnHold bool `json:"on_hold"`
}

type _Participant Participant

// NewParticipant instantiates a new Participant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipant(recordType string, id string, callLegId string, callControlId string, conference ParticipantConference, whisperCallControlIds []string, createdAt string, updatedAt string, endConferenceOnExit bool, softEndConferenceOnExit bool, status string, muted bool, onHold bool) *Participant {
	this := Participant{}
	this.RecordType = recordType
	this.Id = id
	this.CallLegId = callLegId
	this.CallControlId = callControlId
	this.Conference = conference
	this.WhisperCallControlIds = whisperCallControlIds
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.EndConferenceOnExit = endConferenceOnExit
	this.SoftEndConferenceOnExit = softEndConferenceOnExit
	this.Status = status
	this.Muted = muted
	this.OnHold = onHold
	return &this
}

// NewParticipantWithDefaults instantiates a new Participant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantWithDefaults() *Participant {
	this := Participant{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *Participant) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *Participant) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *Participant) SetRecordType(v string) {
	o.RecordType = v
}

// GetId returns the Id field value
func (o *Participant) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Participant) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Participant) SetId(v string) {
	o.Id = v
}

// GetCallLegId returns the CallLegId field value
func (o *Participant) GetCallLegId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value
// and a boolean to check if the value has been set.
func (o *Participant) GetCallLegIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallLegId, true
}

// SetCallLegId sets field value
func (o *Participant) SetCallLegId(v string) {
	o.CallLegId = v
}

// GetCallControlId returns the CallControlId field value
func (o *Participant) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *Participant) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *Participant) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetConference returns the Conference field value
func (o *Participant) GetConference() ParticipantConference {
	if o == nil {
		var ret ParticipantConference
		return ret
	}

	return o.Conference
}

// GetConferenceOk returns a tuple with the Conference field value
// and a boolean to check if the value has been set.
func (o *Participant) GetConferenceOk() (*ParticipantConference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conference, true
}

// SetConference sets field value
func (o *Participant) SetConference(v ParticipantConference) {
	o.Conference = v
}

// GetWhisperCallControlIds returns the WhisperCallControlIds field value
func (o *Participant) GetWhisperCallControlIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WhisperCallControlIds
}

// GetWhisperCallControlIdsOk returns a tuple with the WhisperCallControlIds field value
// and a boolean to check if the value has been set.
func (o *Participant) GetWhisperCallControlIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WhisperCallControlIds, true
}

// SetWhisperCallControlIds sets field value
func (o *Participant) SetWhisperCallControlIds(v []string) {
	o.WhisperCallControlIds = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Participant) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Participant) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Participant) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Participant) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Participant) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Participant) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetEndConferenceOnExit returns the EndConferenceOnExit field value
func (o *Participant) GetEndConferenceOnExit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EndConferenceOnExit
}

// GetEndConferenceOnExitOk returns a tuple with the EndConferenceOnExit field value
// and a boolean to check if the value has been set.
func (o *Participant) GetEndConferenceOnExitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndConferenceOnExit, true
}

// SetEndConferenceOnExit sets field value
func (o *Participant) SetEndConferenceOnExit(v bool) {
	o.EndConferenceOnExit = v
}

// GetSoftEndConferenceOnExit returns the SoftEndConferenceOnExit field value
func (o *Participant) GetSoftEndConferenceOnExit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SoftEndConferenceOnExit
}

// GetSoftEndConferenceOnExitOk returns a tuple with the SoftEndConferenceOnExit field value
// and a boolean to check if the value has been set.
func (o *Participant) GetSoftEndConferenceOnExitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftEndConferenceOnExit, true
}

// SetSoftEndConferenceOnExit sets field value
func (o *Participant) SetSoftEndConferenceOnExit(v bool) {
	o.SoftEndConferenceOnExit = v
}

// GetStatus returns the Status field value
func (o *Participant) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Participant) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Participant) SetStatus(v string) {
	o.Status = v
}

// GetMuted returns the Muted field value
func (o *Participant) GetMuted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Muted
}

// GetMutedOk returns a tuple with the Muted field value
// and a boolean to check if the value has been set.
func (o *Participant) GetMutedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Muted, true
}

// SetMuted sets field value
func (o *Participant) SetMuted(v bool) {
	o.Muted = v
}

// GetOnHold returns the OnHold field value
func (o *Participant) GetOnHold() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OnHold
}

// GetOnHoldOk returns a tuple with the OnHold field value
// and a boolean to check if the value has been set.
func (o *Participant) GetOnHoldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnHold, true
}

// SetOnHold sets field value
func (o *Participant) SetOnHold(v bool) {
	o.OnHold = v
}

func (o Participant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Participant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_type"] = o.RecordType
	toSerialize["id"] = o.Id
	toSerialize["call_leg_id"] = o.CallLegId
	toSerialize["call_control_id"] = o.CallControlId
	toSerialize["conference"] = o.Conference
	toSerialize["whisper_call_control_ids"] = o.WhisperCallControlIds
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["end_conference_on_exit"] = o.EndConferenceOnExit
	toSerialize["soft_end_conference_on_exit"] = o.SoftEndConferenceOnExit
	toSerialize["status"] = o.Status
	toSerialize["muted"] = o.Muted
	toSerialize["on_hold"] = o.OnHold
	return toSerialize, nil
}

func (o *Participant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
		"id",
		"call_leg_id",
		"call_control_id",
		"conference",
		"whisper_call_control_ids",
		"created_at",
		"updated_at",
		"end_conference_on_exit",
		"soft_end_conference_on_exit",
		"status",
		"muted",
		"on_hold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipant := _Participant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipant)

	if err != nil {
		return err
	}

	*o = Participant(varParticipant)

	return err
}

type NullableParticipant struct {
	value *Participant
	isSet bool
}

func (v NullableParticipant) Get() *Participant {
	return v.value
}

func (v *NullableParticipant) Set(val *Participant) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipant(val *Participant) *NullableParticipant {
	return &NullableParticipant{value: val, isSet: true}
}

func (v NullableParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


