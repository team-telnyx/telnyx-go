/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardActivationCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardActivationCode{}

// SIMCardActivationCode struct for SIMCardActivationCode
type SIMCardActivationCode struct {
	RecordType *string `json:"record_type,omitempty"`
	// Contents of the eSIM activation QR code.
	ActivationCode *string `json:"activation_code,omitempty"`
}

// NewSIMCardActivationCode instantiates a new SIMCardActivationCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardActivationCode() *SIMCardActivationCode {
	this := SIMCardActivationCode{}
	return &this
}

// NewSIMCardActivationCodeWithDefaults instantiates a new SIMCardActivationCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardActivationCodeWithDefaults() *SIMCardActivationCode {
	this := SIMCardActivationCode{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SIMCardActivationCode) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardActivationCode) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SIMCardActivationCode) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SIMCardActivationCode) SetRecordType(v string) {
	o.RecordType = &v
}

// GetActivationCode returns the ActivationCode field value if set, zero value otherwise.
func (o *SIMCardActivationCode) GetActivationCode() string {
	if o == nil || IsNil(o.ActivationCode) {
		var ret string
		return ret
	}
	return *o.ActivationCode
}

// GetActivationCodeOk returns a tuple with the ActivationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardActivationCode) GetActivationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationCode) {
		return nil, false
	}
	return o.ActivationCode, true
}

// HasActivationCode returns a boolean if a field has been set.
func (o *SIMCardActivationCode) HasActivationCode() bool {
	if o != nil && !IsNil(o.ActivationCode) {
		return true
	}

	return false
}

// SetActivationCode gets a reference to the given string and assigns it to the ActivationCode field.
func (o *SIMCardActivationCode) SetActivationCode(v string) {
	o.ActivationCode = &v
}

func (o SIMCardActivationCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardActivationCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.ActivationCode) {
		toSerialize["activation_code"] = o.ActivationCode
	}
	return toSerialize, nil
}

type NullableSIMCardActivationCode struct {
	value *SIMCardActivationCode
	isSet bool
}

func (v NullableSIMCardActivationCode) Get() *SIMCardActivationCode {
	return v.value
}

func (v *NullableSIMCardActivationCode) Set(val *SIMCardActivationCode) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardActivationCode) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardActivationCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardActivationCode(val *SIMCardActivationCode) *NullableSIMCardActivationCode {
	return &NullableSIMCardActivationCode{value: val, isSet: true}
}

func (v NullableSIMCardActivationCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardActivationCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


