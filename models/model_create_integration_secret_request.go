/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateIntegrationSecretRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIntegrationSecretRequest{}

// CreateIntegrationSecretRequest struct for CreateIntegrationSecretRequest
type CreateIntegrationSecretRequest struct {
	// The unique identifier of the secret.
	Identifier string `json:"identifier"`
	// The type of secret.
	Type string `json:"type"`
	// The token for the secret. Required for bearer type secrets, ignored otherwise.
	Token *string `json:"token,omitempty"`
	// The username for the secret. Required for basic type secrets, ignored otherwise.
	Username *string `json:"username,omitempty"`
	// The password for the secret. Required for basic type secrets, ignored otherwise.
	Password *string `json:"password,omitempty"`
}

type _CreateIntegrationSecretRequest CreateIntegrationSecretRequest

// NewCreateIntegrationSecretRequest instantiates a new CreateIntegrationSecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIntegrationSecretRequest(identifier string, type_ string) *CreateIntegrationSecretRequest {
	this := CreateIntegrationSecretRequest{}
	this.Identifier = identifier
	this.Type = type_
	return &this
}

// NewCreateIntegrationSecretRequestWithDefaults instantiates a new CreateIntegrationSecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIntegrationSecretRequestWithDefaults() *CreateIntegrationSecretRequest {
	this := CreateIntegrationSecretRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *CreateIntegrationSecretRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *CreateIntegrationSecretRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *CreateIntegrationSecretRequest) SetIdentifier(v string) {
	o.Identifier = v
}

// GetType returns the Type field value
func (o *CreateIntegrationSecretRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateIntegrationSecretRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateIntegrationSecretRequest) SetType(v string) {
	o.Type = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *CreateIntegrationSecretRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationSecretRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *CreateIntegrationSecretRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *CreateIntegrationSecretRequest) SetToken(v string) {
	o.Token = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *CreateIntegrationSecretRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationSecretRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateIntegrationSecretRequest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *CreateIntegrationSecretRequest) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CreateIntegrationSecretRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationSecretRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateIntegrationSecretRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CreateIntegrationSecretRequest) SetPassword(v string) {
	o.Password = &v
}

func (o CreateIntegrationSecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIntegrationSecretRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["type"] = o.Type
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

func (o *CreateIntegrationSecretRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateIntegrationSecretRequest := _CreateIntegrationSecretRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateIntegrationSecretRequest)

	if err != nil {
		return err
	}

	*o = CreateIntegrationSecretRequest(varCreateIntegrationSecretRequest)

	return err
}

type NullableCreateIntegrationSecretRequest struct {
	value *CreateIntegrationSecretRequest
	isSet bool
}

func (v NullableCreateIntegrationSecretRequest) Get() *CreateIntegrationSecretRequest {
	return v.value
}

func (v *NullableCreateIntegrationSecretRequest) Set(val *CreateIntegrationSecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIntegrationSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIntegrationSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIntegrationSecretRequest(val *CreateIntegrationSecretRequest) *NullableCreateIntegrationSecretRequest {
	return &NullableCreateIntegrationSecretRequest{value: val, isSet: true}
}

func (v NullableCreateIntegrationSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIntegrationSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


