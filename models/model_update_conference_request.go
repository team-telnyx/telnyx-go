/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the UpdateConferenceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateConferenceRequest{}

// UpdateConferenceRequest struct for UpdateConferenceRequest
type UpdateConferenceRequest struct {
	// The new status of the resource. Specifying `completed` will end the conference and hang up all participants.
	Status *string `json:"Status,omitempty"`
	// The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceUrl *string `json:"AnnounceUrl,omitempty"`
	// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
	AnnounceMethod *string `json:"AnnounceMethod,omitempty"`
}

// NewUpdateConferenceRequest instantiates a new UpdateConferenceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateConferenceRequest() *UpdateConferenceRequest {
	this := UpdateConferenceRequest{}
	return &this
}

// NewUpdateConferenceRequestWithDefaults instantiates a new UpdateConferenceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateConferenceRequestWithDefaults() *UpdateConferenceRequest {
	this := UpdateConferenceRequest{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateConferenceRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConferenceRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateConferenceRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UpdateConferenceRequest) SetStatus(v string) {
	o.Status = &v
}

// GetAnnounceUrl returns the AnnounceUrl field value if set, zero value otherwise.
func (o *UpdateConferenceRequest) GetAnnounceUrl() string {
	if o == nil || IsNil(o.AnnounceUrl) {
		var ret string
		return ret
	}
	return *o.AnnounceUrl
}

// GetAnnounceUrlOk returns a tuple with the AnnounceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConferenceRequest) GetAnnounceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AnnounceUrl) {
		return nil, false
	}
	return o.AnnounceUrl, true
}

// HasAnnounceUrl returns a boolean if a field has been set.
func (o *UpdateConferenceRequest) HasAnnounceUrl() bool {
	if o != nil && !IsNil(o.AnnounceUrl) {
		return true
	}

	return false
}

// SetAnnounceUrl gets a reference to the given string and assigns it to the AnnounceUrl field.
func (o *UpdateConferenceRequest) SetAnnounceUrl(v string) {
	o.AnnounceUrl = &v
}

// GetAnnounceMethod returns the AnnounceMethod field value if set, zero value otherwise.
func (o *UpdateConferenceRequest) GetAnnounceMethod() string {
	if o == nil || IsNil(o.AnnounceMethod) {
		var ret string
		return ret
	}
	return *o.AnnounceMethod
}

// GetAnnounceMethodOk returns a tuple with the AnnounceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConferenceRequest) GetAnnounceMethodOk() (*string, bool) {
	if o == nil || IsNil(o.AnnounceMethod) {
		return nil, false
	}
	return o.AnnounceMethod, true
}

// HasAnnounceMethod returns a boolean if a field has been set.
func (o *UpdateConferenceRequest) HasAnnounceMethod() bool {
	if o != nil && !IsNil(o.AnnounceMethod) {
		return true
	}

	return false
}

// SetAnnounceMethod gets a reference to the given string and assigns it to the AnnounceMethod field.
func (o *UpdateConferenceRequest) SetAnnounceMethod(v string) {
	o.AnnounceMethod = &v
}

func (o UpdateConferenceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateConferenceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.AnnounceUrl) {
		toSerialize["AnnounceUrl"] = o.AnnounceUrl
	}
	if !IsNil(o.AnnounceMethod) {
		toSerialize["AnnounceMethod"] = o.AnnounceMethod
	}
	return toSerialize, nil
}

type NullableUpdateConferenceRequest struct {
	value *UpdateConferenceRequest
	isSet bool
}

func (v NullableUpdateConferenceRequest) Get() *UpdateConferenceRequest {
	return v.value
}

func (v *NullableUpdateConferenceRequest) Set(val *UpdateConferenceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConferenceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConferenceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConferenceRequest(val *UpdateConferenceRequest) *NullableUpdateConferenceRequest {
	return &NullableUpdateConferenceRequest{value: val, isSet: true}
}

func (v NullableUpdateConferenceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConferenceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


