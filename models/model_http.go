/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the Http type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Http{}

// Http HTTP request and response information.
type Http struct {
	Request *HttpRequest `json:"request,omitempty"`
	Response NullableHttpResponse `json:"response,omitempty"`
}

// NewHttp instantiates a new Http object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttp() *Http {
	this := Http{}
	return &this
}

// NewHttpWithDefaults instantiates a new Http object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpWithDefaults() *Http {
	this := Http{}
	return &this
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *Http) GetRequest() HttpRequest {
	if o == nil || IsNil(o.Request) {
		var ret HttpRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Http) GetRequestOk() (*HttpRequest, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *Http) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given HttpRequest and assigns it to the Request field.
func (o *Http) SetRequest(v HttpRequest) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Http) GetResponse() HttpResponse {
	if o == nil || IsNil(o.Response.Get()) {
		var ret HttpResponse
		return ret
	}
	return *o.Response.Get()
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Http) GetResponseOk() (*HttpResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Response.Get(), o.Response.IsSet()
}

// HasResponse returns a boolean if a field has been set.
func (o *Http) HasResponse() bool {
	if o != nil && o.Response.IsSet() {
		return true
	}

	return false
}

// SetResponse gets a reference to the given NullableHttpResponse and assigns it to the Response field.
func (o *Http) SetResponse(v HttpResponse) {
	o.Response.Set(&v)
}
// SetResponseNil sets the value for Response to be an explicit nil
func (o *Http) SetResponseNil() {
	o.Response.Set(nil)
}

// UnsetResponse ensures that no value is present for Response, not even an explicit nil
func (o *Http) UnsetResponse() {
	o.Response.Unset()
}

func (o Http) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Http) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if o.Response.IsSet() {
		toSerialize["response"] = o.Response.Get()
	}
	return toSerialize, nil
}

type NullableHttp struct {
	value *Http
	isSet bool
}

func (v NullableHttp) Get() *Http {
	return v.value
}

func (v *NullableHttp) Set(val *Http) {
	v.value = val
	v.isSet = true
}

func (v NullableHttp) IsSet() bool {
	return v.isSet
}

func (v *NullableHttp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttp(val *Http) *NullableHttp {
	return &NullableHttp{value: val, isSet: true}
}

func (v NullableHttp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


