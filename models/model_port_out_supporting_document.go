/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PortOutSupportingDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortOutSupportingDocument{}

// PortOutSupportingDocument struct for PortOutSupportingDocument
type PortOutSupportingDocument struct {
	Id string `json:"id"`
	// Identifies the type of the resource.
	RecordType string `json:"record_type"`
	// Identifies the type of the document
	Type string `json:"type"`
	// Identifies the associated port request
	PortoutId string `json:"portout_id"`
	// Identifies the associated document
	DocumentId string `json:"document_id"`
	// Supporting document creation timestamp in ISO 8601 format
	CreatedAt string `json:"created_at"`
	// Supporting document last changed timestamp in ISO 8601 format
	UpdatedAt string `json:"updated_at"`
}

type _PortOutSupportingDocument PortOutSupportingDocument

// NewPortOutSupportingDocument instantiates a new PortOutSupportingDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortOutSupportingDocument(id string, recordType string, type_ string, portoutId string, documentId string, createdAt string, updatedAt string) *PortOutSupportingDocument {
	this := PortOutSupportingDocument{}
	this.Id = id
	this.RecordType = recordType
	this.Type = type_
	this.PortoutId = portoutId
	this.DocumentId = documentId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewPortOutSupportingDocumentWithDefaults instantiates a new PortOutSupportingDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortOutSupportingDocumentWithDefaults() *PortOutSupportingDocument {
	this := PortOutSupportingDocument{}
	return &this
}

// GetId returns the Id field value
func (o *PortOutSupportingDocument) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PortOutSupportingDocument) SetId(v string) {
	o.Id = v
}

// GetRecordType returns the RecordType field value
func (o *PortOutSupportingDocument) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *PortOutSupportingDocument) SetRecordType(v string) {
	o.RecordType = v
}

// GetType returns the Type field value
func (o *PortOutSupportingDocument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PortOutSupportingDocument) SetType(v string) {
	o.Type = v
}

// GetPortoutId returns the PortoutId field value
func (o *PortOutSupportingDocument) GetPortoutId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortoutId
}

// GetPortoutIdOk returns a tuple with the PortoutId field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetPortoutIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortoutId, true
}

// SetPortoutId sets field value
func (o *PortOutSupportingDocument) SetPortoutId(v string) {
	o.PortoutId = v
}

// GetDocumentId returns the DocumentId field value
func (o *PortOutSupportingDocument) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *PortOutSupportingDocument) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PortOutSupportingDocument) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PortOutSupportingDocument) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PortOutSupportingDocument) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PortOutSupportingDocument) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PortOutSupportingDocument) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o PortOutSupportingDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortOutSupportingDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["record_type"] = o.RecordType
	toSerialize["type"] = o.Type
	toSerialize["portout_id"] = o.PortoutId
	toSerialize["document_id"] = o.DocumentId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *PortOutSupportingDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"record_type",
		"type",
		"portout_id",
		"document_id",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortOutSupportingDocument := _PortOutSupportingDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortOutSupportingDocument)

	if err != nil {
		return err
	}

	*o = PortOutSupportingDocument(varPortOutSupportingDocument)

	return err
}

type NullablePortOutSupportingDocument struct {
	value *PortOutSupportingDocument
	isSet bool
}

func (v NullablePortOutSupportingDocument) Get() *PortOutSupportingDocument {
	return v.value
}

func (v *NullablePortOutSupportingDocument) Set(val *PortOutSupportingDocument) {
	v.value = val
	v.isSet = true
}

func (v NullablePortOutSupportingDocument) IsSet() bool {
	return v.isSet
}

func (v *NullablePortOutSupportingDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortOutSupportingDocument(val *PortOutSupportingDocument) *NullablePortOutSupportingDocument {
	return &NullablePortOutSupportingDocument{value: val, isSet: true}
}

func (v NullablePortOutSupportingDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortOutSupportingDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


