/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardPublicIP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardPublicIP{}

// SIMCardPublicIP struct for SIMCardPublicIP
type SIMCardPublicIP struct {
	RecordType *string `json:"record_type,omitempty"`
	RegionCode *string `json:"region_code,omitempty"`
	SimCardId *string `json:"sim_card_id,omitempty"`
	Type *string `json:"type,omitempty"`
	// The provisioned IP address. This attribute will only be available when underlying resource status is in a \"provisioned\" status.
	Ip *string `json:"ip,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewSIMCardPublicIP instantiates a new SIMCardPublicIP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardPublicIP() *SIMCardPublicIP {
	this := SIMCardPublicIP{}
	return &this
}

// NewSIMCardPublicIPWithDefaults instantiates a new SIMCardPublicIP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardPublicIPWithDefaults() *SIMCardPublicIP {
	this := SIMCardPublicIP{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SIMCardPublicIP) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *SIMCardPublicIP) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetSimCardId returns the SimCardId field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetSimCardId() string {
	if o == nil || IsNil(o.SimCardId) {
		var ret string
		return ret
	}
	return *o.SimCardId
}

// GetSimCardIdOk returns a tuple with the SimCardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetSimCardIdOk() (*string, bool) {
	if o == nil || IsNil(o.SimCardId) {
		return nil, false
	}
	return o.SimCardId, true
}

// HasSimCardId returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasSimCardId() bool {
	if o != nil && !IsNil(o.SimCardId) {
		return true
	}

	return false
}

// SetSimCardId gets a reference to the given string and assigns it to the SimCardId field.
func (o *SIMCardPublicIP) SetSimCardId(v string) {
	o.SimCardId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SIMCardPublicIP) SetType(v string) {
	o.Type = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *SIMCardPublicIP) SetIp(v string) {
	o.Ip = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SIMCardPublicIP) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SIMCardPublicIP) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardPublicIP) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SIMCardPublicIP) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SIMCardPublicIP) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o SIMCardPublicIP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardPublicIP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.RegionCode) {
		toSerialize["region_code"] = o.RegionCode
	}
	if !IsNil(o.SimCardId) {
		toSerialize["sim_card_id"] = o.SimCardId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableSIMCardPublicIP struct {
	value *SIMCardPublicIP
	isSet bool
}

func (v NullableSIMCardPublicIP) Get() *SIMCardPublicIP {
	return v.value
}

func (v *NullableSIMCardPublicIP) Set(val *SIMCardPublicIP) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardPublicIP) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardPublicIP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardPublicIP(val *SIMCardPublicIP) *NullableSIMCardPublicIP {
	return &NullableSIMCardPublicIP{value: val, isSet: true}
}

func (v NullableSIMCardPublicIP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardPublicIP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


