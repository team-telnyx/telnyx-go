/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the AuditEventChanges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEventChanges{}

// AuditEventChanges Details of the changes made to a resource.
type AuditEventChanges struct {
	// The name of the field that was changed. May use the dot notation to indicate nested fields.
	Field *string `json:"field,omitempty"`
	To *AuditEventChangesTo `json:"to,omitempty"`
	From *AuditEventChangesFrom `json:"from,omitempty"`
}

// NewAuditEventChanges instantiates a new AuditEventChanges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEventChanges() *AuditEventChanges {
	this := AuditEventChanges{}
	return &this
}

// NewAuditEventChangesWithDefaults instantiates a new AuditEventChanges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventChangesWithDefaults() *AuditEventChanges {
	this := AuditEventChanges{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *AuditEventChanges) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventChanges) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *AuditEventChanges) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *AuditEventChanges) SetField(v string) {
	o.Field = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *AuditEventChanges) GetTo() AuditEventChangesTo {
	if o == nil || IsNil(o.To) {
		var ret AuditEventChangesTo
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventChanges) GetToOk() (*AuditEventChangesTo, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *AuditEventChanges) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given AuditEventChangesTo and assigns it to the To field.
func (o *AuditEventChanges) SetTo(v AuditEventChangesTo) {
	o.To = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *AuditEventChanges) GetFrom() AuditEventChangesFrom {
	if o == nil || IsNil(o.From) {
		var ret AuditEventChangesFrom
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventChanges) GetFromOk() (*AuditEventChangesFrom, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *AuditEventChanges) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given AuditEventChangesFrom and assigns it to the From field.
func (o *AuditEventChanges) SetFrom(v AuditEventChangesFrom) {
	o.From = &v
}

func (o AuditEventChanges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEventChanges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	return toSerialize, nil
}

type NullableAuditEventChanges struct {
	value *AuditEventChanges
	isSet bool
}

func (v NullableAuditEventChanges) Get() *AuditEventChanges {
	return v.value
}

func (v *NullableAuditEventChanges) Set(val *AuditEventChanges) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventChanges) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventChanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventChanges(val *AuditEventChanges) *NullableAuditEventChanges {
	return &NullableAuditEventChanges{value: val, isSet: true}
}

func (v NullableAuditEventChanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventChanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


