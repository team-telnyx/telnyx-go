/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCallControlApplicationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCallControlApplicationRequest{}

// CreateCallControlApplicationRequest struct for CreateCallControlApplicationRequest
type CreateCallControlApplicationRequest struct {
	// A user-assigned name to help manage the application.
	ApplicationName string `json:"application_name"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.
	WebhookEventUrl string `json:"webhook_event_url"`
	// Specifies whether the connection can be used.
	Active *bool `json:"active,omitempty"`
	// <code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media. 
	AnchorsiteOverride *string `json:"anchorsite_override,omitempty"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.
	DtmfType *string `json:"dtmf_type,omitempty"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after timing out.
	FirstCommandTimeout *bool `json:"first_command_timeout,omitempty"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs *int32 `json:"first_command_timeout_secs,omitempty"`
	Inbound *CallControlApplicationInbound `json:"inbound,omitempty"`
	Outbound *CallControlApplicationOutbound `json:"outbound,omitempty"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookApiVersion *string `json:"webhook_api_version,omitempty"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverUrl NullableString `json:"webhook_event_failover_url,omitempty"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs NullableInt32 `json:"webhook_timeout_secs,omitempty"`
}

type _CreateCallControlApplicationRequest CreateCallControlApplicationRequest

// NewCreateCallControlApplicationRequest instantiates a new CreateCallControlApplicationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCallControlApplicationRequest(applicationName string, webhookEventUrl string) *CreateCallControlApplicationRequest {
	this := CreateCallControlApplicationRequest{}
	this.ApplicationName = applicationName
	this.WebhookEventUrl = webhookEventUrl
	var active bool = true
	this.Active = &active
	var anchorsiteOverride string = "\"Latency\""
	this.AnchorsiteOverride = &anchorsiteOverride
	var dtmfType string = "RFC 2833"
	this.DtmfType = &dtmfType
	var firstCommandTimeout bool = false
	this.FirstCommandTimeout = &firstCommandTimeout
	var firstCommandTimeoutSecs int32 = 30
	this.FirstCommandTimeoutSecs = &firstCommandTimeoutSecs
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	return &this
}

// NewCreateCallControlApplicationRequestWithDefaults instantiates a new CreateCallControlApplicationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCallControlApplicationRequestWithDefaults() *CreateCallControlApplicationRequest {
	this := CreateCallControlApplicationRequest{}
	var active bool = true
	this.Active = &active
	var anchorsiteOverride string = "\"Latency\""
	this.AnchorsiteOverride = &anchorsiteOverride
	var dtmfType string = "RFC 2833"
	this.DtmfType = &dtmfType
	var firstCommandTimeout bool = false
	this.FirstCommandTimeout = &firstCommandTimeout
	var firstCommandTimeoutSecs int32 = 30
	this.FirstCommandTimeoutSecs = &firstCommandTimeoutSecs
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	return &this
}

// GetApplicationName returns the ApplicationName field value
func (o *CreateCallControlApplicationRequest) GetApplicationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetApplicationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationName, true
}

// SetApplicationName sets field value
func (o *CreateCallControlApplicationRequest) SetApplicationName(v string) {
	o.ApplicationName = v
}

// GetWebhookEventUrl returns the WebhookEventUrl field value
func (o *CreateCallControlApplicationRequest) GetWebhookEventUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookEventUrl
}

// GetWebhookEventUrlOk returns a tuple with the WebhookEventUrl field value
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetWebhookEventUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebhookEventUrl, true
}

// SetWebhookEventUrl sets field value
func (o *CreateCallControlApplicationRequest) SetWebhookEventUrl(v string) {
	o.WebhookEventUrl = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateCallControlApplicationRequest) SetActive(v bool) {
	o.Active = &v
}

// GetAnchorsiteOverride returns the AnchorsiteOverride field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetAnchorsiteOverride() string {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		var ret string
		return ret
	}
	return *o.AnchorsiteOverride
}

// GetAnchorsiteOverrideOk returns a tuple with the AnchorsiteOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetAnchorsiteOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		return nil, false
	}
	return o.AnchorsiteOverride, true
}

// HasAnchorsiteOverride returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasAnchorsiteOverride() bool {
	if o != nil && !IsNil(o.AnchorsiteOverride) {
		return true
	}

	return false
}

// SetAnchorsiteOverride gets a reference to the given string and assigns it to the AnchorsiteOverride field.
func (o *CreateCallControlApplicationRequest) SetAnchorsiteOverride(v string) {
	o.AnchorsiteOverride = &v
}

// GetDtmfType returns the DtmfType field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetDtmfType() string {
	if o == nil || IsNil(o.DtmfType) {
		var ret string
		return ret
	}
	return *o.DtmfType
}

// GetDtmfTypeOk returns a tuple with the DtmfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetDtmfTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DtmfType) {
		return nil, false
	}
	return o.DtmfType, true
}

// HasDtmfType returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasDtmfType() bool {
	if o != nil && !IsNil(o.DtmfType) {
		return true
	}

	return false
}

// SetDtmfType gets a reference to the given string and assigns it to the DtmfType field.
func (o *CreateCallControlApplicationRequest) SetDtmfType(v string) {
	o.DtmfType = &v
}

// GetFirstCommandTimeout returns the FirstCommandTimeout field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetFirstCommandTimeout() bool {
	if o == nil || IsNil(o.FirstCommandTimeout) {
		var ret bool
		return ret
	}
	return *o.FirstCommandTimeout
}

// GetFirstCommandTimeoutOk returns a tuple with the FirstCommandTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetFirstCommandTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstCommandTimeout) {
		return nil, false
	}
	return o.FirstCommandTimeout, true
}

// HasFirstCommandTimeout returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasFirstCommandTimeout() bool {
	if o != nil && !IsNil(o.FirstCommandTimeout) {
		return true
	}

	return false
}

// SetFirstCommandTimeout gets a reference to the given bool and assigns it to the FirstCommandTimeout field.
func (o *CreateCallControlApplicationRequest) SetFirstCommandTimeout(v bool) {
	o.FirstCommandTimeout = &v
}

// GetFirstCommandTimeoutSecs returns the FirstCommandTimeoutSecs field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetFirstCommandTimeoutSecs() int32 {
	if o == nil || IsNil(o.FirstCommandTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.FirstCommandTimeoutSecs
}

// GetFirstCommandTimeoutSecsOk returns a tuple with the FirstCommandTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetFirstCommandTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstCommandTimeoutSecs) {
		return nil, false
	}
	return o.FirstCommandTimeoutSecs, true
}

// HasFirstCommandTimeoutSecs returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasFirstCommandTimeoutSecs() bool {
	if o != nil && !IsNil(o.FirstCommandTimeoutSecs) {
		return true
	}

	return false
}

// SetFirstCommandTimeoutSecs gets a reference to the given int32 and assigns it to the FirstCommandTimeoutSecs field.
func (o *CreateCallControlApplicationRequest) SetFirstCommandTimeoutSecs(v int32) {
	o.FirstCommandTimeoutSecs = &v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetInbound() CallControlApplicationInbound {
	if o == nil || IsNil(o.Inbound) {
		var ret CallControlApplicationInbound
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetInboundOk() (*CallControlApplicationInbound, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given CallControlApplicationInbound and assigns it to the Inbound field.
func (o *CreateCallControlApplicationRequest) SetInbound(v CallControlApplicationInbound) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetOutbound() CallControlApplicationOutbound {
	if o == nil || IsNil(o.Outbound) {
		var ret CallControlApplicationOutbound
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetOutboundOk() (*CallControlApplicationOutbound, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given CallControlApplicationOutbound and assigns it to the Outbound field.
func (o *CreateCallControlApplicationRequest) SetOutbound(v CallControlApplicationOutbound) {
	o.Outbound = &v
}

// GetWebhookApiVersion returns the WebhookApiVersion field value if set, zero value otherwise.
func (o *CreateCallControlApplicationRequest) GetWebhookApiVersion() string {
	if o == nil || IsNil(o.WebhookApiVersion) {
		var ret string
		return ret
	}
	return *o.WebhookApiVersion
}

// GetWebhookApiVersionOk returns a tuple with the WebhookApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCallControlApplicationRequest) GetWebhookApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookApiVersion) {
		return nil, false
	}
	return o.WebhookApiVersion, true
}

// HasWebhookApiVersion returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasWebhookApiVersion() bool {
	if o != nil && !IsNil(o.WebhookApiVersion) {
		return true
	}

	return false
}

// SetWebhookApiVersion gets a reference to the given string and assigns it to the WebhookApiVersion field.
func (o *CreateCallControlApplicationRequest) SetWebhookApiVersion(v string) {
	o.WebhookApiVersion = &v
}

// GetWebhookEventFailoverUrl returns the WebhookEventFailoverUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCallControlApplicationRequest) GetWebhookEventFailoverUrl() string {
	if o == nil || IsNil(o.WebhookEventFailoverUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookEventFailoverUrl.Get()
}

// GetWebhookEventFailoverUrlOk returns a tuple with the WebhookEventFailoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCallControlApplicationRequest) GetWebhookEventFailoverUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookEventFailoverUrl.Get(), o.WebhookEventFailoverUrl.IsSet()
}

// HasWebhookEventFailoverUrl returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasWebhookEventFailoverUrl() bool {
	if o != nil && o.WebhookEventFailoverUrl.IsSet() {
		return true
	}

	return false
}

// SetWebhookEventFailoverUrl gets a reference to the given NullableString and assigns it to the WebhookEventFailoverUrl field.
func (o *CreateCallControlApplicationRequest) SetWebhookEventFailoverUrl(v string) {
	o.WebhookEventFailoverUrl.Set(&v)
}
// SetWebhookEventFailoverUrlNil sets the value for WebhookEventFailoverUrl to be an explicit nil
func (o *CreateCallControlApplicationRequest) SetWebhookEventFailoverUrlNil() {
	o.WebhookEventFailoverUrl.Set(nil)
}

// UnsetWebhookEventFailoverUrl ensures that no value is present for WebhookEventFailoverUrl, not even an explicit nil
func (o *CreateCallControlApplicationRequest) UnsetWebhookEventFailoverUrl() {
	o.WebhookEventFailoverUrl.Unset()
}

// GetWebhookTimeoutSecs returns the WebhookTimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCallControlApplicationRequest) GetWebhookTimeoutSecs() int32 {
	if o == nil || IsNil(o.WebhookTimeoutSecs.Get()) {
		var ret int32
		return ret
	}
	return *o.WebhookTimeoutSecs.Get()
}

// GetWebhookTimeoutSecsOk returns a tuple with the WebhookTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCallControlApplicationRequest) GetWebhookTimeoutSecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookTimeoutSecs.Get(), o.WebhookTimeoutSecs.IsSet()
}

// HasWebhookTimeoutSecs returns a boolean if a field has been set.
func (o *CreateCallControlApplicationRequest) HasWebhookTimeoutSecs() bool {
	if o != nil && o.WebhookTimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetWebhookTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the WebhookTimeoutSecs field.
func (o *CreateCallControlApplicationRequest) SetWebhookTimeoutSecs(v int32) {
	o.WebhookTimeoutSecs.Set(&v)
}
// SetWebhookTimeoutSecsNil sets the value for WebhookTimeoutSecs to be an explicit nil
func (o *CreateCallControlApplicationRequest) SetWebhookTimeoutSecsNil() {
	o.WebhookTimeoutSecs.Set(nil)
}

// UnsetWebhookTimeoutSecs ensures that no value is present for WebhookTimeoutSecs, not even an explicit nil
func (o *CreateCallControlApplicationRequest) UnsetWebhookTimeoutSecs() {
	o.WebhookTimeoutSecs.Unset()
}

func (o CreateCallControlApplicationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCallControlApplicationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["application_name"] = o.ApplicationName
	toSerialize["webhook_event_url"] = o.WebhookEventUrl
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AnchorsiteOverride) {
		toSerialize["anchorsite_override"] = o.AnchorsiteOverride
	}
	if !IsNil(o.DtmfType) {
		toSerialize["dtmf_type"] = o.DtmfType
	}
	if !IsNil(o.FirstCommandTimeout) {
		toSerialize["first_command_timeout"] = o.FirstCommandTimeout
	}
	if !IsNil(o.FirstCommandTimeoutSecs) {
		toSerialize["first_command_timeout_secs"] = o.FirstCommandTimeoutSecs
	}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	if !IsNil(o.WebhookApiVersion) {
		toSerialize["webhook_api_version"] = o.WebhookApiVersion
	}
	if o.WebhookEventFailoverUrl.IsSet() {
		toSerialize["webhook_event_failover_url"] = o.WebhookEventFailoverUrl.Get()
	}
	if o.WebhookTimeoutSecs.IsSet() {
		toSerialize["webhook_timeout_secs"] = o.WebhookTimeoutSecs.Get()
	}
	return toSerialize, nil
}

func (o *CreateCallControlApplicationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"application_name",
		"webhook_event_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCallControlApplicationRequest := _CreateCallControlApplicationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCallControlApplicationRequest)

	if err != nil {
		return err
	}

	*o = CreateCallControlApplicationRequest(varCreateCallControlApplicationRequest)

	return err
}

type NullableCreateCallControlApplicationRequest struct {
	value *CreateCallControlApplicationRequest
	isSet bool
}

func (v NullableCreateCallControlApplicationRequest) Get() *CreateCallControlApplicationRequest {
	return v.value
}

func (v *NullableCreateCallControlApplicationRequest) Set(val *CreateCallControlApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCallControlApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCallControlApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCallControlApplicationRequest(val *CreateCallControlApplicationRequest) *NullableCreateCallControlApplicationRequest {
	return &NullableCreateCallControlApplicationRequest{value: val, isSet: true}
}

func (v NullableCreateCallControlApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCallControlApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


