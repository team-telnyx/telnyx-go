/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the PrivacySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivacySettings{}

// PrivacySettings struct for PrivacySettings
type PrivacySettings struct {
	// If true, conversation history and insights will be stored. If false, they will not be stored. This inâ€‘tool toggle governs solely the retention of conversation history and insights via the AI assistant. It has no effect on any separate recording, transcription, or storage configuration that you have set at the account, number, or application level. All such external settings remain in force regardless of your selection here.
	DataRetention *bool `json:"data_retention,omitempty"`
}

// NewPrivacySettings instantiates a new PrivacySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivacySettings() *PrivacySettings {
	this := PrivacySettings{}
	return &this
}

// NewPrivacySettingsWithDefaults instantiates a new PrivacySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivacySettingsWithDefaults() *PrivacySettings {
	this := PrivacySettings{}
	return &this
}

// GetDataRetention returns the DataRetention field value if set, zero value otherwise.
func (o *PrivacySettings) GetDataRetention() bool {
	if o == nil || IsNil(o.DataRetention) {
		var ret bool
		return ret
	}
	return *o.DataRetention
}

// GetDataRetentionOk returns a tuple with the DataRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivacySettings) GetDataRetentionOk() (*bool, bool) {
	if o == nil || IsNil(o.DataRetention) {
		return nil, false
	}
	return o.DataRetention, true
}

// HasDataRetention returns a boolean if a field has been set.
func (o *PrivacySettings) HasDataRetention() bool {
	if o != nil && !IsNil(o.DataRetention) {
		return true
	}

	return false
}

// SetDataRetention gets a reference to the given bool and assigns it to the DataRetention field.
func (o *PrivacySettings) SetDataRetention(v bool) {
	o.DataRetention = &v
}

func (o PrivacySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivacySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataRetention) {
		toSerialize["data_retention"] = o.DataRetention
	}
	return toSerialize, nil
}

type NullablePrivacySettings struct {
	value *PrivacySettings
	isSet bool
}

func (v NullablePrivacySettings) Get() *PrivacySettings {
	return v.value
}

func (v *NullablePrivacySettings) Set(val *PrivacySettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivacySettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivacySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivacySettings(val *PrivacySettings) *NullablePrivacySettings {
	return &NullablePrivacySettings{value: val, isSet: true}
}

func (v NullablePrivacySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivacySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


