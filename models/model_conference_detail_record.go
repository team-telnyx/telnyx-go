/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ConferenceDetailRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceDetailRecord{}

// ConferenceDetailRecord struct for ConferenceDetailRecord
type ConferenceDetailRecord struct {
	// Conference id
	Id *string `json:"id,omitempty"`
	// Conference name
	Name *string `json:"name,omitempty"`
	// User id
	UserId *string `json:"user_id,omitempty"`
	// Conference start time
	StartedAt *time.Time `json:"started_at,omitempty"`
	// Conference end time
	EndedAt *time.Time `json:"ended_at,omitempty"`
	// Conference expiry time
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Region where the conference is hosted
	Region *string `json:"region,omitempty"`
	// Telnyx UUID that identifies the conference call leg
	CallLegId *string `json:"call_leg_id,omitempty"`
	// Telnyx UUID that identifies with conference call session
	CallSessionId *string `json:"call_session_id,omitempty"`
	// Connection id
	ConnectionId *string `json:"connection_id,omitempty"`
	// Duration of the conference call in seconds
	CallSec *int32 `json:"call_sec,omitempty"`
	// Number of participants that joined the conference call
	ParticipantCount *int32 `json:"participant_count,omitempty"`
	// Sum of the conference call duration for all participants in seconds
	ParticipantCallSec *int32 `json:"participant_call_sec,omitempty"`
	// Indicates whether Telnyx billing charges might be applicable
	IsTelnyxBillable *bool `json:"is_telnyx_billable,omitempty"`
	RecordType string `json:"record_type"`
}

type _ConferenceDetailRecord ConferenceDetailRecord

// NewConferenceDetailRecord instantiates a new ConferenceDetailRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceDetailRecord(recordType string) *ConferenceDetailRecord {
	this := ConferenceDetailRecord{}
	this.RecordType = recordType
	return &this
}

// NewConferenceDetailRecordWithDefaults instantiates a new ConferenceDetailRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceDetailRecordWithDefaults() *ConferenceDetailRecord {
	this := ConferenceDetailRecord{}
	var recordType string = "conference_detail_record"
	this.RecordType = recordType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConferenceDetailRecord) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConferenceDetailRecord) SetName(v string) {
	o.Name = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ConferenceDetailRecord) SetUserId(v string) {
	o.UserId = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ConferenceDetailRecord) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given time.Time and assigns it to the EndedAt field.
func (o *ConferenceDetailRecord) SetEndedAt(v time.Time) {
	o.EndedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *ConferenceDetailRecord) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ConferenceDetailRecord) SetRegion(v string) {
	o.Region = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *ConferenceDetailRecord) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *ConferenceDetailRecord) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *ConferenceDetailRecord) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetCallSec returns the CallSec field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetCallSec() int32 {
	if o == nil || IsNil(o.CallSec) {
		var ret int32
		return ret
	}
	return *o.CallSec
}

// GetCallSecOk returns a tuple with the CallSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetCallSecOk() (*int32, bool) {
	if o == nil || IsNil(o.CallSec) {
		return nil, false
	}
	return o.CallSec, true
}

// HasCallSec returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasCallSec() bool {
	if o != nil && !IsNil(o.CallSec) {
		return true
	}

	return false
}

// SetCallSec gets a reference to the given int32 and assigns it to the CallSec field.
func (o *ConferenceDetailRecord) SetCallSec(v int32) {
	o.CallSec = &v
}

// GetParticipantCount returns the ParticipantCount field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetParticipantCount() int32 {
	if o == nil || IsNil(o.ParticipantCount) {
		var ret int32
		return ret
	}
	return *o.ParticipantCount
}

// GetParticipantCountOk returns a tuple with the ParticipantCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetParticipantCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ParticipantCount) {
		return nil, false
	}
	return o.ParticipantCount, true
}

// HasParticipantCount returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasParticipantCount() bool {
	if o != nil && !IsNil(o.ParticipantCount) {
		return true
	}

	return false
}

// SetParticipantCount gets a reference to the given int32 and assigns it to the ParticipantCount field.
func (o *ConferenceDetailRecord) SetParticipantCount(v int32) {
	o.ParticipantCount = &v
}

// GetParticipantCallSec returns the ParticipantCallSec field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetParticipantCallSec() int32 {
	if o == nil || IsNil(o.ParticipantCallSec) {
		var ret int32
		return ret
	}
	return *o.ParticipantCallSec
}

// GetParticipantCallSecOk returns a tuple with the ParticipantCallSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetParticipantCallSecOk() (*int32, bool) {
	if o == nil || IsNil(o.ParticipantCallSec) {
		return nil, false
	}
	return o.ParticipantCallSec, true
}

// HasParticipantCallSec returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasParticipantCallSec() bool {
	if o != nil && !IsNil(o.ParticipantCallSec) {
		return true
	}

	return false
}

// SetParticipantCallSec gets a reference to the given int32 and assigns it to the ParticipantCallSec field.
func (o *ConferenceDetailRecord) SetParticipantCallSec(v int32) {
	o.ParticipantCallSec = &v
}

// GetIsTelnyxBillable returns the IsTelnyxBillable field value if set, zero value otherwise.
func (o *ConferenceDetailRecord) GetIsTelnyxBillable() bool {
	if o == nil || IsNil(o.IsTelnyxBillable) {
		var ret bool
		return ret
	}
	return *o.IsTelnyxBillable
}

// GetIsTelnyxBillableOk returns a tuple with the IsTelnyxBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetIsTelnyxBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTelnyxBillable) {
		return nil, false
	}
	return o.IsTelnyxBillable, true
}

// HasIsTelnyxBillable returns a boolean if a field has been set.
func (o *ConferenceDetailRecord) HasIsTelnyxBillable() bool {
	if o != nil && !IsNil(o.IsTelnyxBillable) {
		return true
	}

	return false
}

// SetIsTelnyxBillable gets a reference to the given bool and assigns it to the IsTelnyxBillable field.
func (o *ConferenceDetailRecord) SetIsTelnyxBillable(v bool) {
	o.IsTelnyxBillable = &v
}

// GetRecordType returns the RecordType field value
func (o *ConferenceDetailRecord) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *ConferenceDetailRecord) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *ConferenceDetailRecord) SetRecordType(v string) {
	o.RecordType = v
}

func (o ConferenceDetailRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceDetailRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.EndedAt) {
		toSerialize["ended_at"] = o.EndedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.CallSec) {
		toSerialize["call_sec"] = o.CallSec
	}
	if !IsNil(o.ParticipantCount) {
		toSerialize["participant_count"] = o.ParticipantCount
	}
	if !IsNil(o.ParticipantCallSec) {
		toSerialize["participant_call_sec"] = o.ParticipantCallSec
	}
	if !IsNil(o.IsTelnyxBillable) {
		toSerialize["is_telnyx_billable"] = o.IsTelnyxBillable
	}
	toSerialize["record_type"] = o.RecordType
	return toSerialize, nil
}

func (o *ConferenceDetailRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConferenceDetailRecord := _ConferenceDetailRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConferenceDetailRecord)

	if err != nil {
		return err
	}

	*o = ConferenceDetailRecord(varConferenceDetailRecord)

	return err
}

type NullableConferenceDetailRecord struct {
	value *ConferenceDetailRecord
	isSet bool
}

func (v NullableConferenceDetailRecord) Get() *ConferenceDetailRecord {
	return v.value
}

func (v *NullableConferenceDetailRecord) Set(val *ConferenceDetailRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceDetailRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceDetailRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceDetailRecord(val *ConferenceDetailRecord) *NullableConferenceDetailRecord {
	return &NullableConferenceDetailRecord{value: val, isSet: true}
}

func (v NullableConferenceDetailRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceDetailRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


