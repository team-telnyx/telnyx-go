/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AmdDetailRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmdDetailRecord{}

// AmdDetailRecord struct for AmdDetailRecord
type AmdDetailRecord struct {
	// Feature invocation id
	Id *string `json:"id,omitempty"`
	// Feature invocation time
	InvokedAt *time.Time `json:"invoked_at,omitempty"`
	// Feature name
	Feature *string `json:"feature,omitempty"`
	// User-provided tags
	Tags *string `json:"tags,omitempty"`
	// Billing Group id
	BillingGroupId *string `json:"billing_group_id,omitempty"`
	// Name of the Billing Group specified in billing_group_id
	BillingGroupName *string `json:"billing_group_name,omitempty"`
	// Connection id
	ConnectionId *string `json:"connection_id,omitempty"`
	// Connection name
	ConnectionName *string `json:"connection_name,omitempty"`
	// Telnyx UUID that identifies the related call leg
	CallLegId *string `json:"call_leg_id,omitempty"`
	// Telnyx UUID that identifies the related call session
	CallSessionId *string `json:"call_session_id,omitempty"`
	// Indicates whether Telnyx billing charges might be applicable
	IsTelnyxBillable *bool `json:"is_telnyx_billable,omitempty"`
	// Currency amount per billing unit used to calculate the Telnyx billing cost
	Rate *string `json:"rate,omitempty"`
	// Billing unit used to calculate the Telnyx billing cost
	RateMeasuredIn *string `json:"rate_measured_in,omitempty"`
	// Currency amount for Telnyx billing cost
	Cost *string `json:"cost,omitempty"`
	// Telnyx account currency used to describe monetary values, including billing cost
	Currency *string `json:"currency,omitempty"`
	RecordType string `json:"record_type"`
}

type _AmdDetailRecord AmdDetailRecord

// NewAmdDetailRecord instantiates a new AmdDetailRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmdDetailRecord(recordType string) *AmdDetailRecord {
	this := AmdDetailRecord{}
	this.RecordType = recordType
	return &this
}

// NewAmdDetailRecordWithDefaults instantiates a new AmdDetailRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmdDetailRecordWithDefaults() *AmdDetailRecord {
	this := AmdDetailRecord{}
	var recordType string = "amd_detail_record"
	this.RecordType = recordType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AmdDetailRecord) SetId(v string) {
	o.Id = &v
}

// GetInvokedAt returns the InvokedAt field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetInvokedAt() time.Time {
	if o == nil || IsNil(o.InvokedAt) {
		var ret time.Time
		return ret
	}
	return *o.InvokedAt
}

// GetInvokedAtOk returns a tuple with the InvokedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetInvokedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InvokedAt) {
		return nil, false
	}
	return o.InvokedAt, true
}

// HasInvokedAt returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasInvokedAt() bool {
	if o != nil && !IsNil(o.InvokedAt) {
		return true
	}

	return false
}

// SetInvokedAt gets a reference to the given time.Time and assigns it to the InvokedAt field.
func (o *AmdDetailRecord) SetInvokedAt(v time.Time) {
	o.InvokedAt = &v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetFeature() string {
	if o == nil || IsNil(o.Feature) {
		var ret string
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetFeatureOk() (*string, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given string and assigns it to the Feature field.
func (o *AmdDetailRecord) SetFeature(v string) {
	o.Feature = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *AmdDetailRecord) SetTags(v string) {
	o.Tags = &v
}

// GetBillingGroupId returns the BillingGroupId field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetBillingGroupId() string {
	if o == nil || IsNil(o.BillingGroupId) {
		var ret string
		return ret
	}
	return *o.BillingGroupId
}

// GetBillingGroupIdOk returns a tuple with the BillingGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetBillingGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.BillingGroupId) {
		return nil, false
	}
	return o.BillingGroupId, true
}

// HasBillingGroupId returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasBillingGroupId() bool {
	if o != nil && !IsNil(o.BillingGroupId) {
		return true
	}

	return false
}

// SetBillingGroupId gets a reference to the given string and assigns it to the BillingGroupId field.
func (o *AmdDetailRecord) SetBillingGroupId(v string) {
	o.BillingGroupId = &v
}

// GetBillingGroupName returns the BillingGroupName field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetBillingGroupName() string {
	if o == nil || IsNil(o.BillingGroupName) {
		var ret string
		return ret
	}
	return *o.BillingGroupName
}

// GetBillingGroupNameOk returns a tuple with the BillingGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetBillingGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.BillingGroupName) {
		return nil, false
	}
	return o.BillingGroupName, true
}

// HasBillingGroupName returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasBillingGroupName() bool {
	if o != nil && !IsNil(o.BillingGroupName) {
		return true
	}

	return false
}

// SetBillingGroupName gets a reference to the given string and assigns it to the BillingGroupName field.
func (o *AmdDetailRecord) SetBillingGroupName(v string) {
	o.BillingGroupName = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *AmdDetailRecord) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetConnectionName returns the ConnectionName field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetConnectionName() string {
	if o == nil || IsNil(o.ConnectionName) {
		var ret string
		return ret
	}
	return *o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetConnectionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionName) {
		return nil, false
	}
	return o.ConnectionName, true
}

// HasConnectionName returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasConnectionName() bool {
	if o != nil && !IsNil(o.ConnectionName) {
		return true
	}

	return false
}

// SetConnectionName gets a reference to the given string and assigns it to the ConnectionName field.
func (o *AmdDetailRecord) SetConnectionName(v string) {
	o.ConnectionName = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *AmdDetailRecord) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *AmdDetailRecord) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetIsTelnyxBillable returns the IsTelnyxBillable field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetIsTelnyxBillable() bool {
	if o == nil || IsNil(o.IsTelnyxBillable) {
		var ret bool
		return ret
	}
	return *o.IsTelnyxBillable
}

// GetIsTelnyxBillableOk returns a tuple with the IsTelnyxBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetIsTelnyxBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTelnyxBillable) {
		return nil, false
	}
	return o.IsTelnyxBillable, true
}

// HasIsTelnyxBillable returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasIsTelnyxBillable() bool {
	if o != nil && !IsNil(o.IsTelnyxBillable) {
		return true
	}

	return false
}

// SetIsTelnyxBillable gets a reference to the given bool and assigns it to the IsTelnyxBillable field.
func (o *AmdDetailRecord) SetIsTelnyxBillable(v bool) {
	o.IsTelnyxBillable = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetRate() string {
	if o == nil || IsNil(o.Rate) {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetRateOk() (*string, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *AmdDetailRecord) SetRate(v string) {
	o.Rate = &v
}

// GetRateMeasuredIn returns the RateMeasuredIn field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetRateMeasuredIn() string {
	if o == nil || IsNil(o.RateMeasuredIn) {
		var ret string
		return ret
	}
	return *o.RateMeasuredIn
}

// GetRateMeasuredInOk returns a tuple with the RateMeasuredIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetRateMeasuredInOk() (*string, bool) {
	if o == nil || IsNil(o.RateMeasuredIn) {
		return nil, false
	}
	return o.RateMeasuredIn, true
}

// HasRateMeasuredIn returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasRateMeasuredIn() bool {
	if o != nil && !IsNil(o.RateMeasuredIn) {
		return true
	}

	return false
}

// SetRateMeasuredIn gets a reference to the given string and assigns it to the RateMeasuredIn field.
func (o *AmdDetailRecord) SetRateMeasuredIn(v string) {
	o.RateMeasuredIn = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetCost() string {
	if o == nil || IsNil(o.Cost) {
		var ret string
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetCostOk() (*string, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given string and assigns it to the Cost field.
func (o *AmdDetailRecord) SetCost(v string) {
	o.Cost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AmdDetailRecord) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *AmdDetailRecord) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *AmdDetailRecord) SetCurrency(v string) {
	o.Currency = &v
}

// GetRecordType returns the RecordType field value
func (o *AmdDetailRecord) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *AmdDetailRecord) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *AmdDetailRecord) SetRecordType(v string) {
	o.RecordType = v
}

func (o AmdDetailRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmdDetailRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InvokedAt) {
		toSerialize["invoked_at"] = o.InvokedAt
	}
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.BillingGroupId) {
		toSerialize["billing_group_id"] = o.BillingGroupId
	}
	if !IsNil(o.BillingGroupName) {
		toSerialize["billing_group_name"] = o.BillingGroupName
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.ConnectionName) {
		toSerialize["connection_name"] = o.ConnectionName
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.IsTelnyxBillable) {
		toSerialize["is_telnyx_billable"] = o.IsTelnyxBillable
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RateMeasuredIn) {
		toSerialize["rate_measured_in"] = o.RateMeasuredIn
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["record_type"] = o.RecordType
	return toSerialize, nil
}

func (o *AmdDetailRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAmdDetailRecord := _AmdDetailRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAmdDetailRecord)

	if err != nil {
		return err
	}

	*o = AmdDetailRecord(varAmdDetailRecord)

	return err
}

type NullableAmdDetailRecord struct {
	value *AmdDetailRecord
	isSet bool
}

func (v NullableAmdDetailRecord) Get() *AmdDetailRecord {
	return v.value
}

func (v *NullableAmdDetailRecord) Set(val *AmdDetailRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAmdDetailRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAmdDetailRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmdDetailRecord(val *AmdDetailRecord) *NullableAmdDetailRecord {
	return &NullableAmdDetailRecord{value: val, isSet: true}
}

func (v NullableAmdDetailRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmdDetailRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


