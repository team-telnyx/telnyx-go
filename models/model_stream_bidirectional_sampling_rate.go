/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// StreamBidirectionalSamplingRate Audio sampling rate.
type StreamBidirectionalSamplingRate int32

// List of StreamBidirectionalSamplingRate
const (
	_8000 StreamBidirectionalSamplingRate = 8000
	_16000 StreamBidirectionalSamplingRate = 16000
	_48000 StreamBidirectionalSamplingRate = 48000
)

// All allowed values of StreamBidirectionalSamplingRate enum
var AllowedStreamBidirectionalSamplingRateEnumValues = []StreamBidirectionalSamplingRate{
	8000,
	16000,
	48000,
}

func (v *StreamBidirectionalSamplingRate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamBidirectionalSamplingRate(value)
	for _, existing := range AllowedStreamBidirectionalSamplingRateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamBidirectionalSamplingRate", value)
}

// NewStreamBidirectionalSamplingRateFromValue returns a pointer to a valid StreamBidirectionalSamplingRate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamBidirectionalSamplingRateFromValue(v int32) (*StreamBidirectionalSamplingRate, error) {
	ev := StreamBidirectionalSamplingRate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamBidirectionalSamplingRate: valid values are %v", v, AllowedStreamBidirectionalSamplingRateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamBidirectionalSamplingRate) IsValid() bool {
	for _, existing := range AllowedStreamBidirectionalSamplingRateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamBidirectionalSamplingRate value
func (v StreamBidirectionalSamplingRate) Ptr() *StreamBidirectionalSamplingRate {
	return &v
}

type NullableStreamBidirectionalSamplingRate struct {
	value *StreamBidirectionalSamplingRate
	isSet bool
}

func (v NullableStreamBidirectionalSamplingRate) Get() *StreamBidirectionalSamplingRate {
	return v.value
}

func (v *NullableStreamBidirectionalSamplingRate) Set(val *StreamBidirectionalSamplingRate) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamBidirectionalSamplingRate) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamBidirectionalSamplingRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamBidirectionalSamplingRate(val *StreamBidirectionalSamplingRate) *NullableStreamBidirectionalSamplingRate {
	return &NullableStreamBidirectionalSamplingRate{value: val, isSet: true}
}

func (v NullableStreamBidirectionalSamplingRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamBidirectionalSamplingRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

