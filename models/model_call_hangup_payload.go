/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the CallHangupPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallHangupPayload{}

// CallHangupPayload struct for CallHangupPayload
type CallHangupPayload struct {
	// Call ID used to issue commands via Call Control API.
	CallControlId *string `json:"call_control_id,omitempty"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionId *string `json:"connection_id,omitempty"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegId *string `json:"call_leg_id,omitempty"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.
	CallSessionId *string `json:"call_session_id,omitempty"`
	// State received from a command.
	ClientState *string `json:"client_state,omitempty"`
	// Custom headers set on answer command
	CustomHeaders []CustomSipHeader `json:"custom_headers,omitempty"`
	// User-to-User and Diversion headers from sip invite.
	SipHeaders []SipHeader `json:"sip_headers,omitempty"`
	// Number or SIP URI placing the call.
	From *string `json:"from,omitempty"`
	// Destination number or SIP URI of the call.
	To *string `json:"to,omitempty"`
	// ISO 8601 datetime of when the call started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// State received from a command.
	State *string `json:"state,omitempty"`
	// Array of tags associated to number.
	Tags []string `json:"tags,omitempty"`
	// The reason the call was ended (`call_rejected`, `normal_clearing`, `originator_cancel`, `timeout`, `time_limit`, `user_busy`, `not_found` or `unspecified`).
	HangupCause *string `json:"hangup_cause,omitempty"`
	// The party who ended the call (`callee`, `caller`, `unknown`).
	HangupSource *string `json:"hangup_source,omitempty"`
	// The reason the call was ended (SIP response code). If the SIP response is unavailable (in inbound calls for example) this is set to `unspecified`.
	SipHangupCause *string `json:"sip_hangup_cause,omitempty"`
}

// NewCallHangupPayload instantiates a new CallHangupPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallHangupPayload() *CallHangupPayload {
	this := CallHangupPayload{}
	return &this
}

// NewCallHangupPayloadWithDefaults instantiates a new CallHangupPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallHangupPayloadWithDefaults() *CallHangupPayload {
	this := CallHangupPayload{}
	return &this
}

// GetCallControlId returns the CallControlId field value if set, zero value otherwise.
func (o *CallHangupPayload) GetCallControlId() string {
	if o == nil || IsNil(o.CallControlId) {
		var ret string
		return ret
	}
	return *o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallControlId) {
		return nil, false
	}
	return o.CallControlId, true
}

// HasCallControlId returns a boolean if a field has been set.
func (o *CallHangupPayload) HasCallControlId() bool {
	if o != nil && !IsNil(o.CallControlId) {
		return true
	}

	return false
}

// SetCallControlId gets a reference to the given string and assigns it to the CallControlId field.
func (o *CallHangupPayload) SetCallControlId(v string) {
	o.CallControlId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *CallHangupPayload) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CallHangupPayload) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *CallHangupPayload) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *CallHangupPayload) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *CallHangupPayload) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *CallHangupPayload) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *CallHangupPayload) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *CallHangupPayload) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *CallHangupPayload) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *CallHangupPayload) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *CallHangupPayload) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *CallHangupPayload) SetClientState(v string) {
	o.ClientState = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *CallHangupPayload) GetCustomHeaders() []CustomSipHeader {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret []CustomSipHeader
		return ret
	}
	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetCustomHeadersOk() ([]CustomSipHeader, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *CallHangupPayload) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given []CustomSipHeader and assigns it to the CustomHeaders field.
func (o *CallHangupPayload) SetCustomHeaders(v []CustomSipHeader) {
	o.CustomHeaders = v
}

// GetSipHeaders returns the SipHeaders field value if set, zero value otherwise.
func (o *CallHangupPayload) GetSipHeaders() []SipHeader {
	if o == nil || IsNil(o.SipHeaders) {
		var ret []SipHeader
		return ret
	}
	return o.SipHeaders
}

// GetSipHeadersOk returns a tuple with the SipHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetSipHeadersOk() ([]SipHeader, bool) {
	if o == nil || IsNil(o.SipHeaders) {
		return nil, false
	}
	return o.SipHeaders, true
}

// HasSipHeaders returns a boolean if a field has been set.
func (o *CallHangupPayload) HasSipHeaders() bool {
	if o != nil && !IsNil(o.SipHeaders) {
		return true
	}

	return false
}

// SetSipHeaders gets a reference to the given []SipHeader and assigns it to the SipHeaders field.
func (o *CallHangupPayload) SetSipHeaders(v []SipHeader) {
	o.SipHeaders = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *CallHangupPayload) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *CallHangupPayload) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *CallHangupPayload) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *CallHangupPayload) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *CallHangupPayload) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *CallHangupPayload) SetTo(v string) {
	o.To = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *CallHangupPayload) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *CallHangupPayload) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *CallHangupPayload) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CallHangupPayload) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CallHangupPayload) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CallHangupPayload) SetState(v string) {
	o.State = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CallHangupPayload) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CallHangupPayload) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CallHangupPayload) SetTags(v []string) {
	o.Tags = v
}

// GetHangupCause returns the HangupCause field value if set, zero value otherwise.
func (o *CallHangupPayload) GetHangupCause() string {
	if o == nil || IsNil(o.HangupCause) {
		var ret string
		return ret
	}
	return *o.HangupCause
}

// GetHangupCauseOk returns a tuple with the HangupCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetHangupCauseOk() (*string, bool) {
	if o == nil || IsNil(o.HangupCause) {
		return nil, false
	}
	return o.HangupCause, true
}

// HasHangupCause returns a boolean if a field has been set.
func (o *CallHangupPayload) HasHangupCause() bool {
	if o != nil && !IsNil(o.HangupCause) {
		return true
	}

	return false
}

// SetHangupCause gets a reference to the given string and assigns it to the HangupCause field.
func (o *CallHangupPayload) SetHangupCause(v string) {
	o.HangupCause = &v
}

// GetHangupSource returns the HangupSource field value if set, zero value otherwise.
func (o *CallHangupPayload) GetHangupSource() string {
	if o == nil || IsNil(o.HangupSource) {
		var ret string
		return ret
	}
	return *o.HangupSource
}

// GetHangupSourceOk returns a tuple with the HangupSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetHangupSourceOk() (*string, bool) {
	if o == nil || IsNil(o.HangupSource) {
		return nil, false
	}
	return o.HangupSource, true
}

// HasHangupSource returns a boolean if a field has been set.
func (o *CallHangupPayload) HasHangupSource() bool {
	if o != nil && !IsNil(o.HangupSource) {
		return true
	}

	return false
}

// SetHangupSource gets a reference to the given string and assigns it to the HangupSource field.
func (o *CallHangupPayload) SetHangupSource(v string) {
	o.HangupSource = &v
}

// GetSipHangupCause returns the SipHangupCause field value if set, zero value otherwise.
func (o *CallHangupPayload) GetSipHangupCause() string {
	if o == nil || IsNil(o.SipHangupCause) {
		var ret string
		return ret
	}
	return *o.SipHangupCause
}

// GetSipHangupCauseOk returns a tuple with the SipHangupCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallHangupPayload) GetSipHangupCauseOk() (*string, bool) {
	if o == nil || IsNil(o.SipHangupCause) {
		return nil, false
	}
	return o.SipHangupCause, true
}

// HasSipHangupCause returns a boolean if a field has been set.
func (o *CallHangupPayload) HasSipHangupCause() bool {
	if o != nil && !IsNil(o.SipHangupCause) {
		return true
	}

	return false
}

// SetSipHangupCause gets a reference to the given string and assigns it to the SipHangupCause field.
func (o *CallHangupPayload) SetSipHangupCause(v string) {
	o.SipHangupCause = &v
}

func (o CallHangupPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallHangupPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlId) {
		toSerialize["call_control_id"] = o.CallControlId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if !IsNil(o.SipHeaders) {
		toSerialize["sip_headers"] = o.SipHeaders
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.HangupCause) {
		toSerialize["hangup_cause"] = o.HangupCause
	}
	if !IsNil(o.HangupSource) {
		toSerialize["hangup_source"] = o.HangupSource
	}
	if !IsNil(o.SipHangupCause) {
		toSerialize["sip_hangup_cause"] = o.SipHangupCause
	}
	return toSerialize, nil
}

type NullableCallHangupPayload struct {
	value *CallHangupPayload
	isSet bool
}

func (v NullableCallHangupPayload) Get() *CallHangupPayload {
	return v.value
}

func (v *NullableCallHangupPayload) Set(val *CallHangupPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCallHangupPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCallHangupPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallHangupPayload(val *CallHangupPayload) *NullableCallHangupPayload {
	return &NullableCallHangupPayload{value: val, isSet: true}
}

func (v NullableCallHangupPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallHangupPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


