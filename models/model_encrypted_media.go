/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// EncryptedMedia Enable use of SRTP for encryption. Cannot be set if the transport_portocol is TLS.
type EncryptedMedia string

// List of EncryptedMedia
const (
	SRTP EncryptedMedia = "SRTP"
)

// All allowed values of EncryptedMedia enum
var AllowedEncryptedMediaEnumValues = []EncryptedMedia{
	"SRTP",
}

func (v *EncryptedMedia) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EncryptedMedia(value)
	for _, existing := range AllowedEncryptedMediaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EncryptedMedia", value)
}

// NewEncryptedMediaFromValue returns a pointer to a valid EncryptedMedia
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncryptedMediaFromValue(v string) (*EncryptedMedia, error) {
	ev := EncryptedMedia(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EncryptedMedia: valid values are %v", v, AllowedEncryptedMediaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncryptedMedia) IsValid() bool {
	for _, existing := range AllowedEncryptedMediaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncryptedMedia value
func (v EncryptedMedia) Ptr() *EncryptedMedia {
	return &v
}

type NullableEncryptedMedia struct {
	value *EncryptedMedia
	isSet bool
}

func (v NullableEncryptedMedia) Get() *EncryptedMedia {
	return v.value
}

func (v *NullableEncryptedMedia) Set(val *EncryptedMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptedMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptedMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptedMedia(val *EncryptedMedia) *NullableEncryptedMedia {
	return &NullableEncryptedMedia{value: val, isSet: true}
}

func (v NullableEncryptedMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptedMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

