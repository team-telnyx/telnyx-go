/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InitiateCallRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitiateCallRequest{}

// InitiateCallRequest struct for InitiateCallRequest
type InitiateCallRequest struct {
	// The ID of the TeXML Application.
	ApplicationSid string `json:"ApplicationSid"`
	// The phone number of the called party. Phone numbers are formatted with a `+` and country code.
	To string `json:"To"`
	// The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.
	From string `json:"From"`
	// To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field.
	CallerId *string `json:"CallerId,omitempty"`
	// The URL from which Telnyx will retrieve the TeXML call instructions.
	Url *string `json:"Url,omitempty"`
	// HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.
	UrlMethod *string `json:"UrlMethod,omitempty"`
	// A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not responding.
	FallbackUrl *string `json:"FallbackUrl,omitempty"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback *string `json:"StatusCallback,omitempty"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod *string `json:"StatusCallbackMethod,omitempty"`
	// The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space.
	StatusCallbackEvent *string `json:"StatusCallbackEvent,omitempty"`
	// Enables Answering Machine Detection.
	MachineDetection *string `json:"MachineDetection,omitempty"`
	// Allows you to chose between Premium and Standard detections.
	DetectionMode *string `json:"DetectionMode,omitempty"`
	// Select whether to perform answering machine detection in the background. By default execution is blocked until Answering Machine Detection is completed.
	AsyncAmd *bool `json:"AsyncAmd,omitempty"`
	// URL destination for Telnyx to send AMD callback events to for the call.
	AsyncAmdStatusCallback *string `json:"AsyncAmdStatusCallback,omitempty"`
	// HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML Application setting.
	AsyncAmdStatusCallbackMethod *string `json:"AsyncAmdStatusCallbackMethod,omitempty"`
	// Maximum timeout threshold in milliseconds for overall detection.
	MachineDetectionTimeout *int32 `json:"MachineDetectionTimeout,omitempty"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used.
	MachineDetectionSpeechThreshold *int32 `json:"MachineDetectionSpeechThreshold,omitempty"`
	// Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used.
	MachineDetectionSpeechEndThreshold *int32 `json:"MachineDetectionSpeechEndThreshold,omitempty"`
	// If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used.
	MachineDetectionSilenceTimeout *int32 `json:"MachineDetectionSilenceTimeout,omitempty"`
	// Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.
	CancelPlaybackOnMachineDetection *bool `json:"CancelPlaybackOnMachineDetection,omitempty"`
	// Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.
	CancelPlaybackOnDetectMessageEnd *bool `json:"CancelPlaybackOnDetectMessageEnd,omitempty"`
	// The list of comma-separated codecs to be offered on a call.
	PreferredCodecs *string `json:"PreferredCodecs,omitempty"`
	// Whether to record the entire participant's call leg. Defaults to `false`.
	Record *bool `json:"Record,omitempty"`
	// The number of channels in the final recording. Defaults to `mono`.
	RecordingChannels *string `json:"RecordingChannels,omitempty"`
	// The URL the recording callbacks will be sent to.
	RecordingStatusCallback *string `json:"RecordingStatusCallback,omitempty"`
	// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
	RecordingStatusCallbackMethod *string `json:"RecordingStatusCallbackMethod,omitempty"`
	// The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.
	RecordingStatusCallbackEvent *string `json:"RecordingStatusCallbackEvent,omitempty"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)
	RecordingTimeout *int32 `json:"RecordingTimeout,omitempty"`
	// The audio track to record for the call. The default is `both`.
	RecordingTrack *string `json:"RecordingTrack,omitempty"`
	// The password to use for SIP authentication.
	SipAuthPassword *string `json:"SipAuthPassword,omitempty"`
	// The username to use for SIP authentication.
	SipAuthUsername *string `json:"SipAuthUsername,omitempty"`
	// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
	Trim *string `json:"Trim,omitempty"`
}

type _InitiateCallRequest InitiateCallRequest

// NewInitiateCallRequest instantiates a new InitiateCallRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiateCallRequest(applicationSid string, to string, from string) *InitiateCallRequest {
	this := InitiateCallRequest{}
	this.ApplicationSid = applicationSid
	this.To = to
	this.From = from
	var urlMethod string = "POST"
	this.UrlMethod = &urlMethod
	var statusCallbackMethod string = "POST"
	this.StatusCallbackMethod = &statusCallbackMethod
	var statusCallbackEvent string = "completed"
	this.StatusCallbackEvent = &statusCallbackEvent
	var machineDetection string = "Disable"
	this.MachineDetection = &machineDetection
	var detectionMode string = "Regular"
	this.DetectionMode = &detectionMode
	var asyncAmd bool = false
	this.AsyncAmd = &asyncAmd
	var asyncAmdStatusCallbackMethod string = "POST"
	this.AsyncAmdStatusCallbackMethod = &asyncAmdStatusCallbackMethod
	var machineDetectionTimeout int32 = 30000
	this.MachineDetectionTimeout = &machineDetectionTimeout
	var machineDetectionSpeechThreshold int32 = 3500
	this.MachineDetectionSpeechThreshold = &machineDetectionSpeechThreshold
	var machineDetectionSpeechEndThreshold int32 = 800
	this.MachineDetectionSpeechEndThreshold = &machineDetectionSpeechEndThreshold
	var machineDetectionSilenceTimeout int32 = 3500
	this.MachineDetectionSilenceTimeout = &machineDetectionSilenceTimeout
	var cancelPlaybackOnMachineDetection bool = true
	this.CancelPlaybackOnMachineDetection = &cancelPlaybackOnMachineDetection
	var cancelPlaybackOnDetectMessageEnd bool = true
	this.CancelPlaybackOnDetectMessageEnd = &cancelPlaybackOnDetectMessageEnd
	var recordingTimeout int32 = 0
	this.RecordingTimeout = &recordingTimeout
	return &this
}

// NewInitiateCallRequestWithDefaults instantiates a new InitiateCallRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiateCallRequestWithDefaults() *InitiateCallRequest {
	this := InitiateCallRequest{}
	var urlMethod string = "POST"
	this.UrlMethod = &urlMethod
	var statusCallbackMethod string = "POST"
	this.StatusCallbackMethod = &statusCallbackMethod
	var statusCallbackEvent string = "completed"
	this.StatusCallbackEvent = &statusCallbackEvent
	var machineDetection string = "Disable"
	this.MachineDetection = &machineDetection
	var detectionMode string = "Regular"
	this.DetectionMode = &detectionMode
	var asyncAmd bool = false
	this.AsyncAmd = &asyncAmd
	var asyncAmdStatusCallbackMethod string = "POST"
	this.AsyncAmdStatusCallbackMethod = &asyncAmdStatusCallbackMethod
	var machineDetectionTimeout int32 = 30000
	this.MachineDetectionTimeout = &machineDetectionTimeout
	var machineDetectionSpeechThreshold int32 = 3500
	this.MachineDetectionSpeechThreshold = &machineDetectionSpeechThreshold
	var machineDetectionSpeechEndThreshold int32 = 800
	this.MachineDetectionSpeechEndThreshold = &machineDetectionSpeechEndThreshold
	var machineDetectionSilenceTimeout int32 = 3500
	this.MachineDetectionSilenceTimeout = &machineDetectionSilenceTimeout
	var cancelPlaybackOnMachineDetection bool = true
	this.CancelPlaybackOnMachineDetection = &cancelPlaybackOnMachineDetection
	var cancelPlaybackOnDetectMessageEnd bool = true
	this.CancelPlaybackOnDetectMessageEnd = &cancelPlaybackOnDetectMessageEnd
	var recordingTimeout int32 = 0
	this.RecordingTimeout = &recordingTimeout
	return &this
}

// GetApplicationSid returns the ApplicationSid field value
func (o *InitiateCallRequest) GetApplicationSid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationSid
}

// GetApplicationSidOk returns a tuple with the ApplicationSid field value
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetApplicationSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationSid, true
}

// SetApplicationSid sets field value
func (o *InitiateCallRequest) SetApplicationSid(v string) {
	o.ApplicationSid = v
}

// GetTo returns the To field value
func (o *InitiateCallRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *InitiateCallRequest) SetTo(v string) {
	o.To = v
}

// GetFrom returns the From field value
func (o *InitiateCallRequest) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *InitiateCallRequest) SetFrom(v string) {
	o.From = v
}

// GetCallerId returns the CallerId field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetCallerId() string {
	if o == nil || IsNil(o.CallerId) {
		var ret string
		return ret
	}
	return *o.CallerId
}

// GetCallerIdOk returns a tuple with the CallerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetCallerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallerId) {
		return nil, false
	}
	return o.CallerId, true
}

// HasCallerId returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasCallerId() bool {
	if o != nil && !IsNil(o.CallerId) {
		return true
	}

	return false
}

// SetCallerId gets a reference to the given string and assigns it to the CallerId field.
func (o *InitiateCallRequest) SetCallerId(v string) {
	o.CallerId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *InitiateCallRequest) SetUrl(v string) {
	o.Url = &v
}

// GetUrlMethod returns the UrlMethod field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetUrlMethod() string {
	if o == nil || IsNil(o.UrlMethod) {
		var ret string
		return ret
	}
	return *o.UrlMethod
}

// GetUrlMethodOk returns a tuple with the UrlMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetUrlMethodOk() (*string, bool) {
	if o == nil || IsNil(o.UrlMethod) {
		return nil, false
	}
	return o.UrlMethod, true
}

// HasUrlMethod returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasUrlMethod() bool {
	if o != nil && !IsNil(o.UrlMethod) {
		return true
	}

	return false
}

// SetUrlMethod gets a reference to the given string and assigns it to the UrlMethod field.
func (o *InitiateCallRequest) SetUrlMethod(v string) {
	o.UrlMethod = &v
}

// GetFallbackUrl returns the FallbackUrl field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetFallbackUrl() string {
	if o == nil || IsNil(o.FallbackUrl) {
		var ret string
		return ret
	}
	return *o.FallbackUrl
}

// GetFallbackUrlOk returns a tuple with the FallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetFallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackUrl) {
		return nil, false
	}
	return o.FallbackUrl, true
}

// HasFallbackUrl returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasFallbackUrl() bool {
	if o != nil && !IsNil(o.FallbackUrl) {
		return true
	}

	return false
}

// SetFallbackUrl gets a reference to the given string and assigns it to the FallbackUrl field.
func (o *InitiateCallRequest) SetFallbackUrl(v string) {
	o.FallbackUrl = &v
}

// GetStatusCallback returns the StatusCallback field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetStatusCallback() string {
	if o == nil || IsNil(o.StatusCallback) {
		var ret string
		return ret
	}
	return *o.StatusCallback
}

// GetStatusCallbackOk returns a tuple with the StatusCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetStatusCallbackOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCallback) {
		return nil, false
	}
	return o.StatusCallback, true
}

// HasStatusCallback returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasStatusCallback() bool {
	if o != nil && !IsNil(o.StatusCallback) {
		return true
	}

	return false
}

// SetStatusCallback gets a reference to the given string and assigns it to the StatusCallback field.
func (o *InitiateCallRequest) SetStatusCallback(v string) {
	o.StatusCallback = &v
}

// GetStatusCallbackMethod returns the StatusCallbackMethod field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetStatusCallbackMethod() string {
	if o == nil || IsNil(o.StatusCallbackMethod) {
		var ret string
		return ret
	}
	return *o.StatusCallbackMethod
}

// GetStatusCallbackMethodOk returns a tuple with the StatusCallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetStatusCallbackMethodOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCallbackMethod) {
		return nil, false
	}
	return o.StatusCallbackMethod, true
}

// HasStatusCallbackMethod returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasStatusCallbackMethod() bool {
	if o != nil && !IsNil(o.StatusCallbackMethod) {
		return true
	}

	return false
}

// SetStatusCallbackMethod gets a reference to the given string and assigns it to the StatusCallbackMethod field.
func (o *InitiateCallRequest) SetStatusCallbackMethod(v string) {
	o.StatusCallbackMethod = &v
}

// GetStatusCallbackEvent returns the StatusCallbackEvent field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetStatusCallbackEvent() string {
	if o == nil || IsNil(o.StatusCallbackEvent) {
		var ret string
		return ret
	}
	return *o.StatusCallbackEvent
}

// GetStatusCallbackEventOk returns a tuple with the StatusCallbackEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetStatusCallbackEventOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCallbackEvent) {
		return nil, false
	}
	return o.StatusCallbackEvent, true
}

// HasStatusCallbackEvent returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasStatusCallbackEvent() bool {
	if o != nil && !IsNil(o.StatusCallbackEvent) {
		return true
	}

	return false
}

// SetStatusCallbackEvent gets a reference to the given string and assigns it to the StatusCallbackEvent field.
func (o *InitiateCallRequest) SetStatusCallbackEvent(v string) {
	o.StatusCallbackEvent = &v
}

// GetMachineDetection returns the MachineDetection field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetMachineDetection() string {
	if o == nil || IsNil(o.MachineDetection) {
		var ret string
		return ret
	}
	return *o.MachineDetection
}

// GetMachineDetectionOk returns a tuple with the MachineDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetMachineDetectionOk() (*string, bool) {
	if o == nil || IsNil(o.MachineDetection) {
		return nil, false
	}
	return o.MachineDetection, true
}

// HasMachineDetection returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasMachineDetection() bool {
	if o != nil && !IsNil(o.MachineDetection) {
		return true
	}

	return false
}

// SetMachineDetection gets a reference to the given string and assigns it to the MachineDetection field.
func (o *InitiateCallRequest) SetMachineDetection(v string) {
	o.MachineDetection = &v
}

// GetDetectionMode returns the DetectionMode field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetDetectionMode() string {
	if o == nil || IsNil(o.DetectionMode) {
		var ret string
		return ret
	}
	return *o.DetectionMode
}

// GetDetectionModeOk returns a tuple with the DetectionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetDetectionModeOk() (*string, bool) {
	if o == nil || IsNil(o.DetectionMode) {
		return nil, false
	}
	return o.DetectionMode, true
}

// HasDetectionMode returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasDetectionMode() bool {
	if o != nil && !IsNil(o.DetectionMode) {
		return true
	}

	return false
}

// SetDetectionMode gets a reference to the given string and assigns it to the DetectionMode field.
func (o *InitiateCallRequest) SetDetectionMode(v string) {
	o.DetectionMode = &v
}

// GetAsyncAmd returns the AsyncAmd field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetAsyncAmd() bool {
	if o == nil || IsNil(o.AsyncAmd) {
		var ret bool
		return ret
	}
	return *o.AsyncAmd
}

// GetAsyncAmdOk returns a tuple with the AsyncAmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetAsyncAmdOk() (*bool, bool) {
	if o == nil || IsNil(o.AsyncAmd) {
		return nil, false
	}
	return o.AsyncAmd, true
}

// HasAsyncAmd returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasAsyncAmd() bool {
	if o != nil && !IsNil(o.AsyncAmd) {
		return true
	}

	return false
}

// SetAsyncAmd gets a reference to the given bool and assigns it to the AsyncAmd field.
func (o *InitiateCallRequest) SetAsyncAmd(v bool) {
	o.AsyncAmd = &v
}

// GetAsyncAmdStatusCallback returns the AsyncAmdStatusCallback field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetAsyncAmdStatusCallback() string {
	if o == nil || IsNil(o.AsyncAmdStatusCallback) {
		var ret string
		return ret
	}
	return *o.AsyncAmdStatusCallback
}

// GetAsyncAmdStatusCallbackOk returns a tuple with the AsyncAmdStatusCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetAsyncAmdStatusCallbackOk() (*string, bool) {
	if o == nil || IsNil(o.AsyncAmdStatusCallback) {
		return nil, false
	}
	return o.AsyncAmdStatusCallback, true
}

// HasAsyncAmdStatusCallback returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasAsyncAmdStatusCallback() bool {
	if o != nil && !IsNil(o.AsyncAmdStatusCallback) {
		return true
	}

	return false
}

// SetAsyncAmdStatusCallback gets a reference to the given string and assigns it to the AsyncAmdStatusCallback field.
func (o *InitiateCallRequest) SetAsyncAmdStatusCallback(v string) {
	o.AsyncAmdStatusCallback = &v
}

// GetAsyncAmdStatusCallbackMethod returns the AsyncAmdStatusCallbackMethod field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetAsyncAmdStatusCallbackMethod() string {
	if o == nil || IsNil(o.AsyncAmdStatusCallbackMethod) {
		var ret string
		return ret
	}
	return *o.AsyncAmdStatusCallbackMethod
}

// GetAsyncAmdStatusCallbackMethodOk returns a tuple with the AsyncAmdStatusCallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetAsyncAmdStatusCallbackMethodOk() (*string, bool) {
	if o == nil || IsNil(o.AsyncAmdStatusCallbackMethod) {
		return nil, false
	}
	return o.AsyncAmdStatusCallbackMethod, true
}

// HasAsyncAmdStatusCallbackMethod returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasAsyncAmdStatusCallbackMethod() bool {
	if o != nil && !IsNil(o.AsyncAmdStatusCallbackMethod) {
		return true
	}

	return false
}

// SetAsyncAmdStatusCallbackMethod gets a reference to the given string and assigns it to the AsyncAmdStatusCallbackMethod field.
func (o *InitiateCallRequest) SetAsyncAmdStatusCallbackMethod(v string) {
	o.AsyncAmdStatusCallbackMethod = &v
}

// GetMachineDetectionTimeout returns the MachineDetectionTimeout field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetMachineDetectionTimeout() int32 {
	if o == nil || IsNil(o.MachineDetectionTimeout) {
		var ret int32
		return ret
	}
	return *o.MachineDetectionTimeout
}

// GetMachineDetectionTimeoutOk returns a tuple with the MachineDetectionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetMachineDetectionTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineDetectionTimeout) {
		return nil, false
	}
	return o.MachineDetectionTimeout, true
}

// HasMachineDetectionTimeout returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasMachineDetectionTimeout() bool {
	if o != nil && !IsNil(o.MachineDetectionTimeout) {
		return true
	}

	return false
}

// SetMachineDetectionTimeout gets a reference to the given int32 and assigns it to the MachineDetectionTimeout field.
func (o *InitiateCallRequest) SetMachineDetectionTimeout(v int32) {
	o.MachineDetectionTimeout = &v
}

// GetMachineDetectionSpeechThreshold returns the MachineDetectionSpeechThreshold field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetMachineDetectionSpeechThreshold() int32 {
	if o == nil || IsNil(o.MachineDetectionSpeechThreshold) {
		var ret int32
		return ret
	}
	return *o.MachineDetectionSpeechThreshold
}

// GetMachineDetectionSpeechThresholdOk returns a tuple with the MachineDetectionSpeechThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetMachineDetectionSpeechThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineDetectionSpeechThreshold) {
		return nil, false
	}
	return o.MachineDetectionSpeechThreshold, true
}

// HasMachineDetectionSpeechThreshold returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasMachineDetectionSpeechThreshold() bool {
	if o != nil && !IsNil(o.MachineDetectionSpeechThreshold) {
		return true
	}

	return false
}

// SetMachineDetectionSpeechThreshold gets a reference to the given int32 and assigns it to the MachineDetectionSpeechThreshold field.
func (o *InitiateCallRequest) SetMachineDetectionSpeechThreshold(v int32) {
	o.MachineDetectionSpeechThreshold = &v
}

// GetMachineDetectionSpeechEndThreshold returns the MachineDetectionSpeechEndThreshold field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetMachineDetectionSpeechEndThreshold() int32 {
	if o == nil || IsNil(o.MachineDetectionSpeechEndThreshold) {
		var ret int32
		return ret
	}
	return *o.MachineDetectionSpeechEndThreshold
}

// GetMachineDetectionSpeechEndThresholdOk returns a tuple with the MachineDetectionSpeechEndThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetMachineDetectionSpeechEndThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineDetectionSpeechEndThreshold) {
		return nil, false
	}
	return o.MachineDetectionSpeechEndThreshold, true
}

// HasMachineDetectionSpeechEndThreshold returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasMachineDetectionSpeechEndThreshold() bool {
	if o != nil && !IsNil(o.MachineDetectionSpeechEndThreshold) {
		return true
	}

	return false
}

// SetMachineDetectionSpeechEndThreshold gets a reference to the given int32 and assigns it to the MachineDetectionSpeechEndThreshold field.
func (o *InitiateCallRequest) SetMachineDetectionSpeechEndThreshold(v int32) {
	o.MachineDetectionSpeechEndThreshold = &v
}

// GetMachineDetectionSilenceTimeout returns the MachineDetectionSilenceTimeout field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetMachineDetectionSilenceTimeout() int32 {
	if o == nil || IsNil(o.MachineDetectionSilenceTimeout) {
		var ret int32
		return ret
	}
	return *o.MachineDetectionSilenceTimeout
}

// GetMachineDetectionSilenceTimeoutOk returns a tuple with the MachineDetectionSilenceTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetMachineDetectionSilenceTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineDetectionSilenceTimeout) {
		return nil, false
	}
	return o.MachineDetectionSilenceTimeout, true
}

// HasMachineDetectionSilenceTimeout returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasMachineDetectionSilenceTimeout() bool {
	if o != nil && !IsNil(o.MachineDetectionSilenceTimeout) {
		return true
	}

	return false
}

// SetMachineDetectionSilenceTimeout gets a reference to the given int32 and assigns it to the MachineDetectionSilenceTimeout field.
func (o *InitiateCallRequest) SetMachineDetectionSilenceTimeout(v int32) {
	o.MachineDetectionSilenceTimeout = &v
}

// GetCancelPlaybackOnMachineDetection returns the CancelPlaybackOnMachineDetection field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetCancelPlaybackOnMachineDetection() bool {
	if o == nil || IsNil(o.CancelPlaybackOnMachineDetection) {
		var ret bool
		return ret
	}
	return *o.CancelPlaybackOnMachineDetection
}

// GetCancelPlaybackOnMachineDetectionOk returns a tuple with the CancelPlaybackOnMachineDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetCancelPlaybackOnMachineDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelPlaybackOnMachineDetection) {
		return nil, false
	}
	return o.CancelPlaybackOnMachineDetection, true
}

// HasCancelPlaybackOnMachineDetection returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasCancelPlaybackOnMachineDetection() bool {
	if o != nil && !IsNil(o.CancelPlaybackOnMachineDetection) {
		return true
	}

	return false
}

// SetCancelPlaybackOnMachineDetection gets a reference to the given bool and assigns it to the CancelPlaybackOnMachineDetection field.
func (o *InitiateCallRequest) SetCancelPlaybackOnMachineDetection(v bool) {
	o.CancelPlaybackOnMachineDetection = &v
}

// GetCancelPlaybackOnDetectMessageEnd returns the CancelPlaybackOnDetectMessageEnd field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetCancelPlaybackOnDetectMessageEnd() bool {
	if o == nil || IsNil(o.CancelPlaybackOnDetectMessageEnd) {
		var ret bool
		return ret
	}
	return *o.CancelPlaybackOnDetectMessageEnd
}

// GetCancelPlaybackOnDetectMessageEndOk returns a tuple with the CancelPlaybackOnDetectMessageEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetCancelPlaybackOnDetectMessageEndOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelPlaybackOnDetectMessageEnd) {
		return nil, false
	}
	return o.CancelPlaybackOnDetectMessageEnd, true
}

// HasCancelPlaybackOnDetectMessageEnd returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasCancelPlaybackOnDetectMessageEnd() bool {
	if o != nil && !IsNil(o.CancelPlaybackOnDetectMessageEnd) {
		return true
	}

	return false
}

// SetCancelPlaybackOnDetectMessageEnd gets a reference to the given bool and assigns it to the CancelPlaybackOnDetectMessageEnd field.
func (o *InitiateCallRequest) SetCancelPlaybackOnDetectMessageEnd(v bool) {
	o.CancelPlaybackOnDetectMessageEnd = &v
}

// GetPreferredCodecs returns the PreferredCodecs field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetPreferredCodecs() string {
	if o == nil || IsNil(o.PreferredCodecs) {
		var ret string
		return ret
	}
	return *o.PreferredCodecs
}

// GetPreferredCodecsOk returns a tuple with the PreferredCodecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetPreferredCodecsOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredCodecs) {
		return nil, false
	}
	return o.PreferredCodecs, true
}

// HasPreferredCodecs returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasPreferredCodecs() bool {
	if o != nil && !IsNil(o.PreferredCodecs) {
		return true
	}

	return false
}

// SetPreferredCodecs gets a reference to the given string and assigns it to the PreferredCodecs field.
func (o *InitiateCallRequest) SetPreferredCodecs(v string) {
	o.PreferredCodecs = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecord() bool {
	if o == nil || IsNil(o.Record) {
		var ret bool
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordOk() (*bool, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given bool and assigns it to the Record field.
func (o *InitiateCallRequest) SetRecord(v bool) {
	o.Record = &v
}

// GetRecordingChannels returns the RecordingChannels field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecordingChannels() string {
	if o == nil || IsNil(o.RecordingChannels) {
		var ret string
		return ret
	}
	return *o.RecordingChannels
}

// GetRecordingChannelsOk returns a tuple with the RecordingChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordingChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingChannels) {
		return nil, false
	}
	return o.RecordingChannels, true
}

// HasRecordingChannels returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecordingChannels() bool {
	if o != nil && !IsNil(o.RecordingChannels) {
		return true
	}

	return false
}

// SetRecordingChannels gets a reference to the given string and assigns it to the RecordingChannels field.
func (o *InitiateCallRequest) SetRecordingChannels(v string) {
	o.RecordingChannels = &v
}

// GetRecordingStatusCallback returns the RecordingStatusCallback field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecordingStatusCallback() string {
	if o == nil || IsNil(o.RecordingStatusCallback) {
		var ret string
		return ret
	}
	return *o.RecordingStatusCallback
}

// GetRecordingStatusCallbackOk returns a tuple with the RecordingStatusCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordingStatusCallbackOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingStatusCallback) {
		return nil, false
	}
	return o.RecordingStatusCallback, true
}

// HasRecordingStatusCallback returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecordingStatusCallback() bool {
	if o != nil && !IsNil(o.RecordingStatusCallback) {
		return true
	}

	return false
}

// SetRecordingStatusCallback gets a reference to the given string and assigns it to the RecordingStatusCallback field.
func (o *InitiateCallRequest) SetRecordingStatusCallback(v string) {
	o.RecordingStatusCallback = &v
}

// GetRecordingStatusCallbackMethod returns the RecordingStatusCallbackMethod field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecordingStatusCallbackMethod() string {
	if o == nil || IsNil(o.RecordingStatusCallbackMethod) {
		var ret string
		return ret
	}
	return *o.RecordingStatusCallbackMethod
}

// GetRecordingStatusCallbackMethodOk returns a tuple with the RecordingStatusCallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordingStatusCallbackMethodOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingStatusCallbackMethod) {
		return nil, false
	}
	return o.RecordingStatusCallbackMethod, true
}

// HasRecordingStatusCallbackMethod returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecordingStatusCallbackMethod() bool {
	if o != nil && !IsNil(o.RecordingStatusCallbackMethod) {
		return true
	}

	return false
}

// SetRecordingStatusCallbackMethod gets a reference to the given string and assigns it to the RecordingStatusCallbackMethod field.
func (o *InitiateCallRequest) SetRecordingStatusCallbackMethod(v string) {
	o.RecordingStatusCallbackMethod = &v
}

// GetRecordingStatusCallbackEvent returns the RecordingStatusCallbackEvent field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecordingStatusCallbackEvent() string {
	if o == nil || IsNil(o.RecordingStatusCallbackEvent) {
		var ret string
		return ret
	}
	return *o.RecordingStatusCallbackEvent
}

// GetRecordingStatusCallbackEventOk returns a tuple with the RecordingStatusCallbackEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordingStatusCallbackEventOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingStatusCallbackEvent) {
		return nil, false
	}
	return o.RecordingStatusCallbackEvent, true
}

// HasRecordingStatusCallbackEvent returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecordingStatusCallbackEvent() bool {
	if o != nil && !IsNil(o.RecordingStatusCallbackEvent) {
		return true
	}

	return false
}

// SetRecordingStatusCallbackEvent gets a reference to the given string and assigns it to the RecordingStatusCallbackEvent field.
func (o *InitiateCallRequest) SetRecordingStatusCallbackEvent(v string) {
	o.RecordingStatusCallbackEvent = &v
}

// GetRecordingTimeout returns the RecordingTimeout field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecordingTimeout() int32 {
	if o == nil || IsNil(o.RecordingTimeout) {
		var ret int32
		return ret
	}
	return *o.RecordingTimeout
}

// GetRecordingTimeoutOk returns a tuple with the RecordingTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordingTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordingTimeout) {
		return nil, false
	}
	return o.RecordingTimeout, true
}

// HasRecordingTimeout returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecordingTimeout() bool {
	if o != nil && !IsNil(o.RecordingTimeout) {
		return true
	}

	return false
}

// SetRecordingTimeout gets a reference to the given int32 and assigns it to the RecordingTimeout field.
func (o *InitiateCallRequest) SetRecordingTimeout(v int32) {
	o.RecordingTimeout = &v
}

// GetRecordingTrack returns the RecordingTrack field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetRecordingTrack() string {
	if o == nil || IsNil(o.RecordingTrack) {
		var ret string
		return ret
	}
	return *o.RecordingTrack
}

// GetRecordingTrackOk returns a tuple with the RecordingTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetRecordingTrackOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingTrack) {
		return nil, false
	}
	return o.RecordingTrack, true
}

// HasRecordingTrack returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasRecordingTrack() bool {
	if o != nil && !IsNil(o.RecordingTrack) {
		return true
	}

	return false
}

// SetRecordingTrack gets a reference to the given string and assigns it to the RecordingTrack field.
func (o *InitiateCallRequest) SetRecordingTrack(v string) {
	o.RecordingTrack = &v
}

// GetSipAuthPassword returns the SipAuthPassword field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetSipAuthPassword() string {
	if o == nil || IsNil(o.SipAuthPassword) {
		var ret string
		return ret
	}
	return *o.SipAuthPassword
}

// GetSipAuthPasswordOk returns a tuple with the SipAuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetSipAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthPassword) {
		return nil, false
	}
	return o.SipAuthPassword, true
}

// HasSipAuthPassword returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasSipAuthPassword() bool {
	if o != nil && !IsNil(o.SipAuthPassword) {
		return true
	}

	return false
}

// SetSipAuthPassword gets a reference to the given string and assigns it to the SipAuthPassword field.
func (o *InitiateCallRequest) SetSipAuthPassword(v string) {
	o.SipAuthPassword = &v
}

// GetSipAuthUsername returns the SipAuthUsername field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetSipAuthUsername() string {
	if o == nil || IsNil(o.SipAuthUsername) {
		var ret string
		return ret
	}
	return *o.SipAuthUsername
}

// GetSipAuthUsernameOk returns a tuple with the SipAuthUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetSipAuthUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthUsername) {
		return nil, false
	}
	return o.SipAuthUsername, true
}

// HasSipAuthUsername returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasSipAuthUsername() bool {
	if o != nil && !IsNil(o.SipAuthUsername) {
		return true
	}

	return false
}

// SetSipAuthUsername gets a reference to the given string and assigns it to the SipAuthUsername field.
func (o *InitiateCallRequest) SetSipAuthUsername(v string) {
	o.SipAuthUsername = &v
}

// GetTrim returns the Trim field value if set, zero value otherwise.
func (o *InitiateCallRequest) GetTrim() string {
	if o == nil || IsNil(o.Trim) {
		var ret string
		return ret
	}
	return *o.Trim
}

// GetTrimOk returns a tuple with the Trim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallRequest) GetTrimOk() (*string, bool) {
	if o == nil || IsNil(o.Trim) {
		return nil, false
	}
	return o.Trim, true
}

// HasTrim returns a boolean if a field has been set.
func (o *InitiateCallRequest) HasTrim() bool {
	if o != nil && !IsNil(o.Trim) {
		return true
	}

	return false
}

// SetTrim gets a reference to the given string and assigns it to the Trim field.
func (o *InitiateCallRequest) SetTrim(v string) {
	o.Trim = &v
}

func (o InitiateCallRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitiateCallRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ApplicationSid"] = o.ApplicationSid
	toSerialize["To"] = o.To
	toSerialize["From"] = o.From
	if !IsNil(o.CallerId) {
		toSerialize["CallerId"] = o.CallerId
	}
	if !IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	if !IsNil(o.UrlMethod) {
		toSerialize["UrlMethod"] = o.UrlMethod
	}
	if !IsNil(o.FallbackUrl) {
		toSerialize["FallbackUrl"] = o.FallbackUrl
	}
	if !IsNil(o.StatusCallback) {
		toSerialize["StatusCallback"] = o.StatusCallback
	}
	if !IsNil(o.StatusCallbackMethod) {
		toSerialize["StatusCallbackMethod"] = o.StatusCallbackMethod
	}
	if !IsNil(o.StatusCallbackEvent) {
		toSerialize["StatusCallbackEvent"] = o.StatusCallbackEvent
	}
	if !IsNil(o.MachineDetection) {
		toSerialize["MachineDetection"] = o.MachineDetection
	}
	if !IsNil(o.DetectionMode) {
		toSerialize["DetectionMode"] = o.DetectionMode
	}
	if !IsNil(o.AsyncAmd) {
		toSerialize["AsyncAmd"] = o.AsyncAmd
	}
	if !IsNil(o.AsyncAmdStatusCallback) {
		toSerialize["AsyncAmdStatusCallback"] = o.AsyncAmdStatusCallback
	}
	if !IsNil(o.AsyncAmdStatusCallbackMethod) {
		toSerialize["AsyncAmdStatusCallbackMethod"] = o.AsyncAmdStatusCallbackMethod
	}
	if !IsNil(o.MachineDetectionTimeout) {
		toSerialize["MachineDetectionTimeout"] = o.MachineDetectionTimeout
	}
	if !IsNil(o.MachineDetectionSpeechThreshold) {
		toSerialize["MachineDetectionSpeechThreshold"] = o.MachineDetectionSpeechThreshold
	}
	if !IsNil(o.MachineDetectionSpeechEndThreshold) {
		toSerialize["MachineDetectionSpeechEndThreshold"] = o.MachineDetectionSpeechEndThreshold
	}
	if !IsNil(o.MachineDetectionSilenceTimeout) {
		toSerialize["MachineDetectionSilenceTimeout"] = o.MachineDetectionSilenceTimeout
	}
	if !IsNil(o.CancelPlaybackOnMachineDetection) {
		toSerialize["CancelPlaybackOnMachineDetection"] = o.CancelPlaybackOnMachineDetection
	}
	if !IsNil(o.CancelPlaybackOnDetectMessageEnd) {
		toSerialize["CancelPlaybackOnDetectMessageEnd"] = o.CancelPlaybackOnDetectMessageEnd
	}
	if !IsNil(o.PreferredCodecs) {
		toSerialize["PreferredCodecs"] = o.PreferredCodecs
	}
	if !IsNil(o.Record) {
		toSerialize["Record"] = o.Record
	}
	if !IsNil(o.RecordingChannels) {
		toSerialize["RecordingChannels"] = o.RecordingChannels
	}
	if !IsNil(o.RecordingStatusCallback) {
		toSerialize["RecordingStatusCallback"] = o.RecordingStatusCallback
	}
	if !IsNil(o.RecordingStatusCallbackMethod) {
		toSerialize["RecordingStatusCallbackMethod"] = o.RecordingStatusCallbackMethod
	}
	if !IsNil(o.RecordingStatusCallbackEvent) {
		toSerialize["RecordingStatusCallbackEvent"] = o.RecordingStatusCallbackEvent
	}
	if !IsNil(o.RecordingTimeout) {
		toSerialize["RecordingTimeout"] = o.RecordingTimeout
	}
	if !IsNil(o.RecordingTrack) {
		toSerialize["RecordingTrack"] = o.RecordingTrack
	}
	if !IsNil(o.SipAuthPassword) {
		toSerialize["SipAuthPassword"] = o.SipAuthPassword
	}
	if !IsNil(o.SipAuthUsername) {
		toSerialize["SipAuthUsername"] = o.SipAuthUsername
	}
	if !IsNil(o.Trim) {
		toSerialize["Trim"] = o.Trim
	}
	return toSerialize, nil
}

func (o *InitiateCallRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ApplicationSid",
		"To",
		"From",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInitiateCallRequest := _InitiateCallRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInitiateCallRequest)

	if err != nil {
		return err
	}

	*o = InitiateCallRequest(varInitiateCallRequest)

	return err
}

type NullableInitiateCallRequest struct {
	value *InitiateCallRequest
	isSet bool
}

func (v NullableInitiateCallRequest) Get() *InitiateCallRequest {
	return v.value
}

func (v *NullableInitiateCallRequest) Set(val *InitiateCallRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiateCallRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiateCallRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiateCallRequest(val *InitiateCallRequest) *NullableInitiateCallRequest {
	return &NullableInitiateCallRequest{value: val, isSet: true}
}

func (v NullableInitiateCallRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiateCallRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


