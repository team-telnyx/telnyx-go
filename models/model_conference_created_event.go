/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferenceCreatedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceCreatedEvent{}

// ConferenceCreatedEvent struct for ConferenceCreatedEvent
type ConferenceCreatedEvent struct {
	Data *ConferenceCreated `json:"data,omitempty"`
}

// NewConferenceCreatedEvent instantiates a new ConferenceCreatedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceCreatedEvent() *ConferenceCreatedEvent {
	this := ConferenceCreatedEvent{}
	return &this
}

// NewConferenceCreatedEventWithDefaults instantiates a new ConferenceCreatedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceCreatedEventWithDefaults() *ConferenceCreatedEvent {
	this := ConferenceCreatedEvent{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConferenceCreatedEvent) GetData() ConferenceCreated {
	if o == nil || IsNil(o.Data) {
		var ret ConferenceCreated
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceCreatedEvent) GetDataOk() (*ConferenceCreated, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConferenceCreatedEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ConferenceCreated and assigns it to the Data field.
func (o *ConferenceCreatedEvent) SetData(v ConferenceCreated) {
	o.Data = &v
}

func (o ConferenceCreatedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceCreatedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableConferenceCreatedEvent struct {
	value *ConferenceCreatedEvent
	isSet bool
}

func (v NullableConferenceCreatedEvent) Get() *ConferenceCreatedEvent {
	return v.value
}

func (v *NullableConferenceCreatedEvent) Set(val *ConferenceCreatedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceCreatedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceCreatedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceCreatedEvent(val *ConferenceCreatedEvent) *NullableConferenceCreatedEvent {
	return &NullableConferenceCreatedEvent{value: val, isSet: true}
}

func (v NullableConferenceCreatedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceCreatedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


