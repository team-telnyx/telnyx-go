/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the VirtualCrossConnectPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualCrossConnectPatch{}

// VirtualCrossConnectPatch struct for VirtualCrossConnectPatch
type VirtualCrossConnectPatch struct {
	// Indicates whether the primary circuit is enabled. Setting this to `false` will disable the circuit.
	PrimaryEnabled *bool `json:"primary_enabled,omitempty"`
	// Whether the primary BGP route is being announced.
	PrimaryRoutingAnnouncement *bool `json:"primary_routing_announcement,omitempty"`
	// The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value can not be patched once the VXC has bene provisioned.
	PrimaryCloudIp *string `json:"primary_cloud_ip,omitempty"`
	// Indicates whether the secondary circuit is enabled. Setting this to `false` will disable the circuit.
	SecondaryEnabled *bool `json:"secondary_enabled,omitempty"`
	// Whether the secondary BGP route is being announced.
	SecondaryRoutingAnnouncement *bool `json:"secondary_routing_announcement,omitempty"`
	// The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value can not be patched once the VXC has bene provisioned.
	SecondaryCloudIp *string `json:"secondary_cloud_ip,omitempty"`
}

// NewVirtualCrossConnectPatch instantiates a new VirtualCrossConnectPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCrossConnectPatch() *VirtualCrossConnectPatch {
	this := VirtualCrossConnectPatch{}
	return &this
}

// NewVirtualCrossConnectPatchWithDefaults instantiates a new VirtualCrossConnectPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCrossConnectPatchWithDefaults() *VirtualCrossConnectPatch {
	this := VirtualCrossConnectPatch{}
	return &this
}

// GetPrimaryEnabled returns the PrimaryEnabled field value if set, zero value otherwise.
func (o *VirtualCrossConnectPatch) GetPrimaryEnabled() bool {
	if o == nil || IsNil(o.PrimaryEnabled) {
		var ret bool
		return ret
	}
	return *o.PrimaryEnabled
}

// GetPrimaryEnabledOk returns a tuple with the PrimaryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectPatch) GetPrimaryEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryEnabled) {
		return nil, false
	}
	return o.PrimaryEnabled, true
}

// HasPrimaryEnabled returns a boolean if a field has been set.
func (o *VirtualCrossConnectPatch) HasPrimaryEnabled() bool {
	if o != nil && !IsNil(o.PrimaryEnabled) {
		return true
	}

	return false
}

// SetPrimaryEnabled gets a reference to the given bool and assigns it to the PrimaryEnabled field.
func (o *VirtualCrossConnectPatch) SetPrimaryEnabled(v bool) {
	o.PrimaryEnabled = &v
}

// GetPrimaryRoutingAnnouncement returns the PrimaryRoutingAnnouncement field value if set, zero value otherwise.
func (o *VirtualCrossConnectPatch) GetPrimaryRoutingAnnouncement() bool {
	if o == nil || IsNil(o.PrimaryRoutingAnnouncement) {
		var ret bool
		return ret
	}
	return *o.PrimaryRoutingAnnouncement
}

// GetPrimaryRoutingAnnouncementOk returns a tuple with the PrimaryRoutingAnnouncement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectPatch) GetPrimaryRoutingAnnouncementOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryRoutingAnnouncement) {
		return nil, false
	}
	return o.PrimaryRoutingAnnouncement, true
}

// HasPrimaryRoutingAnnouncement returns a boolean if a field has been set.
func (o *VirtualCrossConnectPatch) HasPrimaryRoutingAnnouncement() bool {
	if o != nil && !IsNil(o.PrimaryRoutingAnnouncement) {
		return true
	}

	return false
}

// SetPrimaryRoutingAnnouncement gets a reference to the given bool and assigns it to the PrimaryRoutingAnnouncement field.
func (o *VirtualCrossConnectPatch) SetPrimaryRoutingAnnouncement(v bool) {
	o.PrimaryRoutingAnnouncement = &v
}

// GetPrimaryCloudIp returns the PrimaryCloudIp field value if set, zero value otherwise.
func (o *VirtualCrossConnectPatch) GetPrimaryCloudIp() string {
	if o == nil || IsNil(o.PrimaryCloudIp) {
		var ret string
		return ret
	}
	return *o.PrimaryCloudIp
}

// GetPrimaryCloudIpOk returns a tuple with the PrimaryCloudIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectPatch) GetPrimaryCloudIpOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryCloudIp) {
		return nil, false
	}
	return o.PrimaryCloudIp, true
}

// HasPrimaryCloudIp returns a boolean if a field has been set.
func (o *VirtualCrossConnectPatch) HasPrimaryCloudIp() bool {
	if o != nil && !IsNil(o.PrimaryCloudIp) {
		return true
	}

	return false
}

// SetPrimaryCloudIp gets a reference to the given string and assigns it to the PrimaryCloudIp field.
func (o *VirtualCrossConnectPatch) SetPrimaryCloudIp(v string) {
	o.PrimaryCloudIp = &v
}

// GetSecondaryEnabled returns the SecondaryEnabled field value if set, zero value otherwise.
func (o *VirtualCrossConnectPatch) GetSecondaryEnabled() bool {
	if o == nil || IsNil(o.SecondaryEnabled) {
		var ret bool
		return ret
	}
	return *o.SecondaryEnabled
}

// GetSecondaryEnabledOk returns a tuple with the SecondaryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectPatch) GetSecondaryEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SecondaryEnabled) {
		return nil, false
	}
	return o.SecondaryEnabled, true
}

// HasSecondaryEnabled returns a boolean if a field has been set.
func (o *VirtualCrossConnectPatch) HasSecondaryEnabled() bool {
	if o != nil && !IsNil(o.SecondaryEnabled) {
		return true
	}

	return false
}

// SetSecondaryEnabled gets a reference to the given bool and assigns it to the SecondaryEnabled field.
func (o *VirtualCrossConnectPatch) SetSecondaryEnabled(v bool) {
	o.SecondaryEnabled = &v
}

// GetSecondaryRoutingAnnouncement returns the SecondaryRoutingAnnouncement field value if set, zero value otherwise.
func (o *VirtualCrossConnectPatch) GetSecondaryRoutingAnnouncement() bool {
	if o == nil || IsNil(o.SecondaryRoutingAnnouncement) {
		var ret bool
		return ret
	}
	return *o.SecondaryRoutingAnnouncement
}

// GetSecondaryRoutingAnnouncementOk returns a tuple with the SecondaryRoutingAnnouncement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectPatch) GetSecondaryRoutingAnnouncementOk() (*bool, bool) {
	if o == nil || IsNil(o.SecondaryRoutingAnnouncement) {
		return nil, false
	}
	return o.SecondaryRoutingAnnouncement, true
}

// HasSecondaryRoutingAnnouncement returns a boolean if a field has been set.
func (o *VirtualCrossConnectPatch) HasSecondaryRoutingAnnouncement() bool {
	if o != nil && !IsNil(o.SecondaryRoutingAnnouncement) {
		return true
	}

	return false
}

// SetSecondaryRoutingAnnouncement gets a reference to the given bool and assigns it to the SecondaryRoutingAnnouncement field.
func (o *VirtualCrossConnectPatch) SetSecondaryRoutingAnnouncement(v bool) {
	o.SecondaryRoutingAnnouncement = &v
}

// GetSecondaryCloudIp returns the SecondaryCloudIp field value if set, zero value otherwise.
func (o *VirtualCrossConnectPatch) GetSecondaryCloudIp() string {
	if o == nil || IsNil(o.SecondaryCloudIp) {
		var ret string
		return ret
	}
	return *o.SecondaryCloudIp
}

// GetSecondaryCloudIpOk returns a tuple with the SecondaryCloudIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectPatch) GetSecondaryCloudIpOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryCloudIp) {
		return nil, false
	}
	return o.SecondaryCloudIp, true
}

// HasSecondaryCloudIp returns a boolean if a field has been set.
func (o *VirtualCrossConnectPatch) HasSecondaryCloudIp() bool {
	if o != nil && !IsNil(o.SecondaryCloudIp) {
		return true
	}

	return false
}

// SetSecondaryCloudIp gets a reference to the given string and assigns it to the SecondaryCloudIp field.
func (o *VirtualCrossConnectPatch) SetSecondaryCloudIp(v string) {
	o.SecondaryCloudIp = &v
}

func (o VirtualCrossConnectPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualCrossConnectPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrimaryEnabled) {
		toSerialize["primary_enabled"] = o.PrimaryEnabled
	}
	if !IsNil(o.PrimaryRoutingAnnouncement) {
		toSerialize["primary_routing_announcement"] = o.PrimaryRoutingAnnouncement
	}
	if !IsNil(o.PrimaryCloudIp) {
		toSerialize["primary_cloud_ip"] = o.PrimaryCloudIp
	}
	if !IsNil(o.SecondaryEnabled) {
		toSerialize["secondary_enabled"] = o.SecondaryEnabled
	}
	if !IsNil(o.SecondaryRoutingAnnouncement) {
		toSerialize["secondary_routing_announcement"] = o.SecondaryRoutingAnnouncement
	}
	if !IsNil(o.SecondaryCloudIp) {
		toSerialize["secondary_cloud_ip"] = o.SecondaryCloudIp
	}
	return toSerialize, nil
}

type NullableVirtualCrossConnectPatch struct {
	value *VirtualCrossConnectPatch
	isSet bool
}

func (v NullableVirtualCrossConnectPatch) Get() *VirtualCrossConnectPatch {
	return v.value
}

func (v *NullableVirtualCrossConnectPatch) Set(val *VirtualCrossConnectPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCrossConnectPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCrossConnectPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCrossConnectPatch(val *VirtualCrossConnectPatch) *NullableVirtualCrossConnectPatch {
	return &NullableVirtualCrossConnectPatch{value: val, isSet: true}
}

func (v NullableVirtualCrossConnectPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCrossConnectPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


