/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)


// ConversationMetadataValue struct for ConversationMetadataValue
type ConversationMetadataValue struct {
	Bool *bool
	Int32 *int32
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConversationMetadataValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Bool
	err = json.Unmarshal(data, &dst.Bool);
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil // data stored in dst.Bool, return on the first match
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal JSON data into Int32
	err = json.Unmarshal(data, &dst.Int32);
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			return nil // data stored in dst.Int32, return on the first match
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConversationMetadataValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConversationMetadataValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableConversationMetadataValue struct {
	value *ConversationMetadataValue
	isSet bool
}

func (v NullableConversationMetadataValue) Get() *ConversationMetadataValue {
	return v.value
}

func (v *NullableConversationMetadataValue) Set(val *ConversationMetadataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationMetadataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationMetadataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationMetadataValue(val *ConversationMetadataValue) *NullableConversationMetadataValue {
	return &NullableConversationMetadataValue{value: val, isSet: true}
}

func (v NullableConversationMetadataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationMetadataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


