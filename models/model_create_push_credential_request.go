/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreatePushCredentialRequest - struct for CreatePushCredentialRequest
type CreatePushCredentialRequest struct {
	CreateAndroidPushCredentialRequest *CreateAndroidPushCredentialRequest
	CreateIosPushCredentialRequest *CreateIosPushCredentialRequest
}

// CreateAndroidPushCredentialRequestAsCreatePushCredentialRequest is a convenience function that returns CreateAndroidPushCredentialRequest wrapped in CreatePushCredentialRequest
func CreateAndroidPushCredentialRequestAsCreatePushCredentialRequest(v *CreateAndroidPushCredentialRequest) CreatePushCredentialRequest {
	return CreatePushCredentialRequest{
		CreateAndroidPushCredentialRequest: v,
	}
}

// CreateIosPushCredentialRequestAsCreatePushCredentialRequest is a convenience function that returns CreateIosPushCredentialRequest wrapped in CreatePushCredentialRequest
func CreateIosPushCredentialRequestAsCreatePushCredentialRequest(v *CreateIosPushCredentialRequest) CreatePushCredentialRequest {
	return CreatePushCredentialRequest{
		CreateIosPushCredentialRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreatePushCredentialRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateAndroidPushCredentialRequest
	err = newStrictDecoder(data).Decode(&dst.CreateAndroidPushCredentialRequest)
	if err == nil {
		jsonCreateAndroidPushCredentialRequest, _ := json.Marshal(dst.CreateAndroidPushCredentialRequest)
		if string(jsonCreateAndroidPushCredentialRequest) == "{}" { // empty struct
			dst.CreateAndroidPushCredentialRequest = nil
		} else {
			if err = validator.Validate(dst.CreateAndroidPushCredentialRequest); err != nil {
				dst.CreateAndroidPushCredentialRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateAndroidPushCredentialRequest = nil
	}

	// try to unmarshal data into CreateIosPushCredentialRequest
	err = newStrictDecoder(data).Decode(&dst.CreateIosPushCredentialRequest)
	if err == nil {
		jsonCreateIosPushCredentialRequest, _ := json.Marshal(dst.CreateIosPushCredentialRequest)
		if string(jsonCreateIosPushCredentialRequest) == "{}" { // empty struct
			dst.CreateIosPushCredentialRequest = nil
		} else {
			if err = validator.Validate(dst.CreateIosPushCredentialRequest); err != nil {
				dst.CreateIosPushCredentialRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateIosPushCredentialRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateAndroidPushCredentialRequest = nil
		dst.CreateIosPushCredentialRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreatePushCredentialRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreatePushCredentialRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreatePushCredentialRequest) MarshalJSON() ([]byte, error) {
	if src.CreateAndroidPushCredentialRequest != nil {
		return json.Marshal(&src.CreateAndroidPushCredentialRequest)
	}

	if src.CreateIosPushCredentialRequest != nil {
		return json.Marshal(&src.CreateIosPushCredentialRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreatePushCredentialRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateAndroidPushCredentialRequest != nil {
		return obj.CreateAndroidPushCredentialRequest
	}

	if obj.CreateIosPushCredentialRequest != nil {
		return obj.CreateIosPushCredentialRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreatePushCredentialRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateAndroidPushCredentialRequest != nil {
		return *obj.CreateAndroidPushCredentialRequest
	}

	if obj.CreateIosPushCredentialRequest != nil {
		return *obj.CreateIosPushCredentialRequest
	}

	// all schemas are nil
	return nil
}

type NullableCreatePushCredentialRequest struct {
	value *CreatePushCredentialRequest
	isSet bool
}

func (v NullableCreatePushCredentialRequest) Get() *CreatePushCredentialRequest {
	return v.value
}

func (v *NullableCreatePushCredentialRequest) Set(val *CreatePushCredentialRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePushCredentialRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePushCredentialRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePushCredentialRequest(val *CreatePushCredentialRequest) *NullableCreatePushCredentialRequest {
	return &NullableCreatePushCredentialRequest{value: val, isSet: true}
}

func (v NullableCreatePushCredentialRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePushCredentialRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


