/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TexmlRecordingStatus the model 'TexmlRecordingStatus'
type TexmlRecordingStatus string

// List of TexmlRecordingStatus
const (
	IN_PROGRESS TexmlRecordingStatus = "in-progress"
	COMPLETED TexmlRecordingStatus = "completed"
	PAUSED TexmlRecordingStatus = "paused"
	STOPPED TexmlRecordingStatus = "stopped"
)

// All allowed values of TexmlRecordingStatus enum
var AllowedTexmlRecordingStatusEnumValues = []TexmlRecordingStatus{
	"in-progress",
	"completed",
	"paused",
	"stopped",
}

func (v *TexmlRecordingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TexmlRecordingStatus(value)
	for _, existing := range AllowedTexmlRecordingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TexmlRecordingStatus", value)
}

// NewTexmlRecordingStatusFromValue returns a pointer to a valid TexmlRecordingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTexmlRecordingStatusFromValue(v string) (*TexmlRecordingStatus, error) {
	ev := TexmlRecordingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TexmlRecordingStatus: valid values are %v", v, AllowedTexmlRecordingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TexmlRecordingStatus) IsValid() bool {
	for _, existing := range AllowedTexmlRecordingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TexmlRecordingStatus value
func (v TexmlRecordingStatus) Ptr() *TexmlRecordingStatus {
	return &v
}

type NullableTexmlRecordingStatus struct {
	value *TexmlRecordingStatus
	isSet bool
}

func (v NullableTexmlRecordingStatus) Get() *TexmlRecordingStatus {
	return v.value
}

func (v *NullableTexmlRecordingStatus) Set(val *TexmlRecordingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTexmlRecordingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTexmlRecordingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTexmlRecordingStatus(val *TexmlRecordingStatus) *NullableTexmlRecordingStatus {
	return &NullableTexmlRecordingStatus{value: val, isSet: true}
}

func (v NullableTexmlRecordingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTexmlRecordingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

