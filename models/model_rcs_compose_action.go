/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSComposeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSComposeAction{}

// RCSComposeAction Compose and send a message to a destination predefined by chatbot.
type RCSComposeAction struct {
	ComposeTextMessage *RCSComposeTextMessage `json:"compose_text_message,omitempty"`
	ComposeRecordingMessage *RCSComposeRecordingMessage `json:"compose_recording_message,omitempty"`
}

// NewRCSComposeAction instantiates a new RCSComposeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSComposeAction() *RCSComposeAction {
	this := RCSComposeAction{}
	return &this
}

// NewRCSComposeActionWithDefaults instantiates a new RCSComposeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSComposeActionWithDefaults() *RCSComposeAction {
	this := RCSComposeAction{}
	return &this
}

// GetComposeTextMessage returns the ComposeTextMessage field value if set, zero value otherwise.
func (o *RCSComposeAction) GetComposeTextMessage() RCSComposeTextMessage {
	if o == nil || IsNil(o.ComposeTextMessage) {
		var ret RCSComposeTextMessage
		return ret
	}
	return *o.ComposeTextMessage
}

// GetComposeTextMessageOk returns a tuple with the ComposeTextMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSComposeAction) GetComposeTextMessageOk() (*RCSComposeTextMessage, bool) {
	if o == nil || IsNil(o.ComposeTextMessage) {
		return nil, false
	}
	return o.ComposeTextMessage, true
}

// HasComposeTextMessage returns a boolean if a field has been set.
func (o *RCSComposeAction) HasComposeTextMessage() bool {
	if o != nil && !IsNil(o.ComposeTextMessage) {
		return true
	}

	return false
}

// SetComposeTextMessage gets a reference to the given RCSComposeTextMessage and assigns it to the ComposeTextMessage field.
func (o *RCSComposeAction) SetComposeTextMessage(v RCSComposeTextMessage) {
	o.ComposeTextMessage = &v
}

// GetComposeRecordingMessage returns the ComposeRecordingMessage field value if set, zero value otherwise.
func (o *RCSComposeAction) GetComposeRecordingMessage() RCSComposeRecordingMessage {
	if o == nil || IsNil(o.ComposeRecordingMessage) {
		var ret RCSComposeRecordingMessage
		return ret
	}
	return *o.ComposeRecordingMessage
}

// GetComposeRecordingMessageOk returns a tuple with the ComposeRecordingMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSComposeAction) GetComposeRecordingMessageOk() (*RCSComposeRecordingMessage, bool) {
	if o == nil || IsNil(o.ComposeRecordingMessage) {
		return nil, false
	}
	return o.ComposeRecordingMessage, true
}

// HasComposeRecordingMessage returns a boolean if a field has been set.
func (o *RCSComposeAction) HasComposeRecordingMessage() bool {
	if o != nil && !IsNil(o.ComposeRecordingMessage) {
		return true
	}

	return false
}

// SetComposeRecordingMessage gets a reference to the given RCSComposeRecordingMessage and assigns it to the ComposeRecordingMessage field.
func (o *RCSComposeAction) SetComposeRecordingMessage(v RCSComposeRecordingMessage) {
	o.ComposeRecordingMessage = &v
}

func (o RCSComposeAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSComposeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComposeTextMessage) {
		toSerialize["compose_text_message"] = o.ComposeTextMessage
	}
	if !IsNil(o.ComposeRecordingMessage) {
		toSerialize["compose_recording_message"] = o.ComposeRecordingMessage
	}
	return toSerialize, nil
}

type NullableRCSComposeAction struct {
	value *RCSComposeAction
	isSet bool
}

func (v NullableRCSComposeAction) Get() *RCSComposeAction {
	return v.value
}

func (v *NullableRCSComposeAction) Set(val *RCSComposeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSComposeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSComposeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSComposeAction(val *RCSComposeAction) *NullableRCSComposeAction {
	return &NullableRCSComposeAction{value: val, isSet: true}
}

func (v NullableRCSComposeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSComposeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


