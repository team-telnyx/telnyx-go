/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the StartStreamingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartStreamingRequest{}

// StartStreamingRequest struct for StartStreamingRequest
type StartStreamingRequest struct {
	// The destination WebSocket address where the stream is going to be delivered.
	StreamUrl *string `json:"stream_url,omitempty"`
	// Specifies which track should be streamed.
	StreamTrack *string `json:"stream_track,omitempty"`
	StreamBidirectionalMode *StreamBidirectionalMode `json:"stream_bidirectional_mode,omitempty"`
	StreamBidirectionalCodec *StreamBidirectionalCodec `json:"stream_bidirectional_codec,omitempty"`
	StreamBidirectionalTargetLegs *StreamBidirectionalTargetLegs `json:"stream_bidirectional_target_legs,omitempty"`
	// Enables Dialogflow for the current call. The default value is false.
	EnableDialogflow *bool `json:"enable_dialogflow,omitempty"`
	DialogflowConfig *DialogflowConfig `json:"dialogflow_config,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
}

// NewStartStreamingRequest instantiates a new StartStreamingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartStreamingRequest() *StartStreamingRequest {
	this := StartStreamingRequest{}
	var streamTrack string = "inbound_track"
	this.StreamTrack = &streamTrack
	var streamBidirectionalMode StreamBidirectionalMode = MP3
	this.StreamBidirectionalMode = &streamBidirectionalMode
	var streamBidirectionalCodec StreamBidirectionalCodec = PCMU
	this.StreamBidirectionalCodec = &streamBidirectionalCodec
	var streamBidirectionalTargetLegs StreamBidirectionalTargetLegs = OPPOSITE
	this.StreamBidirectionalTargetLegs = &streamBidirectionalTargetLegs
	var enableDialogflow bool = false
	this.EnableDialogflow = &enableDialogflow
	return &this
}

// NewStartStreamingRequestWithDefaults instantiates a new StartStreamingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartStreamingRequestWithDefaults() *StartStreamingRequest {
	this := StartStreamingRequest{}
	var streamTrack string = "inbound_track"
	this.StreamTrack = &streamTrack
	var streamBidirectionalMode StreamBidirectionalMode = MP3
	this.StreamBidirectionalMode = &streamBidirectionalMode
	var streamBidirectionalCodec StreamBidirectionalCodec = PCMU
	this.StreamBidirectionalCodec = &streamBidirectionalCodec
	var streamBidirectionalTargetLegs StreamBidirectionalTargetLegs = OPPOSITE
	this.StreamBidirectionalTargetLegs = &streamBidirectionalTargetLegs
	var enableDialogflow bool = false
	this.EnableDialogflow = &enableDialogflow
	return &this
}

// GetStreamUrl returns the StreamUrl field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetStreamUrl() string {
	if o == nil || IsNil(o.StreamUrl) {
		var ret string
		return ret
	}
	return *o.StreamUrl
}

// GetStreamUrlOk returns a tuple with the StreamUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetStreamUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StreamUrl) {
		return nil, false
	}
	return o.StreamUrl, true
}

// HasStreamUrl returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasStreamUrl() bool {
	if o != nil && !IsNil(o.StreamUrl) {
		return true
	}

	return false
}

// SetStreamUrl gets a reference to the given string and assigns it to the StreamUrl field.
func (o *StartStreamingRequest) SetStreamUrl(v string) {
	o.StreamUrl = &v
}

// GetStreamTrack returns the StreamTrack field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetStreamTrack() string {
	if o == nil || IsNil(o.StreamTrack) {
		var ret string
		return ret
	}
	return *o.StreamTrack
}

// GetStreamTrackOk returns a tuple with the StreamTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetStreamTrackOk() (*string, bool) {
	if o == nil || IsNil(o.StreamTrack) {
		return nil, false
	}
	return o.StreamTrack, true
}

// HasStreamTrack returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasStreamTrack() bool {
	if o != nil && !IsNil(o.StreamTrack) {
		return true
	}

	return false
}

// SetStreamTrack gets a reference to the given string and assigns it to the StreamTrack field.
func (o *StartStreamingRequest) SetStreamTrack(v string) {
	o.StreamTrack = &v
}

// GetStreamBidirectionalMode returns the StreamBidirectionalMode field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetStreamBidirectionalMode() StreamBidirectionalMode {
	if o == nil || IsNil(o.StreamBidirectionalMode) {
		var ret StreamBidirectionalMode
		return ret
	}
	return *o.StreamBidirectionalMode
}

// GetStreamBidirectionalModeOk returns a tuple with the StreamBidirectionalMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetStreamBidirectionalModeOk() (*StreamBidirectionalMode, bool) {
	if o == nil || IsNil(o.StreamBidirectionalMode) {
		return nil, false
	}
	return o.StreamBidirectionalMode, true
}

// HasStreamBidirectionalMode returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasStreamBidirectionalMode() bool {
	if o != nil && !IsNil(o.StreamBidirectionalMode) {
		return true
	}

	return false
}

// SetStreamBidirectionalMode gets a reference to the given StreamBidirectionalMode and assigns it to the StreamBidirectionalMode field.
func (o *StartStreamingRequest) SetStreamBidirectionalMode(v StreamBidirectionalMode) {
	o.StreamBidirectionalMode = &v
}

// GetStreamBidirectionalCodec returns the StreamBidirectionalCodec field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetStreamBidirectionalCodec() StreamBidirectionalCodec {
	if o == nil || IsNil(o.StreamBidirectionalCodec) {
		var ret StreamBidirectionalCodec
		return ret
	}
	return *o.StreamBidirectionalCodec
}

// GetStreamBidirectionalCodecOk returns a tuple with the StreamBidirectionalCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetStreamBidirectionalCodecOk() (*StreamBidirectionalCodec, bool) {
	if o == nil || IsNil(o.StreamBidirectionalCodec) {
		return nil, false
	}
	return o.StreamBidirectionalCodec, true
}

// HasStreamBidirectionalCodec returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasStreamBidirectionalCodec() bool {
	if o != nil && !IsNil(o.StreamBidirectionalCodec) {
		return true
	}

	return false
}

// SetStreamBidirectionalCodec gets a reference to the given StreamBidirectionalCodec and assigns it to the StreamBidirectionalCodec field.
func (o *StartStreamingRequest) SetStreamBidirectionalCodec(v StreamBidirectionalCodec) {
	o.StreamBidirectionalCodec = &v
}

// GetStreamBidirectionalTargetLegs returns the StreamBidirectionalTargetLegs field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetStreamBidirectionalTargetLegs() StreamBidirectionalTargetLegs {
	if o == nil || IsNil(o.StreamBidirectionalTargetLegs) {
		var ret StreamBidirectionalTargetLegs
		return ret
	}
	return *o.StreamBidirectionalTargetLegs
}

// GetStreamBidirectionalTargetLegsOk returns a tuple with the StreamBidirectionalTargetLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetStreamBidirectionalTargetLegsOk() (*StreamBidirectionalTargetLegs, bool) {
	if o == nil || IsNil(o.StreamBidirectionalTargetLegs) {
		return nil, false
	}
	return o.StreamBidirectionalTargetLegs, true
}

// HasStreamBidirectionalTargetLegs returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasStreamBidirectionalTargetLegs() bool {
	if o != nil && !IsNil(o.StreamBidirectionalTargetLegs) {
		return true
	}

	return false
}

// SetStreamBidirectionalTargetLegs gets a reference to the given StreamBidirectionalTargetLegs and assigns it to the StreamBidirectionalTargetLegs field.
func (o *StartStreamingRequest) SetStreamBidirectionalTargetLegs(v StreamBidirectionalTargetLegs) {
	o.StreamBidirectionalTargetLegs = &v
}

// GetEnableDialogflow returns the EnableDialogflow field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetEnableDialogflow() bool {
	if o == nil || IsNil(o.EnableDialogflow) {
		var ret bool
		return ret
	}
	return *o.EnableDialogflow
}

// GetEnableDialogflowOk returns a tuple with the EnableDialogflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetEnableDialogflowOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDialogflow) {
		return nil, false
	}
	return o.EnableDialogflow, true
}

// HasEnableDialogflow returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasEnableDialogflow() bool {
	if o != nil && !IsNil(o.EnableDialogflow) {
		return true
	}

	return false
}

// SetEnableDialogflow gets a reference to the given bool and assigns it to the EnableDialogflow field.
func (o *StartStreamingRequest) SetEnableDialogflow(v bool) {
	o.EnableDialogflow = &v
}

// GetDialogflowConfig returns the DialogflowConfig field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetDialogflowConfig() DialogflowConfig {
	if o == nil || IsNil(o.DialogflowConfig) {
		var ret DialogflowConfig
		return ret
	}
	return *o.DialogflowConfig
}

// GetDialogflowConfigOk returns a tuple with the DialogflowConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetDialogflowConfigOk() (*DialogflowConfig, bool) {
	if o == nil || IsNil(o.DialogflowConfig) {
		return nil, false
	}
	return o.DialogflowConfig, true
}

// HasDialogflowConfig returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasDialogflowConfig() bool {
	if o != nil && !IsNil(o.DialogflowConfig) {
		return true
	}

	return false
}

// SetDialogflowConfig gets a reference to the given DialogflowConfig and assigns it to the DialogflowConfig field.
func (o *StartStreamingRequest) SetDialogflowConfig(v DialogflowConfig) {
	o.DialogflowConfig = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *StartStreamingRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *StartStreamingRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartStreamingRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *StartStreamingRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *StartStreamingRequest) SetCommandId(v string) {
	o.CommandId = &v
}

func (o StartStreamingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartStreamingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StreamUrl) {
		toSerialize["stream_url"] = o.StreamUrl
	}
	if !IsNil(o.StreamTrack) {
		toSerialize["stream_track"] = o.StreamTrack
	}
	if !IsNil(o.StreamBidirectionalMode) {
		toSerialize["stream_bidirectional_mode"] = o.StreamBidirectionalMode
	}
	if !IsNil(o.StreamBidirectionalCodec) {
		toSerialize["stream_bidirectional_codec"] = o.StreamBidirectionalCodec
	}
	if !IsNil(o.StreamBidirectionalTargetLegs) {
		toSerialize["stream_bidirectional_target_legs"] = o.StreamBidirectionalTargetLegs
	}
	if !IsNil(o.EnableDialogflow) {
		toSerialize["enable_dialogflow"] = o.EnableDialogflow
	}
	if !IsNil(o.DialogflowConfig) {
		toSerialize["dialogflow_config"] = o.DialogflowConfig
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	return toSerialize, nil
}

type NullableStartStreamingRequest struct {
	value *StartStreamingRequest
	isSet bool
}

func (v NullableStartStreamingRequest) Get() *StartStreamingRequest {
	return v.value
}

func (v *NullableStartStreamingRequest) Set(val *StartStreamingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartStreamingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartStreamingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartStreamingRequest(val *StartStreamingRequest) *NullableStartStreamingRequest {
	return &NullableStartStreamingRequest{value: val, isSet: true}
}

func (v NullableStartStreamingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartStreamingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


