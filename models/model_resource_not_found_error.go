/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ResourceNotFoundError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceNotFoundError{}

// ResourceNotFoundError struct for ResourceNotFoundError
type ResourceNotFoundError struct {
	Errors []ResourceNotFoundErrorErrorsInner `json:"errors,omitempty"`
}

// NewResourceNotFoundError instantiates a new ResourceNotFoundError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceNotFoundError() *ResourceNotFoundError {
	this := ResourceNotFoundError{}
	return &this
}

// NewResourceNotFoundErrorWithDefaults instantiates a new ResourceNotFoundError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceNotFoundErrorWithDefaults() *ResourceNotFoundError {
	this := ResourceNotFoundError{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ResourceNotFoundError) GetErrors() []ResourceNotFoundErrorErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []ResourceNotFoundErrorErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundError) GetErrorsOk() ([]ResourceNotFoundErrorErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ResourceNotFoundError) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ResourceNotFoundErrorErrorsInner and assigns it to the Errors field.
func (o *ResourceNotFoundError) SetErrors(v []ResourceNotFoundErrorErrorsInner) {
	o.Errors = v
}

func (o ResourceNotFoundError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceNotFoundError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableResourceNotFoundError struct {
	value *ResourceNotFoundError
	isSet bool
}

func (v NullableResourceNotFoundError) Get() *ResourceNotFoundError {
	return v.value
}

func (v *NullableResourceNotFoundError) Set(val *ResourceNotFoundError) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceNotFoundError) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceNotFoundError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceNotFoundError(val *ResourceNotFoundError) *NullableResourceNotFoundError {
	return &NullableResourceNotFoundError{value: val, isSet: true}
}

func (v NullableResourceNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceNotFoundError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


