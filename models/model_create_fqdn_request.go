/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFqdnRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFqdnRequest{}

// CreateFqdnRequest struct for CreateFqdnRequest
type CreateFqdnRequest struct {
	// ID of the FQDN connection to which this IP should be attached.
	ConnectionId string `json:"connection_id"`
	// FQDN represented by this resource.
	Fqdn string `json:"fqdn"`
	// Port to use when connecting to this FQDN.
	Port NullableInt32 `json:"port,omitempty"`
	// The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.
	DnsRecordType string `json:"dns_record_type"`
}

type _CreateFqdnRequest CreateFqdnRequest

// NewCreateFqdnRequest instantiates a new CreateFqdnRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFqdnRequest(connectionId string, fqdn string, dnsRecordType string) *CreateFqdnRequest {
	this := CreateFqdnRequest{}
	this.ConnectionId = connectionId
	this.Fqdn = fqdn
	var port int32 = 5060
	this.Port = *NewNullableInt32(&port)
	this.DnsRecordType = dnsRecordType
	return &this
}

// NewCreateFqdnRequestWithDefaults instantiates a new CreateFqdnRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFqdnRequestWithDefaults() *CreateFqdnRequest {
	this := CreateFqdnRequest{}
	var port int32 = 5060
	this.Port = *NewNullableInt32(&port)
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *CreateFqdnRequest) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *CreateFqdnRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *CreateFqdnRequest) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetFqdn returns the Fqdn field value
func (o *CreateFqdnRequest) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *CreateFqdnRequest) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *CreateFqdnRequest) SetFqdn(v string) {
	o.Fqdn = v
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateFqdnRequest) GetPort() int32 {
	if o == nil || IsNil(o.Port.Get()) {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateFqdnRequest) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *CreateFqdnRequest) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *CreateFqdnRequest) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *CreateFqdnRequest) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *CreateFqdnRequest) UnsetPort() {
	o.Port.Unset()
}

// GetDnsRecordType returns the DnsRecordType field value
func (o *CreateFqdnRequest) GetDnsRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnsRecordType
}

// GetDnsRecordTypeOk returns a tuple with the DnsRecordType field value
// and a boolean to check if the value has been set.
func (o *CreateFqdnRequest) GetDnsRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsRecordType, true
}

// SetDnsRecordType sets field value
func (o *CreateFqdnRequest) SetDnsRecordType(v string) {
	o.DnsRecordType = v
}

func (o CreateFqdnRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFqdnRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connection_id"] = o.ConnectionId
	toSerialize["fqdn"] = o.Fqdn
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	toSerialize["dns_record_type"] = o.DnsRecordType
	return toSerialize, nil
}

func (o *CreateFqdnRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connection_id",
		"fqdn",
		"dns_record_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFqdnRequest := _CreateFqdnRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFqdnRequest)

	if err != nil {
		return err
	}

	*o = CreateFqdnRequest(varCreateFqdnRequest)

	return err
}

type NullableCreateFqdnRequest struct {
	value *CreateFqdnRequest
	isSet bool
}

func (v NullableCreateFqdnRequest) Get() *CreateFqdnRequest {
	return v.value
}

func (v *NullableCreateFqdnRequest) Set(val *CreateFqdnRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFqdnRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFqdnRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFqdnRequest(val *CreateFqdnRequest) *NullableCreateFqdnRequest {
	return &NullableCreateFqdnRequest{value: val, isSet: true}
}

func (v NullableCreateFqdnRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFqdnRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


