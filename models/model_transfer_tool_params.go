/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransferToolParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferToolParams{}

// TransferToolParams struct for TransferToolParams
type TransferToolParams struct {
	// The different possible targets of the transfer. The assistant will be able to choose one of the targets to transfer the call to.
	Targets []TransferToolParamsTargetsInner `json:"targets"`
	// Number or SIP URI placing the call.
	From string `json:"from"`
	// Custom headers to be added to the SIP INVITE for the transfer command.
	CustomHeaders []TransferToolParamsCustomHeadersInner `json:"custom_headers,omitempty"`
}

type _TransferToolParams TransferToolParams

// NewTransferToolParams instantiates a new TransferToolParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferToolParams(targets []TransferToolParamsTargetsInner, from string) *TransferToolParams {
	this := TransferToolParams{}
	this.Targets = targets
	this.From = from
	return &this
}

// NewTransferToolParamsWithDefaults instantiates a new TransferToolParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferToolParamsWithDefaults() *TransferToolParams {
	this := TransferToolParams{}
	return &this
}

// GetTargets returns the Targets field value
func (o *TransferToolParams) GetTargets() []TransferToolParamsTargetsInner {
	if o == nil {
		var ret []TransferToolParamsTargetsInner
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *TransferToolParams) GetTargetsOk() ([]TransferToolParamsTargetsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Targets, true
}

// SetTargets sets field value
func (o *TransferToolParams) SetTargets(v []TransferToolParamsTargetsInner) {
	o.Targets = v
}

// GetFrom returns the From field value
func (o *TransferToolParams) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *TransferToolParams) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *TransferToolParams) SetFrom(v string) {
	o.From = v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *TransferToolParams) GetCustomHeaders() []TransferToolParamsCustomHeadersInner {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret []TransferToolParamsCustomHeadersInner
		return ret
	}
	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToolParams) GetCustomHeadersOk() ([]TransferToolParamsCustomHeadersInner, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *TransferToolParams) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given []TransferToolParamsCustomHeadersInner and assigns it to the CustomHeaders field.
func (o *TransferToolParams) SetCustomHeaders(v []TransferToolParamsCustomHeadersInner) {
	o.CustomHeaders = v
}

func (o TransferToolParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferToolParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targets"] = o.Targets
	toSerialize["from"] = o.From
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	return toSerialize, nil
}

func (o *TransferToolParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targets",
		"from",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferToolParams := _TransferToolParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferToolParams)

	if err != nil {
		return err
	}

	*o = TransferToolParams(varTransferToolParams)

	return err
}

type NullableTransferToolParams struct {
	value *TransferToolParams
	isSet bool
}

func (v NullableTransferToolParams) Get() *TransferToolParams {
	return v.value
}

func (v *NullableTransferToolParams) Set(val *TransferToolParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferToolParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferToolParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferToolParams(val *TransferToolParams) *NullableTransferToolParams {
	return &NullableTransferToolParams{value: val, isSet: true}
}

func (v NullableTransferToolParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferToolParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


