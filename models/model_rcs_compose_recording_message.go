/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCSComposeRecordingMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSComposeRecordingMessage{}

// RCSComposeRecordingMessage Initiate the recording and sending of an audio or video message.
type RCSComposeRecordingMessage struct {
	// phone number in +E.164 format
	PhoneNumber string `json:"phone_number"`
	// The type of the recording action.
	Type string `json:"type"`
}

type _RCSComposeRecordingMessage RCSComposeRecordingMessage

// NewRCSComposeRecordingMessage instantiates a new RCSComposeRecordingMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSComposeRecordingMessage(phoneNumber string, type_ string) *RCSComposeRecordingMessage {
	this := RCSComposeRecordingMessage{}
	this.PhoneNumber = phoneNumber
	this.Type = type_
	return &this
}

// NewRCSComposeRecordingMessageWithDefaults instantiates a new RCSComposeRecordingMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSComposeRecordingMessageWithDefaults() *RCSComposeRecordingMessage {
	this := RCSComposeRecordingMessage{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *RCSComposeRecordingMessage) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *RCSComposeRecordingMessage) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *RCSComposeRecordingMessage) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetType returns the Type field value
func (o *RCSComposeRecordingMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RCSComposeRecordingMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RCSComposeRecordingMessage) SetType(v string) {
	o.Type = v
}

func (o RCSComposeRecordingMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSComposeRecordingMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["phone_number"] = o.PhoneNumber
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RCSComposeRecordingMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"phone_number",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCSComposeRecordingMessage := _RCSComposeRecordingMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCSComposeRecordingMessage)

	if err != nil {
		return err
	}

	*o = RCSComposeRecordingMessage(varRCSComposeRecordingMessage)

	return err
}

type NullableRCSComposeRecordingMessage struct {
	value *RCSComposeRecordingMessage
	isSet bool
}

func (v NullableRCSComposeRecordingMessage) Get() *RCSComposeRecordingMessage {
	return v.value
}

func (v *NullableRCSComposeRecordingMessage) Set(val *RCSComposeRecordingMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSComposeRecordingMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSComposeRecordingMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSComposeRecordingMessage(val *RCSComposeRecordingMessage) *NullableRCSComposeRecordingMessage {
	return &NullableRCSComposeRecordingMessage{value: val, isSet: true}
}

func (v NullableRCSComposeRecordingMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSComposeRecordingMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


