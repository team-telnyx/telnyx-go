/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the NumberLookupRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberLookupRecord{}

// NumberLookupRecord struct for NumberLookupRecord
type NumberLookupRecord struct {
	// Identifies the type of record
	RecordType *string `json:"record_type,omitempty"`
	// Region code that matches the specific country calling code
	CountryCode *string `json:"country_code,omitempty"`
	// Hyphen-separated national number, preceded by the national destination code (NDC), with a 0 prefix, if an NDC is found
	NationalFormat *string `json:"national_format,omitempty"`
	// E164-formatted phone number
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Unused
	Fraud *string `json:"fraud,omitempty"`
	Carrier *Carrier `json:"carrier,omitempty"`
	CallerName *CallerName `json:"caller_name,omitempty"`
	Portability *Portability `json:"portability,omitempty"`
}

// NewNumberLookupRecord instantiates a new NumberLookupRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberLookupRecord() *NumberLookupRecord {
	this := NumberLookupRecord{}
	return &this
}

// NewNumberLookupRecordWithDefaults instantiates a new NumberLookupRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberLookupRecordWithDefaults() *NumberLookupRecord {
	this := NumberLookupRecord{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *NumberLookupRecord) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *NumberLookupRecord) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetNationalFormat returns the NationalFormat field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetNationalFormat() string {
	if o == nil || IsNil(o.NationalFormat) {
		var ret string
		return ret
	}
	return *o.NationalFormat
}

// GetNationalFormatOk returns a tuple with the NationalFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetNationalFormatOk() (*string, bool) {
	if o == nil || IsNil(o.NationalFormat) {
		return nil, false
	}
	return o.NationalFormat, true
}

// HasNationalFormat returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasNationalFormat() bool {
	if o != nil && !IsNil(o.NationalFormat) {
		return true
	}

	return false
}

// SetNationalFormat gets a reference to the given string and assigns it to the NationalFormat field.
func (o *NumberLookupRecord) SetNationalFormat(v string) {
	o.NationalFormat = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *NumberLookupRecord) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetFraud returns the Fraud field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetFraud() string {
	if o == nil || IsNil(o.Fraud) {
		var ret string
		return ret
	}
	return *o.Fraud
}

// GetFraudOk returns a tuple with the Fraud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetFraudOk() (*string, bool) {
	if o == nil || IsNil(o.Fraud) {
		return nil, false
	}
	return o.Fraud, true
}

// HasFraud returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasFraud() bool {
	if o != nil && !IsNil(o.Fraud) {
		return true
	}

	return false
}

// SetFraud gets a reference to the given string and assigns it to the Fraud field.
func (o *NumberLookupRecord) SetFraud(v string) {
	o.Fraud = &v
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetCarrier() Carrier {
	if o == nil || IsNil(o.Carrier) {
		var ret Carrier
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetCarrierOk() (*Carrier, bool) {
	if o == nil || IsNil(o.Carrier) {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasCarrier() bool {
	if o != nil && !IsNil(o.Carrier) {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given Carrier and assigns it to the Carrier field.
func (o *NumberLookupRecord) SetCarrier(v Carrier) {
	o.Carrier = &v
}

// GetCallerName returns the CallerName field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetCallerName() CallerName {
	if o == nil || IsNil(o.CallerName) {
		var ret CallerName
		return ret
	}
	return *o.CallerName
}

// GetCallerNameOk returns a tuple with the CallerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetCallerNameOk() (*CallerName, bool) {
	if o == nil || IsNil(o.CallerName) {
		return nil, false
	}
	return o.CallerName, true
}

// HasCallerName returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasCallerName() bool {
	if o != nil && !IsNil(o.CallerName) {
		return true
	}

	return false
}

// SetCallerName gets a reference to the given CallerName and assigns it to the CallerName field.
func (o *NumberLookupRecord) SetCallerName(v CallerName) {
	o.CallerName = &v
}

// GetPortability returns the Portability field value if set, zero value otherwise.
func (o *NumberLookupRecord) GetPortability() Portability {
	if o == nil || IsNil(o.Portability) {
		var ret Portability
		return ret
	}
	return *o.Portability
}

// GetPortabilityOk returns a tuple with the Portability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberLookupRecord) GetPortabilityOk() (*Portability, bool) {
	if o == nil || IsNil(o.Portability) {
		return nil, false
	}
	return o.Portability, true
}

// HasPortability returns a boolean if a field has been set.
func (o *NumberLookupRecord) HasPortability() bool {
	if o != nil && !IsNil(o.Portability) {
		return true
	}

	return false
}

// SetPortability gets a reference to the given Portability and assigns it to the Portability field.
func (o *NumberLookupRecord) SetPortability(v Portability) {
	o.Portability = &v
}

func (o NumberLookupRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberLookupRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.NationalFormat) {
		toSerialize["national_format"] = o.NationalFormat
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.Fraud) {
		toSerialize["fraud"] = o.Fraud
	}
	if !IsNil(o.Carrier) {
		toSerialize["carrier"] = o.Carrier
	}
	if !IsNil(o.CallerName) {
		toSerialize["caller_name"] = o.CallerName
	}
	if !IsNil(o.Portability) {
		toSerialize["portability"] = o.Portability
	}
	return toSerialize, nil
}

type NullableNumberLookupRecord struct {
	value *NumberLookupRecord
	isSet bool
}

func (v NullableNumberLookupRecord) Get() *NumberLookupRecord {
	return v.value
}

func (v *NullableNumberLookupRecord) Set(val *NumberLookupRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberLookupRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberLookupRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberLookupRecord(val *NumberLookupRecord) *NullableNumberLookupRecord {
	return &NullableNumberLookupRecord{value: val, isSet: true}
}

func (v NullableNumberLookupRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberLookupRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


