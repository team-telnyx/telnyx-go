/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// NoiseSuppressionDirection The direction of the audio stream to be noise suppressed.
type NoiseSuppressionDirection string

// List of NoiseSuppressionDirection
const (
	INBOUND NoiseSuppressionDirection = "inbound"
	OUTBOUND NoiseSuppressionDirection = "outbound"
	BOTH NoiseSuppressionDirection = "both"
)

// All allowed values of NoiseSuppressionDirection enum
var AllowedNoiseSuppressionDirectionEnumValues = []NoiseSuppressionDirection{
	"inbound",
	"outbound",
	"both",
}

func (v *NoiseSuppressionDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NoiseSuppressionDirection(value)
	for _, existing := range AllowedNoiseSuppressionDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NoiseSuppressionDirection", value)
}

// NewNoiseSuppressionDirectionFromValue returns a pointer to a valid NoiseSuppressionDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNoiseSuppressionDirectionFromValue(v string) (*NoiseSuppressionDirection, error) {
	ev := NoiseSuppressionDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NoiseSuppressionDirection: valid values are %v", v, AllowedNoiseSuppressionDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NoiseSuppressionDirection) IsValid() bool {
	for _, existing := range AllowedNoiseSuppressionDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NoiseSuppressionDirection value
func (v NoiseSuppressionDirection) Ptr() *NoiseSuppressionDirection {
	return &v
}

type NullableNoiseSuppressionDirection struct {
	value *NoiseSuppressionDirection
	isSet bool
}

func (v NullableNoiseSuppressionDirection) Get() *NoiseSuppressionDirection {
	return v.value
}

func (v *NullableNoiseSuppressionDirection) Set(val *NoiseSuppressionDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableNoiseSuppressionDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableNoiseSuppressionDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoiseSuppressionDirection(val *NoiseSuppressionDirection) *NullableNoiseSuppressionDirection {
	return &NullableNoiseSuppressionDirection{value: val, isSet: true}
}

func (v NullableNoiseSuppressionDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoiseSuppressionDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

