/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// NetworkCoverageAvailableServicesInner - struct for NetworkCoverageAvailableServicesInner
type NetworkCoverageAvailableServicesInner struct {
	AvailableService *AvailableService
}

// AvailableServiceAsNetworkCoverageAvailableServicesInner is a convenience function that returns AvailableService wrapped in NetworkCoverageAvailableServicesInner
func AvailableServiceAsNetworkCoverageAvailableServicesInner(v *AvailableService) NetworkCoverageAvailableServicesInner {
	return NetworkCoverageAvailableServicesInner{
		AvailableService: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkCoverageAvailableServicesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AvailableService
	err = newStrictDecoder(data).Decode(&dst.AvailableService)
	if err == nil {
		jsonAvailableService, _ := json.Marshal(dst.AvailableService)
		if string(jsonAvailableService) == "{}" { // empty struct
			dst.AvailableService = nil
		} else {
			if err = validator.Validate(dst.AvailableService); err != nil {
				dst.AvailableService = nil
			} else {
				match++
			}
		}
	} else {
		dst.AvailableService = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AvailableService = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NetworkCoverageAvailableServicesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NetworkCoverageAvailableServicesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkCoverageAvailableServicesInner) MarshalJSON() ([]byte, error) {
	if src.AvailableService != nil {
		return json.Marshal(&src.AvailableService)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkCoverageAvailableServicesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AvailableService != nil {
		return obj.AvailableService
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj NetworkCoverageAvailableServicesInner) GetActualInstanceValue() (interface{}) {
	if obj.AvailableService != nil {
		return *obj.AvailableService
	}

	// all schemas are nil
	return nil
}

type NullableNetworkCoverageAvailableServicesInner struct {
	value *NetworkCoverageAvailableServicesInner
	isSet bool
}

func (v NullableNetworkCoverageAvailableServicesInner) Get() *NetworkCoverageAvailableServicesInner {
	return v.value
}

func (v *NullableNetworkCoverageAvailableServicesInner) Set(val *NetworkCoverageAvailableServicesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkCoverageAvailableServicesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkCoverageAvailableServicesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkCoverageAvailableServicesInner(val *NetworkCoverageAvailableServicesInner) *NullableNetworkCoverageAvailableServicesInner {
	return &NullableNetworkCoverageAvailableServicesInner{value: val, isSet: true}
}

func (v NullableNetworkCoverageAvailableServicesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkCoverageAvailableServicesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


