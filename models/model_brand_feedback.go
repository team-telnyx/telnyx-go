/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BrandFeedback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandFeedback{}

// BrandFeedback struct for BrandFeedback
type BrandFeedback struct {
	// ID of the brand being queried about
	BrandId string `json:"brandId"`
	// A list of reasons why brand creation/revetting didn't go as planned
	Category []BrandFeedbackCategory `json:"category"`
}

type _BrandFeedback BrandFeedback

// NewBrandFeedback instantiates a new BrandFeedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandFeedback(brandId string, category []BrandFeedbackCategory) *BrandFeedback {
	this := BrandFeedback{}
	this.BrandId = brandId
	this.Category = category
	return &this
}

// NewBrandFeedbackWithDefaults instantiates a new BrandFeedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandFeedbackWithDefaults() *BrandFeedback {
	this := BrandFeedback{}
	return &this
}

// GetBrandId returns the BrandId field value
func (o *BrandFeedback) GetBrandId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value
// and a boolean to check if the value has been set.
func (o *BrandFeedback) GetBrandIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrandId, true
}

// SetBrandId sets field value
func (o *BrandFeedback) SetBrandId(v string) {
	o.BrandId = v
}

// GetCategory returns the Category field value
func (o *BrandFeedback) GetCategory() []BrandFeedbackCategory {
	if o == nil {
		var ret []BrandFeedbackCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *BrandFeedback) GetCategoryOk() ([]BrandFeedbackCategory, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *BrandFeedback) SetCategory(v []BrandFeedbackCategory) {
	o.Category = v
}

func (o BrandFeedback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandFeedback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brandId"] = o.BrandId
	toSerialize["category"] = o.Category
	return toSerialize, nil
}

func (o *BrandFeedback) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brandId",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBrandFeedback := _BrandFeedback{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBrandFeedback)

	if err != nil {
		return err
	}

	*o = BrandFeedback(varBrandFeedback)

	return err
}

type NullableBrandFeedback struct {
	value *BrandFeedback
	isSet bool
}

func (v NullableBrandFeedback) Get() *BrandFeedback {
	return v.value
}

func (v *NullableBrandFeedback) Set(val *BrandFeedback) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandFeedback) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandFeedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandFeedback(val *BrandFeedback) *NullableBrandFeedback {
	return &NullableBrandFeedback{value: val, isSet: true}
}

func (v NullableBrandFeedback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandFeedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


