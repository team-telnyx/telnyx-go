/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CallRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRequest{}

// CallRequest struct for CallRequest
type CallRequest struct {
	To CallRequestTo `json:"to"`
	// The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format.
	From string `json:"from"`
	// The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.
	FromDisplayName *string `json:"from_display_name,omitempty"`
	// The ID of the Call Control App (formerly ID of the connection) to be used when dialing the destination.
	ConnectionId string `json:"connection_id"`
	// The URL of a file to be played back to the callee when the call is answered. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioUrl *string `json:"audio_url,omitempty"`
	// The media_name of a file to be played back to the callee when the call is answered. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
	MediaName *string `json:"media_name,omitempty"`
	// The list of comma-separated codecs in a preferred order for the forked media to be received.
	PreferredCodecs *string `json:"preferred_codecs,omitempty"`
	// The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being called. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 600 seconds.
	TimeoutSecs *int32 `json:"timeout_secs,omitempty"`
	// Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.
	TimeLimitSecs *int32 `json:"time_limit_secs,omitempty"`
	// Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.premium.detection.ended` webhook with one of the following results: `human_residence`, `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is detected, you will receive another `call.machine.greeting.ended` webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive `call.machine.greeting.ended` if a beep is detected.
	AnsweringMachineDetection *string `json:"answering_machine_detection,omitempty"`
	AnsweringMachineDetectionConfig *CallRequestAnsweringMachineDetectionConfig `json:"answering_machine_detection_config,omitempty"`
	ConferenceConfig *CallRequestConferenceConfig `json:"conference_config,omitempty"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers,omitempty"`
	// Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.
	BillingGroupId *string `json:"billing_group_id,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore others Dial commands with the same `command_id`.
	CommandId *string `json:"command_id,omitempty"`
	// Use another call's control id for sharing the same call session id
	LinkTo *string `json:"link_to,omitempty"`
	// Defines whether media should be encrypted on the call.
	MediaEncryption *string `json:"media_encryption,omitempty"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername *string `json:"sip_auth_username,omitempty"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword *string `json:"sip_auth_password,omitempty"`
	// SIP headers to be added to the SIP INVITE request. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers,omitempty"`
	// Defines SIP transport protocol to be used on the call.
	SipTransportProtocol *string `json:"sip_transport_protocol,omitempty"`
	SoundModifications *SoundModifications `json:"sound_modifications,omitempty"`
	// The destination WebSocket address where the stream is going to be delivered.
	StreamUrl *string `json:"stream_url,omitempty"`
	// Specifies which track should be streamed.
	StreamTrack *string `json:"stream_track,omitempty"`
	StreamBidirectionalMode *StreamBidirectionalMode `json:"stream_bidirectional_mode,omitempty"`
	StreamBidirectionalCodec *StreamBidirectionalCodec `json:"stream_bidirectional_codec,omitempty"`
	StreamBidirectionalTargetLegs *StreamBidirectionalTargetLegs `json:"stream_bidirectional_target_legs,omitempty"`
	StreamBidirectionalSamplingRate *StreamBidirectionalSamplingRate `json:"stream_bidirectional_sampling_rate,omitempty"`
	// Establish websocket connection before dialing the destination. This is useful for cases where the websocket connection takes a long time to establish.
	StreamEstablishBeforeCallOriginate *bool `json:"stream_establish_before_call_originate,omitempty"`
	// Generate silence RTP packets when no transmission available.
	SendSilenceWhenIdle *bool `json:"send_silence_when_idle,omitempty"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookUrl *string `json:"webhook_url,omitempty"`
	// HTTP request type used for `webhook_url`.
	WebhookUrlMethod *string `json:"webhook_url_method,omitempty"`
	// Start recording automatically after an event. Disabled by default.
	Record *string `json:"record,omitempty"`
	// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
	RecordChannels *string `json:"record_channels,omitempty"`
	// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
	RecordFormat *string `json:"record_format,omitempty"`
	// Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).
	RecordMaxLength *int32 `json:"record_max_length,omitempty"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).
	RecordTimeoutSecs *int32 `json:"record_timeout_secs,omitempty"`
	// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).
	RecordTrack *string `json:"record_track,omitempty"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	RecordTrim *string `json:"record_trim,omitempty"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.
	RecordCustomFileName *string `json:"record_custom_file_name,omitempty"`
	// The call leg which will be supervised by the new call.
	SuperviseCallControlId *string `json:"supervise_call_control_id,omitempty"`
	// The role of the supervisor call. 'barge' means that supervisor call hears and is being heard by both ends of the call (caller & callee). 'whisper' means that only supervised_call_control_id hears supervisor but supervisor can hear everything. 'monitor' means that nobody can hear supervisor call, but supervisor can hear everything on the call.
	SupervisorRole *string `json:"supervisor_role,omitempty"`
	// Enables Dialogflow for the current call. The default value is false.
	EnableDialogflow *bool `json:"enable_dialogflow,omitempty"`
	DialogflowConfig *DialogflowConfig `json:"dialogflow_config,omitempty"`
	// Enable transcription upon call answer. The default value is false.
	Transcription *bool `json:"transcription,omitempty"`
	TranscriptionConfig *TranscriptionStartRequest `json:"transcription_config,omitempty"`
}

type _CallRequest CallRequest

// NewCallRequest instantiates a new CallRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRequest(to CallRequestTo, from string, connectionId string) *CallRequest {
	this := CallRequest{}
	this.To = to
	this.From = from
	this.ConnectionId = connectionId
	var timeoutSecs int32 = 30
	this.TimeoutSecs = &timeoutSecs
	var timeLimitSecs int32 = 14400
	this.TimeLimitSecs = &timeLimitSecs
	var answeringMachineDetection string = "disabled"
	this.AnsweringMachineDetection = &answeringMachineDetection
	var mediaEncryption string = "disabled"
	this.MediaEncryption = &mediaEncryption
	var sipTransportProtocol string = "UDP"
	this.SipTransportProtocol = &sipTransportProtocol
	var streamTrack string = "inbound_track"
	this.StreamTrack = &streamTrack
	var streamBidirectionalMode StreamBidirectionalMode = MP3
	this.StreamBidirectionalMode = &streamBidirectionalMode
	var streamBidirectionalCodec StreamBidirectionalCodec = PCMU
	this.StreamBidirectionalCodec = &streamBidirectionalCodec
	var streamBidirectionalTargetLegs StreamBidirectionalTargetLegs = OPPOSITE
	this.StreamBidirectionalTargetLegs = &streamBidirectionalTargetLegs
	var streamBidirectionalSamplingRate StreamBidirectionalSamplingRate = _8000
	this.StreamBidirectionalSamplingRate = &streamBidirectionalSamplingRate
	var streamEstablishBeforeCallOriginate bool = false
	this.StreamEstablishBeforeCallOriginate = &streamEstablishBeforeCallOriginate
	var sendSilenceWhenIdle bool = false
	this.SendSilenceWhenIdle = &sendSilenceWhenIdle
	var webhookUrlMethod string = "POST"
	this.WebhookUrlMethod = &webhookUrlMethod
	var recordChannels string = "dual"
	this.RecordChannels = &recordChannels
	var recordFormat string = "mp3"
	this.RecordFormat = &recordFormat
	var recordMaxLength int32 = 0
	this.RecordMaxLength = &recordMaxLength
	var recordTimeoutSecs int32 = 0
	this.RecordTimeoutSecs = &recordTimeoutSecs
	var recordTrack string = "both"
	this.RecordTrack = &recordTrack
	var supervisorRole string = "barge"
	this.SupervisorRole = &supervisorRole
	var enableDialogflow bool = false
	this.EnableDialogflow = &enableDialogflow
	var transcription bool = false
	this.Transcription = &transcription
	return &this
}

// NewCallRequestWithDefaults instantiates a new CallRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRequestWithDefaults() *CallRequest {
	this := CallRequest{}
	var timeoutSecs int32 = 30
	this.TimeoutSecs = &timeoutSecs
	var timeLimitSecs int32 = 14400
	this.TimeLimitSecs = &timeLimitSecs
	var answeringMachineDetection string = "disabled"
	this.AnsweringMachineDetection = &answeringMachineDetection
	var mediaEncryption string = "disabled"
	this.MediaEncryption = &mediaEncryption
	var sipTransportProtocol string = "UDP"
	this.SipTransportProtocol = &sipTransportProtocol
	var streamTrack string = "inbound_track"
	this.StreamTrack = &streamTrack
	var streamBidirectionalMode StreamBidirectionalMode = MP3
	this.StreamBidirectionalMode = &streamBidirectionalMode
	var streamBidirectionalCodec StreamBidirectionalCodec = PCMU
	this.StreamBidirectionalCodec = &streamBidirectionalCodec
	var streamBidirectionalTargetLegs StreamBidirectionalTargetLegs = OPPOSITE
	this.StreamBidirectionalTargetLegs = &streamBidirectionalTargetLegs
	var streamBidirectionalSamplingRate StreamBidirectionalSamplingRate = _8000
	this.StreamBidirectionalSamplingRate = &streamBidirectionalSamplingRate
	var streamEstablishBeforeCallOriginate bool = false
	this.StreamEstablishBeforeCallOriginate = &streamEstablishBeforeCallOriginate
	var sendSilenceWhenIdle bool = false
	this.SendSilenceWhenIdle = &sendSilenceWhenIdle
	var webhookUrlMethod string = "POST"
	this.WebhookUrlMethod = &webhookUrlMethod
	var recordChannels string = "dual"
	this.RecordChannels = &recordChannels
	var recordFormat string = "mp3"
	this.RecordFormat = &recordFormat
	var recordMaxLength int32 = 0
	this.RecordMaxLength = &recordMaxLength
	var recordTimeoutSecs int32 = 0
	this.RecordTimeoutSecs = &recordTimeoutSecs
	var recordTrack string = "both"
	this.RecordTrack = &recordTrack
	var supervisorRole string = "barge"
	this.SupervisorRole = &supervisorRole
	var enableDialogflow bool = false
	this.EnableDialogflow = &enableDialogflow
	var transcription bool = false
	this.Transcription = &transcription
	return &this
}

// GetTo returns the To field value
func (o *CallRequest) GetTo() CallRequestTo {
	if o == nil {
		var ret CallRequestTo
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *CallRequest) GetToOk() (*CallRequestTo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *CallRequest) SetTo(v CallRequestTo) {
	o.To = v
}

// GetFrom returns the From field value
func (o *CallRequest) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CallRequest) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CallRequest) SetFrom(v string) {
	o.From = v
}

// GetFromDisplayName returns the FromDisplayName field value if set, zero value otherwise.
func (o *CallRequest) GetFromDisplayName() string {
	if o == nil || IsNil(o.FromDisplayName) {
		var ret string
		return ret
	}
	return *o.FromDisplayName
}

// GetFromDisplayNameOk returns a tuple with the FromDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetFromDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.FromDisplayName) {
		return nil, false
	}
	return o.FromDisplayName, true
}

// HasFromDisplayName returns a boolean if a field has been set.
func (o *CallRequest) HasFromDisplayName() bool {
	if o != nil && !IsNil(o.FromDisplayName) {
		return true
	}

	return false
}

// SetFromDisplayName gets a reference to the given string and assigns it to the FromDisplayName field.
func (o *CallRequest) SetFromDisplayName(v string) {
	o.FromDisplayName = &v
}

// GetConnectionId returns the ConnectionId field value
func (o *CallRequest) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *CallRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *CallRequest) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetAudioUrl returns the AudioUrl field value if set, zero value otherwise.
func (o *CallRequest) GetAudioUrl() string {
	if o == nil || IsNil(o.AudioUrl) {
		var ret string
		return ret
	}
	return *o.AudioUrl
}

// GetAudioUrlOk returns a tuple with the AudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioUrl) {
		return nil, false
	}
	return o.AudioUrl, true
}

// HasAudioUrl returns a boolean if a field has been set.
func (o *CallRequest) HasAudioUrl() bool {
	if o != nil && !IsNil(o.AudioUrl) {
		return true
	}

	return false
}

// SetAudioUrl gets a reference to the given string and assigns it to the AudioUrl field.
func (o *CallRequest) SetAudioUrl(v string) {
	o.AudioUrl = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *CallRequest) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *CallRequest) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *CallRequest) SetMediaName(v string) {
	o.MediaName = &v
}

// GetPreferredCodecs returns the PreferredCodecs field value if set, zero value otherwise.
func (o *CallRequest) GetPreferredCodecs() string {
	if o == nil || IsNil(o.PreferredCodecs) {
		var ret string
		return ret
	}
	return *o.PreferredCodecs
}

// GetPreferredCodecsOk returns a tuple with the PreferredCodecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetPreferredCodecsOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredCodecs) {
		return nil, false
	}
	return o.PreferredCodecs, true
}

// HasPreferredCodecs returns a boolean if a field has been set.
func (o *CallRequest) HasPreferredCodecs() bool {
	if o != nil && !IsNil(o.PreferredCodecs) {
		return true
	}

	return false
}

// SetPreferredCodecs gets a reference to the given string and assigns it to the PreferredCodecs field.
func (o *CallRequest) SetPreferredCodecs(v string) {
	o.PreferredCodecs = &v
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise.
func (o *CallRequest) GetTimeoutSecs() int32 {
	if o == nil || IsNil(o.TimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSecs) {
		return nil, false
	}
	return o.TimeoutSecs, true
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *CallRequest) HasTimeoutSecs() bool {
	if o != nil && !IsNil(o.TimeoutSecs) {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given int32 and assigns it to the TimeoutSecs field.
func (o *CallRequest) SetTimeoutSecs(v int32) {
	o.TimeoutSecs = &v
}

// GetTimeLimitSecs returns the TimeLimitSecs field value if set, zero value otherwise.
func (o *CallRequest) GetTimeLimitSecs() int32 {
	if o == nil || IsNil(o.TimeLimitSecs) {
		var ret int32
		return ret
	}
	return *o.TimeLimitSecs
}

// GetTimeLimitSecsOk returns a tuple with the TimeLimitSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetTimeLimitSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeLimitSecs) {
		return nil, false
	}
	return o.TimeLimitSecs, true
}

// HasTimeLimitSecs returns a boolean if a field has been set.
func (o *CallRequest) HasTimeLimitSecs() bool {
	if o != nil && !IsNil(o.TimeLimitSecs) {
		return true
	}

	return false
}

// SetTimeLimitSecs gets a reference to the given int32 and assigns it to the TimeLimitSecs field.
func (o *CallRequest) SetTimeLimitSecs(v int32) {
	o.TimeLimitSecs = &v
}

// GetAnsweringMachineDetection returns the AnsweringMachineDetection field value if set, zero value otherwise.
func (o *CallRequest) GetAnsweringMachineDetection() string {
	if o == nil || IsNil(o.AnsweringMachineDetection) {
		var ret string
		return ret
	}
	return *o.AnsweringMachineDetection
}

// GetAnsweringMachineDetectionOk returns a tuple with the AnsweringMachineDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetAnsweringMachineDetectionOk() (*string, bool) {
	if o == nil || IsNil(o.AnsweringMachineDetection) {
		return nil, false
	}
	return o.AnsweringMachineDetection, true
}

// HasAnsweringMachineDetection returns a boolean if a field has been set.
func (o *CallRequest) HasAnsweringMachineDetection() bool {
	if o != nil && !IsNil(o.AnsweringMachineDetection) {
		return true
	}

	return false
}

// SetAnsweringMachineDetection gets a reference to the given string and assigns it to the AnsweringMachineDetection field.
func (o *CallRequest) SetAnsweringMachineDetection(v string) {
	o.AnsweringMachineDetection = &v
}

// GetAnsweringMachineDetectionConfig returns the AnsweringMachineDetectionConfig field value if set, zero value otherwise.
func (o *CallRequest) GetAnsweringMachineDetectionConfig() CallRequestAnsweringMachineDetectionConfig {
	if o == nil || IsNil(o.AnsweringMachineDetectionConfig) {
		var ret CallRequestAnsweringMachineDetectionConfig
		return ret
	}
	return *o.AnsweringMachineDetectionConfig
}

// GetAnsweringMachineDetectionConfigOk returns a tuple with the AnsweringMachineDetectionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetAnsweringMachineDetectionConfigOk() (*CallRequestAnsweringMachineDetectionConfig, bool) {
	if o == nil || IsNil(o.AnsweringMachineDetectionConfig) {
		return nil, false
	}
	return o.AnsweringMachineDetectionConfig, true
}

// HasAnsweringMachineDetectionConfig returns a boolean if a field has been set.
func (o *CallRequest) HasAnsweringMachineDetectionConfig() bool {
	if o != nil && !IsNil(o.AnsweringMachineDetectionConfig) {
		return true
	}

	return false
}

// SetAnsweringMachineDetectionConfig gets a reference to the given CallRequestAnsweringMachineDetectionConfig and assigns it to the AnsweringMachineDetectionConfig field.
func (o *CallRequest) SetAnsweringMachineDetectionConfig(v CallRequestAnsweringMachineDetectionConfig) {
	o.AnsweringMachineDetectionConfig = &v
}

// GetConferenceConfig returns the ConferenceConfig field value if set, zero value otherwise.
func (o *CallRequest) GetConferenceConfig() CallRequestConferenceConfig {
	if o == nil || IsNil(o.ConferenceConfig) {
		var ret CallRequestConferenceConfig
		return ret
	}
	return *o.ConferenceConfig
}

// GetConferenceConfigOk returns a tuple with the ConferenceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetConferenceConfigOk() (*CallRequestConferenceConfig, bool) {
	if o == nil || IsNil(o.ConferenceConfig) {
		return nil, false
	}
	return o.ConferenceConfig, true
}

// HasConferenceConfig returns a boolean if a field has been set.
func (o *CallRequest) HasConferenceConfig() bool {
	if o != nil && !IsNil(o.ConferenceConfig) {
		return true
	}

	return false
}

// SetConferenceConfig gets a reference to the given CallRequestConferenceConfig and assigns it to the ConferenceConfig field.
func (o *CallRequest) SetConferenceConfig(v CallRequestConferenceConfig) {
	o.ConferenceConfig = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *CallRequest) GetCustomHeaders() []CustomSipHeader {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret []CustomSipHeader
		return ret
	}
	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetCustomHeadersOk() ([]CustomSipHeader, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *CallRequest) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given []CustomSipHeader and assigns it to the CustomHeaders field.
func (o *CallRequest) SetCustomHeaders(v []CustomSipHeader) {
	o.CustomHeaders = v
}

// GetBillingGroupId returns the BillingGroupId field value if set, zero value otherwise.
func (o *CallRequest) GetBillingGroupId() string {
	if o == nil || IsNil(o.BillingGroupId) {
		var ret string
		return ret
	}
	return *o.BillingGroupId
}

// GetBillingGroupIdOk returns a tuple with the BillingGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetBillingGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.BillingGroupId) {
		return nil, false
	}
	return o.BillingGroupId, true
}

// HasBillingGroupId returns a boolean if a field has been set.
func (o *CallRequest) HasBillingGroupId() bool {
	if o != nil && !IsNil(o.BillingGroupId) {
		return true
	}

	return false
}

// SetBillingGroupId gets a reference to the given string and assigns it to the BillingGroupId field.
func (o *CallRequest) SetBillingGroupId(v string) {
	o.BillingGroupId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *CallRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *CallRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *CallRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *CallRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *CallRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *CallRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetLinkTo returns the LinkTo field value if set, zero value otherwise.
func (o *CallRequest) GetLinkTo() string {
	if o == nil || IsNil(o.LinkTo) {
		var ret string
		return ret
	}
	return *o.LinkTo
}

// GetLinkToOk returns a tuple with the LinkTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetLinkToOk() (*string, bool) {
	if o == nil || IsNil(o.LinkTo) {
		return nil, false
	}
	return o.LinkTo, true
}

// HasLinkTo returns a boolean if a field has been set.
func (o *CallRequest) HasLinkTo() bool {
	if o != nil && !IsNil(o.LinkTo) {
		return true
	}

	return false
}

// SetLinkTo gets a reference to the given string and assigns it to the LinkTo field.
func (o *CallRequest) SetLinkTo(v string) {
	o.LinkTo = &v
}

// GetMediaEncryption returns the MediaEncryption field value if set, zero value otherwise.
func (o *CallRequest) GetMediaEncryption() string {
	if o == nil || IsNil(o.MediaEncryption) {
		var ret string
		return ret
	}
	return *o.MediaEncryption
}

// GetMediaEncryptionOk returns a tuple with the MediaEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetMediaEncryptionOk() (*string, bool) {
	if o == nil || IsNil(o.MediaEncryption) {
		return nil, false
	}
	return o.MediaEncryption, true
}

// HasMediaEncryption returns a boolean if a field has been set.
func (o *CallRequest) HasMediaEncryption() bool {
	if o != nil && !IsNil(o.MediaEncryption) {
		return true
	}

	return false
}

// SetMediaEncryption gets a reference to the given string and assigns it to the MediaEncryption field.
func (o *CallRequest) SetMediaEncryption(v string) {
	o.MediaEncryption = &v
}

// GetSipAuthUsername returns the SipAuthUsername field value if set, zero value otherwise.
func (o *CallRequest) GetSipAuthUsername() string {
	if o == nil || IsNil(o.SipAuthUsername) {
		var ret string
		return ret
	}
	return *o.SipAuthUsername
}

// GetSipAuthUsernameOk returns a tuple with the SipAuthUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSipAuthUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthUsername) {
		return nil, false
	}
	return o.SipAuthUsername, true
}

// HasSipAuthUsername returns a boolean if a field has been set.
func (o *CallRequest) HasSipAuthUsername() bool {
	if o != nil && !IsNil(o.SipAuthUsername) {
		return true
	}

	return false
}

// SetSipAuthUsername gets a reference to the given string and assigns it to the SipAuthUsername field.
func (o *CallRequest) SetSipAuthUsername(v string) {
	o.SipAuthUsername = &v
}

// GetSipAuthPassword returns the SipAuthPassword field value if set, zero value otherwise.
func (o *CallRequest) GetSipAuthPassword() string {
	if o == nil || IsNil(o.SipAuthPassword) {
		var ret string
		return ret
	}
	return *o.SipAuthPassword
}

// GetSipAuthPasswordOk returns a tuple with the SipAuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSipAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthPassword) {
		return nil, false
	}
	return o.SipAuthPassword, true
}

// HasSipAuthPassword returns a boolean if a field has been set.
func (o *CallRequest) HasSipAuthPassword() bool {
	if o != nil && !IsNil(o.SipAuthPassword) {
		return true
	}

	return false
}

// SetSipAuthPassword gets a reference to the given string and assigns it to the SipAuthPassword field.
func (o *CallRequest) SetSipAuthPassword(v string) {
	o.SipAuthPassword = &v
}

// GetSipHeaders returns the SipHeaders field value if set, zero value otherwise.
func (o *CallRequest) GetSipHeaders() []SipHeader {
	if o == nil || IsNil(o.SipHeaders) {
		var ret []SipHeader
		return ret
	}
	return o.SipHeaders
}

// GetSipHeadersOk returns a tuple with the SipHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSipHeadersOk() ([]SipHeader, bool) {
	if o == nil || IsNil(o.SipHeaders) {
		return nil, false
	}
	return o.SipHeaders, true
}

// HasSipHeaders returns a boolean if a field has been set.
func (o *CallRequest) HasSipHeaders() bool {
	if o != nil && !IsNil(o.SipHeaders) {
		return true
	}

	return false
}

// SetSipHeaders gets a reference to the given []SipHeader and assigns it to the SipHeaders field.
func (o *CallRequest) SetSipHeaders(v []SipHeader) {
	o.SipHeaders = v
}

// GetSipTransportProtocol returns the SipTransportProtocol field value if set, zero value otherwise.
func (o *CallRequest) GetSipTransportProtocol() string {
	if o == nil || IsNil(o.SipTransportProtocol) {
		var ret string
		return ret
	}
	return *o.SipTransportProtocol
}

// GetSipTransportProtocolOk returns a tuple with the SipTransportProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSipTransportProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.SipTransportProtocol) {
		return nil, false
	}
	return o.SipTransportProtocol, true
}

// HasSipTransportProtocol returns a boolean if a field has been set.
func (o *CallRequest) HasSipTransportProtocol() bool {
	if o != nil && !IsNil(o.SipTransportProtocol) {
		return true
	}

	return false
}

// SetSipTransportProtocol gets a reference to the given string and assigns it to the SipTransportProtocol field.
func (o *CallRequest) SetSipTransportProtocol(v string) {
	o.SipTransportProtocol = &v
}

// GetSoundModifications returns the SoundModifications field value if set, zero value otherwise.
func (o *CallRequest) GetSoundModifications() SoundModifications {
	if o == nil || IsNil(o.SoundModifications) {
		var ret SoundModifications
		return ret
	}
	return *o.SoundModifications
}

// GetSoundModificationsOk returns a tuple with the SoundModifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSoundModificationsOk() (*SoundModifications, bool) {
	if o == nil || IsNil(o.SoundModifications) {
		return nil, false
	}
	return o.SoundModifications, true
}

// HasSoundModifications returns a boolean if a field has been set.
func (o *CallRequest) HasSoundModifications() bool {
	if o != nil && !IsNil(o.SoundModifications) {
		return true
	}

	return false
}

// SetSoundModifications gets a reference to the given SoundModifications and assigns it to the SoundModifications field.
func (o *CallRequest) SetSoundModifications(v SoundModifications) {
	o.SoundModifications = &v
}

// GetStreamUrl returns the StreamUrl field value if set, zero value otherwise.
func (o *CallRequest) GetStreamUrl() string {
	if o == nil || IsNil(o.StreamUrl) {
		var ret string
		return ret
	}
	return *o.StreamUrl
}

// GetStreamUrlOk returns a tuple with the StreamUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StreamUrl) {
		return nil, false
	}
	return o.StreamUrl, true
}

// HasStreamUrl returns a boolean if a field has been set.
func (o *CallRequest) HasStreamUrl() bool {
	if o != nil && !IsNil(o.StreamUrl) {
		return true
	}

	return false
}

// SetStreamUrl gets a reference to the given string and assigns it to the StreamUrl field.
func (o *CallRequest) SetStreamUrl(v string) {
	o.StreamUrl = &v
}

// GetStreamTrack returns the StreamTrack field value if set, zero value otherwise.
func (o *CallRequest) GetStreamTrack() string {
	if o == nil || IsNil(o.StreamTrack) {
		var ret string
		return ret
	}
	return *o.StreamTrack
}

// GetStreamTrackOk returns a tuple with the StreamTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamTrackOk() (*string, bool) {
	if o == nil || IsNil(o.StreamTrack) {
		return nil, false
	}
	return o.StreamTrack, true
}

// HasStreamTrack returns a boolean if a field has been set.
func (o *CallRequest) HasStreamTrack() bool {
	if o != nil && !IsNil(o.StreamTrack) {
		return true
	}

	return false
}

// SetStreamTrack gets a reference to the given string and assigns it to the StreamTrack field.
func (o *CallRequest) SetStreamTrack(v string) {
	o.StreamTrack = &v
}

// GetStreamBidirectionalMode returns the StreamBidirectionalMode field value if set, zero value otherwise.
func (o *CallRequest) GetStreamBidirectionalMode() StreamBidirectionalMode {
	if o == nil || IsNil(o.StreamBidirectionalMode) {
		var ret StreamBidirectionalMode
		return ret
	}
	return *o.StreamBidirectionalMode
}

// GetStreamBidirectionalModeOk returns a tuple with the StreamBidirectionalMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamBidirectionalModeOk() (*StreamBidirectionalMode, bool) {
	if o == nil || IsNil(o.StreamBidirectionalMode) {
		return nil, false
	}
	return o.StreamBidirectionalMode, true
}

// HasStreamBidirectionalMode returns a boolean if a field has been set.
func (o *CallRequest) HasStreamBidirectionalMode() bool {
	if o != nil && !IsNil(o.StreamBidirectionalMode) {
		return true
	}

	return false
}

// SetStreamBidirectionalMode gets a reference to the given StreamBidirectionalMode and assigns it to the StreamBidirectionalMode field.
func (o *CallRequest) SetStreamBidirectionalMode(v StreamBidirectionalMode) {
	o.StreamBidirectionalMode = &v
}

// GetStreamBidirectionalCodec returns the StreamBidirectionalCodec field value if set, zero value otherwise.
func (o *CallRequest) GetStreamBidirectionalCodec() StreamBidirectionalCodec {
	if o == nil || IsNil(o.StreamBidirectionalCodec) {
		var ret StreamBidirectionalCodec
		return ret
	}
	return *o.StreamBidirectionalCodec
}

// GetStreamBidirectionalCodecOk returns a tuple with the StreamBidirectionalCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamBidirectionalCodecOk() (*StreamBidirectionalCodec, bool) {
	if o == nil || IsNil(o.StreamBidirectionalCodec) {
		return nil, false
	}
	return o.StreamBidirectionalCodec, true
}

// HasStreamBidirectionalCodec returns a boolean if a field has been set.
func (o *CallRequest) HasStreamBidirectionalCodec() bool {
	if o != nil && !IsNil(o.StreamBidirectionalCodec) {
		return true
	}

	return false
}

// SetStreamBidirectionalCodec gets a reference to the given StreamBidirectionalCodec and assigns it to the StreamBidirectionalCodec field.
func (o *CallRequest) SetStreamBidirectionalCodec(v StreamBidirectionalCodec) {
	o.StreamBidirectionalCodec = &v
}

// GetStreamBidirectionalTargetLegs returns the StreamBidirectionalTargetLegs field value if set, zero value otherwise.
func (o *CallRequest) GetStreamBidirectionalTargetLegs() StreamBidirectionalTargetLegs {
	if o == nil || IsNil(o.StreamBidirectionalTargetLegs) {
		var ret StreamBidirectionalTargetLegs
		return ret
	}
	return *o.StreamBidirectionalTargetLegs
}

// GetStreamBidirectionalTargetLegsOk returns a tuple with the StreamBidirectionalTargetLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamBidirectionalTargetLegsOk() (*StreamBidirectionalTargetLegs, bool) {
	if o == nil || IsNil(o.StreamBidirectionalTargetLegs) {
		return nil, false
	}
	return o.StreamBidirectionalTargetLegs, true
}

// HasStreamBidirectionalTargetLegs returns a boolean if a field has been set.
func (o *CallRequest) HasStreamBidirectionalTargetLegs() bool {
	if o != nil && !IsNil(o.StreamBidirectionalTargetLegs) {
		return true
	}

	return false
}

// SetStreamBidirectionalTargetLegs gets a reference to the given StreamBidirectionalTargetLegs and assigns it to the StreamBidirectionalTargetLegs field.
func (o *CallRequest) SetStreamBidirectionalTargetLegs(v StreamBidirectionalTargetLegs) {
	o.StreamBidirectionalTargetLegs = &v
}

// GetStreamBidirectionalSamplingRate returns the StreamBidirectionalSamplingRate field value if set, zero value otherwise.
func (o *CallRequest) GetStreamBidirectionalSamplingRate() StreamBidirectionalSamplingRate {
	if o == nil || IsNil(o.StreamBidirectionalSamplingRate) {
		var ret StreamBidirectionalSamplingRate
		return ret
	}
	return *o.StreamBidirectionalSamplingRate
}

// GetStreamBidirectionalSamplingRateOk returns a tuple with the StreamBidirectionalSamplingRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamBidirectionalSamplingRateOk() (*StreamBidirectionalSamplingRate, bool) {
	if o == nil || IsNil(o.StreamBidirectionalSamplingRate) {
		return nil, false
	}
	return o.StreamBidirectionalSamplingRate, true
}

// HasStreamBidirectionalSamplingRate returns a boolean if a field has been set.
func (o *CallRequest) HasStreamBidirectionalSamplingRate() bool {
	if o != nil && !IsNil(o.StreamBidirectionalSamplingRate) {
		return true
	}

	return false
}

// SetStreamBidirectionalSamplingRate gets a reference to the given StreamBidirectionalSamplingRate and assigns it to the StreamBidirectionalSamplingRate field.
func (o *CallRequest) SetStreamBidirectionalSamplingRate(v StreamBidirectionalSamplingRate) {
	o.StreamBidirectionalSamplingRate = &v
}

// GetStreamEstablishBeforeCallOriginate returns the StreamEstablishBeforeCallOriginate field value if set, zero value otherwise.
func (o *CallRequest) GetStreamEstablishBeforeCallOriginate() bool {
	if o == nil || IsNil(o.StreamEstablishBeforeCallOriginate) {
		var ret bool
		return ret
	}
	return *o.StreamEstablishBeforeCallOriginate
}

// GetStreamEstablishBeforeCallOriginateOk returns a tuple with the StreamEstablishBeforeCallOriginate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetStreamEstablishBeforeCallOriginateOk() (*bool, bool) {
	if o == nil || IsNil(o.StreamEstablishBeforeCallOriginate) {
		return nil, false
	}
	return o.StreamEstablishBeforeCallOriginate, true
}

// HasStreamEstablishBeforeCallOriginate returns a boolean if a field has been set.
func (o *CallRequest) HasStreamEstablishBeforeCallOriginate() bool {
	if o != nil && !IsNil(o.StreamEstablishBeforeCallOriginate) {
		return true
	}

	return false
}

// SetStreamEstablishBeforeCallOriginate gets a reference to the given bool and assigns it to the StreamEstablishBeforeCallOriginate field.
func (o *CallRequest) SetStreamEstablishBeforeCallOriginate(v bool) {
	o.StreamEstablishBeforeCallOriginate = &v
}

// GetSendSilenceWhenIdle returns the SendSilenceWhenIdle field value if set, zero value otherwise.
func (o *CallRequest) GetSendSilenceWhenIdle() bool {
	if o == nil || IsNil(o.SendSilenceWhenIdle) {
		var ret bool
		return ret
	}
	return *o.SendSilenceWhenIdle
}

// GetSendSilenceWhenIdleOk returns a tuple with the SendSilenceWhenIdle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSendSilenceWhenIdleOk() (*bool, bool) {
	if o == nil || IsNil(o.SendSilenceWhenIdle) {
		return nil, false
	}
	return o.SendSilenceWhenIdle, true
}

// HasSendSilenceWhenIdle returns a boolean if a field has been set.
func (o *CallRequest) HasSendSilenceWhenIdle() bool {
	if o != nil && !IsNil(o.SendSilenceWhenIdle) {
		return true
	}

	return false
}

// SetSendSilenceWhenIdle gets a reference to the given bool and assigns it to the SendSilenceWhenIdle field.
func (o *CallRequest) SetSendSilenceWhenIdle(v bool) {
	o.SendSilenceWhenIdle = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *CallRequest) GetWebhookUrl() string {
	if o == nil || IsNil(o.WebhookUrl) {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrl) {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *CallRequest) HasWebhookUrl() bool {
	if o != nil && !IsNil(o.WebhookUrl) {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *CallRequest) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetWebhookUrlMethod returns the WebhookUrlMethod field value if set, zero value otherwise.
func (o *CallRequest) GetWebhookUrlMethod() string {
	if o == nil || IsNil(o.WebhookUrlMethod) {
		var ret string
		return ret
	}
	return *o.WebhookUrlMethod
}

// GetWebhookUrlMethodOk returns a tuple with the WebhookUrlMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetWebhookUrlMethodOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrlMethod) {
		return nil, false
	}
	return o.WebhookUrlMethod, true
}

// HasWebhookUrlMethod returns a boolean if a field has been set.
func (o *CallRequest) HasWebhookUrlMethod() bool {
	if o != nil && !IsNil(o.WebhookUrlMethod) {
		return true
	}

	return false
}

// SetWebhookUrlMethod gets a reference to the given string and assigns it to the WebhookUrlMethod field.
func (o *CallRequest) SetWebhookUrlMethod(v string) {
	o.WebhookUrlMethod = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *CallRequest) GetRecord() string {
	if o == nil || IsNil(o.Record) {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordOk() (*string, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *CallRequest) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *CallRequest) SetRecord(v string) {
	o.Record = &v
}

// GetRecordChannels returns the RecordChannels field value if set, zero value otherwise.
func (o *CallRequest) GetRecordChannels() string {
	if o == nil || IsNil(o.RecordChannels) {
		var ret string
		return ret
	}
	return *o.RecordChannels
}

// GetRecordChannelsOk returns a tuple with the RecordChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.RecordChannels) {
		return nil, false
	}
	return o.RecordChannels, true
}

// HasRecordChannels returns a boolean if a field has been set.
func (o *CallRequest) HasRecordChannels() bool {
	if o != nil && !IsNil(o.RecordChannels) {
		return true
	}

	return false
}

// SetRecordChannels gets a reference to the given string and assigns it to the RecordChannels field.
func (o *CallRequest) SetRecordChannels(v string) {
	o.RecordChannels = &v
}

// GetRecordFormat returns the RecordFormat field value if set, zero value otherwise.
func (o *CallRequest) GetRecordFormat() string {
	if o == nil || IsNil(o.RecordFormat) {
		var ret string
		return ret
	}
	return *o.RecordFormat
}

// GetRecordFormatOk returns a tuple with the RecordFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordFormatOk() (*string, bool) {
	if o == nil || IsNil(o.RecordFormat) {
		return nil, false
	}
	return o.RecordFormat, true
}

// HasRecordFormat returns a boolean if a field has been set.
func (o *CallRequest) HasRecordFormat() bool {
	if o != nil && !IsNil(o.RecordFormat) {
		return true
	}

	return false
}

// SetRecordFormat gets a reference to the given string and assigns it to the RecordFormat field.
func (o *CallRequest) SetRecordFormat(v string) {
	o.RecordFormat = &v
}

// GetRecordMaxLength returns the RecordMaxLength field value if set, zero value otherwise.
func (o *CallRequest) GetRecordMaxLength() int32 {
	if o == nil || IsNil(o.RecordMaxLength) {
		var ret int32
		return ret
	}
	return *o.RecordMaxLength
}

// GetRecordMaxLengthOk returns a tuple with the RecordMaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordMaxLength) {
		return nil, false
	}
	return o.RecordMaxLength, true
}

// HasRecordMaxLength returns a boolean if a field has been set.
func (o *CallRequest) HasRecordMaxLength() bool {
	if o != nil && !IsNil(o.RecordMaxLength) {
		return true
	}

	return false
}

// SetRecordMaxLength gets a reference to the given int32 and assigns it to the RecordMaxLength field.
func (o *CallRequest) SetRecordMaxLength(v int32) {
	o.RecordMaxLength = &v
}

// GetRecordTimeoutSecs returns the RecordTimeoutSecs field value if set, zero value otherwise.
func (o *CallRequest) GetRecordTimeoutSecs() int32 {
	if o == nil || IsNil(o.RecordTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.RecordTimeoutSecs
}

// GetRecordTimeoutSecsOk returns a tuple with the RecordTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordTimeoutSecs) {
		return nil, false
	}
	return o.RecordTimeoutSecs, true
}

// HasRecordTimeoutSecs returns a boolean if a field has been set.
func (o *CallRequest) HasRecordTimeoutSecs() bool {
	if o != nil && !IsNil(o.RecordTimeoutSecs) {
		return true
	}

	return false
}

// SetRecordTimeoutSecs gets a reference to the given int32 and assigns it to the RecordTimeoutSecs field.
func (o *CallRequest) SetRecordTimeoutSecs(v int32) {
	o.RecordTimeoutSecs = &v
}

// GetRecordTrack returns the RecordTrack field value if set, zero value otherwise.
func (o *CallRequest) GetRecordTrack() string {
	if o == nil || IsNil(o.RecordTrack) {
		var ret string
		return ret
	}
	return *o.RecordTrack
}

// GetRecordTrackOk returns a tuple with the RecordTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordTrackOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTrack) {
		return nil, false
	}
	return o.RecordTrack, true
}

// HasRecordTrack returns a boolean if a field has been set.
func (o *CallRequest) HasRecordTrack() bool {
	if o != nil && !IsNil(o.RecordTrack) {
		return true
	}

	return false
}

// SetRecordTrack gets a reference to the given string and assigns it to the RecordTrack field.
func (o *CallRequest) SetRecordTrack(v string) {
	o.RecordTrack = &v
}

// GetRecordTrim returns the RecordTrim field value if set, zero value otherwise.
func (o *CallRequest) GetRecordTrim() string {
	if o == nil || IsNil(o.RecordTrim) {
		var ret string
		return ret
	}
	return *o.RecordTrim
}

// GetRecordTrimOk returns a tuple with the RecordTrim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordTrimOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTrim) {
		return nil, false
	}
	return o.RecordTrim, true
}

// HasRecordTrim returns a boolean if a field has been set.
func (o *CallRequest) HasRecordTrim() bool {
	if o != nil && !IsNil(o.RecordTrim) {
		return true
	}

	return false
}

// SetRecordTrim gets a reference to the given string and assigns it to the RecordTrim field.
func (o *CallRequest) SetRecordTrim(v string) {
	o.RecordTrim = &v
}

// GetRecordCustomFileName returns the RecordCustomFileName field value if set, zero value otherwise.
func (o *CallRequest) GetRecordCustomFileName() string {
	if o == nil || IsNil(o.RecordCustomFileName) {
		var ret string
		return ret
	}
	return *o.RecordCustomFileName
}

// GetRecordCustomFileNameOk returns a tuple with the RecordCustomFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetRecordCustomFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.RecordCustomFileName) {
		return nil, false
	}
	return o.RecordCustomFileName, true
}

// HasRecordCustomFileName returns a boolean if a field has been set.
func (o *CallRequest) HasRecordCustomFileName() bool {
	if o != nil && !IsNil(o.RecordCustomFileName) {
		return true
	}

	return false
}

// SetRecordCustomFileName gets a reference to the given string and assigns it to the RecordCustomFileName field.
func (o *CallRequest) SetRecordCustomFileName(v string) {
	o.RecordCustomFileName = &v
}

// GetSuperviseCallControlId returns the SuperviseCallControlId field value if set, zero value otherwise.
func (o *CallRequest) GetSuperviseCallControlId() string {
	if o == nil || IsNil(o.SuperviseCallControlId) {
		var ret string
		return ret
	}
	return *o.SuperviseCallControlId
}

// GetSuperviseCallControlIdOk returns a tuple with the SuperviseCallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSuperviseCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.SuperviseCallControlId) {
		return nil, false
	}
	return o.SuperviseCallControlId, true
}

// HasSuperviseCallControlId returns a boolean if a field has been set.
func (o *CallRequest) HasSuperviseCallControlId() bool {
	if o != nil && !IsNil(o.SuperviseCallControlId) {
		return true
	}

	return false
}

// SetSuperviseCallControlId gets a reference to the given string and assigns it to the SuperviseCallControlId field.
func (o *CallRequest) SetSuperviseCallControlId(v string) {
	o.SuperviseCallControlId = &v
}

// GetSupervisorRole returns the SupervisorRole field value if set, zero value otherwise.
func (o *CallRequest) GetSupervisorRole() string {
	if o == nil || IsNil(o.SupervisorRole) {
		var ret string
		return ret
	}
	return *o.SupervisorRole
}

// GetSupervisorRoleOk returns a tuple with the SupervisorRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetSupervisorRoleOk() (*string, bool) {
	if o == nil || IsNil(o.SupervisorRole) {
		return nil, false
	}
	return o.SupervisorRole, true
}

// HasSupervisorRole returns a boolean if a field has been set.
func (o *CallRequest) HasSupervisorRole() bool {
	if o != nil && !IsNil(o.SupervisorRole) {
		return true
	}

	return false
}

// SetSupervisorRole gets a reference to the given string and assigns it to the SupervisorRole field.
func (o *CallRequest) SetSupervisorRole(v string) {
	o.SupervisorRole = &v
}

// GetEnableDialogflow returns the EnableDialogflow field value if set, zero value otherwise.
func (o *CallRequest) GetEnableDialogflow() bool {
	if o == nil || IsNil(o.EnableDialogflow) {
		var ret bool
		return ret
	}
	return *o.EnableDialogflow
}

// GetEnableDialogflowOk returns a tuple with the EnableDialogflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetEnableDialogflowOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDialogflow) {
		return nil, false
	}
	return o.EnableDialogflow, true
}

// HasEnableDialogflow returns a boolean if a field has been set.
func (o *CallRequest) HasEnableDialogflow() bool {
	if o != nil && !IsNil(o.EnableDialogflow) {
		return true
	}

	return false
}

// SetEnableDialogflow gets a reference to the given bool and assigns it to the EnableDialogflow field.
func (o *CallRequest) SetEnableDialogflow(v bool) {
	o.EnableDialogflow = &v
}

// GetDialogflowConfig returns the DialogflowConfig field value if set, zero value otherwise.
func (o *CallRequest) GetDialogflowConfig() DialogflowConfig {
	if o == nil || IsNil(o.DialogflowConfig) {
		var ret DialogflowConfig
		return ret
	}
	return *o.DialogflowConfig
}

// GetDialogflowConfigOk returns a tuple with the DialogflowConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetDialogflowConfigOk() (*DialogflowConfig, bool) {
	if o == nil || IsNil(o.DialogflowConfig) {
		return nil, false
	}
	return o.DialogflowConfig, true
}

// HasDialogflowConfig returns a boolean if a field has been set.
func (o *CallRequest) HasDialogflowConfig() bool {
	if o != nil && !IsNil(o.DialogflowConfig) {
		return true
	}

	return false
}

// SetDialogflowConfig gets a reference to the given DialogflowConfig and assigns it to the DialogflowConfig field.
func (o *CallRequest) SetDialogflowConfig(v DialogflowConfig) {
	o.DialogflowConfig = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *CallRequest) GetTranscription() bool {
	if o == nil || IsNil(o.Transcription) {
		var ret bool
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetTranscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *CallRequest) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given bool and assigns it to the Transcription field.
func (o *CallRequest) SetTranscription(v bool) {
	o.Transcription = &v
}

// GetTranscriptionConfig returns the TranscriptionConfig field value if set, zero value otherwise.
func (o *CallRequest) GetTranscriptionConfig() TranscriptionStartRequest {
	if o == nil || IsNil(o.TranscriptionConfig) {
		var ret TranscriptionStartRequest
		return ret
	}
	return *o.TranscriptionConfig
}

// GetTranscriptionConfigOk returns a tuple with the TranscriptionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRequest) GetTranscriptionConfigOk() (*TranscriptionStartRequest, bool) {
	if o == nil || IsNil(o.TranscriptionConfig) {
		return nil, false
	}
	return o.TranscriptionConfig, true
}

// HasTranscriptionConfig returns a boolean if a field has been set.
func (o *CallRequest) HasTranscriptionConfig() bool {
	if o != nil && !IsNil(o.TranscriptionConfig) {
		return true
	}

	return false
}

// SetTranscriptionConfig gets a reference to the given TranscriptionStartRequest and assigns it to the TranscriptionConfig field.
func (o *CallRequest) SetTranscriptionConfig(v TranscriptionStartRequest) {
	o.TranscriptionConfig = &v
}

func (o CallRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	toSerialize["from"] = o.From
	if !IsNil(o.FromDisplayName) {
		toSerialize["from_display_name"] = o.FromDisplayName
	}
	toSerialize["connection_id"] = o.ConnectionId
	if !IsNil(o.AudioUrl) {
		toSerialize["audio_url"] = o.AudioUrl
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	if !IsNil(o.PreferredCodecs) {
		toSerialize["preferred_codecs"] = o.PreferredCodecs
	}
	if !IsNil(o.TimeoutSecs) {
		toSerialize["timeout_secs"] = o.TimeoutSecs
	}
	if !IsNil(o.TimeLimitSecs) {
		toSerialize["time_limit_secs"] = o.TimeLimitSecs
	}
	if !IsNil(o.AnsweringMachineDetection) {
		toSerialize["answering_machine_detection"] = o.AnsweringMachineDetection
	}
	if !IsNil(o.AnsweringMachineDetectionConfig) {
		toSerialize["answering_machine_detection_config"] = o.AnsweringMachineDetectionConfig
	}
	if !IsNil(o.ConferenceConfig) {
		toSerialize["conference_config"] = o.ConferenceConfig
	}
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if !IsNil(o.BillingGroupId) {
		toSerialize["billing_group_id"] = o.BillingGroupId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.LinkTo) {
		toSerialize["link_to"] = o.LinkTo
	}
	if !IsNil(o.MediaEncryption) {
		toSerialize["media_encryption"] = o.MediaEncryption
	}
	if !IsNil(o.SipAuthUsername) {
		toSerialize["sip_auth_username"] = o.SipAuthUsername
	}
	if !IsNil(o.SipAuthPassword) {
		toSerialize["sip_auth_password"] = o.SipAuthPassword
	}
	if !IsNil(o.SipHeaders) {
		toSerialize["sip_headers"] = o.SipHeaders
	}
	if !IsNil(o.SipTransportProtocol) {
		toSerialize["sip_transport_protocol"] = o.SipTransportProtocol
	}
	if !IsNil(o.SoundModifications) {
		toSerialize["sound_modifications"] = o.SoundModifications
	}
	if !IsNil(o.StreamUrl) {
		toSerialize["stream_url"] = o.StreamUrl
	}
	if !IsNil(o.StreamTrack) {
		toSerialize["stream_track"] = o.StreamTrack
	}
	if !IsNil(o.StreamBidirectionalMode) {
		toSerialize["stream_bidirectional_mode"] = o.StreamBidirectionalMode
	}
	if !IsNil(o.StreamBidirectionalCodec) {
		toSerialize["stream_bidirectional_codec"] = o.StreamBidirectionalCodec
	}
	if !IsNil(o.StreamBidirectionalTargetLegs) {
		toSerialize["stream_bidirectional_target_legs"] = o.StreamBidirectionalTargetLegs
	}
	if !IsNil(o.StreamBidirectionalSamplingRate) {
		toSerialize["stream_bidirectional_sampling_rate"] = o.StreamBidirectionalSamplingRate
	}
	if !IsNil(o.StreamEstablishBeforeCallOriginate) {
		toSerialize["stream_establish_before_call_originate"] = o.StreamEstablishBeforeCallOriginate
	}
	if !IsNil(o.SendSilenceWhenIdle) {
		toSerialize["send_silence_when_idle"] = o.SendSilenceWhenIdle
	}
	if !IsNil(o.WebhookUrl) {
		toSerialize["webhook_url"] = o.WebhookUrl
	}
	if !IsNil(o.WebhookUrlMethod) {
		toSerialize["webhook_url_method"] = o.WebhookUrlMethod
	}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.RecordChannels) {
		toSerialize["record_channels"] = o.RecordChannels
	}
	if !IsNil(o.RecordFormat) {
		toSerialize["record_format"] = o.RecordFormat
	}
	if !IsNil(o.RecordMaxLength) {
		toSerialize["record_max_length"] = o.RecordMaxLength
	}
	if !IsNil(o.RecordTimeoutSecs) {
		toSerialize["record_timeout_secs"] = o.RecordTimeoutSecs
	}
	if !IsNil(o.RecordTrack) {
		toSerialize["record_track"] = o.RecordTrack
	}
	if !IsNil(o.RecordTrim) {
		toSerialize["record_trim"] = o.RecordTrim
	}
	if !IsNil(o.RecordCustomFileName) {
		toSerialize["record_custom_file_name"] = o.RecordCustomFileName
	}
	if !IsNil(o.SuperviseCallControlId) {
		toSerialize["supervise_call_control_id"] = o.SuperviseCallControlId
	}
	if !IsNil(o.SupervisorRole) {
		toSerialize["supervisor_role"] = o.SupervisorRole
	}
	if !IsNil(o.EnableDialogflow) {
		toSerialize["enable_dialogflow"] = o.EnableDialogflow
	}
	if !IsNil(o.DialogflowConfig) {
		toSerialize["dialogflow_config"] = o.DialogflowConfig
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.TranscriptionConfig) {
		toSerialize["transcription_config"] = o.TranscriptionConfig
	}
	return toSerialize, nil
}

func (o *CallRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to",
		"from",
		"connection_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallRequest := _CallRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCallRequest)

	if err != nil {
		return err
	}

	*o = CallRequest(varCallRequest)

	return err
}

type NullableCallRequest struct {
	value *CallRequest
	isSet bool
}

func (v NullableCallRequest) Get() *CallRequest {
	return v.value
}

func (v *NullableCallRequest) Set(val *CallRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRequest(val *CallRequest) *NullableCallRequest {
	return &NullableCallRequest{value: val, isSet: true}
}

func (v NullableCallRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


