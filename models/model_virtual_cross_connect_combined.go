/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VirtualCrossConnectCombined type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualCrossConnectCombined{}

// VirtualCrossConnectCombined struct for VirtualCrossConnectCombined
type VirtualCrossConnectCombined struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The id of the network associated with the interface.
	NetworkId string `json:"network_id"`
	// A user specified name for the interface.
	Name *string `json:"name,omitempty"`
	Status *InterfaceStatus `json:"status,omitempty"`
	// The Virtual Private Cloud with which you would like to establish a cross connect.
	CloudProvider string `json:"cloud_provider"`
	// The region where your Virtual Private Cloud hosts are located.<br /><br />The available regions can be found using the /virtual_cross_connect_regions endpoint.
	CloudProviderRegion string `json:"cloud_provider_region"`
	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN). If null, value will be assigned by Telnyx.
	BgpAsn float32 `json:"bgp_asn"`
	// The desired throughput in Megabits per Second (Mbps) for your Virtual Cross Connect.<br /><br />The available bandwidths can be found using the /virtual_cross_connect_regions endpoint.
	BandwidthMbps *float32 `json:"bandwidth_mbps,omitempty"`
	// Indicates whether the primary circuit is enabled. Setting this to `false` will disable the circuit.
	PrimaryEnabled *bool `json:"primary_enabled,omitempty"`
	// The identifier for your Virtual Private Cloud. The number will be different based upon your Cloud provider.
	PrimaryCloudAccountId string `json:"primary_cloud_account_id"`
	// The IP address assigned to the Telnyx side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value should be null for GCE as Google will only inform you of your assigned IP once the connection has been accepted.
	PrimaryTelnyxIp *string `json:"primary_telnyx_ip,omitempty"`
	// The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value can not be patched once the VXC has bene provisioned.
	PrimaryCloudIp *string `json:"primary_cloud_ip,omitempty"`
	// The authentication key for BGP peer configuration.
	PrimaryBgpKey *string `json:"primary_bgp_key,omitempty"`
	// Indicates whether the secondary circuit is enabled. Setting this to `false` will disable the circuit.
	SecondaryEnabled *bool `json:"secondary_enabled,omitempty"`
	// The identifier for your Virtual Private Cloud. The number will be different based upon your Cloud provider.<br /><br />This attribute is only necessary for GCE.
	SecondaryCloudAccountId *string `json:"secondary_cloud_account_id,omitempty"`
	// The IP address assigned to the Telnyx side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value should be null for GCE as Google will only inform you of your assigned IP once the connection has been accepted.
	SecondaryTelnyxIp *string `json:"secondary_telnyx_ip,omitempty"`
	// The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value can not be patched once the VXC has bene provisioned.
	SecondaryCloudIp *string `json:"secondary_cloud_ip,omitempty"`
	// The authentication key for BGP peer configuration.
	SecondaryBgpKey *string `json:"secondary_bgp_key,omitempty"`
	// The region interface is deployed to.
	RegionCode string `json:"region_code"`
	// Whether the primary BGP route is being announced.
	PrimaryRoutingAnnouncement *bool `json:"primary_routing_announcement,omitempty"`
	// Whether the secondary BGP route is being announced.
	SecondaryRoutingAnnouncement *bool `json:"secondary_routing_announcement,omitempty"`
	Region *RegionOutRegion `json:"region,omitempty"`
}

type _VirtualCrossConnectCombined VirtualCrossConnectCombined

// NewVirtualCrossConnectCombined instantiates a new VirtualCrossConnectCombined object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCrossConnectCombined(networkId string, cloudProvider string, cloudProviderRegion string, bgpAsn float32, primaryCloudAccountId string, regionCode string) *VirtualCrossConnectCombined {
	this := VirtualCrossConnectCombined{}
	this.NetworkId = networkId
	this.CloudProvider = cloudProvider
	this.CloudProviderRegion = cloudProviderRegion
	this.BgpAsn = bgpAsn
	this.PrimaryCloudAccountId = primaryCloudAccountId
	this.RegionCode = regionCode
	return &this
}

// NewVirtualCrossConnectCombinedWithDefaults instantiates a new VirtualCrossConnectCombined object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCrossConnectCombinedWithDefaults() *VirtualCrossConnectCombined {
	this := VirtualCrossConnectCombined{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualCrossConnectCombined) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *VirtualCrossConnectCombined) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *VirtualCrossConnectCombined) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *VirtualCrossConnectCombined) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetNetworkId returns the NetworkId field value
func (o *VirtualCrossConnectCombined) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *VirtualCrossConnectCombined) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualCrossConnectCombined) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetStatus() InterfaceStatus {
	if o == nil || IsNil(o.Status) {
		var ret InterfaceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetStatusOk() (*InterfaceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InterfaceStatus and assigns it to the Status field.
func (o *VirtualCrossConnectCombined) SetStatus(v InterfaceStatus) {
	o.Status = &v
}

// GetCloudProvider returns the CloudProvider field value
func (o *VirtualCrossConnectCombined) GetCloudProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetCloudProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *VirtualCrossConnectCombined) SetCloudProvider(v string) {
	o.CloudProvider = v
}

// GetCloudProviderRegion returns the CloudProviderRegion field value
func (o *VirtualCrossConnectCombined) GetCloudProviderRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderRegion
}

// GetCloudProviderRegionOk returns a tuple with the CloudProviderRegion field value
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetCloudProviderRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderRegion, true
}

// SetCloudProviderRegion sets field value
func (o *VirtualCrossConnectCombined) SetCloudProviderRegion(v string) {
	o.CloudProviderRegion = v
}

// GetBgpAsn returns the BgpAsn field value
func (o *VirtualCrossConnectCombined) GetBgpAsn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BgpAsn
}

// GetBgpAsnOk returns a tuple with the BgpAsn field value
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetBgpAsnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BgpAsn, true
}

// SetBgpAsn sets field value
func (o *VirtualCrossConnectCombined) SetBgpAsn(v float32) {
	o.BgpAsn = v
}

// GetBandwidthMbps returns the BandwidthMbps field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetBandwidthMbps() float32 {
	if o == nil || IsNil(o.BandwidthMbps) {
		var ret float32
		return ret
	}
	return *o.BandwidthMbps
}

// GetBandwidthMbpsOk returns a tuple with the BandwidthMbps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetBandwidthMbpsOk() (*float32, bool) {
	if o == nil || IsNil(o.BandwidthMbps) {
		return nil, false
	}
	return o.BandwidthMbps, true
}

// HasBandwidthMbps returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasBandwidthMbps() bool {
	if o != nil && !IsNil(o.BandwidthMbps) {
		return true
	}

	return false
}

// SetBandwidthMbps gets a reference to the given float32 and assigns it to the BandwidthMbps field.
func (o *VirtualCrossConnectCombined) SetBandwidthMbps(v float32) {
	o.BandwidthMbps = &v
}

// GetPrimaryEnabled returns the PrimaryEnabled field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetPrimaryEnabled() bool {
	if o == nil || IsNil(o.PrimaryEnabled) {
		var ret bool
		return ret
	}
	return *o.PrimaryEnabled
}

// GetPrimaryEnabledOk returns a tuple with the PrimaryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetPrimaryEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryEnabled) {
		return nil, false
	}
	return o.PrimaryEnabled, true
}

// HasPrimaryEnabled returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasPrimaryEnabled() bool {
	if o != nil && !IsNil(o.PrimaryEnabled) {
		return true
	}

	return false
}

// SetPrimaryEnabled gets a reference to the given bool and assigns it to the PrimaryEnabled field.
func (o *VirtualCrossConnectCombined) SetPrimaryEnabled(v bool) {
	o.PrimaryEnabled = &v
}

// GetPrimaryCloudAccountId returns the PrimaryCloudAccountId field value
func (o *VirtualCrossConnectCombined) GetPrimaryCloudAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryCloudAccountId
}

// GetPrimaryCloudAccountIdOk returns a tuple with the PrimaryCloudAccountId field value
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetPrimaryCloudAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryCloudAccountId, true
}

// SetPrimaryCloudAccountId sets field value
func (o *VirtualCrossConnectCombined) SetPrimaryCloudAccountId(v string) {
	o.PrimaryCloudAccountId = v
}

// GetPrimaryTelnyxIp returns the PrimaryTelnyxIp field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetPrimaryTelnyxIp() string {
	if o == nil || IsNil(o.PrimaryTelnyxIp) {
		var ret string
		return ret
	}
	return *o.PrimaryTelnyxIp
}

// GetPrimaryTelnyxIpOk returns a tuple with the PrimaryTelnyxIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetPrimaryTelnyxIpOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryTelnyxIp) {
		return nil, false
	}
	return o.PrimaryTelnyxIp, true
}

// HasPrimaryTelnyxIp returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasPrimaryTelnyxIp() bool {
	if o != nil && !IsNil(o.PrimaryTelnyxIp) {
		return true
	}

	return false
}

// SetPrimaryTelnyxIp gets a reference to the given string and assigns it to the PrimaryTelnyxIp field.
func (o *VirtualCrossConnectCombined) SetPrimaryTelnyxIp(v string) {
	o.PrimaryTelnyxIp = &v
}

// GetPrimaryCloudIp returns the PrimaryCloudIp field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetPrimaryCloudIp() string {
	if o == nil || IsNil(o.PrimaryCloudIp) {
		var ret string
		return ret
	}
	return *o.PrimaryCloudIp
}

// GetPrimaryCloudIpOk returns a tuple with the PrimaryCloudIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetPrimaryCloudIpOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryCloudIp) {
		return nil, false
	}
	return o.PrimaryCloudIp, true
}

// HasPrimaryCloudIp returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasPrimaryCloudIp() bool {
	if o != nil && !IsNil(o.PrimaryCloudIp) {
		return true
	}

	return false
}

// SetPrimaryCloudIp gets a reference to the given string and assigns it to the PrimaryCloudIp field.
func (o *VirtualCrossConnectCombined) SetPrimaryCloudIp(v string) {
	o.PrimaryCloudIp = &v
}

// GetPrimaryBgpKey returns the PrimaryBgpKey field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetPrimaryBgpKey() string {
	if o == nil || IsNil(o.PrimaryBgpKey) {
		var ret string
		return ret
	}
	return *o.PrimaryBgpKey
}

// GetPrimaryBgpKeyOk returns a tuple with the PrimaryBgpKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetPrimaryBgpKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryBgpKey) {
		return nil, false
	}
	return o.PrimaryBgpKey, true
}

// HasPrimaryBgpKey returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasPrimaryBgpKey() bool {
	if o != nil && !IsNil(o.PrimaryBgpKey) {
		return true
	}

	return false
}

// SetPrimaryBgpKey gets a reference to the given string and assigns it to the PrimaryBgpKey field.
func (o *VirtualCrossConnectCombined) SetPrimaryBgpKey(v string) {
	o.PrimaryBgpKey = &v
}

// GetSecondaryEnabled returns the SecondaryEnabled field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetSecondaryEnabled() bool {
	if o == nil || IsNil(o.SecondaryEnabled) {
		var ret bool
		return ret
	}
	return *o.SecondaryEnabled
}

// GetSecondaryEnabledOk returns a tuple with the SecondaryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetSecondaryEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SecondaryEnabled) {
		return nil, false
	}
	return o.SecondaryEnabled, true
}

// HasSecondaryEnabled returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasSecondaryEnabled() bool {
	if o != nil && !IsNil(o.SecondaryEnabled) {
		return true
	}

	return false
}

// SetSecondaryEnabled gets a reference to the given bool and assigns it to the SecondaryEnabled field.
func (o *VirtualCrossConnectCombined) SetSecondaryEnabled(v bool) {
	o.SecondaryEnabled = &v
}

// GetSecondaryCloudAccountId returns the SecondaryCloudAccountId field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetSecondaryCloudAccountId() string {
	if o == nil || IsNil(o.SecondaryCloudAccountId) {
		var ret string
		return ret
	}
	return *o.SecondaryCloudAccountId
}

// GetSecondaryCloudAccountIdOk returns a tuple with the SecondaryCloudAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetSecondaryCloudAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryCloudAccountId) {
		return nil, false
	}
	return o.SecondaryCloudAccountId, true
}

// HasSecondaryCloudAccountId returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasSecondaryCloudAccountId() bool {
	if o != nil && !IsNil(o.SecondaryCloudAccountId) {
		return true
	}

	return false
}

// SetSecondaryCloudAccountId gets a reference to the given string and assigns it to the SecondaryCloudAccountId field.
func (o *VirtualCrossConnectCombined) SetSecondaryCloudAccountId(v string) {
	o.SecondaryCloudAccountId = &v
}

// GetSecondaryTelnyxIp returns the SecondaryTelnyxIp field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetSecondaryTelnyxIp() string {
	if o == nil || IsNil(o.SecondaryTelnyxIp) {
		var ret string
		return ret
	}
	return *o.SecondaryTelnyxIp
}

// GetSecondaryTelnyxIpOk returns a tuple with the SecondaryTelnyxIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetSecondaryTelnyxIpOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryTelnyxIp) {
		return nil, false
	}
	return o.SecondaryTelnyxIp, true
}

// HasSecondaryTelnyxIp returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasSecondaryTelnyxIp() bool {
	if o != nil && !IsNil(o.SecondaryTelnyxIp) {
		return true
	}

	return false
}

// SetSecondaryTelnyxIp gets a reference to the given string and assigns it to the SecondaryTelnyxIp field.
func (o *VirtualCrossConnectCombined) SetSecondaryTelnyxIp(v string) {
	o.SecondaryTelnyxIp = &v
}

// GetSecondaryCloudIp returns the SecondaryCloudIp field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetSecondaryCloudIp() string {
	if o == nil || IsNil(o.SecondaryCloudIp) {
		var ret string
		return ret
	}
	return *o.SecondaryCloudIp
}

// GetSecondaryCloudIpOk returns a tuple with the SecondaryCloudIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetSecondaryCloudIpOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryCloudIp) {
		return nil, false
	}
	return o.SecondaryCloudIp, true
}

// HasSecondaryCloudIp returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasSecondaryCloudIp() bool {
	if o != nil && !IsNil(o.SecondaryCloudIp) {
		return true
	}

	return false
}

// SetSecondaryCloudIp gets a reference to the given string and assigns it to the SecondaryCloudIp field.
func (o *VirtualCrossConnectCombined) SetSecondaryCloudIp(v string) {
	o.SecondaryCloudIp = &v
}

// GetSecondaryBgpKey returns the SecondaryBgpKey field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetSecondaryBgpKey() string {
	if o == nil || IsNil(o.SecondaryBgpKey) {
		var ret string
		return ret
	}
	return *o.SecondaryBgpKey
}

// GetSecondaryBgpKeyOk returns a tuple with the SecondaryBgpKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetSecondaryBgpKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryBgpKey) {
		return nil, false
	}
	return o.SecondaryBgpKey, true
}

// HasSecondaryBgpKey returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasSecondaryBgpKey() bool {
	if o != nil && !IsNil(o.SecondaryBgpKey) {
		return true
	}

	return false
}

// SetSecondaryBgpKey gets a reference to the given string and assigns it to the SecondaryBgpKey field.
func (o *VirtualCrossConnectCombined) SetSecondaryBgpKey(v string) {
	o.SecondaryBgpKey = &v
}

// GetRegionCode returns the RegionCode field value
func (o *VirtualCrossConnectCombined) GetRegionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetRegionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionCode, true
}

// SetRegionCode sets field value
func (o *VirtualCrossConnectCombined) SetRegionCode(v string) {
	o.RegionCode = v
}

// GetPrimaryRoutingAnnouncement returns the PrimaryRoutingAnnouncement field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetPrimaryRoutingAnnouncement() bool {
	if o == nil || IsNil(o.PrimaryRoutingAnnouncement) {
		var ret bool
		return ret
	}
	return *o.PrimaryRoutingAnnouncement
}

// GetPrimaryRoutingAnnouncementOk returns a tuple with the PrimaryRoutingAnnouncement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetPrimaryRoutingAnnouncementOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryRoutingAnnouncement) {
		return nil, false
	}
	return o.PrimaryRoutingAnnouncement, true
}

// HasPrimaryRoutingAnnouncement returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasPrimaryRoutingAnnouncement() bool {
	if o != nil && !IsNil(o.PrimaryRoutingAnnouncement) {
		return true
	}

	return false
}

// SetPrimaryRoutingAnnouncement gets a reference to the given bool and assigns it to the PrimaryRoutingAnnouncement field.
func (o *VirtualCrossConnectCombined) SetPrimaryRoutingAnnouncement(v bool) {
	o.PrimaryRoutingAnnouncement = &v
}

// GetSecondaryRoutingAnnouncement returns the SecondaryRoutingAnnouncement field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetSecondaryRoutingAnnouncement() bool {
	if o == nil || IsNil(o.SecondaryRoutingAnnouncement) {
		var ret bool
		return ret
	}
	return *o.SecondaryRoutingAnnouncement
}

// GetSecondaryRoutingAnnouncementOk returns a tuple with the SecondaryRoutingAnnouncement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetSecondaryRoutingAnnouncementOk() (*bool, bool) {
	if o == nil || IsNil(o.SecondaryRoutingAnnouncement) {
		return nil, false
	}
	return o.SecondaryRoutingAnnouncement, true
}

// HasSecondaryRoutingAnnouncement returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasSecondaryRoutingAnnouncement() bool {
	if o != nil && !IsNil(o.SecondaryRoutingAnnouncement) {
		return true
	}

	return false
}

// SetSecondaryRoutingAnnouncement gets a reference to the given bool and assigns it to the SecondaryRoutingAnnouncement field.
func (o *VirtualCrossConnectCombined) SetSecondaryRoutingAnnouncement(v bool) {
	o.SecondaryRoutingAnnouncement = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *VirtualCrossConnectCombined) GetRegion() RegionOutRegion {
	if o == nil || IsNil(o.Region) {
		var ret RegionOutRegion
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCombined) GetRegionOk() (*RegionOutRegion, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *VirtualCrossConnectCombined) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given RegionOutRegion and assigns it to the Region field.
func (o *VirtualCrossConnectCombined) SetRegion(v RegionOutRegion) {
	o.Region = &v
}

func (o VirtualCrossConnectCombined) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualCrossConnectCombined) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["network_id"] = o.NetworkId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["cloud_provider"] = o.CloudProvider
	toSerialize["cloud_provider_region"] = o.CloudProviderRegion
	toSerialize["bgp_asn"] = o.BgpAsn
	if !IsNil(o.BandwidthMbps) {
		toSerialize["bandwidth_mbps"] = o.BandwidthMbps
	}
	if !IsNil(o.PrimaryEnabled) {
		toSerialize["primary_enabled"] = o.PrimaryEnabled
	}
	toSerialize["primary_cloud_account_id"] = o.PrimaryCloudAccountId
	if !IsNil(o.PrimaryTelnyxIp) {
		toSerialize["primary_telnyx_ip"] = o.PrimaryTelnyxIp
	}
	if !IsNil(o.PrimaryCloudIp) {
		toSerialize["primary_cloud_ip"] = o.PrimaryCloudIp
	}
	if !IsNil(o.PrimaryBgpKey) {
		toSerialize["primary_bgp_key"] = o.PrimaryBgpKey
	}
	if !IsNil(o.SecondaryEnabled) {
		toSerialize["secondary_enabled"] = o.SecondaryEnabled
	}
	if !IsNil(o.SecondaryCloudAccountId) {
		toSerialize["secondary_cloud_account_id"] = o.SecondaryCloudAccountId
	}
	if !IsNil(o.SecondaryTelnyxIp) {
		toSerialize["secondary_telnyx_ip"] = o.SecondaryTelnyxIp
	}
	if !IsNil(o.SecondaryCloudIp) {
		toSerialize["secondary_cloud_ip"] = o.SecondaryCloudIp
	}
	if !IsNil(o.SecondaryBgpKey) {
		toSerialize["secondary_bgp_key"] = o.SecondaryBgpKey
	}
	toSerialize["region_code"] = o.RegionCode
	if !IsNil(o.PrimaryRoutingAnnouncement) {
		toSerialize["primary_routing_announcement"] = o.PrimaryRoutingAnnouncement
	}
	if !IsNil(o.SecondaryRoutingAnnouncement) {
		toSerialize["secondary_routing_announcement"] = o.SecondaryRoutingAnnouncement
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

func (o *VirtualCrossConnectCombined) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
		"cloud_provider",
		"cloud_provider_region",
		"bgp_asn",
		"primary_cloud_account_id",
		"region_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVirtualCrossConnectCombined := _VirtualCrossConnectCombined{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVirtualCrossConnectCombined)

	if err != nil {
		return err
	}

	*o = VirtualCrossConnectCombined(varVirtualCrossConnectCombined)

	return err
}

type NullableVirtualCrossConnectCombined struct {
	value *VirtualCrossConnectCombined
	isSet bool
}

func (v NullableVirtualCrossConnectCombined) Get() *VirtualCrossConnectCombined {
	return v.value
}

func (v *NullableVirtualCrossConnectCombined) Set(val *VirtualCrossConnectCombined) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCrossConnectCombined) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCrossConnectCombined) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCrossConnectCombined(val *VirtualCrossConnectCombined) *NullableVirtualCrossConnectCombined {
	return &NullableVirtualCrossConnectCombined{value: val, isSet: true}
}

func (v NullableVirtualCrossConnectCombined) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCrossConnectCombined) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


