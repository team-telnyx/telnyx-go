/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// InterfaceStatus The current status of the interface deployment.
type InterfaceStatus string

// List of InterfaceStatus
const (
	CREATED InterfaceStatus = "created"
	PROVISIONING InterfaceStatus = "provisioning"
	PROVISIONED InterfaceStatus = "provisioned"
	DELETING InterfaceStatus = "deleting"
)

// All allowed values of InterfaceStatus enum
var AllowedInterfaceStatusEnumValues = []InterfaceStatus{
	"created",
	"provisioning",
	"provisioned",
	"deleting",
}

func (v *InterfaceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceStatus(value)
	for _, existing := range AllowedInterfaceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceStatus", value)
}

// NewInterfaceStatusFromValue returns a pointer to a valid InterfaceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceStatusFromValue(v string) (*InterfaceStatus, error) {
	ev := InterfaceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceStatus: valid values are %v", v, AllowedInterfaceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceStatus) IsValid() bool {
	for _, existing := range AllowedInterfaceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceStatus value
func (v InterfaceStatus) Ptr() *InterfaceStatus {
	return &v
}

type NullableInterfaceStatus struct {
	value *InterfaceStatus
	isSet bool
}

func (v NullableInterfaceStatus) Get() *InterfaceStatus {
	return v.value
}

func (v *NullableInterfaceStatus) Set(val *InterfaceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStatus(val *InterfaceStatus) *NullableInterfaceStatus {
	return &NullableInterfaceStatus{value: val, isSet: true}
}

func (v NullableInterfaceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

