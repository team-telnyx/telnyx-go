/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the PortabilityCheckDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortabilityCheckDetails{}

// PortabilityCheckDetails struct for PortabilityCheckDetails
type PortabilityCheckDetails struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// Indicates whether this phone number is FastPort eligible
	FastPortable *bool `json:"fast_portable,omitempty"`
	// If this phone number is not portable, explains why. Empty string if the number is portable.
	NotPortableReason *string `json:"not_portable_reason,omitempty"`
	// The +E.164 formatted phone number this result is about
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Indicates whether this phone number is portable
	Portable *bool `json:"portable,omitempty"`
}

// NewPortabilityCheckDetails instantiates a new PortabilityCheckDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortabilityCheckDetails() *PortabilityCheckDetails {
	this := PortabilityCheckDetails{}
	return &this
}

// NewPortabilityCheckDetailsWithDefaults instantiates a new PortabilityCheckDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortabilityCheckDetailsWithDefaults() *PortabilityCheckDetails {
	this := PortabilityCheckDetails{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *PortabilityCheckDetails) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortabilityCheckDetails) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *PortabilityCheckDetails) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *PortabilityCheckDetails) SetRecordType(v string) {
	o.RecordType = &v
}

// GetFastPortable returns the FastPortable field value if set, zero value otherwise.
func (o *PortabilityCheckDetails) GetFastPortable() bool {
	if o == nil || IsNil(o.FastPortable) {
		var ret bool
		return ret
	}
	return *o.FastPortable
}

// GetFastPortableOk returns a tuple with the FastPortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortabilityCheckDetails) GetFastPortableOk() (*bool, bool) {
	if o == nil || IsNil(o.FastPortable) {
		return nil, false
	}
	return o.FastPortable, true
}

// HasFastPortable returns a boolean if a field has been set.
func (o *PortabilityCheckDetails) HasFastPortable() bool {
	if o != nil && !IsNil(o.FastPortable) {
		return true
	}

	return false
}

// SetFastPortable gets a reference to the given bool and assigns it to the FastPortable field.
func (o *PortabilityCheckDetails) SetFastPortable(v bool) {
	o.FastPortable = &v
}

// GetNotPortableReason returns the NotPortableReason field value if set, zero value otherwise.
func (o *PortabilityCheckDetails) GetNotPortableReason() string {
	if o == nil || IsNil(o.NotPortableReason) {
		var ret string
		return ret
	}
	return *o.NotPortableReason
}

// GetNotPortableReasonOk returns a tuple with the NotPortableReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortabilityCheckDetails) GetNotPortableReasonOk() (*string, bool) {
	if o == nil || IsNil(o.NotPortableReason) {
		return nil, false
	}
	return o.NotPortableReason, true
}

// HasNotPortableReason returns a boolean if a field has been set.
func (o *PortabilityCheckDetails) HasNotPortableReason() bool {
	if o != nil && !IsNil(o.NotPortableReason) {
		return true
	}

	return false
}

// SetNotPortableReason gets a reference to the given string and assigns it to the NotPortableReason field.
func (o *PortabilityCheckDetails) SetNotPortableReason(v string) {
	o.NotPortableReason = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *PortabilityCheckDetails) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortabilityCheckDetails) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *PortabilityCheckDetails) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *PortabilityCheckDetails) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPortable returns the Portable field value if set, zero value otherwise.
func (o *PortabilityCheckDetails) GetPortable() bool {
	if o == nil || IsNil(o.Portable) {
		var ret bool
		return ret
	}
	return *o.Portable
}

// GetPortableOk returns a tuple with the Portable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortabilityCheckDetails) GetPortableOk() (*bool, bool) {
	if o == nil || IsNil(o.Portable) {
		return nil, false
	}
	return o.Portable, true
}

// HasPortable returns a boolean if a field has been set.
func (o *PortabilityCheckDetails) HasPortable() bool {
	if o != nil && !IsNil(o.Portable) {
		return true
	}

	return false
}

// SetPortable gets a reference to the given bool and assigns it to the Portable field.
func (o *PortabilityCheckDetails) SetPortable(v bool) {
	o.Portable = &v
}

func (o PortabilityCheckDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortabilityCheckDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.FastPortable) {
		toSerialize["fast_portable"] = o.FastPortable
	}
	if !IsNil(o.NotPortableReason) {
		toSerialize["not_portable_reason"] = o.NotPortableReason
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.Portable) {
		toSerialize["portable"] = o.Portable
	}
	return toSerialize, nil
}

type NullablePortabilityCheckDetails struct {
	value *PortabilityCheckDetails
	isSet bool
}

func (v NullablePortabilityCheckDetails) Get() *PortabilityCheckDetails {
	return v.value
}

func (v *NullablePortabilityCheckDetails) Set(val *PortabilityCheckDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePortabilityCheckDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePortabilityCheckDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortabilityCheckDetails(val *PortabilityCheckDetails) *NullablePortabilityCheckDetails {
	return &NullablePortabilityCheckDetails{value: val, isSet: true}
}

func (v NullablePortabilityCheckDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortabilityCheckDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


