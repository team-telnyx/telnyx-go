/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnusedUserBundlesSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnusedUserBundlesSchema{}

// UnusedUserBundlesSchema struct for UnusedUserBundlesSchema
type UnusedUserBundlesSchema struct {
	BillingBundle BillingBundleSummary `json:"billing_bundle"`
	// List of user bundle IDs for given bundle.
	UserBundleIds []string `json:"user_bundle_ids"`
}

type _UnusedUserBundlesSchema UnusedUserBundlesSchema

// NewUnusedUserBundlesSchema instantiates a new UnusedUserBundlesSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnusedUserBundlesSchema(billingBundle BillingBundleSummary, userBundleIds []string) *UnusedUserBundlesSchema {
	this := UnusedUserBundlesSchema{}
	this.BillingBundle = billingBundle
	this.UserBundleIds = userBundleIds
	return &this
}

// NewUnusedUserBundlesSchemaWithDefaults instantiates a new UnusedUserBundlesSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnusedUserBundlesSchemaWithDefaults() *UnusedUserBundlesSchema {
	this := UnusedUserBundlesSchema{}
	return &this
}

// GetBillingBundle returns the BillingBundle field value
func (o *UnusedUserBundlesSchema) GetBillingBundle() BillingBundleSummary {
	if o == nil {
		var ret BillingBundleSummary
		return ret
	}

	return o.BillingBundle
}

// GetBillingBundleOk returns a tuple with the BillingBundle field value
// and a boolean to check if the value has been set.
func (o *UnusedUserBundlesSchema) GetBillingBundleOk() (*BillingBundleSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingBundle, true
}

// SetBillingBundle sets field value
func (o *UnusedUserBundlesSchema) SetBillingBundle(v BillingBundleSummary) {
	o.BillingBundle = v
}

// GetUserBundleIds returns the UserBundleIds field value
func (o *UnusedUserBundlesSchema) GetUserBundleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserBundleIds
}

// GetUserBundleIdsOk returns a tuple with the UserBundleIds field value
// and a boolean to check if the value has been set.
func (o *UnusedUserBundlesSchema) GetUserBundleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserBundleIds, true
}

// SetUserBundleIds sets field value
func (o *UnusedUserBundlesSchema) SetUserBundleIds(v []string) {
	o.UserBundleIds = v
}

func (o UnusedUserBundlesSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnusedUserBundlesSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["billing_bundle"] = o.BillingBundle
	toSerialize["user_bundle_ids"] = o.UserBundleIds
	return toSerialize, nil
}

func (o *UnusedUserBundlesSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"billing_bundle",
		"user_bundle_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnusedUserBundlesSchema := _UnusedUserBundlesSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnusedUserBundlesSchema)

	if err != nil {
		return err
	}

	*o = UnusedUserBundlesSchema(varUnusedUserBundlesSchema)

	return err
}

type NullableUnusedUserBundlesSchema struct {
	value *UnusedUserBundlesSchema
	isSet bool
}

func (v NullableUnusedUserBundlesSchema) Get() *UnusedUserBundlesSchema {
	return v.value
}

func (v *NullableUnusedUserBundlesSchema) Set(val *UnusedUserBundlesSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUnusedUserBundlesSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUnusedUserBundlesSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnusedUserBundlesSchema(val *UnusedUserBundlesSchema) *NullableUnusedUserBundlesSchema {
	return &NullableUnusedUserBundlesSchema{value: val, isSet: true}
}

func (v NullableUnusedUserBundlesSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnusedUserBundlesSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


