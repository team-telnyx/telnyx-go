/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the MessagingUrlDomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagingUrlDomain{}

// MessagingUrlDomain struct for MessagingUrlDomain
type MessagingUrlDomain struct {
	RecordType *string `json:"record_type,omitempty"`
	Id *string `json:"id,omitempty"`
	UrlDomain *string `json:"url_domain,omitempty"`
	UseCase *string `json:"use_case,omitempty"`
}

// NewMessagingUrlDomain instantiates a new MessagingUrlDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagingUrlDomain() *MessagingUrlDomain {
	this := MessagingUrlDomain{}
	return &this
}

// NewMessagingUrlDomainWithDefaults instantiates a new MessagingUrlDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagingUrlDomainWithDefaults() *MessagingUrlDomain {
	this := MessagingUrlDomain{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *MessagingUrlDomain) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagingUrlDomain) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *MessagingUrlDomain) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *MessagingUrlDomain) SetRecordType(v string) {
	o.RecordType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MessagingUrlDomain) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagingUrlDomain) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MessagingUrlDomain) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MessagingUrlDomain) SetId(v string) {
	o.Id = &v
}

// GetUrlDomain returns the UrlDomain field value if set, zero value otherwise.
func (o *MessagingUrlDomain) GetUrlDomain() string {
	if o == nil || IsNil(o.UrlDomain) {
		var ret string
		return ret
	}
	return *o.UrlDomain
}

// GetUrlDomainOk returns a tuple with the UrlDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagingUrlDomain) GetUrlDomainOk() (*string, bool) {
	if o == nil || IsNil(o.UrlDomain) {
		return nil, false
	}
	return o.UrlDomain, true
}

// HasUrlDomain returns a boolean if a field has been set.
func (o *MessagingUrlDomain) HasUrlDomain() bool {
	if o != nil && !IsNil(o.UrlDomain) {
		return true
	}

	return false
}

// SetUrlDomain gets a reference to the given string and assigns it to the UrlDomain field.
func (o *MessagingUrlDomain) SetUrlDomain(v string) {
	o.UrlDomain = &v
}

// GetUseCase returns the UseCase field value if set, zero value otherwise.
func (o *MessagingUrlDomain) GetUseCase() string {
	if o == nil || IsNil(o.UseCase) {
		var ret string
		return ret
	}
	return *o.UseCase
}

// GetUseCaseOk returns a tuple with the UseCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagingUrlDomain) GetUseCaseOk() (*string, bool) {
	if o == nil || IsNil(o.UseCase) {
		return nil, false
	}
	return o.UseCase, true
}

// HasUseCase returns a boolean if a field has been set.
func (o *MessagingUrlDomain) HasUseCase() bool {
	if o != nil && !IsNil(o.UseCase) {
		return true
	}

	return false
}

// SetUseCase gets a reference to the given string and assigns it to the UseCase field.
func (o *MessagingUrlDomain) SetUseCase(v string) {
	o.UseCase = &v
}

func (o MessagingUrlDomain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagingUrlDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UrlDomain) {
		toSerialize["url_domain"] = o.UrlDomain
	}
	if !IsNil(o.UseCase) {
		toSerialize["use_case"] = o.UseCase
	}
	return toSerialize, nil
}

type NullableMessagingUrlDomain struct {
	value *MessagingUrlDomain
	isSet bool
}

func (v NullableMessagingUrlDomain) Get() *MessagingUrlDomain {
	return v.value
}

func (v *NullableMessagingUrlDomain) Set(val *MessagingUrlDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagingUrlDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagingUrlDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagingUrlDomain(val *MessagingUrlDomain) *NullableMessagingUrlDomain {
	return &NullableMessagingUrlDomain{value: val, isSet: true}
}

func (v NullableMessagingUrlDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagingUrlDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


