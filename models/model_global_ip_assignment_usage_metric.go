/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the GlobalIpAssignmentUsageMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalIpAssignmentUsageMetric{}

// GlobalIpAssignmentUsageMetric struct for GlobalIpAssignmentUsageMetric
type GlobalIpAssignmentUsageMetric struct {
	// The timestamp of the metric.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	GlobalIp *GlobalIpAssignmentUsageMetricGlobalIp `json:"global_ip,omitempty"`
	GlobalIpAssignment *GlobalIpAssignmentUsageMetricGlobalIpAssignment `json:"global_ip_assignment,omitempty"`
	Transmitted *GlobalIpAssignmentUsageMetricTransmitted `json:"transmitted,omitempty"`
	Received *GlobalIpAssignmentUsageMetricReceived `json:"received,omitempty"`
}

// NewGlobalIpAssignmentUsageMetric instantiates a new GlobalIpAssignmentUsageMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalIpAssignmentUsageMetric() *GlobalIpAssignmentUsageMetric {
	this := GlobalIpAssignmentUsageMetric{}
	return &this
}

// NewGlobalIpAssignmentUsageMetricWithDefaults instantiates a new GlobalIpAssignmentUsageMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalIpAssignmentUsageMetricWithDefaults() *GlobalIpAssignmentUsageMetric {
	this := GlobalIpAssignmentUsageMetric{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUsageMetric) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUsageMetric) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUsageMetric) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *GlobalIpAssignmentUsageMetric) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetGlobalIp returns the GlobalIp field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUsageMetric) GetGlobalIp() GlobalIpAssignmentUsageMetricGlobalIp {
	if o == nil || IsNil(o.GlobalIp) {
		var ret GlobalIpAssignmentUsageMetricGlobalIp
		return ret
	}
	return *o.GlobalIp
}

// GetGlobalIpOk returns a tuple with the GlobalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUsageMetric) GetGlobalIpOk() (*GlobalIpAssignmentUsageMetricGlobalIp, bool) {
	if o == nil || IsNil(o.GlobalIp) {
		return nil, false
	}
	return o.GlobalIp, true
}

// HasGlobalIp returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUsageMetric) HasGlobalIp() bool {
	if o != nil && !IsNil(o.GlobalIp) {
		return true
	}

	return false
}

// SetGlobalIp gets a reference to the given GlobalIpAssignmentUsageMetricGlobalIp and assigns it to the GlobalIp field.
func (o *GlobalIpAssignmentUsageMetric) SetGlobalIp(v GlobalIpAssignmentUsageMetricGlobalIp) {
	o.GlobalIp = &v
}

// GetGlobalIpAssignment returns the GlobalIpAssignment field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUsageMetric) GetGlobalIpAssignment() GlobalIpAssignmentUsageMetricGlobalIpAssignment {
	if o == nil || IsNil(o.GlobalIpAssignment) {
		var ret GlobalIpAssignmentUsageMetricGlobalIpAssignment
		return ret
	}
	return *o.GlobalIpAssignment
}

// GetGlobalIpAssignmentOk returns a tuple with the GlobalIpAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUsageMetric) GetGlobalIpAssignmentOk() (*GlobalIpAssignmentUsageMetricGlobalIpAssignment, bool) {
	if o == nil || IsNil(o.GlobalIpAssignment) {
		return nil, false
	}
	return o.GlobalIpAssignment, true
}

// HasGlobalIpAssignment returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUsageMetric) HasGlobalIpAssignment() bool {
	if o != nil && !IsNil(o.GlobalIpAssignment) {
		return true
	}

	return false
}

// SetGlobalIpAssignment gets a reference to the given GlobalIpAssignmentUsageMetricGlobalIpAssignment and assigns it to the GlobalIpAssignment field.
func (o *GlobalIpAssignmentUsageMetric) SetGlobalIpAssignment(v GlobalIpAssignmentUsageMetricGlobalIpAssignment) {
	o.GlobalIpAssignment = &v
}

// GetTransmitted returns the Transmitted field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUsageMetric) GetTransmitted() GlobalIpAssignmentUsageMetricTransmitted {
	if o == nil || IsNil(o.Transmitted) {
		var ret GlobalIpAssignmentUsageMetricTransmitted
		return ret
	}
	return *o.Transmitted
}

// GetTransmittedOk returns a tuple with the Transmitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUsageMetric) GetTransmittedOk() (*GlobalIpAssignmentUsageMetricTransmitted, bool) {
	if o == nil || IsNil(o.Transmitted) {
		return nil, false
	}
	return o.Transmitted, true
}

// HasTransmitted returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUsageMetric) HasTransmitted() bool {
	if o != nil && !IsNil(o.Transmitted) {
		return true
	}

	return false
}

// SetTransmitted gets a reference to the given GlobalIpAssignmentUsageMetricTransmitted and assigns it to the Transmitted field.
func (o *GlobalIpAssignmentUsageMetric) SetTransmitted(v GlobalIpAssignmentUsageMetricTransmitted) {
	o.Transmitted = &v
}

// GetReceived returns the Received field value if set, zero value otherwise.
func (o *GlobalIpAssignmentUsageMetric) GetReceived() GlobalIpAssignmentUsageMetricReceived {
	if o == nil || IsNil(o.Received) {
		var ret GlobalIpAssignmentUsageMetricReceived
		return ret
	}
	return *o.Received
}

// GetReceivedOk returns a tuple with the Received field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalIpAssignmentUsageMetric) GetReceivedOk() (*GlobalIpAssignmentUsageMetricReceived, bool) {
	if o == nil || IsNil(o.Received) {
		return nil, false
	}
	return o.Received, true
}

// HasReceived returns a boolean if a field has been set.
func (o *GlobalIpAssignmentUsageMetric) HasReceived() bool {
	if o != nil && !IsNil(o.Received) {
		return true
	}

	return false
}

// SetReceived gets a reference to the given GlobalIpAssignmentUsageMetricReceived and assigns it to the Received field.
func (o *GlobalIpAssignmentUsageMetric) SetReceived(v GlobalIpAssignmentUsageMetricReceived) {
	o.Received = &v
}

func (o GlobalIpAssignmentUsageMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalIpAssignmentUsageMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.GlobalIp) {
		toSerialize["global_ip"] = o.GlobalIp
	}
	if !IsNil(o.GlobalIpAssignment) {
		toSerialize["global_ip_assignment"] = o.GlobalIpAssignment
	}
	if !IsNil(o.Transmitted) {
		toSerialize["transmitted"] = o.Transmitted
	}
	if !IsNil(o.Received) {
		toSerialize["received"] = o.Received
	}
	return toSerialize, nil
}

type NullableGlobalIpAssignmentUsageMetric struct {
	value *GlobalIpAssignmentUsageMetric
	isSet bool
}

func (v NullableGlobalIpAssignmentUsageMetric) Get() *GlobalIpAssignmentUsageMetric {
	return v.value
}

func (v *NullableGlobalIpAssignmentUsageMetric) Set(val *GlobalIpAssignmentUsageMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalIpAssignmentUsageMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalIpAssignmentUsageMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalIpAssignmentUsageMetric(val *GlobalIpAssignmentUsageMetric) *NullableGlobalIpAssignmentUsageMetric {
	return &NullableGlobalIpAssignmentUsageMetric{value: val, isSet: true}
}

func (v NullableGlobalIpAssignmentUsageMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalIpAssignmentUsageMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


