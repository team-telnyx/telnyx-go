/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)


// AuditEventChangesFrom The previous value of the field. Can be any JSON type.
type AuditEventChangesFrom struct {
	ArrayOfAny *[]interface{}
	Bool *bool
	Float32 *float32
	MapmapOfStringAny *map[string]interface{}
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AuditEventChangesFrom) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfAny
	err = json.Unmarshal(data, &dst.ArrayOfAny);
	if err == nil {
		jsonArrayOfAny, _ := json.Marshal(dst.ArrayOfAny)
		if string(jsonArrayOfAny) == "{}" { // empty struct
			dst.ArrayOfAny = nil
		} else {
			return nil // data stored in dst.ArrayOfAny, return on the first match
		}
	} else {
		dst.ArrayOfAny = nil
	}

	// try to unmarshal JSON data into Bool
	err = json.Unmarshal(data, &dst.Bool);
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil // data stored in dst.Bool, return on the first match
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal JSON data into Float32
	err = json.Unmarshal(data, &dst.Float32);
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			return nil // data stored in dst.Float32, return on the first match
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal JSON data into MapmapOfStringAny
	err = json.Unmarshal(data, &dst.MapmapOfStringAny);
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			return nil // data stored in dst.MapmapOfStringAny, return on the first match
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AuditEventChangesFrom)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuditEventChangesFrom) MarshalJSON() ([]byte, error) {
	if src.ArrayOfAny != nil {
		return json.Marshal(&src.ArrayOfAny)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableAuditEventChangesFrom struct {
	value *AuditEventChangesFrom
	isSet bool
}

func (v NullableAuditEventChangesFrom) Get() *AuditEventChangesFrom {
	return v.value
}

func (v *NullableAuditEventChangesFrom) Set(val *AuditEventChangesFrom) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventChangesFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventChangesFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventChangesFrom(val *AuditEventChangesFrom) *NullableAuditEventChangesFrom {
	return &NullableAuditEventChangesFrom{value: val, isSet: true}
}

func (v NullableAuditEventChangesFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventChangesFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


