/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the EmbeddingResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingResponseData{}

// EmbeddingResponseData struct for EmbeddingResponseData
type EmbeddingResponseData struct {
	TaskId *string `json:"task_id,omitempty"`
	TaskName *string `json:"task_name,omitempty"`
	Status *string `json:"status,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	FinishedAt NullableString `json:"finished_at,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

// NewEmbeddingResponseData instantiates a new EmbeddingResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingResponseData() *EmbeddingResponseData {
	this := EmbeddingResponseData{}
	return &this
}

// NewEmbeddingResponseDataWithDefaults instantiates a new EmbeddingResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingResponseDataWithDefaults() *EmbeddingResponseData {
	this := EmbeddingResponseData{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *EmbeddingResponseData) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponseData) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *EmbeddingResponseData) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *EmbeddingResponseData) SetTaskId(v string) {
	o.TaskId = &v
}

// GetTaskName returns the TaskName field value if set, zero value otherwise.
func (o *EmbeddingResponseData) GetTaskName() string {
	if o == nil || IsNil(o.TaskName) {
		var ret string
		return ret
	}
	return *o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponseData) GetTaskNameOk() (*string, bool) {
	if o == nil || IsNil(o.TaskName) {
		return nil, false
	}
	return o.TaskName, true
}

// HasTaskName returns a boolean if a field has been set.
func (o *EmbeddingResponseData) HasTaskName() bool {
	if o != nil && !IsNil(o.TaskName) {
		return true
	}

	return false
}

// SetTaskName gets a reference to the given string and assigns it to the TaskName field.
func (o *EmbeddingResponseData) SetTaskName(v string) {
	o.TaskName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmbeddingResponseData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponseData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmbeddingResponseData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EmbeddingResponseData) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EmbeddingResponseData) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponseData) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EmbeddingResponseData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *EmbeddingResponseData) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingResponseData) GetFinishedAt() string {
	if o == nil || IsNil(o.FinishedAt.Get()) {
		var ret string
		return ret
	}
	return *o.FinishedAt.Get()
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingResponseData) GetFinishedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedAt.Get(), o.FinishedAt.IsSet()
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *EmbeddingResponseData) HasFinishedAt() bool {
	if o != nil && o.FinishedAt.IsSet() {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given NullableString and assigns it to the FinishedAt field.
func (o *EmbeddingResponseData) SetFinishedAt(v string) {
	o.FinishedAt.Set(&v)
}
// SetFinishedAtNil sets the value for FinishedAt to be an explicit nil
func (o *EmbeddingResponseData) SetFinishedAtNil() {
	o.FinishedAt.Set(nil)
}

// UnsetFinishedAt ensures that no value is present for FinishedAt, not even an explicit nil
func (o *EmbeddingResponseData) UnsetFinishedAt() {
	o.FinishedAt.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmbeddingResponseData) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponseData) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmbeddingResponseData) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *EmbeddingResponseData) SetUserId(v string) {
	o.UserId = &v
}

func (o EmbeddingResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskId) {
		toSerialize["task_id"] = o.TaskId
	}
	if !IsNil(o.TaskName) {
		toSerialize["task_name"] = o.TaskName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.FinishedAt.IsSet() {
		toSerialize["finished_at"] = o.FinishedAt.Get()
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableEmbeddingResponseData struct {
	value *EmbeddingResponseData
	isSet bool
}

func (v NullableEmbeddingResponseData) Get() *EmbeddingResponseData {
	return v.value
}

func (v *NullableEmbeddingResponseData) Set(val *EmbeddingResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingResponseData(val *EmbeddingResponseData) *NullableEmbeddingResponseData {
	return &NullableEmbeddingResponseData{value: val, isSet: true}
}

func (v NullableEmbeddingResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


