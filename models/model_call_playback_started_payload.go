/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallPlaybackStartedPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallPlaybackStartedPayload{}

// CallPlaybackStartedPayload struct for CallPlaybackStartedPayload
type CallPlaybackStartedPayload struct {
	// Call ID used to issue commands via Call Control API.
	CallControlId *string `json:"call_control_id,omitempty"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionId *string `json:"connection_id,omitempty"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegId *string `json:"call_leg_id,omitempty"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.
	CallSessionId *string `json:"call_session_id,omitempty"`
	// State received from a command.
	ClientState *string `json:"client_state,omitempty"`
	// The audio URL being played back, if audio_url has been used to start.
	MediaUrl *string `json:"media_url,omitempty"`
	// The name of the audio media file being played back, if media_name has been used to start.
	MediaName *string `json:"media_name,omitempty"`
	// Whether the audio is going to be played in overlay mode or not.
	Overlay *bool `json:"overlay,omitempty"`
}

// NewCallPlaybackStartedPayload instantiates a new CallPlaybackStartedPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallPlaybackStartedPayload() *CallPlaybackStartedPayload {
	this := CallPlaybackStartedPayload{}
	return &this
}

// NewCallPlaybackStartedPayloadWithDefaults instantiates a new CallPlaybackStartedPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallPlaybackStartedPayloadWithDefaults() *CallPlaybackStartedPayload {
	this := CallPlaybackStartedPayload{}
	return &this
}

// GetCallControlId returns the CallControlId field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetCallControlId() string {
	if o == nil || IsNil(o.CallControlId) {
		var ret string
		return ret
	}
	return *o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallControlId) {
		return nil, false
	}
	return o.CallControlId, true
}

// HasCallControlId returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasCallControlId() bool {
	if o != nil && !IsNil(o.CallControlId) {
		return true
	}

	return false
}

// SetCallControlId gets a reference to the given string and assigns it to the CallControlId field.
func (o *CallPlaybackStartedPayload) SetCallControlId(v string) {
	o.CallControlId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *CallPlaybackStartedPayload) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetCallLegId returns the CallLegId field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetCallLegId() string {
	if o == nil || IsNil(o.CallLegId) {
		var ret string
		return ret
	}
	return *o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetCallLegIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallLegId) {
		return nil, false
	}
	return o.CallLegId, true
}

// HasCallLegId returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasCallLegId() bool {
	if o != nil && !IsNil(o.CallLegId) {
		return true
	}

	return false
}

// SetCallLegId gets a reference to the given string and assigns it to the CallLegId field.
func (o *CallPlaybackStartedPayload) SetCallLegId(v string) {
	o.CallLegId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *CallPlaybackStartedPayload) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *CallPlaybackStartedPayload) SetClientState(v string) {
	o.ClientState = &v
}

// GetMediaUrl returns the MediaUrl field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetMediaUrl() string {
	if o == nil || IsNil(o.MediaUrl) {
		var ret string
		return ret
	}
	return *o.MediaUrl
}

// GetMediaUrlOk returns a tuple with the MediaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetMediaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MediaUrl) {
		return nil, false
	}
	return o.MediaUrl, true
}

// HasMediaUrl returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasMediaUrl() bool {
	if o != nil && !IsNil(o.MediaUrl) {
		return true
	}

	return false
}

// SetMediaUrl gets a reference to the given string and assigns it to the MediaUrl field.
func (o *CallPlaybackStartedPayload) SetMediaUrl(v string) {
	o.MediaUrl = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *CallPlaybackStartedPayload) SetMediaName(v string) {
	o.MediaName = &v
}

// GetOverlay returns the Overlay field value if set, zero value otherwise.
func (o *CallPlaybackStartedPayload) GetOverlay() bool {
	if o == nil || IsNil(o.Overlay) {
		var ret bool
		return ret
	}
	return *o.Overlay
}

// GetOverlayOk returns a tuple with the Overlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPlaybackStartedPayload) GetOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.Overlay) {
		return nil, false
	}
	return o.Overlay, true
}

// HasOverlay returns a boolean if a field has been set.
func (o *CallPlaybackStartedPayload) HasOverlay() bool {
	if o != nil && !IsNil(o.Overlay) {
		return true
	}

	return false
}

// SetOverlay gets a reference to the given bool and assigns it to the Overlay field.
func (o *CallPlaybackStartedPayload) SetOverlay(v bool) {
	o.Overlay = &v
}

func (o CallPlaybackStartedPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallPlaybackStartedPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlId) {
		toSerialize["call_control_id"] = o.CallControlId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.CallLegId) {
		toSerialize["call_leg_id"] = o.CallLegId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.MediaUrl) {
		toSerialize["media_url"] = o.MediaUrl
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	if !IsNil(o.Overlay) {
		toSerialize["overlay"] = o.Overlay
	}
	return toSerialize, nil
}

type NullableCallPlaybackStartedPayload struct {
	value *CallPlaybackStartedPayload
	isSet bool
}

func (v NullableCallPlaybackStartedPayload) Get() *CallPlaybackStartedPayload {
	return v.value
}

func (v *NullableCallPlaybackStartedPayload) Set(val *CallPlaybackStartedPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCallPlaybackStartedPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCallPlaybackStartedPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallPlaybackStartedPayload(val *CallPlaybackStartedPayload) *NullableCallPlaybackStartedPayload {
	return &NullableCallPlaybackStartedPayload{value: val, isSet: true}
}

func (v NullableCallPlaybackStartedPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallPlaybackStartedPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


