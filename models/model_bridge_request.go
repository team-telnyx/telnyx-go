/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BridgeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BridgeRequest{}

// BridgeRequest struct for BridgeRequest
type BridgeRequest struct {
	// The Call Control ID of the call you want to bridge with, can't be used together with queue parameter or video_room_id parameter.
	CallControlId string `json:"call_control_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	// The name of the queue you want to bridge with, can't be used together with call_control_id parameter or video_room_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.
	Queue *string `json:"queue,omitempty"`
	// The ID of the video room you want to bridge with, can't be used together with call_control_id parameter or queue parameter.
	VideoRoomId *string `json:"video_room_id,omitempty"`
	// The additional parameter that will be passed to the video conference. It is a text field and the user can decide how to use it. For example, you can set the participant name or pass JSON text. It can be used only with video_room_id parameter.
	VideoRoomContext *string `json:"video_room_context,omitempty"`
	// Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.
	ParkAfterUnbridge *string `json:"park_after_unbridge,omitempty"`
	// Specifies whether to play a ringtone if the call you want to bridge with has not yet been answered.
	PlayRingtone *bool `json:"play_ringtone,omitempty"`
	// Specifies which country ringtone to play when `play_ringtone` is set to `true`. If not set, the US ringtone will be played.
	Ringtone *string `json:"ringtone,omitempty"`
	// Start recording automatically after an event. Disabled by default.
	Record *string `json:"record,omitempty"`
	// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
	RecordChannels *string `json:"record_channels,omitempty"`
	// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
	RecordFormat *string `json:"record_format,omitempty"`
	// Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).
	RecordMaxLength *int32 `json:"record_max_length,omitempty"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).
	RecordTimeoutSecs *int32 `json:"record_timeout_secs,omitempty"`
	// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).
	RecordTrack *string `json:"record_track,omitempty"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	RecordTrim *string `json:"record_trim,omitempty"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.
	RecordCustomFileName *string `json:"record_custom_file_name,omitempty"`
	// When enabled, DTMF tones are not passed to the call participant. The webhooks containing the DTMF information will be sent.
	MuteDtmf *string `json:"mute_dtmf,omitempty"`
}

type _BridgeRequest BridgeRequest

// NewBridgeRequest instantiates a new BridgeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBridgeRequest(callControlId string) *BridgeRequest {
	this := BridgeRequest{}
	this.CallControlId = callControlId
	var playRingtone bool = false
	this.PlayRingtone = &playRingtone
	var ringtone string = "us"
	this.Ringtone = &ringtone
	var recordChannels string = "dual"
	this.RecordChannels = &recordChannels
	var recordFormat string = "mp3"
	this.RecordFormat = &recordFormat
	var recordMaxLength int32 = 0
	this.RecordMaxLength = &recordMaxLength
	var recordTimeoutSecs int32 = 0
	this.RecordTimeoutSecs = &recordTimeoutSecs
	var recordTrack string = "both"
	this.RecordTrack = &recordTrack
	var muteDtmf string = "none"
	this.MuteDtmf = &muteDtmf
	return &this
}

// NewBridgeRequestWithDefaults instantiates a new BridgeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBridgeRequestWithDefaults() *BridgeRequest {
	this := BridgeRequest{}
	var playRingtone bool = false
	this.PlayRingtone = &playRingtone
	var ringtone string = "us"
	this.Ringtone = &ringtone
	var recordChannels string = "dual"
	this.RecordChannels = &recordChannels
	var recordFormat string = "mp3"
	this.RecordFormat = &recordFormat
	var recordMaxLength int32 = 0
	this.RecordMaxLength = &recordMaxLength
	var recordTimeoutSecs int32 = 0
	this.RecordTimeoutSecs = &recordTimeoutSecs
	var recordTrack string = "both"
	this.RecordTrack = &recordTrack
	var muteDtmf string = "none"
	this.MuteDtmf = &muteDtmf
	return &this
}

// GetCallControlId returns the CallControlId field value
func (o *BridgeRequest) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *BridgeRequest) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *BridgeRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *BridgeRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *BridgeRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *BridgeRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *BridgeRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *BridgeRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetQueue returns the Queue field value if set, zero value otherwise.
func (o *BridgeRequest) GetQueue() string {
	if o == nil || IsNil(o.Queue) {
		var ret string
		return ret
	}
	return *o.Queue
}

// GetQueueOk returns a tuple with the Queue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetQueueOk() (*string, bool) {
	if o == nil || IsNil(o.Queue) {
		return nil, false
	}
	return o.Queue, true
}

// HasQueue returns a boolean if a field has been set.
func (o *BridgeRequest) HasQueue() bool {
	if o != nil && !IsNil(o.Queue) {
		return true
	}

	return false
}

// SetQueue gets a reference to the given string and assigns it to the Queue field.
func (o *BridgeRequest) SetQueue(v string) {
	o.Queue = &v
}

// GetVideoRoomId returns the VideoRoomId field value if set, zero value otherwise.
func (o *BridgeRequest) GetVideoRoomId() string {
	if o == nil || IsNil(o.VideoRoomId) {
		var ret string
		return ret
	}
	return *o.VideoRoomId
}

// GetVideoRoomIdOk returns a tuple with the VideoRoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetVideoRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.VideoRoomId) {
		return nil, false
	}
	return o.VideoRoomId, true
}

// HasVideoRoomId returns a boolean if a field has been set.
func (o *BridgeRequest) HasVideoRoomId() bool {
	if o != nil && !IsNil(o.VideoRoomId) {
		return true
	}

	return false
}

// SetVideoRoomId gets a reference to the given string and assigns it to the VideoRoomId field.
func (o *BridgeRequest) SetVideoRoomId(v string) {
	o.VideoRoomId = &v
}

// GetVideoRoomContext returns the VideoRoomContext field value if set, zero value otherwise.
func (o *BridgeRequest) GetVideoRoomContext() string {
	if o == nil || IsNil(o.VideoRoomContext) {
		var ret string
		return ret
	}
	return *o.VideoRoomContext
}

// GetVideoRoomContextOk returns a tuple with the VideoRoomContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetVideoRoomContextOk() (*string, bool) {
	if o == nil || IsNil(o.VideoRoomContext) {
		return nil, false
	}
	return o.VideoRoomContext, true
}

// HasVideoRoomContext returns a boolean if a field has been set.
func (o *BridgeRequest) HasVideoRoomContext() bool {
	if o != nil && !IsNil(o.VideoRoomContext) {
		return true
	}

	return false
}

// SetVideoRoomContext gets a reference to the given string and assigns it to the VideoRoomContext field.
func (o *BridgeRequest) SetVideoRoomContext(v string) {
	o.VideoRoomContext = &v
}

// GetParkAfterUnbridge returns the ParkAfterUnbridge field value if set, zero value otherwise.
func (o *BridgeRequest) GetParkAfterUnbridge() string {
	if o == nil || IsNil(o.ParkAfterUnbridge) {
		var ret string
		return ret
	}
	return *o.ParkAfterUnbridge
}

// GetParkAfterUnbridgeOk returns a tuple with the ParkAfterUnbridge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetParkAfterUnbridgeOk() (*string, bool) {
	if o == nil || IsNil(o.ParkAfterUnbridge) {
		return nil, false
	}
	return o.ParkAfterUnbridge, true
}

// HasParkAfterUnbridge returns a boolean if a field has been set.
func (o *BridgeRequest) HasParkAfterUnbridge() bool {
	if o != nil && !IsNil(o.ParkAfterUnbridge) {
		return true
	}

	return false
}

// SetParkAfterUnbridge gets a reference to the given string and assigns it to the ParkAfterUnbridge field.
func (o *BridgeRequest) SetParkAfterUnbridge(v string) {
	o.ParkAfterUnbridge = &v
}

// GetPlayRingtone returns the PlayRingtone field value if set, zero value otherwise.
func (o *BridgeRequest) GetPlayRingtone() bool {
	if o == nil || IsNil(o.PlayRingtone) {
		var ret bool
		return ret
	}
	return *o.PlayRingtone
}

// GetPlayRingtoneOk returns a tuple with the PlayRingtone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetPlayRingtoneOk() (*bool, bool) {
	if o == nil || IsNil(o.PlayRingtone) {
		return nil, false
	}
	return o.PlayRingtone, true
}

// HasPlayRingtone returns a boolean if a field has been set.
func (o *BridgeRequest) HasPlayRingtone() bool {
	if o != nil && !IsNil(o.PlayRingtone) {
		return true
	}

	return false
}

// SetPlayRingtone gets a reference to the given bool and assigns it to the PlayRingtone field.
func (o *BridgeRequest) SetPlayRingtone(v bool) {
	o.PlayRingtone = &v
}

// GetRingtone returns the Ringtone field value if set, zero value otherwise.
func (o *BridgeRequest) GetRingtone() string {
	if o == nil || IsNil(o.Ringtone) {
		var ret string
		return ret
	}
	return *o.Ringtone
}

// GetRingtoneOk returns a tuple with the Ringtone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRingtoneOk() (*string, bool) {
	if o == nil || IsNil(o.Ringtone) {
		return nil, false
	}
	return o.Ringtone, true
}

// HasRingtone returns a boolean if a field has been set.
func (o *BridgeRequest) HasRingtone() bool {
	if o != nil && !IsNil(o.Ringtone) {
		return true
	}

	return false
}

// SetRingtone gets a reference to the given string and assigns it to the Ringtone field.
func (o *BridgeRequest) SetRingtone(v string) {
	o.Ringtone = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecord() string {
	if o == nil || IsNil(o.Record) {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordOk() (*string, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *BridgeRequest) SetRecord(v string) {
	o.Record = &v
}

// GetRecordChannels returns the RecordChannels field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordChannels() string {
	if o == nil || IsNil(o.RecordChannels) {
		var ret string
		return ret
	}
	return *o.RecordChannels
}

// GetRecordChannelsOk returns a tuple with the RecordChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.RecordChannels) {
		return nil, false
	}
	return o.RecordChannels, true
}

// HasRecordChannels returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordChannels() bool {
	if o != nil && !IsNil(o.RecordChannels) {
		return true
	}

	return false
}

// SetRecordChannels gets a reference to the given string and assigns it to the RecordChannels field.
func (o *BridgeRequest) SetRecordChannels(v string) {
	o.RecordChannels = &v
}

// GetRecordFormat returns the RecordFormat field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordFormat() string {
	if o == nil || IsNil(o.RecordFormat) {
		var ret string
		return ret
	}
	return *o.RecordFormat
}

// GetRecordFormatOk returns a tuple with the RecordFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordFormatOk() (*string, bool) {
	if o == nil || IsNil(o.RecordFormat) {
		return nil, false
	}
	return o.RecordFormat, true
}

// HasRecordFormat returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordFormat() bool {
	if o != nil && !IsNil(o.RecordFormat) {
		return true
	}

	return false
}

// SetRecordFormat gets a reference to the given string and assigns it to the RecordFormat field.
func (o *BridgeRequest) SetRecordFormat(v string) {
	o.RecordFormat = &v
}

// GetRecordMaxLength returns the RecordMaxLength field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordMaxLength() int32 {
	if o == nil || IsNil(o.RecordMaxLength) {
		var ret int32
		return ret
	}
	return *o.RecordMaxLength
}

// GetRecordMaxLengthOk returns a tuple with the RecordMaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordMaxLength) {
		return nil, false
	}
	return o.RecordMaxLength, true
}

// HasRecordMaxLength returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordMaxLength() bool {
	if o != nil && !IsNil(o.RecordMaxLength) {
		return true
	}

	return false
}

// SetRecordMaxLength gets a reference to the given int32 and assigns it to the RecordMaxLength field.
func (o *BridgeRequest) SetRecordMaxLength(v int32) {
	o.RecordMaxLength = &v
}

// GetRecordTimeoutSecs returns the RecordTimeoutSecs field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordTimeoutSecs() int32 {
	if o == nil || IsNil(o.RecordTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.RecordTimeoutSecs
}

// GetRecordTimeoutSecsOk returns a tuple with the RecordTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordTimeoutSecs) {
		return nil, false
	}
	return o.RecordTimeoutSecs, true
}

// HasRecordTimeoutSecs returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordTimeoutSecs() bool {
	if o != nil && !IsNil(o.RecordTimeoutSecs) {
		return true
	}

	return false
}

// SetRecordTimeoutSecs gets a reference to the given int32 and assigns it to the RecordTimeoutSecs field.
func (o *BridgeRequest) SetRecordTimeoutSecs(v int32) {
	o.RecordTimeoutSecs = &v
}

// GetRecordTrack returns the RecordTrack field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordTrack() string {
	if o == nil || IsNil(o.RecordTrack) {
		var ret string
		return ret
	}
	return *o.RecordTrack
}

// GetRecordTrackOk returns a tuple with the RecordTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordTrackOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTrack) {
		return nil, false
	}
	return o.RecordTrack, true
}

// HasRecordTrack returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordTrack() bool {
	if o != nil && !IsNil(o.RecordTrack) {
		return true
	}

	return false
}

// SetRecordTrack gets a reference to the given string and assigns it to the RecordTrack field.
func (o *BridgeRequest) SetRecordTrack(v string) {
	o.RecordTrack = &v
}

// GetRecordTrim returns the RecordTrim field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordTrim() string {
	if o == nil || IsNil(o.RecordTrim) {
		var ret string
		return ret
	}
	return *o.RecordTrim
}

// GetRecordTrimOk returns a tuple with the RecordTrim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordTrimOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTrim) {
		return nil, false
	}
	return o.RecordTrim, true
}

// HasRecordTrim returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordTrim() bool {
	if o != nil && !IsNil(o.RecordTrim) {
		return true
	}

	return false
}

// SetRecordTrim gets a reference to the given string and assigns it to the RecordTrim field.
func (o *BridgeRequest) SetRecordTrim(v string) {
	o.RecordTrim = &v
}

// GetRecordCustomFileName returns the RecordCustomFileName field value if set, zero value otherwise.
func (o *BridgeRequest) GetRecordCustomFileName() string {
	if o == nil || IsNil(o.RecordCustomFileName) {
		var ret string
		return ret
	}
	return *o.RecordCustomFileName
}

// GetRecordCustomFileNameOk returns a tuple with the RecordCustomFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetRecordCustomFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.RecordCustomFileName) {
		return nil, false
	}
	return o.RecordCustomFileName, true
}

// HasRecordCustomFileName returns a boolean if a field has been set.
func (o *BridgeRequest) HasRecordCustomFileName() bool {
	if o != nil && !IsNil(o.RecordCustomFileName) {
		return true
	}

	return false
}

// SetRecordCustomFileName gets a reference to the given string and assigns it to the RecordCustomFileName field.
func (o *BridgeRequest) SetRecordCustomFileName(v string) {
	o.RecordCustomFileName = &v
}

// GetMuteDtmf returns the MuteDtmf field value if set, zero value otherwise.
func (o *BridgeRequest) GetMuteDtmf() string {
	if o == nil || IsNil(o.MuteDtmf) {
		var ret string
		return ret
	}
	return *o.MuteDtmf
}

// GetMuteDtmfOk returns a tuple with the MuteDtmf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRequest) GetMuteDtmfOk() (*string, bool) {
	if o == nil || IsNil(o.MuteDtmf) {
		return nil, false
	}
	return o.MuteDtmf, true
}

// HasMuteDtmf returns a boolean if a field has been set.
func (o *BridgeRequest) HasMuteDtmf() bool {
	if o != nil && !IsNil(o.MuteDtmf) {
		return true
	}

	return false
}

// SetMuteDtmf gets a reference to the given string and assigns it to the MuteDtmf field.
func (o *BridgeRequest) SetMuteDtmf(v string) {
	o.MuteDtmf = &v
}

func (o BridgeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BridgeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_control_id"] = o.CallControlId
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.Queue) {
		toSerialize["queue"] = o.Queue
	}
	if !IsNil(o.VideoRoomId) {
		toSerialize["video_room_id"] = o.VideoRoomId
	}
	if !IsNil(o.VideoRoomContext) {
		toSerialize["video_room_context"] = o.VideoRoomContext
	}
	if !IsNil(o.ParkAfterUnbridge) {
		toSerialize["park_after_unbridge"] = o.ParkAfterUnbridge
	}
	if !IsNil(o.PlayRingtone) {
		toSerialize["play_ringtone"] = o.PlayRingtone
	}
	if !IsNil(o.Ringtone) {
		toSerialize["ringtone"] = o.Ringtone
	}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.RecordChannels) {
		toSerialize["record_channels"] = o.RecordChannels
	}
	if !IsNil(o.RecordFormat) {
		toSerialize["record_format"] = o.RecordFormat
	}
	if !IsNil(o.RecordMaxLength) {
		toSerialize["record_max_length"] = o.RecordMaxLength
	}
	if !IsNil(o.RecordTimeoutSecs) {
		toSerialize["record_timeout_secs"] = o.RecordTimeoutSecs
	}
	if !IsNil(o.RecordTrack) {
		toSerialize["record_track"] = o.RecordTrack
	}
	if !IsNil(o.RecordTrim) {
		toSerialize["record_trim"] = o.RecordTrim
	}
	if !IsNil(o.RecordCustomFileName) {
		toSerialize["record_custom_file_name"] = o.RecordCustomFileName
	}
	if !IsNil(o.MuteDtmf) {
		toSerialize["mute_dtmf"] = o.MuteDtmf
	}
	return toSerialize, nil
}

func (o *BridgeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_control_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBridgeRequest := _BridgeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBridgeRequest)

	if err != nil {
		return err
	}

	*o = BridgeRequest(varBridgeRequest)

	return err
}

type NullableBridgeRequest struct {
	value *BridgeRequest
	isSet bool
}

func (v NullableBridgeRequest) Get() *BridgeRequest {
	return v.value
}

func (v *NullableBridgeRequest) Set(val *BridgeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgeRequest(val *BridgeRequest) *NullableBridgeRequest {
	return &NullableBridgeRequest{value: val, isSet: true}
}

func (v NullableBridgeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


