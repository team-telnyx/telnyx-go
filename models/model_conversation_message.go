/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ConversationMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationMessage{}

// ConversationMessage struct for ConversationMessage
type ConversationMessage struct {
	// The role of the message sender.
	Role string `json:"role"`
	// The message content. Can be null for tool calls.
	Text string `json:"text"`
	// Optional tool calls made by the assistant.
	ToolCalls []ConversationMessageToolCallsInner `json:"tool_calls,omitempty"`
	// The datetime the message was created on the conversation. This does not necesarily correspond to the time the message was sent. The best field to use to determine the time the end user experienced the message is `sent_at`.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The datetime the message was sent to the end user.
	SentAt *time.Time `json:"sent_at,omitempty"`
}

type _ConversationMessage ConversationMessage

// NewConversationMessage instantiates a new ConversationMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationMessage(role string, text string) *ConversationMessage {
	this := ConversationMessage{}
	this.Role = role
	this.Text = text
	return &this
}

// NewConversationMessageWithDefaults instantiates a new ConversationMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationMessageWithDefaults() *ConversationMessage {
	this := ConversationMessage{}
	return &this
}

// GetRole returns the Role field value
func (o *ConversationMessage) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ConversationMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ConversationMessage) SetRole(v string) {
	o.Role = v
}

// GetText returns the Text field value
func (o *ConversationMessage) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ConversationMessage) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ConversationMessage) SetText(v string) {
	o.Text = v
}

// GetToolCalls returns the ToolCalls field value if set, zero value otherwise.
func (o *ConversationMessage) GetToolCalls() []ConversationMessageToolCallsInner {
	if o == nil || IsNil(o.ToolCalls) {
		var ret []ConversationMessageToolCallsInner
		return ret
	}
	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationMessage) GetToolCallsOk() ([]ConversationMessageToolCallsInner, bool) {
	if o == nil || IsNil(o.ToolCalls) {
		return nil, false
	}
	return o.ToolCalls, true
}

// HasToolCalls returns a boolean if a field has been set.
func (o *ConversationMessage) HasToolCalls() bool {
	if o != nil && !IsNil(o.ToolCalls) {
		return true
	}

	return false
}

// SetToolCalls gets a reference to the given []ConversationMessageToolCallsInner and assigns it to the ToolCalls field.
func (o *ConversationMessage) SetToolCalls(v []ConversationMessageToolCallsInner) {
	o.ToolCalls = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ConversationMessage) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationMessage) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConversationMessage) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ConversationMessage) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *ConversationMessage) GetSentAt() time.Time {
	if o == nil || IsNil(o.SentAt) {
		var ret time.Time
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationMessage) GetSentAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *ConversationMessage) HasSentAt() bool {
	if o != nil && !IsNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given time.Time and assigns it to the SentAt field.
func (o *ConversationMessage) SetSentAt(v time.Time) {
	o.SentAt = &v
}

func (o ConversationMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["text"] = o.Text
	if !IsNil(o.ToolCalls) {
		toSerialize["tool_calls"] = o.ToolCalls
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.SentAt) {
		toSerialize["sent_at"] = o.SentAt
	}
	return toSerialize, nil
}

func (o *ConversationMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversationMessage := _ConversationMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversationMessage)

	if err != nil {
		return err
	}

	*o = ConversationMessage(varConversationMessage)

	return err
}

type NullableConversationMessage struct {
	value *ConversationMessage
	isSet bool
}

func (v NullableConversationMessage) Get() *ConversationMessage {
	return v.value
}

func (v *NullableConversationMessage) Set(val *ConversationMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationMessage(val *ConversationMessage) *NullableConversationMessage {
	return &NullableConversationMessage{value: val, isSet: true}
}

func (v NullableConversationMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


