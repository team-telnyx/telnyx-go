/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the PortingAdditionalDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortingAdditionalDocument{}

// PortingAdditionalDocument struct for PortingAdditionalDocument
type PortingAdditionalDocument struct {
	// Uniquely identifies this additional document
	Id *string `json:"id,omitempty"`
	// Identifies the type of additional document
	DocumentType *string `json:"document_type,omitempty"`
	// Identifies the associated document
	DocumentId *string `json:"document_id,omitempty"`
	// The filename of the related document.
	Filename *string `json:"filename,omitempty"`
	// The content type of the related document.
	ContentType *string `json:"content_type,omitempty"`
	// Identifies the associated porting order
	PortingOrderId *string `json:"porting_order_id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewPortingAdditionalDocument instantiates a new PortingAdditionalDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortingAdditionalDocument() *PortingAdditionalDocument {
	this := PortingAdditionalDocument{}
	return &this
}

// NewPortingAdditionalDocumentWithDefaults instantiates a new PortingAdditionalDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortingAdditionalDocumentWithDefaults() *PortingAdditionalDocument {
	this := PortingAdditionalDocument{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortingAdditionalDocument) SetId(v string) {
	o.Id = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetDocumentType() string {
	if o == nil || IsNil(o.DocumentType) {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetDocumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *PortingAdditionalDocument) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *PortingAdditionalDocument) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *PortingAdditionalDocument) SetFilename(v string) {
	o.Filename = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *PortingAdditionalDocument) SetContentType(v string) {
	o.ContentType = &v
}

// GetPortingOrderId returns the PortingOrderId field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetPortingOrderId() string {
	if o == nil || IsNil(o.PortingOrderId) {
		var ret string
		return ret
	}
	return *o.PortingOrderId
}

// GetPortingOrderIdOk returns a tuple with the PortingOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetPortingOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortingOrderId) {
		return nil, false
	}
	return o.PortingOrderId, true
}

// HasPortingOrderId returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasPortingOrderId() bool {
	if o != nil && !IsNil(o.PortingOrderId) {
		return true
	}

	return false
}

// SetPortingOrderId gets a reference to the given string and assigns it to the PortingOrderId field.
func (o *PortingAdditionalDocument) SetPortingOrderId(v string) {
	o.PortingOrderId = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *PortingAdditionalDocument) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PortingAdditionalDocument) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PortingAdditionalDocument) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingAdditionalDocument) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PortingAdditionalDocument) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PortingAdditionalDocument) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o PortingAdditionalDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortingAdditionalDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DocumentType) {
		toSerialize["document_type"] = o.DocumentType
	}
	if !IsNil(o.DocumentId) {
		toSerialize["document_id"] = o.DocumentId
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.PortingOrderId) {
		toSerialize["porting_order_id"] = o.PortingOrderId
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullablePortingAdditionalDocument struct {
	value *PortingAdditionalDocument
	isSet bool
}

func (v NullablePortingAdditionalDocument) Get() *PortingAdditionalDocument {
	return v.value
}

func (v *NullablePortingAdditionalDocument) Set(val *PortingAdditionalDocument) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingAdditionalDocument) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingAdditionalDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingAdditionalDocument(val *PortingAdditionalDocument) *NullablePortingAdditionalDocument {
	return &NullablePortingAdditionalDocument{value: val, isSet: true}
}

func (v NullablePortingAdditionalDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingAdditionalDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


