/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSRichCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSRichCard{}

// RCSRichCard struct for RCSRichCard
type RCSRichCard struct {
	CarouselCard *RCSCarouselCard `json:"carousel_card,omitempty"`
	StandaloneCard *RCSStandaloneCard `json:"standalone_card,omitempty"`
}

// NewRCSRichCard instantiates a new RCSRichCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSRichCard() *RCSRichCard {
	this := RCSRichCard{}
	return &this
}

// NewRCSRichCardWithDefaults instantiates a new RCSRichCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSRichCardWithDefaults() *RCSRichCard {
	this := RCSRichCard{}
	return &this
}

// GetCarouselCard returns the CarouselCard field value if set, zero value otherwise.
func (o *RCSRichCard) GetCarouselCard() RCSCarouselCard {
	if o == nil || IsNil(o.CarouselCard) {
		var ret RCSCarouselCard
		return ret
	}
	return *o.CarouselCard
}

// GetCarouselCardOk returns a tuple with the CarouselCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSRichCard) GetCarouselCardOk() (*RCSCarouselCard, bool) {
	if o == nil || IsNil(o.CarouselCard) {
		return nil, false
	}
	return o.CarouselCard, true
}

// HasCarouselCard returns a boolean if a field has been set.
func (o *RCSRichCard) HasCarouselCard() bool {
	if o != nil && !IsNil(o.CarouselCard) {
		return true
	}

	return false
}

// SetCarouselCard gets a reference to the given RCSCarouselCard and assigns it to the CarouselCard field.
func (o *RCSRichCard) SetCarouselCard(v RCSCarouselCard) {
	o.CarouselCard = &v
}

// GetStandaloneCard returns the StandaloneCard field value if set, zero value otherwise.
func (o *RCSRichCard) GetStandaloneCard() RCSStandaloneCard {
	if o == nil || IsNil(o.StandaloneCard) {
		var ret RCSStandaloneCard
		return ret
	}
	return *o.StandaloneCard
}

// GetStandaloneCardOk returns a tuple with the StandaloneCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSRichCard) GetStandaloneCardOk() (*RCSStandaloneCard, bool) {
	if o == nil || IsNil(o.StandaloneCard) {
		return nil, false
	}
	return o.StandaloneCard, true
}

// HasStandaloneCard returns a boolean if a field has been set.
func (o *RCSRichCard) HasStandaloneCard() bool {
	if o != nil && !IsNil(o.StandaloneCard) {
		return true
	}

	return false
}

// SetStandaloneCard gets a reference to the given RCSStandaloneCard and assigns it to the StandaloneCard field.
func (o *RCSRichCard) SetStandaloneCard(v RCSStandaloneCard) {
	o.StandaloneCard = &v
}

func (o RCSRichCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSRichCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CarouselCard) {
		toSerialize["carousel_card"] = o.CarouselCard
	}
	if !IsNil(o.StandaloneCard) {
		toSerialize["standalone_card"] = o.StandaloneCard
	}
	return toSerialize, nil
}

type NullableRCSRichCard struct {
	value *RCSRichCard
	isSet bool
}

func (v NullableRCSRichCard) Get() *RCSRichCard {
	return v.value
}

func (v *NullableRCSRichCard) Set(val *RCSRichCard) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSRichCard) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSRichCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSRichCard(val *RCSRichCard) *NullableRCSRichCard {
	return &NullableRCSRichCard{value: val, isSet: true}
}

func (v NullableRCSRichCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSRichCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


