/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// PortabilityStatus Specifies whether Telnyx is able to confirm portability this number in the United States & Canada. International phone numbers are provisional by default.
type PortabilityStatus string

// List of PortabilityStatus
const (
	PENDING PortabilityStatus = "pending"
	CONFIRMED PortabilityStatus = "confirmed"
	PROVISIONAL PortabilityStatus = "provisional"
)

// All allowed values of PortabilityStatus enum
var AllowedPortabilityStatusEnumValues = []PortabilityStatus{
	"pending",
	"confirmed",
	"provisional",
}

func (v *PortabilityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortabilityStatus(value)
	for _, existing := range AllowedPortabilityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortabilityStatus", value)
}

// NewPortabilityStatusFromValue returns a pointer to a valid PortabilityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortabilityStatusFromValue(v string) (*PortabilityStatus, error) {
	ev := PortabilityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortabilityStatus: valid values are %v", v, AllowedPortabilityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortabilityStatus) IsValid() bool {
	for _, existing := range AllowedPortabilityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortabilityStatus value
func (v PortabilityStatus) Ptr() *PortabilityStatus {
	return &v
}

type NullablePortabilityStatus struct {
	value *PortabilityStatus
	isSet bool
}

func (v NullablePortabilityStatus) Get() *PortabilityStatus {
	return v.value
}

func (v *NullablePortabilityStatus) Set(val *PortabilityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePortabilityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePortabilityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortabilityStatus(val *PortabilityStatus) *NullablePortabilityStatus {
	return &NullablePortabilityStatus{value: val, isSet: true}
}

func (v NullablePortabilityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortabilityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

