/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// ConversationChannelType the model 'ConversationChannelType'
type ConversationChannelType string

// List of ConversationChannelType
const (
	PHONE_CALL ConversationChannelType = "phone_call"
	SMS_CHAT ConversationChannelType = "sms_chat"
)

// All allowed values of ConversationChannelType enum
var AllowedConversationChannelTypeEnumValues = []ConversationChannelType{
	"phone_call",
	"sms_chat",
}

func (v *ConversationChannelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConversationChannelType(value)
	for _, existing := range AllowedConversationChannelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConversationChannelType", value)
}

// NewConversationChannelTypeFromValue returns a pointer to a valid ConversationChannelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConversationChannelTypeFromValue(v string) (*ConversationChannelType, error) {
	ev := ConversationChannelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConversationChannelType: valid values are %v", v, AllowedConversationChannelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConversationChannelType) IsValid() bool {
	for _, existing := range AllowedConversationChannelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConversationChannelType value
func (v ConversationChannelType) Ptr() *ConversationChannelType {
	return &v
}

type NullableConversationChannelType struct {
	value *ConversationChannelType
	isSet bool
}

func (v NullableConversationChannelType) Get() *ConversationChannelType {
	return v.value
}

func (v *NullableConversationChannelType) Set(val *ConversationChannelType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationChannelType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationChannelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationChannelType(val *ConversationChannelType) *NullableConversationChannelType {
	return &NullableConversationChannelType{value: val, isSet: true}
}

func (v NullableConversationChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationChannelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

