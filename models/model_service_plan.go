/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// ServicePlan Indicates the coverage of the termination regions.
type ServicePlan string

// List of ServicePlan
const (
	GLOBAL ServicePlan = "global"
)

// All allowed values of ServicePlan enum
var AllowedServicePlanEnumValues = []ServicePlan{
	"global",
}

func (v *ServicePlan) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServicePlan(value)
	for _, existing := range AllowedServicePlanEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServicePlan", value)
}

// NewServicePlanFromValue returns a pointer to a valid ServicePlan
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServicePlanFromValue(v string) (*ServicePlan, error) {
	ev := ServicePlan(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServicePlan: valid values are %v", v, AllowedServicePlanEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServicePlan) IsValid() bool {
	for _, existing := range AllowedServicePlanEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServicePlan value
func (v ServicePlan) Ptr() *ServicePlan {
	return &v
}

type NullableServicePlan struct {
	value *ServicePlan
	isSet bool
}

func (v NullableServicePlan) Get() *ServicePlan {
	return v.value
}

func (v *NullableServicePlan) Set(val *ServicePlan) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlan) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlan(val *ServicePlan) *NullableServicePlan {
	return &NullableServicePlan{value: val, isSet: true}
}

func (v NullableServicePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

