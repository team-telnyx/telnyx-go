/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserBundleSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserBundleSummary{}

// UserBundleSummary struct for UserBundleSummary
type UserBundleSummary struct {
	Id string `json:"id"`
	Active bool `json:"active"`
	UserId string `json:"user_id"`
	CreatedAt string `json:"created_at"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	BillingBundle BillingBundleSummary `json:"billing_bundle"`
	Resources []UserBundleResourceSchema `json:"resources"`
}

type _UserBundleSummary UserBundleSummary

// NewUserBundleSummary instantiates a new UserBundleSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBundleSummary(id string, active bool, userId string, createdAt string, billingBundle BillingBundleSummary, resources []UserBundleResourceSchema) *UserBundleSummary {
	this := UserBundleSummary{}
	this.Id = id
	this.Active = active
	this.UserId = userId
	this.CreatedAt = createdAt
	this.BillingBundle = billingBundle
	this.Resources = resources
	return &this
}

// NewUserBundleSummaryWithDefaults instantiates a new UserBundleSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBundleSummaryWithDefaults() *UserBundleSummary {
	this := UserBundleSummary{}
	return &this
}

// GetId returns the Id field value
func (o *UserBundleSummary) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserBundleSummary) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value
func (o *UserBundleSummary) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *UserBundleSummary) SetActive(v bool) {
	o.Active = v
}

// GetUserId returns the UserId field value
func (o *UserBundleSummary) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserBundleSummary) SetUserId(v string) {
	o.UserId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserBundleSummary) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserBundleSummary) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserBundleSummary) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserBundleSummary) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UserBundleSummary) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetBillingBundle returns the BillingBundle field value
func (o *UserBundleSummary) GetBillingBundle() BillingBundleSummary {
	if o == nil {
		var ret BillingBundleSummary
		return ret
	}

	return o.BillingBundle
}

// GetBillingBundleOk returns a tuple with the BillingBundle field value
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetBillingBundleOk() (*BillingBundleSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingBundle, true
}

// SetBillingBundle sets field value
func (o *UserBundleSummary) SetBillingBundle(v BillingBundleSummary) {
	o.BillingBundle = v
}

// GetResources returns the Resources field value
func (o *UserBundleSummary) GetResources() []UserBundleResourceSchema {
	if o == nil {
		var ret []UserBundleResourceSchema
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *UserBundleSummary) GetResourcesOk() ([]UserBundleResourceSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *UserBundleSummary) SetResources(v []UserBundleResourceSchema) {
	o.Resources = v
}

func (o UserBundleSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBundleSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["active"] = o.Active
	toSerialize["user_id"] = o.UserId
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["billing_bundle"] = o.BillingBundle
	toSerialize["resources"] = o.Resources
	return toSerialize, nil
}

func (o *UserBundleSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"active",
		"user_id",
		"created_at",
		"billing_bundle",
		"resources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserBundleSummary := _UserBundleSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserBundleSummary)

	if err != nil {
		return err
	}

	*o = UserBundleSummary(varUserBundleSummary)

	return err
}

type NullableUserBundleSummary struct {
	value *UserBundleSummary
	isSet bool
}

func (v NullableUserBundleSummary) Get() *UserBundleSummary {
	return v.value
}

func (v *NullableUserBundleSummary) Set(val *UserBundleSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBundleSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBundleSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBundleSummary(val *UserBundleSummary) *NullableUserBundleSummary {
	return &NullableUserBundleSummary{value: val, isSet: true}
}

func (v NullableUserBundleSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBundleSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


