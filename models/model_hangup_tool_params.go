/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the HangupToolParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HangupToolParams{}

// HangupToolParams struct for HangupToolParams
type HangupToolParams struct {
	// The description of the function that will be passed to the assistant.
	Description *string `json:"description,omitempty"`
}

// NewHangupToolParams instantiates a new HangupToolParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHangupToolParams() *HangupToolParams {
	this := HangupToolParams{}
	var description string = "This tool is used to hang up the call."
	this.Description = &description
	return &this
}

// NewHangupToolParamsWithDefaults instantiates a new HangupToolParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHangupToolParamsWithDefaults() *HangupToolParams {
	this := HangupToolParams{}
	var description string = "This tool is used to hang up the call."
	this.Description = &description
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HangupToolParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HangupToolParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HangupToolParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HangupToolParams) SetDescription(v string) {
	o.Description = &v
}

func (o HangupToolParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HangupToolParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableHangupToolParams struct {
	value *HangupToolParams
	isSet bool
}

func (v NullableHangupToolParams) Get() *HangupToolParams {
	return v.value
}

func (v *NullableHangupToolParams) Set(val *HangupToolParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHangupToolParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHangupToolParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHangupToolParams(val *HangupToolParams) *NullableHangupToolParams {
	return &NullableHangupToolParams{value: val, isSet: true}
}

func (v NullableHangupToolParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHangupToolParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


