/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// CloudflareSyncStatus An enumeration.
type CloudflareSyncStatus string

// List of CloudflareSyncStatus
const (
	PENDING CloudflareSyncStatus = "pending"
	ADDED CloudflareSyncStatus = "added"
)

// All allowed values of CloudflareSyncStatus enum
var AllowedCloudflareSyncStatusEnumValues = []CloudflareSyncStatus{
	"pending",
	"added",
}

func (v *CloudflareSyncStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudflareSyncStatus(value)
	for _, existing := range AllowedCloudflareSyncStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudflareSyncStatus", value)
}

// NewCloudflareSyncStatusFromValue returns a pointer to a valid CloudflareSyncStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudflareSyncStatusFromValue(v string) (*CloudflareSyncStatus, error) {
	ev := CloudflareSyncStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudflareSyncStatus: valid values are %v", v, AllowedCloudflareSyncStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudflareSyncStatus) IsValid() bool {
	for _, existing := range AllowedCloudflareSyncStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudflareSyncStatus value
func (v CloudflareSyncStatus) Ptr() *CloudflareSyncStatus {
	return &v
}

type NullableCloudflareSyncStatus struct {
	value *CloudflareSyncStatus
	isSet bool
}

func (v NullableCloudflareSyncStatus) Get() *CloudflareSyncStatus {
	return v.value
}

func (v *NullableCloudflareSyncStatus) Set(val *CloudflareSyncStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudflareSyncStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudflareSyncStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudflareSyncStatus(val *CloudflareSyncStatus) *NullableCloudflareSyncStatus {
	return &NullableCloudflareSyncStatus{value: val, isSet: true}
}

func (v NullableCloudflareSyncStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudflareSyncStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

