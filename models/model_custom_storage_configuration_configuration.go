/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CustomStorageConfigurationConfiguration - struct for CustomStorageConfigurationConfiguration
type CustomStorageConfigurationConfiguration struct {
	AzureConfigurationData *AzureConfigurationData
	GCSConfigurationData *GCSConfigurationData
	S3ConfigurationData *S3ConfigurationData
}

// AzureConfigurationDataAsCustomStorageConfigurationConfiguration is a convenience function that returns AzureConfigurationData wrapped in CustomStorageConfigurationConfiguration
func AzureConfigurationDataAsCustomStorageConfigurationConfiguration(v *AzureConfigurationData) CustomStorageConfigurationConfiguration {
	return CustomStorageConfigurationConfiguration{
		AzureConfigurationData: v,
	}
}

// GCSConfigurationDataAsCustomStorageConfigurationConfiguration is a convenience function that returns GCSConfigurationData wrapped in CustomStorageConfigurationConfiguration
func GCSConfigurationDataAsCustomStorageConfigurationConfiguration(v *GCSConfigurationData) CustomStorageConfigurationConfiguration {
	return CustomStorageConfigurationConfiguration{
		GCSConfigurationData: v,
	}
}

// S3ConfigurationDataAsCustomStorageConfigurationConfiguration is a convenience function that returns S3ConfigurationData wrapped in CustomStorageConfigurationConfiguration
func S3ConfigurationDataAsCustomStorageConfigurationConfiguration(v *S3ConfigurationData) CustomStorageConfigurationConfiguration {
	return CustomStorageConfigurationConfiguration{
		S3ConfigurationData: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CustomStorageConfigurationConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AzureConfigurationData
	err = newStrictDecoder(data).Decode(&dst.AzureConfigurationData)
	if err == nil {
		jsonAzureConfigurationData, _ := json.Marshal(dst.AzureConfigurationData)
		if string(jsonAzureConfigurationData) == "{}" { // empty struct
			dst.AzureConfigurationData = nil
		} else {
			if err = validator.Validate(dst.AzureConfigurationData); err != nil {
				dst.AzureConfigurationData = nil
			} else {
				match++
			}
		}
	} else {
		dst.AzureConfigurationData = nil
	}

	// try to unmarshal data into GCSConfigurationData
	err = newStrictDecoder(data).Decode(&dst.GCSConfigurationData)
	if err == nil {
		jsonGCSConfigurationData, _ := json.Marshal(dst.GCSConfigurationData)
		if string(jsonGCSConfigurationData) == "{}" { // empty struct
			dst.GCSConfigurationData = nil
		} else {
			if err = validator.Validate(dst.GCSConfigurationData); err != nil {
				dst.GCSConfigurationData = nil
			} else {
				match++
			}
		}
	} else {
		dst.GCSConfigurationData = nil
	}

	// try to unmarshal data into S3ConfigurationData
	err = newStrictDecoder(data).Decode(&dst.S3ConfigurationData)
	if err == nil {
		jsonS3ConfigurationData, _ := json.Marshal(dst.S3ConfigurationData)
		if string(jsonS3ConfigurationData) == "{}" { // empty struct
			dst.S3ConfigurationData = nil
		} else {
			if err = validator.Validate(dst.S3ConfigurationData); err != nil {
				dst.S3ConfigurationData = nil
			} else {
				match++
			}
		}
	} else {
		dst.S3ConfigurationData = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AzureConfigurationData = nil
		dst.GCSConfigurationData = nil
		dst.S3ConfigurationData = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CustomStorageConfigurationConfiguration)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CustomStorageConfigurationConfiguration)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CustomStorageConfigurationConfiguration) MarshalJSON() ([]byte, error) {
	if src.AzureConfigurationData != nil {
		return json.Marshal(&src.AzureConfigurationData)
	}

	if src.GCSConfigurationData != nil {
		return json.Marshal(&src.GCSConfigurationData)
	}

	if src.S3ConfigurationData != nil {
		return json.Marshal(&src.S3ConfigurationData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CustomStorageConfigurationConfiguration) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AzureConfigurationData != nil {
		return obj.AzureConfigurationData
	}

	if obj.GCSConfigurationData != nil {
		return obj.GCSConfigurationData
	}

	if obj.S3ConfigurationData != nil {
		return obj.S3ConfigurationData
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CustomStorageConfigurationConfiguration) GetActualInstanceValue() (interface{}) {
	if obj.AzureConfigurationData != nil {
		return *obj.AzureConfigurationData
	}

	if obj.GCSConfigurationData != nil {
		return *obj.GCSConfigurationData
	}

	if obj.S3ConfigurationData != nil {
		return *obj.S3ConfigurationData
	}

	// all schemas are nil
	return nil
}

type NullableCustomStorageConfigurationConfiguration struct {
	value *CustomStorageConfigurationConfiguration
	isSet bool
}

func (v NullableCustomStorageConfigurationConfiguration) Get() *CustomStorageConfigurationConfiguration {
	return v.value
}

func (v *NullableCustomStorageConfigurationConfiguration) Set(val *CustomStorageConfigurationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomStorageConfigurationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomStorageConfigurationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomStorageConfigurationConfiguration(val *CustomStorageConfigurationConfiguration) *NullableCustomStorageConfigurationConfiguration {
	return &NullableCustomStorageConfigurationConfiguration{value: val, isSet: true}
}

func (v NullableCustomStorageConfigurationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomStorageConfigurationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


