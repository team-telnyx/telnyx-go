/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// AnchorsiteOverride `Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.
type AnchorsiteOverride string

// List of AnchorsiteOverride
const (
	LATENCY AnchorsiteOverride = "Latency"
	CHICAGO_IL AnchorsiteOverride = "Chicago, IL"
	ASHBURN_VA AnchorsiteOverride = "Ashburn, VA"
	SAN_JOSE_CA AnchorsiteOverride = "San Jose, CA"
	SYDNEY_AUSTRALIA AnchorsiteOverride = "Sydney, Australia"
	AMSTERDAM_NETHERLANDS AnchorsiteOverride = "Amsterdam, Netherlands"
	LONDON_UK AnchorsiteOverride = "London, UK"
	TORONTO_CANADA AnchorsiteOverride = "Toronto, Canada"
	VANCOUVER_CANADA AnchorsiteOverride = "Vancouver, Canada"
	FRANKFURT_GERMANY AnchorsiteOverride = "Frankfurt, Germany"
)

// All allowed values of AnchorsiteOverride enum
var AllowedAnchorsiteOverrideEnumValues = []AnchorsiteOverride{
	"Latency",
	"Chicago, IL",
	"Ashburn, VA",
	"San Jose, CA",
	"Sydney, Australia",
	"Amsterdam, Netherlands",
	"London, UK",
	"Toronto, Canada",
	"Vancouver, Canada",
	"Frankfurt, Germany",
}

func (v *AnchorsiteOverride) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnchorsiteOverride(value)
	for _, existing := range AllowedAnchorsiteOverrideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnchorsiteOverride", value)
}

// NewAnchorsiteOverrideFromValue returns a pointer to a valid AnchorsiteOverride
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnchorsiteOverrideFromValue(v string) (*AnchorsiteOverride, error) {
	ev := AnchorsiteOverride(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnchorsiteOverride: valid values are %v", v, AllowedAnchorsiteOverrideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnchorsiteOverride) IsValid() bool {
	for _, existing := range AllowedAnchorsiteOverrideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnchorsiteOverride value
func (v AnchorsiteOverride) Ptr() *AnchorsiteOverride {
	return &v
}

type NullableAnchorsiteOverride struct {
	value *AnchorsiteOverride
	isSet bool
}

func (v NullableAnchorsiteOverride) Get() *AnchorsiteOverride {
	return v.value
}

func (v *NullableAnchorsiteOverride) Set(val *AnchorsiteOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableAnchorsiteOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableAnchorsiteOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnchorsiteOverride(val *AnchorsiteOverride) *NullableAnchorsiteOverride {
	return &NullableAnchorsiteOverride{value: val, isSet: true}
}

func (v NullableAnchorsiteOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnchorsiteOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

