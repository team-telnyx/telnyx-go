/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the NotificationSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSetting{}

// NotificationSetting struct for NotificationSetting
type NotificationSetting struct {
	// A UUID.
	Id *string `json:"id,omitempty"`
	// A UUID reference to the associated Notification Event Condition.
	NotificationEventConditionId *string `json:"notification_event_condition_id,omitempty"`
	// A UUID reference to the associated Notification Profile.
	NotificationProfileId *string `json:"notification_profile_id,omitempty"`
	AssociatedRecordType *string `json:"associated_record_type,omitempty"`
	AssociatedRecordTypeValue *string `json:"associated_record_type_value,omitempty"`
	// Most preferences apply immediately; however, other may needs to propagate.
	Status *string `json:"status,omitempty"`
	// A UUID reference to the associated Notification Channel.
	NotificationChannelId *string `json:"notification_channel_id,omitempty"`
	Parameters []NotificationSettingParametersInner `json:"parameters,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewNotificationSetting instantiates a new NotificationSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSetting() *NotificationSetting {
	this := NotificationSetting{}
	return &this
}

// NewNotificationSettingWithDefaults instantiates a new NotificationSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingWithDefaults() *NotificationSetting {
	this := NotificationSetting{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationSetting) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationSetting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationSetting) SetId(v string) {
	o.Id = &v
}

// GetNotificationEventConditionId returns the NotificationEventConditionId field value if set, zero value otherwise.
func (o *NotificationSetting) GetNotificationEventConditionId() string {
	if o == nil || IsNil(o.NotificationEventConditionId) {
		var ret string
		return ret
	}
	return *o.NotificationEventConditionId
}

// GetNotificationEventConditionIdOk returns a tuple with the NotificationEventConditionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetNotificationEventConditionIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationEventConditionId) {
		return nil, false
	}
	return o.NotificationEventConditionId, true
}

// HasNotificationEventConditionId returns a boolean if a field has been set.
func (o *NotificationSetting) HasNotificationEventConditionId() bool {
	if o != nil && !IsNil(o.NotificationEventConditionId) {
		return true
	}

	return false
}

// SetNotificationEventConditionId gets a reference to the given string and assigns it to the NotificationEventConditionId field.
func (o *NotificationSetting) SetNotificationEventConditionId(v string) {
	o.NotificationEventConditionId = &v
}

// GetNotificationProfileId returns the NotificationProfileId field value if set, zero value otherwise.
func (o *NotificationSetting) GetNotificationProfileId() string {
	if o == nil || IsNil(o.NotificationProfileId) {
		var ret string
		return ret
	}
	return *o.NotificationProfileId
}

// GetNotificationProfileIdOk returns a tuple with the NotificationProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetNotificationProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationProfileId) {
		return nil, false
	}
	return o.NotificationProfileId, true
}

// HasNotificationProfileId returns a boolean if a field has been set.
func (o *NotificationSetting) HasNotificationProfileId() bool {
	if o != nil && !IsNil(o.NotificationProfileId) {
		return true
	}

	return false
}

// SetNotificationProfileId gets a reference to the given string and assigns it to the NotificationProfileId field.
func (o *NotificationSetting) SetNotificationProfileId(v string) {
	o.NotificationProfileId = &v
}

// GetAssociatedRecordType returns the AssociatedRecordType field value if set, zero value otherwise.
func (o *NotificationSetting) GetAssociatedRecordType() string {
	if o == nil || IsNil(o.AssociatedRecordType) {
		var ret string
		return ret
	}
	return *o.AssociatedRecordType
}

// GetAssociatedRecordTypeOk returns a tuple with the AssociatedRecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetAssociatedRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssociatedRecordType) {
		return nil, false
	}
	return o.AssociatedRecordType, true
}

// HasAssociatedRecordType returns a boolean if a field has been set.
func (o *NotificationSetting) HasAssociatedRecordType() bool {
	if o != nil && !IsNil(o.AssociatedRecordType) {
		return true
	}

	return false
}

// SetAssociatedRecordType gets a reference to the given string and assigns it to the AssociatedRecordType field.
func (o *NotificationSetting) SetAssociatedRecordType(v string) {
	o.AssociatedRecordType = &v
}

// GetAssociatedRecordTypeValue returns the AssociatedRecordTypeValue field value if set, zero value otherwise.
func (o *NotificationSetting) GetAssociatedRecordTypeValue() string {
	if o == nil || IsNil(o.AssociatedRecordTypeValue) {
		var ret string
		return ret
	}
	return *o.AssociatedRecordTypeValue
}

// GetAssociatedRecordTypeValueOk returns a tuple with the AssociatedRecordTypeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetAssociatedRecordTypeValueOk() (*string, bool) {
	if o == nil || IsNil(o.AssociatedRecordTypeValue) {
		return nil, false
	}
	return o.AssociatedRecordTypeValue, true
}

// HasAssociatedRecordTypeValue returns a boolean if a field has been set.
func (o *NotificationSetting) HasAssociatedRecordTypeValue() bool {
	if o != nil && !IsNil(o.AssociatedRecordTypeValue) {
		return true
	}

	return false
}

// SetAssociatedRecordTypeValue gets a reference to the given string and assigns it to the AssociatedRecordTypeValue field.
func (o *NotificationSetting) SetAssociatedRecordTypeValue(v string) {
	o.AssociatedRecordTypeValue = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NotificationSetting) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NotificationSetting) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NotificationSetting) SetStatus(v string) {
	o.Status = &v
}

// GetNotificationChannelId returns the NotificationChannelId field value if set, zero value otherwise.
func (o *NotificationSetting) GetNotificationChannelId() string {
	if o == nil || IsNil(o.NotificationChannelId) {
		var ret string
		return ret
	}
	return *o.NotificationChannelId
}

// GetNotificationChannelIdOk returns a tuple with the NotificationChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetNotificationChannelIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationChannelId) {
		return nil, false
	}
	return o.NotificationChannelId, true
}

// HasNotificationChannelId returns a boolean if a field has been set.
func (o *NotificationSetting) HasNotificationChannelId() bool {
	if o != nil && !IsNil(o.NotificationChannelId) {
		return true
	}

	return false
}

// SetNotificationChannelId gets a reference to the given string and assigns it to the NotificationChannelId field.
func (o *NotificationSetting) SetNotificationChannelId(v string) {
	o.NotificationChannelId = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *NotificationSetting) GetParameters() []NotificationSettingParametersInner {
	if o == nil || IsNil(o.Parameters) {
		var ret []NotificationSettingParametersInner
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetParametersOk() ([]NotificationSettingParametersInner, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *NotificationSetting) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []NotificationSettingParametersInner and assigns it to the Parameters field.
func (o *NotificationSetting) SetParameters(v []NotificationSettingParametersInner) {
	o.Parameters = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NotificationSetting) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NotificationSetting) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NotificationSetting) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NotificationSetting) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NotificationSetting) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NotificationSetting) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o NotificationSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NotificationEventConditionId) {
		toSerialize["notification_event_condition_id"] = o.NotificationEventConditionId
	}
	if !IsNil(o.NotificationProfileId) {
		toSerialize["notification_profile_id"] = o.NotificationProfileId
	}
	if !IsNil(o.AssociatedRecordType) {
		toSerialize["associated_record_type"] = o.AssociatedRecordType
	}
	if !IsNil(o.AssociatedRecordTypeValue) {
		toSerialize["associated_record_type_value"] = o.AssociatedRecordTypeValue
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.NotificationChannelId) {
		toSerialize["notification_channel_id"] = o.NotificationChannelId
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableNotificationSetting struct {
	value *NotificationSetting
	isSet bool
}

func (v NullableNotificationSetting) Get() *NotificationSetting {
	return v.value
}

func (v *NullableNotificationSetting) Set(val *NotificationSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSetting(val *NotificationSetting) *NullableNotificationSetting {
	return &NullableNotificationSetting{value: val, isSet: true}
}

func (v NullableNotificationSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


