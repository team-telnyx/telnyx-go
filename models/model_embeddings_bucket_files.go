/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EmbeddingsBucketFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingsBucketFiles{}

// EmbeddingsBucketFiles struct for EmbeddingsBucketFiles
type EmbeddingsBucketFiles struct {
	Filename string `json:"filename"`
	Status string `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	LastEmbeddedAt *time.Time `json:"last_embedded_at,omitempty"`
	ErrorReason *string `json:"error_reason,omitempty"`
}

type _EmbeddingsBucketFiles EmbeddingsBucketFiles

// NewEmbeddingsBucketFiles instantiates a new EmbeddingsBucketFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingsBucketFiles(filename string, status string, createdAt time.Time) *EmbeddingsBucketFiles {
	this := EmbeddingsBucketFiles{}
	this.Filename = filename
	this.Status = status
	this.CreatedAt = createdAt
	return &this
}

// NewEmbeddingsBucketFilesWithDefaults instantiates a new EmbeddingsBucketFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingsBucketFilesWithDefaults() *EmbeddingsBucketFiles {
	this := EmbeddingsBucketFiles{}
	return &this
}

// GetFilename returns the Filename field value
func (o *EmbeddingsBucketFiles) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *EmbeddingsBucketFiles) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *EmbeddingsBucketFiles) SetFilename(v string) {
	o.Filename = v
}

// GetStatus returns the Status field value
func (o *EmbeddingsBucketFiles) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EmbeddingsBucketFiles) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EmbeddingsBucketFiles) SetStatus(v string) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EmbeddingsBucketFiles) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EmbeddingsBucketFiles) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EmbeddingsBucketFiles) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EmbeddingsBucketFiles) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingsBucketFiles) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EmbeddingsBucketFiles) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EmbeddingsBucketFiles) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLastEmbeddedAt returns the LastEmbeddedAt field value if set, zero value otherwise.
func (o *EmbeddingsBucketFiles) GetLastEmbeddedAt() time.Time {
	if o == nil || IsNil(o.LastEmbeddedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastEmbeddedAt
}

// GetLastEmbeddedAtOk returns a tuple with the LastEmbeddedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingsBucketFiles) GetLastEmbeddedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastEmbeddedAt) {
		return nil, false
	}
	return o.LastEmbeddedAt, true
}

// HasLastEmbeddedAt returns a boolean if a field has been set.
func (o *EmbeddingsBucketFiles) HasLastEmbeddedAt() bool {
	if o != nil && !IsNil(o.LastEmbeddedAt) {
		return true
	}

	return false
}

// SetLastEmbeddedAt gets a reference to the given time.Time and assigns it to the LastEmbeddedAt field.
func (o *EmbeddingsBucketFiles) SetLastEmbeddedAt(v time.Time) {
	o.LastEmbeddedAt = &v
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise.
func (o *EmbeddingsBucketFiles) GetErrorReason() string {
	if o == nil || IsNil(o.ErrorReason) {
		var ret string
		return ret
	}
	return *o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingsBucketFiles) GetErrorReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorReason) {
		return nil, false
	}
	return o.ErrorReason, true
}

// HasErrorReason returns a boolean if a field has been set.
func (o *EmbeddingsBucketFiles) HasErrorReason() bool {
	if o != nil && !IsNil(o.ErrorReason) {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given string and assigns it to the ErrorReason field.
func (o *EmbeddingsBucketFiles) SetErrorReason(v string) {
	o.ErrorReason = &v
}

func (o EmbeddingsBucketFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingsBucketFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	toSerialize["status"] = o.Status
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.LastEmbeddedAt) {
		toSerialize["last_embedded_at"] = o.LastEmbeddedAt
	}
	if !IsNil(o.ErrorReason) {
		toSerialize["error_reason"] = o.ErrorReason
	}
	return toSerialize, nil
}

func (o *EmbeddingsBucketFiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
		"status",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingsBucketFiles := _EmbeddingsBucketFiles{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddingsBucketFiles)

	if err != nil {
		return err
	}

	*o = EmbeddingsBucketFiles(varEmbeddingsBucketFiles)

	return err
}

type NullableEmbeddingsBucketFiles struct {
	value *EmbeddingsBucketFiles
	isSet bool
}

func (v NullableEmbeddingsBucketFiles) Get() *EmbeddingsBucketFiles {
	return v.value
}

func (v *NullableEmbeddingsBucketFiles) Set(val *EmbeddingsBucketFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingsBucketFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingsBucketFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingsBucketFiles(val *EmbeddingsBucketFiles) *NullableEmbeddingsBucketFiles {
	return &NullableEmbeddingsBucketFiles{value: val, isSet: true}
}

func (v NullableEmbeddingsBucketFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingsBucketFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


