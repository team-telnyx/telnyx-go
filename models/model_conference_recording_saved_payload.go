/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the ConferenceRecordingSavedPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceRecordingSavedPayload{}

// ConferenceRecordingSavedPayload struct for ConferenceRecordingSavedPayload
type ConferenceRecordingSavedPayload struct {
	// Participant's call ID used to issue commands via Call Control API.
	CallControlId *string `json:"call_control_id,omitempty"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.
	CallSessionId *string `json:"call_session_id,omitempty"`
	// State received from a command.
	ClientState *string `json:"client_state,omitempty"`
	// Whether recording was recorded in `single` or `dual` channel.
	Channels *string `json:"channels,omitempty"`
	// ID of the conference that is being recorded.
	ConferenceId *string `json:"conference_id,omitempty"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionId *string `json:"connection_id,omitempty"`
	// The audio file format used when storing the call recording. Can be either `mp3` or `wav`.
	Format *string `json:"format,omitempty"`
	PublicRecordingUrls *CallRecordingSavedPayloadPublicRecordingUrls `json:"public_recording_urls,omitempty"`
	// ISO 8601 datetime of when recording ended.
	RecordingEndedAt *time.Time `json:"recording_ended_at,omitempty"`
	// ID of the conference recording.
	RecordingId *string `json:"recording_id,omitempty"`
	// ISO 8601 datetime of when recording started.
	RecordingStartedAt *time.Time `json:"recording_started_at,omitempty"`
	RecordingUrls *CallRecordingSavedPayloadRecordingUrls `json:"recording_urls,omitempty"`
}

// NewConferenceRecordingSavedPayload instantiates a new ConferenceRecordingSavedPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceRecordingSavedPayload() *ConferenceRecordingSavedPayload {
	this := ConferenceRecordingSavedPayload{}
	return &this
}

// NewConferenceRecordingSavedPayloadWithDefaults instantiates a new ConferenceRecordingSavedPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceRecordingSavedPayloadWithDefaults() *ConferenceRecordingSavedPayload {
	this := ConferenceRecordingSavedPayload{}
	return &this
}

// GetCallControlId returns the CallControlId field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetCallControlId() string {
	if o == nil || IsNil(o.CallControlId) {
		var ret string
		return ret
	}
	return *o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetCallControlIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallControlId) {
		return nil, false
	}
	return o.CallControlId, true
}

// HasCallControlId returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasCallControlId() bool {
	if o != nil && !IsNil(o.CallControlId) {
		return true
	}

	return false
}

// SetCallControlId gets a reference to the given string and assigns it to the CallControlId field.
func (o *ConferenceRecordingSavedPayload) SetCallControlId(v string) {
	o.CallControlId = &v
}

// GetCallSessionId returns the CallSessionId field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetCallSessionId() string {
	if o == nil || IsNil(o.CallSessionId) {
		var ret string
		return ret
	}
	return *o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallSessionId) {
		return nil, false
	}
	return o.CallSessionId, true
}

// HasCallSessionId returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasCallSessionId() bool {
	if o != nil && !IsNil(o.CallSessionId) {
		return true
	}

	return false
}

// SetCallSessionId gets a reference to the given string and assigns it to the CallSessionId field.
func (o *ConferenceRecordingSavedPayload) SetCallSessionId(v string) {
	o.CallSessionId = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *ConferenceRecordingSavedPayload) SetClientState(v string) {
	o.ClientState = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetChannels() string {
	if o == nil || IsNil(o.Channels) {
		var ret string
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetChannelsOk() (*string, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given string and assigns it to the Channels field.
func (o *ConferenceRecordingSavedPayload) SetChannels(v string) {
	o.Channels = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetConferenceId() string {
	if o == nil || IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetConferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasConferenceId() bool {
	if o != nil && !IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceRecordingSavedPayload) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *ConferenceRecordingSavedPayload) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ConferenceRecordingSavedPayload) SetFormat(v string) {
	o.Format = &v
}

// GetPublicRecordingUrls returns the PublicRecordingUrls field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetPublicRecordingUrls() CallRecordingSavedPayloadPublicRecordingUrls {
	if o == nil || IsNil(o.PublicRecordingUrls) {
		var ret CallRecordingSavedPayloadPublicRecordingUrls
		return ret
	}
	return *o.PublicRecordingUrls
}

// GetPublicRecordingUrlsOk returns a tuple with the PublicRecordingUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetPublicRecordingUrlsOk() (*CallRecordingSavedPayloadPublicRecordingUrls, bool) {
	if o == nil || IsNil(o.PublicRecordingUrls) {
		return nil, false
	}
	return o.PublicRecordingUrls, true
}

// HasPublicRecordingUrls returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasPublicRecordingUrls() bool {
	if o != nil && !IsNil(o.PublicRecordingUrls) {
		return true
	}

	return false
}

// SetPublicRecordingUrls gets a reference to the given CallRecordingSavedPayloadPublicRecordingUrls and assigns it to the PublicRecordingUrls field.
func (o *ConferenceRecordingSavedPayload) SetPublicRecordingUrls(v CallRecordingSavedPayloadPublicRecordingUrls) {
	o.PublicRecordingUrls = &v
}

// GetRecordingEndedAt returns the RecordingEndedAt field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetRecordingEndedAt() time.Time {
	if o == nil || IsNil(o.RecordingEndedAt) {
		var ret time.Time
		return ret
	}
	return *o.RecordingEndedAt
}

// GetRecordingEndedAtOk returns a tuple with the RecordingEndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetRecordingEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecordingEndedAt) {
		return nil, false
	}
	return o.RecordingEndedAt, true
}

// HasRecordingEndedAt returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasRecordingEndedAt() bool {
	if o != nil && !IsNil(o.RecordingEndedAt) {
		return true
	}

	return false
}

// SetRecordingEndedAt gets a reference to the given time.Time and assigns it to the RecordingEndedAt field.
func (o *ConferenceRecordingSavedPayload) SetRecordingEndedAt(v time.Time) {
	o.RecordingEndedAt = &v
}

// GetRecordingId returns the RecordingId field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetRecordingId() string {
	if o == nil || IsNil(o.RecordingId) {
		var ret string
		return ret
	}
	return *o.RecordingId
}

// GetRecordingIdOk returns a tuple with the RecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetRecordingIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingId) {
		return nil, false
	}
	return o.RecordingId, true
}

// HasRecordingId returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasRecordingId() bool {
	if o != nil && !IsNil(o.RecordingId) {
		return true
	}

	return false
}

// SetRecordingId gets a reference to the given string and assigns it to the RecordingId field.
func (o *ConferenceRecordingSavedPayload) SetRecordingId(v string) {
	o.RecordingId = &v
}

// GetRecordingStartedAt returns the RecordingStartedAt field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetRecordingStartedAt() time.Time {
	if o == nil || IsNil(o.RecordingStartedAt) {
		var ret time.Time
		return ret
	}
	return *o.RecordingStartedAt
}

// GetRecordingStartedAtOk returns a tuple with the RecordingStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetRecordingStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecordingStartedAt) {
		return nil, false
	}
	return o.RecordingStartedAt, true
}

// HasRecordingStartedAt returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasRecordingStartedAt() bool {
	if o != nil && !IsNil(o.RecordingStartedAt) {
		return true
	}

	return false
}

// SetRecordingStartedAt gets a reference to the given time.Time and assigns it to the RecordingStartedAt field.
func (o *ConferenceRecordingSavedPayload) SetRecordingStartedAt(v time.Time) {
	o.RecordingStartedAt = &v
}

// GetRecordingUrls returns the RecordingUrls field value if set, zero value otherwise.
func (o *ConferenceRecordingSavedPayload) GetRecordingUrls() CallRecordingSavedPayloadRecordingUrls {
	if o == nil || IsNil(o.RecordingUrls) {
		var ret CallRecordingSavedPayloadRecordingUrls
		return ret
	}
	return *o.RecordingUrls
}

// GetRecordingUrlsOk returns a tuple with the RecordingUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingSavedPayload) GetRecordingUrlsOk() (*CallRecordingSavedPayloadRecordingUrls, bool) {
	if o == nil || IsNil(o.RecordingUrls) {
		return nil, false
	}
	return o.RecordingUrls, true
}

// HasRecordingUrls returns a boolean if a field has been set.
func (o *ConferenceRecordingSavedPayload) HasRecordingUrls() bool {
	if o != nil && !IsNil(o.RecordingUrls) {
		return true
	}

	return false
}

// SetRecordingUrls gets a reference to the given CallRecordingSavedPayloadRecordingUrls and assigns it to the RecordingUrls field.
func (o *ConferenceRecordingSavedPayload) SetRecordingUrls(v CallRecordingSavedPayloadRecordingUrls) {
	o.RecordingUrls = &v
}

func (o ConferenceRecordingSavedPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceRecordingSavedPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlId) {
		toSerialize["call_control_id"] = o.CallControlId
	}
	if !IsNil(o.CallSessionId) {
		toSerialize["call_session_id"] = o.CallSessionId
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.ConferenceId) {
		toSerialize["conference_id"] = o.ConferenceId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PublicRecordingUrls) {
		toSerialize["public_recording_urls"] = o.PublicRecordingUrls
	}
	if !IsNil(o.RecordingEndedAt) {
		toSerialize["recording_ended_at"] = o.RecordingEndedAt
	}
	if !IsNil(o.RecordingId) {
		toSerialize["recording_id"] = o.RecordingId
	}
	if !IsNil(o.RecordingStartedAt) {
		toSerialize["recording_started_at"] = o.RecordingStartedAt
	}
	if !IsNil(o.RecordingUrls) {
		toSerialize["recording_urls"] = o.RecordingUrls
	}
	return toSerialize, nil
}

type NullableConferenceRecordingSavedPayload struct {
	value *ConferenceRecordingSavedPayload
	isSet bool
}

func (v NullableConferenceRecordingSavedPayload) Get() *ConferenceRecordingSavedPayload {
	return v.value
}

func (v *NullableConferenceRecordingSavedPayload) Set(val *ConferenceRecordingSavedPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceRecordingSavedPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceRecordingSavedPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceRecordingSavedPayload(val *ConferenceRecordingSavedPayload) *NullableConferenceRecordingSavedPayload {
	return &NullableConferenceRecordingSavedPayload{value: val, isSet: true}
}

func (v NullableConferenceRecordingSavedPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceRecordingSavedPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


