/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the StartSiprecRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartSiprecRequest{}

// StartSiprecRequest struct for StartSiprecRequest
type StartSiprecRequest struct {
	// Name of configured SIPREC connector to be used.
	ConnectorName *string `json:"connector_name,omitempty"`
	// Specifies SIP transport protocol.
	SipTransport *string `json:"sip_transport,omitempty"`
	// Specifies which track should be sent on siprec session.
	SiprecTrack *string `json:"siprec_track,omitempty"`
	// When set, custom parameters will be added as metadata (recording.session.ExtensionParameters). Otherwise, theyâ€™ll be added to sip headers.
	IncludeMetadataCustomHeaders *bool `json:"include_metadata_custom_headers,omitempty"`
	// Controls whether to encrypt media sent to your SRS using SRTP and TLS. When set you need to configure SRS port in your connector to 5061.
	Secure *bool `json:"secure,omitempty"`
	// Sets `Session-Expires` header to the INVITE. A reinvite is sent every half the value set. Usefull for session keep alive. Minimum value is 90, set to 0 to disable.
	SessionTimeoutSecs *int32 `json:"session_timeout_secs,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
}

// NewStartSiprecRequest instantiates a new StartSiprecRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartSiprecRequest() *StartSiprecRequest {
	this := StartSiprecRequest{}
	var sipTransport string = "udp"
	this.SipTransport = &sipTransport
	var siprecTrack string = "both_tracks"
	this.SiprecTrack = &siprecTrack
	var sessionTimeoutSecs int32 = 1800
	this.SessionTimeoutSecs = &sessionTimeoutSecs
	return &this
}

// NewStartSiprecRequestWithDefaults instantiates a new StartSiprecRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartSiprecRequestWithDefaults() *StartSiprecRequest {
	this := StartSiprecRequest{}
	var sipTransport string = "udp"
	this.SipTransport = &sipTransport
	var siprecTrack string = "both_tracks"
	this.SiprecTrack = &siprecTrack
	var sessionTimeoutSecs int32 = 1800
	this.SessionTimeoutSecs = &sessionTimeoutSecs
	return &this
}

// GetConnectorName returns the ConnectorName field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetConnectorName() string {
	if o == nil || IsNil(o.ConnectorName) {
		var ret string
		return ret
	}
	return *o.ConnectorName
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetConnectorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorName) {
		return nil, false
	}
	return o.ConnectorName, true
}

// HasConnectorName returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasConnectorName() bool {
	if o != nil && !IsNil(o.ConnectorName) {
		return true
	}

	return false
}

// SetConnectorName gets a reference to the given string and assigns it to the ConnectorName field.
func (o *StartSiprecRequest) SetConnectorName(v string) {
	o.ConnectorName = &v
}

// GetSipTransport returns the SipTransport field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetSipTransport() string {
	if o == nil || IsNil(o.SipTransport) {
		var ret string
		return ret
	}
	return *o.SipTransport
}

// GetSipTransportOk returns a tuple with the SipTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetSipTransportOk() (*string, bool) {
	if o == nil || IsNil(o.SipTransport) {
		return nil, false
	}
	return o.SipTransport, true
}

// HasSipTransport returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasSipTransport() bool {
	if o != nil && !IsNil(o.SipTransport) {
		return true
	}

	return false
}

// SetSipTransport gets a reference to the given string and assigns it to the SipTransport field.
func (o *StartSiprecRequest) SetSipTransport(v string) {
	o.SipTransport = &v
}

// GetSiprecTrack returns the SiprecTrack field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetSiprecTrack() string {
	if o == nil || IsNil(o.SiprecTrack) {
		var ret string
		return ret
	}
	return *o.SiprecTrack
}

// GetSiprecTrackOk returns a tuple with the SiprecTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetSiprecTrackOk() (*string, bool) {
	if o == nil || IsNil(o.SiprecTrack) {
		return nil, false
	}
	return o.SiprecTrack, true
}

// HasSiprecTrack returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasSiprecTrack() bool {
	if o != nil && !IsNil(o.SiprecTrack) {
		return true
	}

	return false
}

// SetSiprecTrack gets a reference to the given string and assigns it to the SiprecTrack field.
func (o *StartSiprecRequest) SetSiprecTrack(v string) {
	o.SiprecTrack = &v
}

// GetIncludeMetadataCustomHeaders returns the IncludeMetadataCustomHeaders field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetIncludeMetadataCustomHeaders() bool {
	if o == nil || IsNil(o.IncludeMetadataCustomHeaders) {
		var ret bool
		return ret
	}
	return *o.IncludeMetadataCustomHeaders
}

// GetIncludeMetadataCustomHeadersOk returns a tuple with the IncludeMetadataCustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetIncludeMetadataCustomHeadersOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeMetadataCustomHeaders) {
		return nil, false
	}
	return o.IncludeMetadataCustomHeaders, true
}

// HasIncludeMetadataCustomHeaders returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasIncludeMetadataCustomHeaders() bool {
	if o != nil && !IsNil(o.IncludeMetadataCustomHeaders) {
		return true
	}

	return false
}

// SetIncludeMetadataCustomHeaders gets a reference to the given bool and assigns it to the IncludeMetadataCustomHeaders field.
func (o *StartSiprecRequest) SetIncludeMetadataCustomHeaders(v bool) {
	o.IncludeMetadataCustomHeaders = &v
}

// GetSecure returns the Secure field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetSecure() bool {
	if o == nil || IsNil(o.Secure) {
		var ret bool
		return ret
	}
	return *o.Secure
}

// GetSecureOk returns a tuple with the Secure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.Secure) {
		return nil, false
	}
	return o.Secure, true
}

// HasSecure returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasSecure() bool {
	if o != nil && !IsNil(o.Secure) {
		return true
	}

	return false
}

// SetSecure gets a reference to the given bool and assigns it to the Secure field.
func (o *StartSiprecRequest) SetSecure(v bool) {
	o.Secure = &v
}

// GetSessionTimeoutSecs returns the SessionTimeoutSecs field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetSessionTimeoutSecs() int32 {
	if o == nil || IsNil(o.SessionTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.SessionTimeoutSecs
}

// GetSessionTimeoutSecsOk returns a tuple with the SessionTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetSessionTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.SessionTimeoutSecs) {
		return nil, false
	}
	return o.SessionTimeoutSecs, true
}

// HasSessionTimeoutSecs returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasSessionTimeoutSecs() bool {
	if o != nil && !IsNil(o.SessionTimeoutSecs) {
		return true
	}

	return false
}

// SetSessionTimeoutSecs gets a reference to the given int32 and assigns it to the SessionTimeoutSecs field.
func (o *StartSiprecRequest) SetSessionTimeoutSecs(v int32) {
	o.SessionTimeoutSecs = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *StartSiprecRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSiprecRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *StartSiprecRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *StartSiprecRequest) SetClientState(v string) {
	o.ClientState = &v
}

func (o StartSiprecRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartSiprecRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectorName) {
		toSerialize["connector_name"] = o.ConnectorName
	}
	if !IsNil(o.SipTransport) {
		toSerialize["sip_transport"] = o.SipTransport
	}
	if !IsNil(o.SiprecTrack) {
		toSerialize["siprec_track"] = o.SiprecTrack
	}
	if !IsNil(o.IncludeMetadataCustomHeaders) {
		toSerialize["include_metadata_custom_headers"] = o.IncludeMetadataCustomHeaders
	}
	if !IsNil(o.Secure) {
		toSerialize["secure"] = o.Secure
	}
	if !IsNil(o.SessionTimeoutSecs) {
		toSerialize["session_timeout_secs"] = o.SessionTimeoutSecs
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	return toSerialize, nil
}

type NullableStartSiprecRequest struct {
	value *StartSiprecRequest
	isSet bool
}

func (v NullableStartSiprecRequest) Get() *StartSiprecRequest {
	return v.value
}

func (v *NullableStartSiprecRequest) Set(val *StartSiprecRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartSiprecRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartSiprecRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartSiprecRequest(val *StartSiprecRequest) *NullableStartSiprecRequest {
	return &NullableStartSiprecRequest{value: val, isSet: true}
}

func (v NullableStartSiprecRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartSiprecRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


