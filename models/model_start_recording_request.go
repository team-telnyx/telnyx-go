/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StartRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartRecordingRequest{}

// StartRecordingRequest struct for StartRecordingRequest
type StartRecordingRequest struct {
	// The audio file format used when storing the call recording. Can be either `mp3` or `wav`.
	Format string `json:"format"`
	// When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
	Channels string `json:"channels"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	// If enabled, a beep sound will be played at the start of a recording.
	PlayBeep *bool `json:"play_beep,omitempty"`
	// Defines the maximum length for the recording in seconds. The minimum value is 0. The maximum value is 14400. The default value is 0 (infinite)
	MaxLength *int32 `json:"max_length,omitempty"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)
	TimeoutSecs *int32 `json:"timeout_secs,omitempty"`
	// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).
	RecordingTrack *string `json:"recording_track,omitempty"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	Trim *string `json:"trim,omitempty"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.
	CustomFileName *string `json:"custom_file_name,omitempty"`
	// Enable post recording transcription. The default value is false.
	Transcription *bool `json:"transcription,omitempty"`
	// Engine to use for speech recognition. `A` - `Google`
	TranscriptionEngine *string `json:"transcription_engine,omitempty"`
	TranscriptionLanguage *GoogleTranscriptionLanguageLong `json:"transcription_language,omitempty"`
	// Enables profanity_filter. Applies to `google` engine only.
	TranscriptionProfanityFilter *bool `json:"transcription_profanity_filter,omitempty"`
	// Enables speaker diarization. Applies to `google` engine only.
	TranscriptionSpeakerDiarization *bool `json:"transcription_speaker_diarization,omitempty"`
	// Defines minimum number of speakers in the conversation. Applies to `google` engine only.
	TranscriptionMinSpeakerCount *int32 `json:"transcription_min_speaker_count,omitempty"`
	// Defines maximum number of speakers in the conversation. Applies to `google` engine only.
	TranscriptionMaxSpeakerCount *int32 `json:"transcription_max_speaker_count,omitempty"`
}

type _StartRecordingRequest StartRecordingRequest

// NewStartRecordingRequest instantiates a new StartRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartRecordingRequest(format string, channels string) *StartRecordingRequest {
	this := StartRecordingRequest{}
	this.Format = format
	this.Channels = channels
	var maxLength int32 = 0
	this.MaxLength = &maxLength
	var timeoutSecs int32 = 0
	this.TimeoutSecs = &timeoutSecs
	var recordingTrack string = "both"
	this.RecordingTrack = &recordingTrack
	var transcription bool = false
	this.Transcription = &transcription
	var transcriptionEngine string = "A"
	this.TranscriptionEngine = &transcriptionEngine
	var transcriptionLanguage GoogleTranscriptionLanguageLong = EN_US
	this.TranscriptionLanguage = &transcriptionLanguage
	var transcriptionProfanityFilter bool = false
	this.TranscriptionProfanityFilter = &transcriptionProfanityFilter
	var transcriptionSpeakerDiarization bool = false
	this.TranscriptionSpeakerDiarization = &transcriptionSpeakerDiarization
	var transcriptionMinSpeakerCount int32 = 2
	this.TranscriptionMinSpeakerCount = &transcriptionMinSpeakerCount
	var transcriptionMaxSpeakerCount int32 = 6
	this.TranscriptionMaxSpeakerCount = &transcriptionMaxSpeakerCount
	return &this
}

// NewStartRecordingRequestWithDefaults instantiates a new StartRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartRecordingRequestWithDefaults() *StartRecordingRequest {
	this := StartRecordingRequest{}
	var maxLength int32 = 0
	this.MaxLength = &maxLength
	var timeoutSecs int32 = 0
	this.TimeoutSecs = &timeoutSecs
	var recordingTrack string = "both"
	this.RecordingTrack = &recordingTrack
	var transcription bool = false
	this.Transcription = &transcription
	var transcriptionEngine string = "A"
	this.TranscriptionEngine = &transcriptionEngine
	var transcriptionLanguage GoogleTranscriptionLanguageLong = EN_US
	this.TranscriptionLanguage = &transcriptionLanguage
	var transcriptionProfanityFilter bool = false
	this.TranscriptionProfanityFilter = &transcriptionProfanityFilter
	var transcriptionSpeakerDiarization bool = false
	this.TranscriptionSpeakerDiarization = &transcriptionSpeakerDiarization
	var transcriptionMinSpeakerCount int32 = 2
	this.TranscriptionMinSpeakerCount = &transcriptionMinSpeakerCount
	var transcriptionMaxSpeakerCount int32 = 6
	this.TranscriptionMaxSpeakerCount = &transcriptionMaxSpeakerCount
	return &this
}

// GetFormat returns the Format field value
func (o *StartRecordingRequest) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *StartRecordingRequest) SetFormat(v string) {
	o.Format = v
}

// GetChannels returns the Channels field value
func (o *StartRecordingRequest) GetChannels() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetChannelsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channels, true
}

// SetChannels sets field value
func (o *StartRecordingRequest) SetChannels(v string) {
	o.Channels = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *StartRecordingRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *StartRecordingRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetPlayBeep returns the PlayBeep field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetPlayBeep() bool {
	if o == nil || IsNil(o.PlayBeep) {
		var ret bool
		return ret
	}
	return *o.PlayBeep
}

// GetPlayBeepOk returns a tuple with the PlayBeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetPlayBeepOk() (*bool, bool) {
	if o == nil || IsNil(o.PlayBeep) {
		return nil, false
	}
	return o.PlayBeep, true
}

// HasPlayBeep returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasPlayBeep() bool {
	if o != nil && !IsNil(o.PlayBeep) {
		return true
	}

	return false
}

// SetPlayBeep gets a reference to the given bool and assigns it to the PlayBeep field.
func (o *StartRecordingRequest) SetPlayBeep(v bool) {
	o.PlayBeep = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *StartRecordingRequest) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTimeoutSecs() int32 {
	if o == nil || IsNil(o.TimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSecs) {
		return nil, false
	}
	return o.TimeoutSecs, true
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTimeoutSecs() bool {
	if o != nil && !IsNil(o.TimeoutSecs) {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given int32 and assigns it to the TimeoutSecs field.
func (o *StartRecordingRequest) SetTimeoutSecs(v int32) {
	o.TimeoutSecs = &v
}

// GetRecordingTrack returns the RecordingTrack field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetRecordingTrack() string {
	if o == nil || IsNil(o.RecordingTrack) {
		var ret string
		return ret
	}
	return *o.RecordingTrack
}

// GetRecordingTrackOk returns a tuple with the RecordingTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetRecordingTrackOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingTrack) {
		return nil, false
	}
	return o.RecordingTrack, true
}

// HasRecordingTrack returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasRecordingTrack() bool {
	if o != nil && !IsNil(o.RecordingTrack) {
		return true
	}

	return false
}

// SetRecordingTrack gets a reference to the given string and assigns it to the RecordingTrack field.
func (o *StartRecordingRequest) SetRecordingTrack(v string) {
	o.RecordingTrack = &v
}

// GetTrim returns the Trim field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTrim() string {
	if o == nil || IsNil(o.Trim) {
		var ret string
		return ret
	}
	return *o.Trim
}

// GetTrimOk returns a tuple with the Trim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTrimOk() (*string, bool) {
	if o == nil || IsNil(o.Trim) {
		return nil, false
	}
	return o.Trim, true
}

// HasTrim returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTrim() bool {
	if o != nil && !IsNil(o.Trim) {
		return true
	}

	return false
}

// SetTrim gets a reference to the given string and assigns it to the Trim field.
func (o *StartRecordingRequest) SetTrim(v string) {
	o.Trim = &v
}

// GetCustomFileName returns the CustomFileName field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetCustomFileName() string {
	if o == nil || IsNil(o.CustomFileName) {
		var ret string
		return ret
	}
	return *o.CustomFileName
}

// GetCustomFileNameOk returns a tuple with the CustomFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetCustomFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFileName) {
		return nil, false
	}
	return o.CustomFileName, true
}

// HasCustomFileName returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasCustomFileName() bool {
	if o != nil && !IsNil(o.CustomFileName) {
		return true
	}

	return false
}

// SetCustomFileName gets a reference to the given string and assigns it to the CustomFileName field.
func (o *StartRecordingRequest) SetCustomFileName(v string) {
	o.CustomFileName = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscription() bool {
	if o == nil || IsNil(o.Transcription) {
		var ret bool
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given bool and assigns it to the Transcription field.
func (o *StartRecordingRequest) SetTranscription(v bool) {
	o.Transcription = &v
}

// GetTranscriptionEngine returns the TranscriptionEngine field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscriptionEngine() string {
	if o == nil || IsNil(o.TranscriptionEngine) {
		var ret string
		return ret
	}
	return *o.TranscriptionEngine
}

// GetTranscriptionEngineOk returns a tuple with the TranscriptionEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionEngineOk() (*string, bool) {
	if o == nil || IsNil(o.TranscriptionEngine) {
		return nil, false
	}
	return o.TranscriptionEngine, true
}

// HasTranscriptionEngine returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscriptionEngine() bool {
	if o != nil && !IsNil(o.TranscriptionEngine) {
		return true
	}

	return false
}

// SetTranscriptionEngine gets a reference to the given string and assigns it to the TranscriptionEngine field.
func (o *StartRecordingRequest) SetTranscriptionEngine(v string) {
	o.TranscriptionEngine = &v
}

// GetTranscriptionLanguage returns the TranscriptionLanguage field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscriptionLanguage() GoogleTranscriptionLanguageLong {
	if o == nil || IsNil(o.TranscriptionLanguage) {
		var ret GoogleTranscriptionLanguageLong
		return ret
	}
	return *o.TranscriptionLanguage
}

// GetTranscriptionLanguageOk returns a tuple with the TranscriptionLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionLanguageOk() (*GoogleTranscriptionLanguageLong, bool) {
	if o == nil || IsNil(o.TranscriptionLanguage) {
		return nil, false
	}
	return o.TranscriptionLanguage, true
}

// HasTranscriptionLanguage returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscriptionLanguage() bool {
	if o != nil && !IsNil(o.TranscriptionLanguage) {
		return true
	}

	return false
}

// SetTranscriptionLanguage gets a reference to the given GoogleTranscriptionLanguageLong and assigns it to the TranscriptionLanguage field.
func (o *StartRecordingRequest) SetTranscriptionLanguage(v GoogleTranscriptionLanguageLong) {
	o.TranscriptionLanguage = &v
}

// GetTranscriptionProfanityFilter returns the TranscriptionProfanityFilter field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscriptionProfanityFilter() bool {
	if o == nil || IsNil(o.TranscriptionProfanityFilter) {
		var ret bool
		return ret
	}
	return *o.TranscriptionProfanityFilter
}

// GetTranscriptionProfanityFilterOk returns a tuple with the TranscriptionProfanityFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionProfanityFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.TranscriptionProfanityFilter) {
		return nil, false
	}
	return o.TranscriptionProfanityFilter, true
}

// HasTranscriptionProfanityFilter returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscriptionProfanityFilter() bool {
	if o != nil && !IsNil(o.TranscriptionProfanityFilter) {
		return true
	}

	return false
}

// SetTranscriptionProfanityFilter gets a reference to the given bool and assigns it to the TranscriptionProfanityFilter field.
func (o *StartRecordingRequest) SetTranscriptionProfanityFilter(v bool) {
	o.TranscriptionProfanityFilter = &v
}

// GetTranscriptionSpeakerDiarization returns the TranscriptionSpeakerDiarization field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscriptionSpeakerDiarization() bool {
	if o == nil || IsNil(o.TranscriptionSpeakerDiarization) {
		var ret bool
		return ret
	}
	return *o.TranscriptionSpeakerDiarization
}

// GetTranscriptionSpeakerDiarizationOk returns a tuple with the TranscriptionSpeakerDiarization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionSpeakerDiarizationOk() (*bool, bool) {
	if o == nil || IsNil(o.TranscriptionSpeakerDiarization) {
		return nil, false
	}
	return o.TranscriptionSpeakerDiarization, true
}

// HasTranscriptionSpeakerDiarization returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscriptionSpeakerDiarization() bool {
	if o != nil && !IsNil(o.TranscriptionSpeakerDiarization) {
		return true
	}

	return false
}

// SetTranscriptionSpeakerDiarization gets a reference to the given bool and assigns it to the TranscriptionSpeakerDiarization field.
func (o *StartRecordingRequest) SetTranscriptionSpeakerDiarization(v bool) {
	o.TranscriptionSpeakerDiarization = &v
}

// GetTranscriptionMinSpeakerCount returns the TranscriptionMinSpeakerCount field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscriptionMinSpeakerCount() int32 {
	if o == nil || IsNil(o.TranscriptionMinSpeakerCount) {
		var ret int32
		return ret
	}
	return *o.TranscriptionMinSpeakerCount
}

// GetTranscriptionMinSpeakerCountOk returns a tuple with the TranscriptionMinSpeakerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionMinSpeakerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TranscriptionMinSpeakerCount) {
		return nil, false
	}
	return o.TranscriptionMinSpeakerCount, true
}

// HasTranscriptionMinSpeakerCount returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscriptionMinSpeakerCount() bool {
	if o != nil && !IsNil(o.TranscriptionMinSpeakerCount) {
		return true
	}

	return false
}

// SetTranscriptionMinSpeakerCount gets a reference to the given int32 and assigns it to the TranscriptionMinSpeakerCount field.
func (o *StartRecordingRequest) SetTranscriptionMinSpeakerCount(v int32) {
	o.TranscriptionMinSpeakerCount = &v
}

// GetTranscriptionMaxSpeakerCount returns the TranscriptionMaxSpeakerCount field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTranscriptionMaxSpeakerCount() int32 {
	if o == nil || IsNil(o.TranscriptionMaxSpeakerCount) {
		var ret int32
		return ret
	}
	return *o.TranscriptionMaxSpeakerCount
}

// GetTranscriptionMaxSpeakerCountOk returns a tuple with the TranscriptionMaxSpeakerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTranscriptionMaxSpeakerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TranscriptionMaxSpeakerCount) {
		return nil, false
	}
	return o.TranscriptionMaxSpeakerCount, true
}

// HasTranscriptionMaxSpeakerCount returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTranscriptionMaxSpeakerCount() bool {
	if o != nil && !IsNil(o.TranscriptionMaxSpeakerCount) {
		return true
	}

	return false
}

// SetTranscriptionMaxSpeakerCount gets a reference to the given int32 and assigns it to the TranscriptionMaxSpeakerCount field.
func (o *StartRecordingRequest) SetTranscriptionMaxSpeakerCount(v int32) {
	o.TranscriptionMaxSpeakerCount = &v
}

func (o StartRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format"] = o.Format
	toSerialize["channels"] = o.Channels
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.PlayBeep) {
		toSerialize["play_beep"] = o.PlayBeep
	}
	if !IsNil(o.MaxLength) {
		toSerialize["max_length"] = o.MaxLength
	}
	if !IsNil(o.TimeoutSecs) {
		toSerialize["timeout_secs"] = o.TimeoutSecs
	}
	if !IsNil(o.RecordingTrack) {
		toSerialize["recording_track"] = o.RecordingTrack
	}
	if !IsNil(o.Trim) {
		toSerialize["trim"] = o.Trim
	}
	if !IsNil(o.CustomFileName) {
		toSerialize["custom_file_name"] = o.CustomFileName
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.TranscriptionEngine) {
		toSerialize["transcription_engine"] = o.TranscriptionEngine
	}
	if !IsNil(o.TranscriptionLanguage) {
		toSerialize["transcription_language"] = o.TranscriptionLanguage
	}
	if !IsNil(o.TranscriptionProfanityFilter) {
		toSerialize["transcription_profanity_filter"] = o.TranscriptionProfanityFilter
	}
	if !IsNil(o.TranscriptionSpeakerDiarization) {
		toSerialize["transcription_speaker_diarization"] = o.TranscriptionSpeakerDiarization
	}
	if !IsNil(o.TranscriptionMinSpeakerCount) {
		toSerialize["transcription_min_speaker_count"] = o.TranscriptionMinSpeakerCount
	}
	if !IsNil(o.TranscriptionMaxSpeakerCount) {
		toSerialize["transcription_max_speaker_count"] = o.TranscriptionMaxSpeakerCount
	}
	return toSerialize, nil
}

func (o *StartRecordingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"format",
		"channels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStartRecordingRequest := _StartRecordingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStartRecordingRequest)

	if err != nil {
		return err
	}

	*o = StartRecordingRequest(varStartRecordingRequest)

	return err
}

type NullableStartRecordingRequest struct {
	value *StartRecordingRequest
	isSet bool
}

func (v NullableStartRecordingRequest) Get() *StartRecordingRequest {
	return v.value
}

func (v *NullableStartRecordingRequest) Set(val *StartRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartRecordingRequest(val *StartRecordingRequest) *NullableStartRecordingRequest {
	return &NullableStartRecordingRequest{value: val, isSet: true}
}

func (v NullableStartRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


