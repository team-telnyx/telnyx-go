/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotFoundError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotFoundError{}

// NotFoundError struct for NotFoundError
type NotFoundError struct {
	Code *string `json:"code,omitempty"`
	Detail string `json:"detail"`
	Title *string `json:"title,omitempty"`
}

type _NotFoundError NotFoundError

// NewNotFoundError instantiates a new NotFoundError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotFoundError(detail string) *NotFoundError {
	this := NotFoundError{}
	this.Detail = detail
	return &this
}

// NewNotFoundErrorWithDefaults instantiates a new NotFoundError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotFoundErrorWithDefaults() *NotFoundError {
	this := NotFoundError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *NotFoundError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *NotFoundError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *NotFoundError) SetCode(v string) {
	o.Code = &v
}

// GetDetail returns the Detail field value
func (o *NotFoundError) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *NotFoundError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *NotFoundError) SetDetail(v string) {
	o.Detail = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotFoundError) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundError) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotFoundError) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotFoundError) SetTitle(v string) {
	o.Title = &v
}

func (o NotFoundError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotFoundError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["detail"] = o.Detail
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

func (o *NotFoundError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"detail",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotFoundError := _NotFoundError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotFoundError)

	if err != nil {
		return err
	}

	*o = NotFoundError(varNotFoundError)

	return err
}

type NullableNotFoundError struct {
	value *NotFoundError
	isSet bool
}

func (v NullableNotFoundError) Get() *NotFoundError {
	return v.value
}

func (v *NullableNotFoundError) Set(val *NotFoundError) {
	v.value = val
	v.isSet = true
}

func (v NullableNotFoundError) IsSet() bool {
	return v.isSet
}

func (v *NullableNotFoundError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotFoundError(val *NotFoundError) *NullableNotFoundError {
	return &NullableNotFoundError{value: val, isSet: true}
}

func (v NullableNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotFoundError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


