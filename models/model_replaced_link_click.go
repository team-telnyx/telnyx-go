/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the ReplacedLinkClick type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplacedLinkClick{}

// ReplacedLinkClick struct for ReplacedLinkClick
type ReplacedLinkClick struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// The original link that was sent in the message.
	Url *string `json:"url,omitempty"`
	// Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).
	To *string `json:"to,omitempty"`
	// The message ID associated with the clicked link.
	MessageId *string `json:"message_id,omitempty"`
	// ISO 8601 formatted date indicating when the message request was received.
	TimeClicked *time.Time `json:"time_clicked,omitempty"`
}

// NewReplacedLinkClick instantiates a new ReplacedLinkClick object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplacedLinkClick() *ReplacedLinkClick {
	this := ReplacedLinkClick{}
	return &this
}

// NewReplacedLinkClickWithDefaults instantiates a new ReplacedLinkClick object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplacedLinkClickWithDefaults() *ReplacedLinkClick {
	this := ReplacedLinkClick{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *ReplacedLinkClick) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacedLinkClick) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *ReplacedLinkClick) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *ReplacedLinkClick) SetRecordType(v string) {
	o.RecordType = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ReplacedLinkClick) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacedLinkClick) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ReplacedLinkClick) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ReplacedLinkClick) SetUrl(v string) {
	o.Url = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ReplacedLinkClick) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacedLinkClick) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ReplacedLinkClick) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ReplacedLinkClick) SetTo(v string) {
	o.To = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *ReplacedLinkClick) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacedLinkClick) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *ReplacedLinkClick) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *ReplacedLinkClick) SetMessageId(v string) {
	o.MessageId = &v
}

// GetTimeClicked returns the TimeClicked field value if set, zero value otherwise.
func (o *ReplacedLinkClick) GetTimeClicked() time.Time {
	if o == nil || IsNil(o.TimeClicked) {
		var ret time.Time
		return ret
	}
	return *o.TimeClicked
}

// GetTimeClickedOk returns a tuple with the TimeClicked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacedLinkClick) GetTimeClickedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeClicked) {
		return nil, false
	}
	return o.TimeClicked, true
}

// HasTimeClicked returns a boolean if a field has been set.
func (o *ReplacedLinkClick) HasTimeClicked() bool {
	if o != nil && !IsNil(o.TimeClicked) {
		return true
	}

	return false
}

// SetTimeClicked gets a reference to the given time.Time and assigns it to the TimeClicked field.
func (o *ReplacedLinkClick) SetTimeClicked(v time.Time) {
	o.TimeClicked = &v
}

func (o ReplacedLinkClick) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplacedLinkClick) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.MessageId) {
		toSerialize["message_id"] = o.MessageId
	}
	if !IsNil(o.TimeClicked) {
		toSerialize["time_clicked"] = o.TimeClicked
	}
	return toSerialize, nil
}

type NullableReplacedLinkClick struct {
	value *ReplacedLinkClick
	isSet bool
}

func (v NullableReplacedLinkClick) Get() *ReplacedLinkClick {
	return v.value
}

func (v *NullableReplacedLinkClick) Set(val *ReplacedLinkClick) {
	v.value = val
	v.isSet = true
}

func (v NullableReplacedLinkClick) IsSet() bool {
	return v.isSet
}

func (v *NullableReplacedLinkClick) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplacedLinkClick(val *ReplacedLinkClick) *NullableReplacedLinkClick {
	return &NullableReplacedLinkClick{value: val, isSet: true}
}

func (v NullableReplacedLinkClick) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplacedLinkClick) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


