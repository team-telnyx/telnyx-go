/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Address{}

// Address struct for Address
type Address struct {
	// Uniquely identifies the address.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// A customer reference string for customer look ups.
	CustomerReference *string `json:"customer_reference,omitempty"`
	// The first name associated with the address. An address must have either a first last name or a business name.
	FirstName *string `json:"first_name,omitempty"`
	// The last name associated with the address. An address must have either a first last name or a business name.
	LastName *string `json:"last_name,omitempty"`
	// The business name associated with the address. An address must have either a first last name or a business name.
	BusinessName *string `json:"business_name,omitempty"`
	// The phone number associated with the address.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The primary street address information about the address.
	StreetAddress *string `json:"street_address,omitempty"`
	// Additional street address information about the address such as, but not limited to, unit number or apartment number.
	ExtendedAddress *string `json:"extended_address,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the city of the address.
	Locality *string `json:"locality,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the state of the address.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// The borough of the address. This field is not used for addresses in the US but is used for some international addresses.
	Borough *string `json:"borough,omitempty"`
	// The postal code of the address.
	PostalCode *string `json:"postal_code,omitempty"`
	// The two-character (ISO 3166-1 alpha-2) country code of the address.
	CountryCode *string `json:"country_code,omitempty"`
	// Indicates whether or not the address should be considered part of your list of addresses that appear for regular use.
	AddressBook *bool `json:"address_book,omitempty"`
	// Indicates whether or not the address should be validated for emergency use upon creation or not. This should be left with the default value of `true` unless you have used the `/addresses/actions/validate` endpoint to validate the address separately prior to creation. If an address is not validated for emergency use upon creation and it is not valid, it will not be able to be used for emergency services.
	ValidateAddress *bool `json:"validate_address,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress() *Address {
	this := Address{}
	var addressBook bool = true
	this.AddressBook = &addressBook
	var validateAddress bool = true
	this.ValidateAddress = &validateAddress
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	var addressBook bool = true
	this.AddressBook = &addressBook
	var validateAddress bool = true
	this.ValidateAddress = &validateAddress
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Address) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Address) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Address) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *Address) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *Address) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *Address) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCustomerReference returns the CustomerReference field value if set, zero value otherwise.
func (o *Address) GetCustomerReference() string {
	if o == nil || IsNil(o.CustomerReference) {
		var ret string
		return ret
	}
	return *o.CustomerReference
}

// GetCustomerReferenceOk returns a tuple with the CustomerReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCustomerReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerReference) {
		return nil, false
	}
	return o.CustomerReference, true
}

// HasCustomerReference returns a boolean if a field has been set.
func (o *Address) HasCustomerReference() bool {
	if o != nil && !IsNil(o.CustomerReference) {
		return true
	}

	return false
}

// SetCustomerReference gets a reference to the given string and assigns it to the CustomerReference field.
func (o *Address) SetCustomerReference(v string) {
	o.CustomerReference = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Address) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Address) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Address) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Address) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Address) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Address) SetLastName(v string) {
	o.LastName = &v
}

// GetBusinessName returns the BusinessName field value if set, zero value otherwise.
func (o *Address) GetBusinessName() string {
	if o == nil || IsNil(o.BusinessName) {
		var ret string
		return ret
	}
	return *o.BusinessName
}

// GetBusinessNameOk returns a tuple with the BusinessName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBusinessNameOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessName) {
		return nil, false
	}
	return o.BusinessName, true
}

// HasBusinessName returns a boolean if a field has been set.
func (o *Address) HasBusinessName() bool {
	if o != nil && !IsNil(o.BusinessName) {
		return true
	}

	return false
}

// SetBusinessName gets a reference to the given string and assigns it to the BusinessName field.
func (o *Address) SetBusinessName(v string) {
	o.BusinessName = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *Address) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *Address) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *Address) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *Address) GetStreetAddress() string {
	if o == nil || IsNil(o.StreetAddress) {
		var ret string
		return ret
	}
	return *o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStreetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.StreetAddress) {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *Address) HasStreetAddress() bool {
	if o != nil && !IsNil(o.StreetAddress) {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given string and assigns it to the StreetAddress field.
func (o *Address) SetStreetAddress(v string) {
	o.StreetAddress = &v
}

// GetExtendedAddress returns the ExtendedAddress field value if set, zero value otherwise.
func (o *Address) GetExtendedAddress() string {
	if o == nil || IsNil(o.ExtendedAddress) {
		var ret string
		return ret
	}
	return *o.ExtendedAddress
}

// GetExtendedAddressOk returns a tuple with the ExtendedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetExtendedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendedAddress) {
		return nil, false
	}
	return o.ExtendedAddress, true
}

// HasExtendedAddress returns a boolean if a field has been set.
func (o *Address) HasExtendedAddress() bool {
	if o != nil && !IsNil(o.ExtendedAddress) {
		return true
	}

	return false
}

// SetExtendedAddress gets a reference to the given string and assigns it to the ExtendedAddress field.
func (o *Address) SetExtendedAddress(v string) {
	o.ExtendedAddress = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *Address) GetLocality() string {
	if o == nil || IsNil(o.Locality) {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLocalityOk() (*string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *Address) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *Address) SetLocality(v string) {
	o.Locality = &v
}

// GetAdministrativeArea returns the AdministrativeArea field value if set, zero value otherwise.
func (o *Address) GetAdministrativeArea() string {
	if o == nil || IsNil(o.AdministrativeArea) {
		var ret string
		return ret
	}
	return *o.AdministrativeArea
}

// GetAdministrativeAreaOk returns a tuple with the AdministrativeArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetAdministrativeAreaOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrativeArea) {
		return nil, false
	}
	return o.AdministrativeArea, true
}

// HasAdministrativeArea returns a boolean if a field has been set.
func (o *Address) HasAdministrativeArea() bool {
	if o != nil && !IsNil(o.AdministrativeArea) {
		return true
	}

	return false
}

// SetAdministrativeArea gets a reference to the given string and assigns it to the AdministrativeArea field.
func (o *Address) SetAdministrativeArea(v string) {
	o.AdministrativeArea = &v
}

// GetNeighborhood returns the Neighborhood field value if set, zero value otherwise.
func (o *Address) GetNeighborhood() string {
	if o == nil || IsNil(o.Neighborhood) {
		var ret string
		return ret
	}
	return *o.Neighborhood
}

// GetNeighborhoodOk returns a tuple with the Neighborhood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetNeighborhoodOk() (*string, bool) {
	if o == nil || IsNil(o.Neighborhood) {
		return nil, false
	}
	return o.Neighborhood, true
}

// HasNeighborhood returns a boolean if a field has been set.
func (o *Address) HasNeighborhood() bool {
	if o != nil && !IsNil(o.Neighborhood) {
		return true
	}

	return false
}

// SetNeighborhood gets a reference to the given string and assigns it to the Neighborhood field.
func (o *Address) SetNeighborhood(v string) {
	o.Neighborhood = &v
}

// GetBorough returns the Borough field value if set, zero value otherwise.
func (o *Address) GetBorough() string {
	if o == nil || IsNil(o.Borough) {
		var ret string
		return ret
	}
	return *o.Borough
}

// GetBoroughOk returns a tuple with the Borough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBoroughOk() (*string, bool) {
	if o == nil || IsNil(o.Borough) {
		return nil, false
	}
	return o.Borough, true
}

// HasBorough returns a boolean if a field has been set.
func (o *Address) HasBorough() bool {
	if o != nil && !IsNil(o.Borough) {
		return true
	}

	return false
}

// SetBorough gets a reference to the given string and assigns it to the Borough field.
func (o *Address) SetBorough(v string) {
	o.Borough = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *Address) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *Address) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *Address) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Address) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Address) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Address) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetAddressBook returns the AddressBook field value if set, zero value otherwise.
func (o *Address) GetAddressBook() bool {
	if o == nil || IsNil(o.AddressBook) {
		var ret bool
		return ret
	}
	return *o.AddressBook
}

// GetAddressBookOk returns a tuple with the AddressBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetAddressBookOk() (*bool, bool) {
	if o == nil || IsNil(o.AddressBook) {
		return nil, false
	}
	return o.AddressBook, true
}

// HasAddressBook returns a boolean if a field has been set.
func (o *Address) HasAddressBook() bool {
	if o != nil && !IsNil(o.AddressBook) {
		return true
	}

	return false
}

// SetAddressBook gets a reference to the given bool and assigns it to the AddressBook field.
func (o *Address) SetAddressBook(v bool) {
	o.AddressBook = &v
}

// GetValidateAddress returns the ValidateAddress field value if set, zero value otherwise.
func (o *Address) GetValidateAddress() bool {
	if o == nil || IsNil(o.ValidateAddress) {
		var ret bool
		return ret
	}
	return *o.ValidateAddress
}

// GetValidateAddressOk returns a tuple with the ValidateAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetValidateAddressOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateAddress) {
		return nil, false
	}
	return o.ValidateAddress, true
}

// HasValidateAddress returns a boolean if a field has been set.
func (o *Address) HasValidateAddress() bool {
	if o != nil && !IsNil(o.ValidateAddress) {
		return true
	}

	return false
}

// SetValidateAddress gets a reference to the given bool and assigns it to the ValidateAddress field.
func (o *Address) SetValidateAddress(v bool) {
	o.ValidateAddress = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Address) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Address) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Address) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Address) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Address) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Address) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CustomerReference) {
		toSerialize["customer_reference"] = o.CustomerReference
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.BusinessName) {
		toSerialize["business_name"] = o.BusinessName
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.StreetAddress) {
		toSerialize["street_address"] = o.StreetAddress
	}
	if !IsNil(o.ExtendedAddress) {
		toSerialize["extended_address"] = o.ExtendedAddress
	}
	if !IsNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !IsNil(o.AdministrativeArea) {
		toSerialize["administrative_area"] = o.AdministrativeArea
	}
	if !IsNil(o.Neighborhood) {
		toSerialize["neighborhood"] = o.Neighborhood
	}
	if !IsNil(o.Borough) {
		toSerialize["borough"] = o.Borough
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.AddressBook) {
		toSerialize["address_book"] = o.AddressBook
	}
	if !IsNil(o.ValidateAddress) {
		toSerialize["validate_address"] = o.ValidateAddress
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


