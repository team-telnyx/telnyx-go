/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RegulatoryRequirementsPhoneNumbers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegulatoryRequirementsPhoneNumbers{}

// RegulatoryRequirementsPhoneNumbers struct for RegulatoryRequirementsPhoneNumbers
type RegulatoryRequirementsPhoneNumbers struct {
	PhoneNumber *string `json:"phone_number,omitempty"`
	PhoneNumberType *string `json:"phone_number_type,omitempty"`
	RegionInformation []RegulatoryRequirementsPhoneNumbersRegionInformationInner `json:"region_information,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	RegulatoryRequirements []RegulatoryRequirementsPhoneNumbersRegulatoryRequirementsInner `json:"regulatory_requirements,omitempty"`
}

// NewRegulatoryRequirementsPhoneNumbers instantiates a new RegulatoryRequirementsPhoneNumbers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegulatoryRequirementsPhoneNumbers() *RegulatoryRequirementsPhoneNumbers {
	this := RegulatoryRequirementsPhoneNumbers{}
	return &this
}

// NewRegulatoryRequirementsPhoneNumbersWithDefaults instantiates a new RegulatoryRequirementsPhoneNumbers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegulatoryRequirementsPhoneNumbersWithDefaults() *RegulatoryRequirementsPhoneNumbers {
	this := RegulatoryRequirementsPhoneNumbers{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *RegulatoryRequirementsPhoneNumbers) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsPhoneNumbers) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *RegulatoryRequirementsPhoneNumbers) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *RegulatoryRequirementsPhoneNumbers) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhoneNumberType returns the PhoneNumberType field value if set, zero value otherwise.
func (o *RegulatoryRequirementsPhoneNumbers) GetPhoneNumberType() string {
	if o == nil || IsNil(o.PhoneNumberType) {
		var ret string
		return ret
	}
	return *o.PhoneNumberType
}

// GetPhoneNumberTypeOk returns a tuple with the PhoneNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsPhoneNumbers) GetPhoneNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumberType) {
		return nil, false
	}
	return o.PhoneNumberType, true
}

// HasPhoneNumberType returns a boolean if a field has been set.
func (o *RegulatoryRequirementsPhoneNumbers) HasPhoneNumberType() bool {
	if o != nil && !IsNil(o.PhoneNumberType) {
		return true
	}

	return false
}

// SetPhoneNumberType gets a reference to the given string and assigns it to the PhoneNumberType field.
func (o *RegulatoryRequirementsPhoneNumbers) SetPhoneNumberType(v string) {
	o.PhoneNumberType = &v
}

// GetRegionInformation returns the RegionInformation field value if set, zero value otherwise.
func (o *RegulatoryRequirementsPhoneNumbers) GetRegionInformation() []RegulatoryRequirementsPhoneNumbersRegionInformationInner {
	if o == nil || IsNil(o.RegionInformation) {
		var ret []RegulatoryRequirementsPhoneNumbersRegionInformationInner
		return ret
	}
	return o.RegionInformation
}

// GetRegionInformationOk returns a tuple with the RegionInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsPhoneNumbers) GetRegionInformationOk() ([]RegulatoryRequirementsPhoneNumbersRegionInformationInner, bool) {
	if o == nil || IsNil(o.RegionInformation) {
		return nil, false
	}
	return o.RegionInformation, true
}

// HasRegionInformation returns a boolean if a field has been set.
func (o *RegulatoryRequirementsPhoneNumbers) HasRegionInformation() bool {
	if o != nil && !IsNil(o.RegionInformation) {
		return true
	}

	return false
}

// SetRegionInformation gets a reference to the given []RegulatoryRequirementsPhoneNumbersRegionInformationInner and assigns it to the RegionInformation field.
func (o *RegulatoryRequirementsPhoneNumbers) SetRegionInformation(v []RegulatoryRequirementsPhoneNumbersRegionInformationInner) {
	o.RegionInformation = v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RegulatoryRequirementsPhoneNumbers) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsPhoneNumbers) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RegulatoryRequirementsPhoneNumbers) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RegulatoryRequirementsPhoneNumbers) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRegulatoryRequirements returns the RegulatoryRequirements field value if set, zero value otherwise.
func (o *RegulatoryRequirementsPhoneNumbers) GetRegulatoryRequirements() []RegulatoryRequirementsPhoneNumbersRegulatoryRequirementsInner {
	if o == nil || IsNil(o.RegulatoryRequirements) {
		var ret []RegulatoryRequirementsPhoneNumbersRegulatoryRequirementsInner
		return ret
	}
	return o.RegulatoryRequirements
}

// GetRegulatoryRequirementsOk returns a tuple with the RegulatoryRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsPhoneNumbers) GetRegulatoryRequirementsOk() ([]RegulatoryRequirementsPhoneNumbersRegulatoryRequirementsInner, bool) {
	if o == nil || IsNil(o.RegulatoryRequirements) {
		return nil, false
	}
	return o.RegulatoryRequirements, true
}

// HasRegulatoryRequirements returns a boolean if a field has been set.
func (o *RegulatoryRequirementsPhoneNumbers) HasRegulatoryRequirements() bool {
	if o != nil && !IsNil(o.RegulatoryRequirements) {
		return true
	}

	return false
}

// SetRegulatoryRequirements gets a reference to the given []RegulatoryRequirementsPhoneNumbersRegulatoryRequirementsInner and assigns it to the RegulatoryRequirements field.
func (o *RegulatoryRequirementsPhoneNumbers) SetRegulatoryRequirements(v []RegulatoryRequirementsPhoneNumbersRegulatoryRequirementsInner) {
	o.RegulatoryRequirements = v
}

func (o RegulatoryRequirementsPhoneNumbers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegulatoryRequirementsPhoneNumbers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.PhoneNumberType) {
		toSerialize["phone_number_type"] = o.PhoneNumberType
	}
	if !IsNil(o.RegionInformation) {
		toSerialize["region_information"] = o.RegionInformation
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.RegulatoryRequirements) {
		toSerialize["regulatory_requirements"] = o.RegulatoryRequirements
	}
	return toSerialize, nil
}

type NullableRegulatoryRequirementsPhoneNumbers struct {
	value *RegulatoryRequirementsPhoneNumbers
	isSet bool
}

func (v NullableRegulatoryRequirementsPhoneNumbers) Get() *RegulatoryRequirementsPhoneNumbers {
	return v.value
}

func (v *NullableRegulatoryRequirementsPhoneNumbers) Set(val *RegulatoryRequirementsPhoneNumbers) {
	v.value = val
	v.isSet = true
}

func (v NullableRegulatoryRequirementsPhoneNumbers) IsSet() bool {
	return v.isSet
}

func (v *NullableRegulatoryRequirementsPhoneNumbers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegulatoryRequirementsPhoneNumbers(val *RegulatoryRequirementsPhoneNumbers) *NullableRegulatoryRequirementsPhoneNumbers {
	return &NullableRegulatoryRequirementsPhoneNumbers{value: val, isSet: true}
}

func (v NullableRegulatoryRequirementsPhoneNumbers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegulatoryRequirementsPhoneNumbers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


