/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MigrationSourceParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MigrationSourceParams{}

// MigrationSourceParams struct for MigrationSourceParams
type MigrationSourceParams struct {
	// Unique identifier for the data migration source.
	Id *string `json:"id,omitempty"`
	// Cloud provider from which to migrate data. Use 'telnyx' if you want to migrate data from one Telnyx bucket to another.
	Provider string `json:"provider"`
	// For intra-Telnyx buckets migration, specify the source bucket region in this field.
	SourceRegion *string `json:"source_region,omitempty"`
	ProviderAuth MigrationSourceParamsProviderAuth `json:"provider_auth"`
	// Bucket name to migrate the data from.
	BucketName string `json:"bucket_name"`
}

type _MigrationSourceParams MigrationSourceParams

// NewMigrationSourceParams instantiates a new MigrationSourceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigrationSourceParams(provider string, providerAuth MigrationSourceParamsProviderAuth, bucketName string) *MigrationSourceParams {
	this := MigrationSourceParams{}
	this.Provider = provider
	this.ProviderAuth = providerAuth
	this.BucketName = bucketName
	return &this
}

// NewMigrationSourceParamsWithDefaults instantiates a new MigrationSourceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationSourceParamsWithDefaults() *MigrationSourceParams {
	this := MigrationSourceParams{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MigrationSourceParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationSourceParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MigrationSourceParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MigrationSourceParams) SetId(v string) {
	o.Id = &v
}

// GetProvider returns the Provider field value
func (o *MigrationSourceParams) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *MigrationSourceParams) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *MigrationSourceParams) SetProvider(v string) {
	o.Provider = v
}

// GetSourceRegion returns the SourceRegion field value if set, zero value otherwise.
func (o *MigrationSourceParams) GetSourceRegion() string {
	if o == nil || IsNil(o.SourceRegion) {
		var ret string
		return ret
	}
	return *o.SourceRegion
}

// GetSourceRegionOk returns a tuple with the SourceRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationSourceParams) GetSourceRegionOk() (*string, bool) {
	if o == nil || IsNil(o.SourceRegion) {
		return nil, false
	}
	return o.SourceRegion, true
}

// HasSourceRegion returns a boolean if a field has been set.
func (o *MigrationSourceParams) HasSourceRegion() bool {
	if o != nil && !IsNil(o.SourceRegion) {
		return true
	}

	return false
}

// SetSourceRegion gets a reference to the given string and assigns it to the SourceRegion field.
func (o *MigrationSourceParams) SetSourceRegion(v string) {
	o.SourceRegion = &v
}

// GetProviderAuth returns the ProviderAuth field value
func (o *MigrationSourceParams) GetProviderAuth() MigrationSourceParamsProviderAuth {
	if o == nil {
		var ret MigrationSourceParamsProviderAuth
		return ret
	}

	return o.ProviderAuth
}

// GetProviderAuthOk returns a tuple with the ProviderAuth field value
// and a boolean to check if the value has been set.
func (o *MigrationSourceParams) GetProviderAuthOk() (*MigrationSourceParamsProviderAuth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderAuth, true
}

// SetProviderAuth sets field value
func (o *MigrationSourceParams) SetProviderAuth(v MigrationSourceParamsProviderAuth) {
	o.ProviderAuth = v
}

// GetBucketName returns the BucketName field value
func (o *MigrationSourceParams) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *MigrationSourceParams) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *MigrationSourceParams) SetBucketName(v string) {
	o.BucketName = v
}

func (o MigrationSourceParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MigrationSourceParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["provider"] = o.Provider
	if !IsNil(o.SourceRegion) {
		toSerialize["source_region"] = o.SourceRegion
	}
	toSerialize["provider_auth"] = o.ProviderAuth
	toSerialize["bucket_name"] = o.BucketName
	return toSerialize, nil
}

func (o *MigrationSourceParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"provider_auth",
		"bucket_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMigrationSourceParams := _MigrationSourceParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMigrationSourceParams)

	if err != nil {
		return err
	}

	*o = MigrationSourceParams(varMigrationSourceParams)

	return err
}

type NullableMigrationSourceParams struct {
	value *MigrationSourceParams
	isSet bool
}

func (v NullableMigrationSourceParams) Get() *MigrationSourceParams {
	return v.value
}

func (v *NullableMigrationSourceParams) Set(val *MigrationSourceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrationSourceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrationSourceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrationSourceParams(val *MigrationSourceParams) *NullableMigrationSourceParams {
	return &NullableMigrationSourceParams{value: val, isSet: true}
}

func (v NullableMigrationSourceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrationSourceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


