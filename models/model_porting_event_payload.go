/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PortingEventPayload - struct for PortingEventPayload
type PortingEventPayload struct {
	WebhookPortingOrderDeletedPayload *WebhookPortingOrderDeletedPayload
	WebhookPortingOrderMessagingChangedPayload *WebhookPortingOrderMessagingChangedPayload
	WebhookPortingOrderNewCommentPayload *WebhookPortingOrderNewCommentPayload
	WebhookPortingOrderSplitPayload *WebhookPortingOrderSplitPayload
	WebhookPortingOrderStatusChangedPayload *WebhookPortingOrderStatusChangedPayload
}

// WebhookPortingOrderDeletedPayloadAsPortingEventPayload is a convenience function that returns WebhookPortingOrderDeletedPayload wrapped in PortingEventPayload
func WebhookPortingOrderDeletedPayloadAsPortingEventPayload(v *WebhookPortingOrderDeletedPayload) PortingEventPayload {
	return PortingEventPayload{
		WebhookPortingOrderDeletedPayload: v,
	}
}

// WebhookPortingOrderMessagingChangedPayloadAsPortingEventPayload is a convenience function that returns WebhookPortingOrderMessagingChangedPayload wrapped in PortingEventPayload
func WebhookPortingOrderMessagingChangedPayloadAsPortingEventPayload(v *WebhookPortingOrderMessagingChangedPayload) PortingEventPayload {
	return PortingEventPayload{
		WebhookPortingOrderMessagingChangedPayload: v,
	}
}

// WebhookPortingOrderNewCommentPayloadAsPortingEventPayload is a convenience function that returns WebhookPortingOrderNewCommentPayload wrapped in PortingEventPayload
func WebhookPortingOrderNewCommentPayloadAsPortingEventPayload(v *WebhookPortingOrderNewCommentPayload) PortingEventPayload {
	return PortingEventPayload{
		WebhookPortingOrderNewCommentPayload: v,
	}
}

// WebhookPortingOrderSplitPayloadAsPortingEventPayload is a convenience function that returns WebhookPortingOrderSplitPayload wrapped in PortingEventPayload
func WebhookPortingOrderSplitPayloadAsPortingEventPayload(v *WebhookPortingOrderSplitPayload) PortingEventPayload {
	return PortingEventPayload{
		WebhookPortingOrderSplitPayload: v,
	}
}

// WebhookPortingOrderStatusChangedPayloadAsPortingEventPayload is a convenience function that returns WebhookPortingOrderStatusChangedPayload wrapped in PortingEventPayload
func WebhookPortingOrderStatusChangedPayloadAsPortingEventPayload(v *WebhookPortingOrderStatusChangedPayload) PortingEventPayload {
	return PortingEventPayload{
		WebhookPortingOrderStatusChangedPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PortingEventPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WebhookPortingOrderDeletedPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortingOrderDeletedPayload)
	if err == nil {
		jsonWebhookPortingOrderDeletedPayload, _ := json.Marshal(dst.WebhookPortingOrderDeletedPayload)
		if string(jsonWebhookPortingOrderDeletedPayload) == "{}" { // empty struct
			dst.WebhookPortingOrderDeletedPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortingOrderDeletedPayload); err != nil {
				dst.WebhookPortingOrderDeletedPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortingOrderDeletedPayload = nil
	}

	// try to unmarshal data into WebhookPortingOrderMessagingChangedPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortingOrderMessagingChangedPayload)
	if err == nil {
		jsonWebhookPortingOrderMessagingChangedPayload, _ := json.Marshal(dst.WebhookPortingOrderMessagingChangedPayload)
		if string(jsonWebhookPortingOrderMessagingChangedPayload) == "{}" { // empty struct
			dst.WebhookPortingOrderMessagingChangedPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortingOrderMessagingChangedPayload); err != nil {
				dst.WebhookPortingOrderMessagingChangedPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortingOrderMessagingChangedPayload = nil
	}

	// try to unmarshal data into WebhookPortingOrderNewCommentPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortingOrderNewCommentPayload)
	if err == nil {
		jsonWebhookPortingOrderNewCommentPayload, _ := json.Marshal(dst.WebhookPortingOrderNewCommentPayload)
		if string(jsonWebhookPortingOrderNewCommentPayload) == "{}" { // empty struct
			dst.WebhookPortingOrderNewCommentPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortingOrderNewCommentPayload); err != nil {
				dst.WebhookPortingOrderNewCommentPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortingOrderNewCommentPayload = nil
	}

	// try to unmarshal data into WebhookPortingOrderSplitPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortingOrderSplitPayload)
	if err == nil {
		jsonWebhookPortingOrderSplitPayload, _ := json.Marshal(dst.WebhookPortingOrderSplitPayload)
		if string(jsonWebhookPortingOrderSplitPayload) == "{}" { // empty struct
			dst.WebhookPortingOrderSplitPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortingOrderSplitPayload); err != nil {
				dst.WebhookPortingOrderSplitPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortingOrderSplitPayload = nil
	}

	// try to unmarshal data into WebhookPortingOrderStatusChangedPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortingOrderStatusChangedPayload)
	if err == nil {
		jsonWebhookPortingOrderStatusChangedPayload, _ := json.Marshal(dst.WebhookPortingOrderStatusChangedPayload)
		if string(jsonWebhookPortingOrderStatusChangedPayload) == "{}" { // empty struct
			dst.WebhookPortingOrderStatusChangedPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortingOrderStatusChangedPayload); err != nil {
				dst.WebhookPortingOrderStatusChangedPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortingOrderStatusChangedPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WebhookPortingOrderDeletedPayload = nil
		dst.WebhookPortingOrderMessagingChangedPayload = nil
		dst.WebhookPortingOrderNewCommentPayload = nil
		dst.WebhookPortingOrderSplitPayload = nil
		dst.WebhookPortingOrderStatusChangedPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PortingEventPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PortingEventPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PortingEventPayload) MarshalJSON() ([]byte, error) {
	if src.WebhookPortingOrderDeletedPayload != nil {
		return json.Marshal(&src.WebhookPortingOrderDeletedPayload)
	}

	if src.WebhookPortingOrderMessagingChangedPayload != nil {
		return json.Marshal(&src.WebhookPortingOrderMessagingChangedPayload)
	}

	if src.WebhookPortingOrderNewCommentPayload != nil {
		return json.Marshal(&src.WebhookPortingOrderNewCommentPayload)
	}

	if src.WebhookPortingOrderSplitPayload != nil {
		return json.Marshal(&src.WebhookPortingOrderSplitPayload)
	}

	if src.WebhookPortingOrderStatusChangedPayload != nil {
		return json.Marshal(&src.WebhookPortingOrderStatusChangedPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PortingEventPayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WebhookPortingOrderDeletedPayload != nil {
		return obj.WebhookPortingOrderDeletedPayload
	}

	if obj.WebhookPortingOrderMessagingChangedPayload != nil {
		return obj.WebhookPortingOrderMessagingChangedPayload
	}

	if obj.WebhookPortingOrderNewCommentPayload != nil {
		return obj.WebhookPortingOrderNewCommentPayload
	}

	if obj.WebhookPortingOrderSplitPayload != nil {
		return obj.WebhookPortingOrderSplitPayload
	}

	if obj.WebhookPortingOrderStatusChangedPayload != nil {
		return obj.WebhookPortingOrderStatusChangedPayload
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PortingEventPayload) GetActualInstanceValue() (interface{}) {
	if obj.WebhookPortingOrderDeletedPayload != nil {
		return *obj.WebhookPortingOrderDeletedPayload
	}

	if obj.WebhookPortingOrderMessagingChangedPayload != nil {
		return *obj.WebhookPortingOrderMessagingChangedPayload
	}

	if obj.WebhookPortingOrderNewCommentPayload != nil {
		return *obj.WebhookPortingOrderNewCommentPayload
	}

	if obj.WebhookPortingOrderSplitPayload != nil {
		return *obj.WebhookPortingOrderSplitPayload
	}

	if obj.WebhookPortingOrderStatusChangedPayload != nil {
		return *obj.WebhookPortingOrderStatusChangedPayload
	}

	// all schemas are nil
	return nil
}

type NullablePortingEventPayload struct {
	value *PortingEventPayload
	isSet bool
}

func (v NullablePortingEventPayload) Get() *PortingEventPayload {
	return v.value
}

func (v *NullablePortingEventPayload) Set(val *PortingEventPayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingEventPayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingEventPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingEventPayload(val *PortingEventPayload) *NullablePortingEventPayload {
	return &NullablePortingEventPayload{value: val, isSet: true}
}

func (v NullablePortingEventPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingEventPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


