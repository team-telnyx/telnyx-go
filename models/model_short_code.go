/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ShortCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortCode{}

// ShortCode struct for ShortCode
type ShortCode struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// Identifies the type of resource.
	Id *string `json:"id,omitempty"`
	// Short digit sequence used to address messages.
	ShortCode *string `json:"short_code,omitempty"`
	// ISO 3166-1 alpha-2 country code.
	CountryCode *string `json:"country_code,omitempty" validate:"regexp=^[A-Z]{2}$"`
	// Unique identifier for a messaging profile.
	MessagingProfileId NullableString `json:"messaging_profile_id"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _ShortCode ShortCode

// NewShortCode instantiates a new ShortCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortCode(messagingProfileId NullableString) *ShortCode {
	this := ShortCode{}
	this.MessagingProfileId = messagingProfileId
	return &this
}

// NewShortCodeWithDefaults instantiates a new ShortCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortCodeWithDefaults() *ShortCode {
	this := ShortCode{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *ShortCode) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortCode) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *ShortCode) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *ShortCode) SetRecordType(v string) {
	o.RecordType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ShortCode) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortCode) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ShortCode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ShortCode) SetId(v string) {
	o.Id = &v
}

// GetShortCode returns the ShortCode field value if set, zero value otherwise.
func (o *ShortCode) GetShortCode() string {
	if o == nil || IsNil(o.ShortCode) {
		var ret string
		return ret
	}
	return *o.ShortCode
}

// GetShortCodeOk returns a tuple with the ShortCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortCode) GetShortCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ShortCode) {
		return nil, false
	}
	return o.ShortCode, true
}

// HasShortCode returns a boolean if a field has been set.
func (o *ShortCode) HasShortCode() bool {
	if o != nil && !IsNil(o.ShortCode) {
		return true
	}

	return false
}

// SetShortCode gets a reference to the given string and assigns it to the ShortCode field.
func (o *ShortCode) SetShortCode(v string) {
	o.ShortCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ShortCode) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortCode) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ShortCode) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ShortCode) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetMessagingProfileId returns the MessagingProfileId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ShortCode) GetMessagingProfileId() string {
	if o == nil || o.MessagingProfileId.Get() == nil {
		var ret string
		return ret
	}

	return *o.MessagingProfileId.Get()
}

// GetMessagingProfileIdOk returns a tuple with the MessagingProfileId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShortCode) GetMessagingProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessagingProfileId.Get(), o.MessagingProfileId.IsSet()
}

// SetMessagingProfileId sets field value
func (o *ShortCode) SetMessagingProfileId(v string) {
	o.MessagingProfileId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ShortCode) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortCode) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ShortCode) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ShortCode) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ShortCode) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortCode) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ShortCode) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ShortCode) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ShortCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ShortCode) {
		toSerialize["short_code"] = o.ShortCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	toSerialize["messaging_profile_id"] = o.MessagingProfileId.Get()
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *ShortCode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messaging_profile_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShortCode := _ShortCode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShortCode)

	if err != nil {
		return err
	}

	*o = ShortCode(varShortCode)

	return err
}

type NullableShortCode struct {
	value *ShortCode
	isSet bool
}

func (v NullableShortCode) Get() *ShortCode {
	return v.value
}

func (v *NullableShortCode) Set(val *ShortCode) {
	v.value = val
	v.isSet = true
}

func (v NullableShortCode) IsSet() bool {
	return v.isSet
}

func (v *NullableShortCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortCode(val *ShortCode) *NullableShortCode {
	return &NullableShortCode{value: val, isSet: true}
}

func (v NullableShortCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


