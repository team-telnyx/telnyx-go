/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the RCSCreateCalendarEventAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSCreateCalendarEventAction{}

// RCSCreateCalendarEventAction Opens the user's default calendar app and starts the new calendar event flow with the agent-specified event data pre-filled.
type RCSCreateCalendarEventAction struct {
	StartTime *time.Time `json:"start_time,omitempty"`
	EndTime *time.Time `json:"end_time,omitempty"`
	// Event title. Maximum 100 characters.
	Title *string `json:"title,omitempty"`
	// Event description. Maximum 500 characters.
	Description *string `json:"description,omitempty"`
}

// NewRCSCreateCalendarEventAction instantiates a new RCSCreateCalendarEventAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSCreateCalendarEventAction() *RCSCreateCalendarEventAction {
	this := RCSCreateCalendarEventAction{}
	return &this
}

// NewRCSCreateCalendarEventActionWithDefaults instantiates a new RCSCreateCalendarEventAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSCreateCalendarEventActionWithDefaults() *RCSCreateCalendarEventAction {
	this := RCSCreateCalendarEventAction{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *RCSCreateCalendarEventAction) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCreateCalendarEventAction) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *RCSCreateCalendarEventAction) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *RCSCreateCalendarEventAction) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *RCSCreateCalendarEventAction) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCreateCalendarEventAction) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *RCSCreateCalendarEventAction) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *RCSCreateCalendarEventAction) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RCSCreateCalendarEventAction) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCreateCalendarEventAction) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RCSCreateCalendarEventAction) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RCSCreateCalendarEventAction) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RCSCreateCalendarEventAction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSCreateCalendarEventAction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RCSCreateCalendarEventAction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RCSCreateCalendarEventAction) SetDescription(v string) {
	o.Description = &v
}

func (o RCSCreateCalendarEventAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSCreateCalendarEventAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableRCSCreateCalendarEventAction struct {
	value *RCSCreateCalendarEventAction
	isSet bool
}

func (v NullableRCSCreateCalendarEventAction) Get() *RCSCreateCalendarEventAction {
	return v.value
}

func (v *NullableRCSCreateCalendarEventAction) Set(val *RCSCreateCalendarEventAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSCreateCalendarEventAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSCreateCalendarEventAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSCreateCalendarEventAction(val *RCSCreateCalendarEventAction) *NullableRCSCreateCalendarEventAction {
	return &NullableRCSCreateCalendarEventAction{value: val, isSet: true}
}

func (v NullableRCSCreateCalendarEventAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSCreateCalendarEventAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


