/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the PlayAudioUrlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayAudioUrlRequest{}

// PlayAudioUrlRequest struct for PlayAudioUrlRequest
type PlayAudioUrlRequest struct {
	// The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioUrl *string `json:"audio_url,omitempty"`
	// The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
	MediaName *string `json:"media_name,omitempty"`
	Loop *Loopcount `json:"loop,omitempty"`
	// When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.
	Overlay *bool `json:"overlay,omitempty"`
	// When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.
	Stop *string `json:"stop,omitempty"`
	// Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.
	TargetLegs *string `json:"target_legs,omitempty"`
	// Caches the audio file. Useful when playing the same audio file multiple times during the call.
	CacheAudio *bool `json:"cache_audio,omitempty"`
	// Specifies the type of audio provided in `audio_url` or `playback_content`.
	AudioType *string `json:"audio_type,omitempty"`
	// Allows a user to provide base64 encoded mp3 or wav. Note: when using this parameter, `media_url` and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty
	PlaybackContent *string `json:"playback_content,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
}

// NewPlayAudioUrlRequest instantiates a new PlayAudioUrlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayAudioUrlRequest() *PlayAudioUrlRequest {
	this := PlayAudioUrlRequest{}
	var overlay bool = false
	this.Overlay = &overlay
	var targetLegs string = "self"
	this.TargetLegs = &targetLegs
	var cacheAudio bool = true
	this.CacheAudio = &cacheAudio
	var audioType string = "mp3"
	this.AudioType = &audioType
	return &this
}

// NewPlayAudioUrlRequestWithDefaults instantiates a new PlayAudioUrlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayAudioUrlRequestWithDefaults() *PlayAudioUrlRequest {
	this := PlayAudioUrlRequest{}
	var overlay bool = false
	this.Overlay = &overlay
	var targetLegs string = "self"
	this.TargetLegs = &targetLegs
	var cacheAudio bool = true
	this.CacheAudio = &cacheAudio
	var audioType string = "mp3"
	this.AudioType = &audioType
	return &this
}

// GetAudioUrl returns the AudioUrl field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetAudioUrl() string {
	if o == nil || IsNil(o.AudioUrl) {
		var ret string
		return ret
	}
	return *o.AudioUrl
}

// GetAudioUrlOk returns a tuple with the AudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioUrl) {
		return nil, false
	}
	return o.AudioUrl, true
}

// HasAudioUrl returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasAudioUrl() bool {
	if o != nil && !IsNil(o.AudioUrl) {
		return true
	}

	return false
}

// SetAudioUrl gets a reference to the given string and assigns it to the AudioUrl field.
func (o *PlayAudioUrlRequest) SetAudioUrl(v string) {
	o.AudioUrl = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *PlayAudioUrlRequest) SetMediaName(v string) {
	o.MediaName = &v
}

// GetLoop returns the Loop field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetLoop() Loopcount {
	if o == nil || IsNil(o.Loop) {
		var ret Loopcount
		return ret
	}
	return *o.Loop
}

// GetLoopOk returns a tuple with the Loop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetLoopOk() (*Loopcount, bool) {
	if o == nil || IsNil(o.Loop) {
		return nil, false
	}
	return o.Loop, true
}

// HasLoop returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasLoop() bool {
	if o != nil && !IsNil(o.Loop) {
		return true
	}

	return false
}

// SetLoop gets a reference to the given Loopcount and assigns it to the Loop field.
func (o *PlayAudioUrlRequest) SetLoop(v Loopcount) {
	o.Loop = &v
}

// GetOverlay returns the Overlay field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetOverlay() bool {
	if o == nil || IsNil(o.Overlay) {
		var ret bool
		return ret
	}
	return *o.Overlay
}

// GetOverlayOk returns a tuple with the Overlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.Overlay) {
		return nil, false
	}
	return o.Overlay, true
}

// HasOverlay returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasOverlay() bool {
	if o != nil && !IsNil(o.Overlay) {
		return true
	}

	return false
}

// SetOverlay gets a reference to the given bool and assigns it to the Overlay field.
func (o *PlayAudioUrlRequest) SetOverlay(v bool) {
	o.Overlay = &v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetStop() string {
	if o == nil || IsNil(o.Stop) {
		var ret string
		return ret
	}
	return *o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetStopOk() (*string, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given string and assigns it to the Stop field.
func (o *PlayAudioUrlRequest) SetStop(v string) {
	o.Stop = &v
}

// GetTargetLegs returns the TargetLegs field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetTargetLegs() string {
	if o == nil || IsNil(o.TargetLegs) {
		var ret string
		return ret
	}
	return *o.TargetLegs
}

// GetTargetLegsOk returns a tuple with the TargetLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetTargetLegsOk() (*string, bool) {
	if o == nil || IsNil(o.TargetLegs) {
		return nil, false
	}
	return o.TargetLegs, true
}

// HasTargetLegs returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasTargetLegs() bool {
	if o != nil && !IsNil(o.TargetLegs) {
		return true
	}

	return false
}

// SetTargetLegs gets a reference to the given string and assigns it to the TargetLegs field.
func (o *PlayAudioUrlRequest) SetTargetLegs(v string) {
	o.TargetLegs = &v
}

// GetCacheAudio returns the CacheAudio field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetCacheAudio() bool {
	if o == nil || IsNil(o.CacheAudio) {
		var ret bool
		return ret
	}
	return *o.CacheAudio
}

// GetCacheAudioOk returns a tuple with the CacheAudio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetCacheAudioOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheAudio) {
		return nil, false
	}
	return o.CacheAudio, true
}

// HasCacheAudio returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasCacheAudio() bool {
	if o != nil && !IsNil(o.CacheAudio) {
		return true
	}

	return false
}

// SetCacheAudio gets a reference to the given bool and assigns it to the CacheAudio field.
func (o *PlayAudioUrlRequest) SetCacheAudio(v bool) {
	o.CacheAudio = &v
}

// GetAudioType returns the AudioType field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetAudioType() string {
	if o == nil || IsNil(o.AudioType) {
		var ret string
		return ret
	}
	return *o.AudioType
}

// GetAudioTypeOk returns a tuple with the AudioType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetAudioTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AudioType) {
		return nil, false
	}
	return o.AudioType, true
}

// HasAudioType returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasAudioType() bool {
	if o != nil && !IsNil(o.AudioType) {
		return true
	}

	return false
}

// SetAudioType gets a reference to the given string and assigns it to the AudioType field.
func (o *PlayAudioUrlRequest) SetAudioType(v string) {
	o.AudioType = &v
}

// GetPlaybackContent returns the PlaybackContent field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetPlaybackContent() string {
	if o == nil || IsNil(o.PlaybackContent) {
		var ret string
		return ret
	}
	return *o.PlaybackContent
}

// GetPlaybackContentOk returns a tuple with the PlaybackContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetPlaybackContentOk() (*string, bool) {
	if o == nil || IsNil(o.PlaybackContent) {
		return nil, false
	}
	return o.PlaybackContent, true
}

// HasPlaybackContent returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasPlaybackContent() bool {
	if o != nil && !IsNil(o.PlaybackContent) {
		return true
	}

	return false
}

// SetPlaybackContent gets a reference to the given string and assigns it to the PlaybackContent field.
func (o *PlayAudioUrlRequest) SetPlaybackContent(v string) {
	o.PlaybackContent = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *PlayAudioUrlRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *PlayAudioUrlRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayAudioUrlRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *PlayAudioUrlRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *PlayAudioUrlRequest) SetCommandId(v string) {
	o.CommandId = &v
}

func (o PlayAudioUrlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayAudioUrlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioUrl) {
		toSerialize["audio_url"] = o.AudioUrl
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	if !IsNil(o.Loop) {
		toSerialize["loop"] = o.Loop
	}
	if !IsNil(o.Overlay) {
		toSerialize["overlay"] = o.Overlay
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	if !IsNil(o.TargetLegs) {
		toSerialize["target_legs"] = o.TargetLegs
	}
	if !IsNil(o.CacheAudio) {
		toSerialize["cache_audio"] = o.CacheAudio
	}
	if !IsNil(o.AudioType) {
		toSerialize["audio_type"] = o.AudioType
	}
	if !IsNil(o.PlaybackContent) {
		toSerialize["playback_content"] = o.PlaybackContent
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	return toSerialize, nil
}

type NullablePlayAudioUrlRequest struct {
	value *PlayAudioUrlRequest
	isSet bool
}

func (v NullablePlayAudioUrlRequest) Get() *PlayAudioUrlRequest {
	return v.value
}

func (v *NullablePlayAudioUrlRequest) Set(val *PlayAudioUrlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayAudioUrlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayAudioUrlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayAudioUrlRequest(val *PlayAudioUrlRequest) *NullablePlayAudioUrlRequest {
	return &NullablePlayAudioUrlRequest{value: val, isSet: true}
}

func (v NullablePlayAudioUrlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayAudioUrlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


