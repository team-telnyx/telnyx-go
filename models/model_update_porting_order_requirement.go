/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdatePortingOrderRequirement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePortingOrderRequirement{}

// UpdatePortingOrderRequirement Specifies a value for a requirement on the Porting Order.
type UpdatePortingOrderRequirement struct {
	// identifies the document or provides the text value that satisfies this requirement
	FieldValue string `json:"field_value"`
	// Identifies the requirement type that the `field_value` fulfills
	RequirementTypeId string `json:"requirement_type_id"`
}

type _UpdatePortingOrderRequirement UpdatePortingOrderRequirement

// NewUpdatePortingOrderRequirement instantiates a new UpdatePortingOrderRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePortingOrderRequirement(fieldValue string, requirementTypeId string) *UpdatePortingOrderRequirement {
	this := UpdatePortingOrderRequirement{}
	this.FieldValue = fieldValue
	this.RequirementTypeId = requirementTypeId
	return &this
}

// NewUpdatePortingOrderRequirementWithDefaults instantiates a new UpdatePortingOrderRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePortingOrderRequirementWithDefaults() *UpdatePortingOrderRequirement {
	this := UpdatePortingOrderRequirement{}
	return &this
}

// GetFieldValue returns the FieldValue field value
func (o *UpdatePortingOrderRequirement) GetFieldValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldValue
}

// GetFieldValueOk returns a tuple with the FieldValue field value
// and a boolean to check if the value has been set.
func (o *UpdatePortingOrderRequirement) GetFieldValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldValue, true
}

// SetFieldValue sets field value
func (o *UpdatePortingOrderRequirement) SetFieldValue(v string) {
	o.FieldValue = v
}

// GetRequirementTypeId returns the RequirementTypeId field value
func (o *UpdatePortingOrderRequirement) GetRequirementTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequirementTypeId
}

// GetRequirementTypeIdOk returns a tuple with the RequirementTypeId field value
// and a boolean to check if the value has been set.
func (o *UpdatePortingOrderRequirement) GetRequirementTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequirementTypeId, true
}

// SetRequirementTypeId sets field value
func (o *UpdatePortingOrderRequirement) SetRequirementTypeId(v string) {
	o.RequirementTypeId = v
}

func (o UpdatePortingOrderRequirement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePortingOrderRequirement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field_value"] = o.FieldValue
	toSerialize["requirement_type_id"] = o.RequirementTypeId
	return toSerialize, nil
}

func (o *UpdatePortingOrderRequirement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field_value",
		"requirement_type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePortingOrderRequirement := _UpdatePortingOrderRequirement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatePortingOrderRequirement)

	if err != nil {
		return err
	}

	*o = UpdatePortingOrderRequirement(varUpdatePortingOrderRequirement)

	return err
}

type NullableUpdatePortingOrderRequirement struct {
	value *UpdatePortingOrderRequirement
	isSet bool
}

func (v NullableUpdatePortingOrderRequirement) Get() *UpdatePortingOrderRequirement {
	return v.value
}

func (v *NullableUpdatePortingOrderRequirement) Set(val *UpdatePortingOrderRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePortingOrderRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePortingOrderRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePortingOrderRequirement(val *UpdatePortingOrderRequirement) *NullableUpdatePortingOrderRequirement {
	return &NullableUpdatePortingOrderRequirement{value: val, isSet: true}
}

func (v NullableUpdatePortingOrderRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePortingOrderRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


