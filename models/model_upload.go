/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the Upload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Upload{}

// Upload struct for Upload
type Upload struct {
	// Uniquely identifies the resource.
	TicketId *string `json:"ticket_id,omitempty"`
	TenantId *string `json:"tenant_id,omitempty"`
	LocationId *string `json:"location_id,omitempty"`
	// Represents the status of the upload on Microsoft Teams.
	Status *string `json:"status,omitempty"`
	AvailableUsages []string `json:"available_usages,omitempty"`
	// A code returned by Microsoft Teams if there is an error with the upload process.
	ErrorCode *string `json:"error_code,omitempty"`
	// A message set if there is an error with the upload process.
	ErrorMessage *string `json:"error_message,omitempty"`
	TnUploadEntries []TnUploadEntry `json:"tn_upload_entries,omitempty"`
}

// NewUpload instantiates a new Upload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpload() *Upload {
	this := Upload{}
	var status string = "pending_upload"
	this.Status = &status
	return &this
}

// NewUploadWithDefaults instantiates a new Upload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadWithDefaults() *Upload {
	this := Upload{}
	var status string = "pending_upload"
	this.Status = &status
	return &this
}

// GetTicketId returns the TicketId field value if set, zero value otherwise.
func (o *Upload) GetTicketId() string {
	if o == nil || IsNil(o.TicketId) {
		var ret string
		return ret
	}
	return *o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetTicketIdOk() (*string, bool) {
	if o == nil || IsNil(o.TicketId) {
		return nil, false
	}
	return o.TicketId, true
}

// HasTicketId returns a boolean if a field has been set.
func (o *Upload) HasTicketId() bool {
	if o != nil && !IsNil(o.TicketId) {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given string and assigns it to the TicketId field.
func (o *Upload) SetTicketId(v string) {
	o.TicketId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Upload) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Upload) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Upload) SetTenantId(v string) {
	o.TenantId = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *Upload) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *Upload) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *Upload) SetLocationId(v string) {
	o.LocationId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Upload) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Upload) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Upload) SetStatus(v string) {
	o.Status = &v
}

// GetAvailableUsages returns the AvailableUsages field value if set, zero value otherwise.
func (o *Upload) GetAvailableUsages() []string {
	if o == nil || IsNil(o.AvailableUsages) {
		var ret []string
		return ret
	}
	return o.AvailableUsages
}

// GetAvailableUsagesOk returns a tuple with the AvailableUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetAvailableUsagesOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableUsages) {
		return nil, false
	}
	return o.AvailableUsages, true
}

// HasAvailableUsages returns a boolean if a field has been set.
func (o *Upload) HasAvailableUsages() bool {
	if o != nil && !IsNil(o.AvailableUsages) {
		return true
	}

	return false
}

// SetAvailableUsages gets a reference to the given []string and assigns it to the AvailableUsages field.
func (o *Upload) SetAvailableUsages(v []string) {
	o.AvailableUsages = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *Upload) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *Upload) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *Upload) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *Upload) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *Upload) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *Upload) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetTnUploadEntries returns the TnUploadEntries field value if set, zero value otherwise.
func (o *Upload) GetTnUploadEntries() []TnUploadEntry {
	if o == nil || IsNil(o.TnUploadEntries) {
		var ret []TnUploadEntry
		return ret
	}
	return o.TnUploadEntries
}

// GetTnUploadEntriesOk returns a tuple with the TnUploadEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetTnUploadEntriesOk() ([]TnUploadEntry, bool) {
	if o == nil || IsNil(o.TnUploadEntries) {
		return nil, false
	}
	return o.TnUploadEntries, true
}

// HasTnUploadEntries returns a boolean if a field has been set.
func (o *Upload) HasTnUploadEntries() bool {
	if o != nil && !IsNil(o.TnUploadEntries) {
		return true
	}

	return false
}

// SetTnUploadEntries gets a reference to the given []TnUploadEntry and assigns it to the TnUploadEntries field.
func (o *Upload) SetTnUploadEntries(v []TnUploadEntry) {
	o.TnUploadEntries = v
}

func (o Upload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Upload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TicketId) {
		toSerialize["ticket_id"] = o.TicketId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.AvailableUsages) {
		toSerialize["available_usages"] = o.AvailableUsages
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if !IsNil(o.TnUploadEntries) {
		toSerialize["tn_upload_entries"] = o.TnUploadEntries
	}
	return toSerialize, nil
}

type NullableUpload struct {
	value *Upload
	isSet bool
}

func (v NullableUpload) Get() *Upload {
	return v.value
}

func (v *NullableUpload) Set(val *Upload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpload(val *Upload) *NullableUpload {
	return &NullableUpload{value: val, isSet: true}
}

func (v NullableUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


