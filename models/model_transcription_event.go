/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the TranscriptionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranscriptionEvent{}

// TranscriptionEvent struct for TranscriptionEvent
type TranscriptionEvent struct {
	Data *Transcription `json:"data,omitempty"`
}

// NewTranscriptionEvent instantiates a new TranscriptionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscriptionEvent() *TranscriptionEvent {
	this := TranscriptionEvent{}
	return &this
}

// NewTranscriptionEventWithDefaults instantiates a new TranscriptionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionEventWithDefaults() *TranscriptionEvent {
	this := TranscriptionEvent{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TranscriptionEvent) GetData() Transcription {
	if o == nil || IsNil(o.Data) {
		var ret Transcription
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionEvent) GetDataOk() (*Transcription, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TranscriptionEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given Transcription and assigns it to the Data field.
func (o *TranscriptionEvent) SetData(v Transcription) {
	o.Data = &v
}

func (o TranscriptionEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranscriptionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableTranscriptionEvent struct {
	value *TranscriptionEvent
	isSet bool
}

func (v NullableTranscriptionEvent) Get() *TranscriptionEvent {
	return v.value
}

func (v *NullableTranscriptionEvent) Set(val *TranscriptionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionEvent(val *TranscriptionEvent) *NullableTranscriptionEvent {
	return &NullableTranscriptionEvent{value: val, isSet: true}
}

func (v NullableTranscriptionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


