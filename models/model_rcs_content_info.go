/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCSContentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSContentInfo{}

// RCSContentInfo struct for RCSContentInfo
type RCSContentInfo struct {
	// Publicly reachable URL of the file.
	FileUrl string `json:"file_url"`
	// Publicly reachable URL of the thumbnail. Maximum size of 100 kB.
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	// If set the URL content will not be cached.
	ForceRefresh *bool `json:"force_refresh,omitempty"`
}

type _RCSContentInfo RCSContentInfo

// NewRCSContentInfo instantiates a new RCSContentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSContentInfo(fileUrl string) *RCSContentInfo {
	this := RCSContentInfo{}
	this.FileUrl = fileUrl
	return &this
}

// NewRCSContentInfoWithDefaults instantiates a new RCSContentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSContentInfoWithDefaults() *RCSContentInfo {
	this := RCSContentInfo{}
	return &this
}

// GetFileUrl returns the FileUrl field value
func (o *RCSContentInfo) GetFileUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileUrl
}

// GetFileUrlOk returns a tuple with the FileUrl field value
// and a boolean to check if the value has been set.
func (o *RCSContentInfo) GetFileUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileUrl, true
}

// SetFileUrl sets field value
func (o *RCSContentInfo) SetFileUrl(v string) {
	o.FileUrl = v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *RCSContentInfo) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSContentInfo) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *RCSContentInfo) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *RCSContentInfo) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetForceRefresh returns the ForceRefresh field value if set, zero value otherwise.
func (o *RCSContentInfo) GetForceRefresh() bool {
	if o == nil || IsNil(o.ForceRefresh) {
		var ret bool
		return ret
	}
	return *o.ForceRefresh
}

// GetForceRefreshOk returns a tuple with the ForceRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSContentInfo) GetForceRefreshOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceRefresh) {
		return nil, false
	}
	return o.ForceRefresh, true
}

// HasForceRefresh returns a boolean if a field has been set.
func (o *RCSContentInfo) HasForceRefresh() bool {
	if o != nil && !IsNil(o.ForceRefresh) {
		return true
	}

	return false
}

// SetForceRefresh gets a reference to the given bool and assigns it to the ForceRefresh field.
func (o *RCSContentInfo) SetForceRefresh(v bool) {
	o.ForceRefresh = &v
}

func (o RCSContentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSContentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_url"] = o.FileUrl
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	if !IsNil(o.ForceRefresh) {
		toSerialize["force_refresh"] = o.ForceRefresh
	}
	return toSerialize, nil
}

func (o *RCSContentInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCSContentInfo := _RCSContentInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCSContentInfo)

	if err != nil {
		return err
	}

	*o = RCSContentInfo(varRCSContentInfo)

	return err
}

type NullableRCSContentInfo struct {
	value *RCSContentInfo
	isSet bool
}

func (v NullableRCSContentInfo) Get() *RCSContentInfo {
	return v.value
}

func (v *NullableRCSContentInfo) Set(val *RCSContentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSContentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSContentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSContentInfo(val *RCSContentInfo) *NullableRCSContentInfo {
	return &NullableRCSContentInfo{value: val, isSet: true}
}

func (v NullableRCSContentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSContentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


