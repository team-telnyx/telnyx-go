/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CallEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallEvent{}

// CallEvent struct for CallEvent
type CallEvent struct {
	RecordType string `json:"record_type"`
	// Uniquely identifies an individual call leg.
	CallLegId string `json:"call_leg_id"`
	// Uniquely identifies the call control session. A session may include multiple call leg events.
	CallSessionId string `json:"call_session_id"`
	// Event timestamp
	EventTimestamp string `json:"event_timestamp"`
	// Event name
	Name string `json:"name"`
	// Event type
	Type string `json:"type"`
	// Event metadata, which includes raw event, and extra information based on event type
	Metadata map[string]interface{} `json:"metadata"`
}

type _CallEvent CallEvent

// NewCallEvent instantiates a new CallEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallEvent(recordType string, callLegId string, callSessionId string, eventTimestamp string, name string, type_ string, metadata map[string]interface{}) *CallEvent {
	this := CallEvent{}
	this.RecordType = recordType
	this.CallLegId = callLegId
	this.CallSessionId = callSessionId
	this.EventTimestamp = eventTimestamp
	this.Name = name
	this.Type = type_
	this.Metadata = metadata
	return &this
}

// NewCallEventWithDefaults instantiates a new CallEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallEventWithDefaults() *CallEvent {
	this := CallEvent{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *CallEvent) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *CallEvent) SetRecordType(v string) {
	o.RecordType = v
}

// GetCallLegId returns the CallLegId field value
func (o *CallEvent) GetCallLegId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetCallLegIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallLegId, true
}

// SetCallLegId sets field value
func (o *CallEvent) SetCallLegId(v string) {
	o.CallLegId = v
}

// GetCallSessionId returns the CallSessionId field value
func (o *CallEvent) GetCallSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetCallSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallSessionId, true
}

// SetCallSessionId sets field value
func (o *CallEvent) SetCallSessionId(v string) {
	o.CallSessionId = v
}

// GetEventTimestamp returns the EventTimestamp field value
func (o *CallEvent) GetEventTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTimestamp
}

// GetEventTimestampOk returns a tuple with the EventTimestamp field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetEventTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTimestamp, true
}

// SetEventTimestamp sets field value
func (o *CallEvent) SetEventTimestamp(v string) {
	o.EventTimestamp = v
}

// GetName returns the Name field value
func (o *CallEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CallEvent) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CallEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CallEvent) SetType(v string) {
	o.Type = v
}

// GetMetadata returns the Metadata field value
func (o *CallEvent) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *CallEvent) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o CallEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_type"] = o.RecordType
	toSerialize["call_leg_id"] = o.CallLegId
	toSerialize["call_session_id"] = o.CallSessionId
	toSerialize["event_timestamp"] = o.EventTimestamp
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *CallEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
		"call_leg_id",
		"call_session_id",
		"event_timestamp",
		"name",
		"type",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallEvent := _CallEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCallEvent)

	if err != nil {
		return err
	}

	*o = CallEvent(varCallEvent)

	return err
}

type NullableCallEvent struct {
	value *CallEvent
	isSet bool
}

func (v NullableCallEvent) Get() *CallEvent {
	return v.value
}

func (v *NullableCallEvent) Set(val *CallEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCallEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCallEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallEvent(val *CallEvent) *NullableCallEvent {
	return &NullableCallEvent{value: val, isSet: true}
}

func (v NullableCallEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


