/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JoinConferenceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JoinConferenceRequest{}

// JoinConferenceRequest struct for JoinConferenceRequest
type JoinConferenceRequest struct {
	// Unique identifier and token for controlling the call
	CallControlId string `json:"call_control_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. Please note that the client_state will be updated for the participient call leg and the change will not affect conferencing webhooks unless the participient is the owner of the conference.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.
	CommandId *string `json:"command_id,omitempty"`
	// Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".
	EndConferenceOnExit *bool `json:"end_conference_on_exit,omitempty"`
	// Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".
	SoftEndConferenceOnExit *bool `json:"soft_end_conference_on_exit,omitempty"`
	// Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".
	Hold *bool `json:"hold,omitempty"`
	// The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".
	HoldAudioUrl *string `json:"hold_audio_url,omitempty"`
	// The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".
	HoldMediaName *string `json:"hold_media_name,omitempty"`
	// Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".
	Mute *bool `json:"mute,omitempty"`
	// Whether the conference should be started after the participant joins the conference. Defaults to \"false\".
	StartConferenceOnEnter *bool `json:"start_conference_on_enter,omitempty"`
	// Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".
	SupervisorRole *string `json:"supervisor_role,omitempty"`
	// Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.
	WhisperCallControlIds []string `json:"whisper_call_control_ids,omitempty"`
	// Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.
	BeepEnabled *string `json:"beep_enabled,omitempty"`
}

type _JoinConferenceRequest JoinConferenceRequest

// NewJoinConferenceRequest instantiates a new JoinConferenceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoinConferenceRequest(callControlId string) *JoinConferenceRequest {
	this := JoinConferenceRequest{}
	this.CallControlId = callControlId
	return &this
}

// NewJoinConferenceRequestWithDefaults instantiates a new JoinConferenceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinConferenceRequestWithDefaults() *JoinConferenceRequest {
	this := JoinConferenceRequest{}
	return &this
}

// GetCallControlId returns the CallControlId field value
func (o *JoinConferenceRequest) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *JoinConferenceRequest) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *JoinConferenceRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *JoinConferenceRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetEndConferenceOnExit returns the EndConferenceOnExit field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetEndConferenceOnExit() bool {
	if o == nil || IsNil(o.EndConferenceOnExit) {
		var ret bool
		return ret
	}
	return *o.EndConferenceOnExit
}

// GetEndConferenceOnExitOk returns a tuple with the EndConferenceOnExit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetEndConferenceOnExitOk() (*bool, bool) {
	if o == nil || IsNil(o.EndConferenceOnExit) {
		return nil, false
	}
	return o.EndConferenceOnExit, true
}

// HasEndConferenceOnExit returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasEndConferenceOnExit() bool {
	if o != nil && !IsNil(o.EndConferenceOnExit) {
		return true
	}

	return false
}

// SetEndConferenceOnExit gets a reference to the given bool and assigns it to the EndConferenceOnExit field.
func (o *JoinConferenceRequest) SetEndConferenceOnExit(v bool) {
	o.EndConferenceOnExit = &v
}

// GetSoftEndConferenceOnExit returns the SoftEndConferenceOnExit field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetSoftEndConferenceOnExit() bool {
	if o == nil || IsNil(o.SoftEndConferenceOnExit) {
		var ret bool
		return ret
	}
	return *o.SoftEndConferenceOnExit
}

// GetSoftEndConferenceOnExitOk returns a tuple with the SoftEndConferenceOnExit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetSoftEndConferenceOnExitOk() (*bool, bool) {
	if o == nil || IsNil(o.SoftEndConferenceOnExit) {
		return nil, false
	}
	return o.SoftEndConferenceOnExit, true
}

// HasSoftEndConferenceOnExit returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasSoftEndConferenceOnExit() bool {
	if o != nil && !IsNil(o.SoftEndConferenceOnExit) {
		return true
	}

	return false
}

// SetSoftEndConferenceOnExit gets a reference to the given bool and assigns it to the SoftEndConferenceOnExit field.
func (o *JoinConferenceRequest) SetSoftEndConferenceOnExit(v bool) {
	o.SoftEndConferenceOnExit = &v
}

// GetHold returns the Hold field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetHold() bool {
	if o == nil || IsNil(o.Hold) {
		var ret bool
		return ret
	}
	return *o.Hold
}

// GetHoldOk returns a tuple with the Hold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Hold) {
		return nil, false
	}
	return o.Hold, true
}

// HasHold returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasHold() bool {
	if o != nil && !IsNil(o.Hold) {
		return true
	}

	return false
}

// SetHold gets a reference to the given bool and assigns it to the Hold field.
func (o *JoinConferenceRequest) SetHold(v bool) {
	o.Hold = &v
}

// GetHoldAudioUrl returns the HoldAudioUrl field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetHoldAudioUrl() string {
	if o == nil || IsNil(o.HoldAudioUrl) {
		var ret string
		return ret
	}
	return *o.HoldAudioUrl
}

// GetHoldAudioUrlOk returns a tuple with the HoldAudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetHoldAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HoldAudioUrl) {
		return nil, false
	}
	return o.HoldAudioUrl, true
}

// HasHoldAudioUrl returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasHoldAudioUrl() bool {
	if o != nil && !IsNil(o.HoldAudioUrl) {
		return true
	}

	return false
}

// SetHoldAudioUrl gets a reference to the given string and assigns it to the HoldAudioUrl field.
func (o *JoinConferenceRequest) SetHoldAudioUrl(v string) {
	o.HoldAudioUrl = &v
}

// GetHoldMediaName returns the HoldMediaName field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetHoldMediaName() string {
	if o == nil || IsNil(o.HoldMediaName) {
		var ret string
		return ret
	}
	return *o.HoldMediaName
}

// GetHoldMediaNameOk returns a tuple with the HoldMediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetHoldMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.HoldMediaName) {
		return nil, false
	}
	return o.HoldMediaName, true
}

// HasHoldMediaName returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasHoldMediaName() bool {
	if o != nil && !IsNil(o.HoldMediaName) {
		return true
	}

	return false
}

// SetHoldMediaName gets a reference to the given string and assigns it to the HoldMediaName field.
func (o *JoinConferenceRequest) SetHoldMediaName(v string) {
	o.HoldMediaName = &v
}

// GetMute returns the Mute field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetMute() bool {
	if o == nil || IsNil(o.Mute) {
		var ret bool
		return ret
	}
	return *o.Mute
}

// GetMuteOk returns a tuple with the Mute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetMuteOk() (*bool, bool) {
	if o == nil || IsNil(o.Mute) {
		return nil, false
	}
	return o.Mute, true
}

// HasMute returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasMute() bool {
	if o != nil && !IsNil(o.Mute) {
		return true
	}

	return false
}

// SetMute gets a reference to the given bool and assigns it to the Mute field.
func (o *JoinConferenceRequest) SetMute(v bool) {
	o.Mute = &v
}

// GetStartConferenceOnEnter returns the StartConferenceOnEnter field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetStartConferenceOnEnter() bool {
	if o == nil || IsNil(o.StartConferenceOnEnter) {
		var ret bool
		return ret
	}
	return *o.StartConferenceOnEnter
}

// GetStartConferenceOnEnterOk returns a tuple with the StartConferenceOnEnter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetStartConferenceOnEnterOk() (*bool, bool) {
	if o == nil || IsNil(o.StartConferenceOnEnter) {
		return nil, false
	}
	return o.StartConferenceOnEnter, true
}

// HasStartConferenceOnEnter returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasStartConferenceOnEnter() bool {
	if o != nil && !IsNil(o.StartConferenceOnEnter) {
		return true
	}

	return false
}

// SetStartConferenceOnEnter gets a reference to the given bool and assigns it to the StartConferenceOnEnter field.
func (o *JoinConferenceRequest) SetStartConferenceOnEnter(v bool) {
	o.StartConferenceOnEnter = &v
}

// GetSupervisorRole returns the SupervisorRole field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetSupervisorRole() string {
	if o == nil || IsNil(o.SupervisorRole) {
		var ret string
		return ret
	}
	return *o.SupervisorRole
}

// GetSupervisorRoleOk returns a tuple with the SupervisorRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetSupervisorRoleOk() (*string, bool) {
	if o == nil || IsNil(o.SupervisorRole) {
		return nil, false
	}
	return o.SupervisorRole, true
}

// HasSupervisorRole returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasSupervisorRole() bool {
	if o != nil && !IsNil(o.SupervisorRole) {
		return true
	}

	return false
}

// SetSupervisorRole gets a reference to the given string and assigns it to the SupervisorRole field.
func (o *JoinConferenceRequest) SetSupervisorRole(v string) {
	o.SupervisorRole = &v
}

// GetWhisperCallControlIds returns the WhisperCallControlIds field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetWhisperCallControlIds() []string {
	if o == nil || IsNil(o.WhisperCallControlIds) {
		var ret []string
		return ret
	}
	return o.WhisperCallControlIds
}

// GetWhisperCallControlIdsOk returns a tuple with the WhisperCallControlIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetWhisperCallControlIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WhisperCallControlIds) {
		return nil, false
	}
	return o.WhisperCallControlIds, true
}

// HasWhisperCallControlIds returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasWhisperCallControlIds() bool {
	if o != nil && !IsNil(o.WhisperCallControlIds) {
		return true
	}

	return false
}

// SetWhisperCallControlIds gets a reference to the given []string and assigns it to the WhisperCallControlIds field.
func (o *JoinConferenceRequest) SetWhisperCallControlIds(v []string) {
	o.WhisperCallControlIds = v
}

// GetBeepEnabled returns the BeepEnabled field value if set, zero value otherwise.
func (o *JoinConferenceRequest) GetBeepEnabled() string {
	if o == nil || IsNil(o.BeepEnabled) {
		var ret string
		return ret
	}
	return *o.BeepEnabled
}

// GetBeepEnabledOk returns a tuple with the BeepEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JoinConferenceRequest) GetBeepEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.BeepEnabled) {
		return nil, false
	}
	return o.BeepEnabled, true
}

// HasBeepEnabled returns a boolean if a field has been set.
func (o *JoinConferenceRequest) HasBeepEnabled() bool {
	if o != nil && !IsNil(o.BeepEnabled) {
		return true
	}

	return false
}

// SetBeepEnabled gets a reference to the given string and assigns it to the BeepEnabled field.
func (o *JoinConferenceRequest) SetBeepEnabled(v string) {
	o.BeepEnabled = &v
}

func (o JoinConferenceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JoinConferenceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_control_id"] = o.CallControlId
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.EndConferenceOnExit) {
		toSerialize["end_conference_on_exit"] = o.EndConferenceOnExit
	}
	if !IsNil(o.SoftEndConferenceOnExit) {
		toSerialize["soft_end_conference_on_exit"] = o.SoftEndConferenceOnExit
	}
	if !IsNil(o.Hold) {
		toSerialize["hold"] = o.Hold
	}
	if !IsNil(o.HoldAudioUrl) {
		toSerialize["hold_audio_url"] = o.HoldAudioUrl
	}
	if !IsNil(o.HoldMediaName) {
		toSerialize["hold_media_name"] = o.HoldMediaName
	}
	if !IsNil(o.Mute) {
		toSerialize["mute"] = o.Mute
	}
	if !IsNil(o.StartConferenceOnEnter) {
		toSerialize["start_conference_on_enter"] = o.StartConferenceOnEnter
	}
	if !IsNil(o.SupervisorRole) {
		toSerialize["supervisor_role"] = o.SupervisorRole
	}
	if !IsNil(o.WhisperCallControlIds) {
		toSerialize["whisper_call_control_ids"] = o.WhisperCallControlIds
	}
	if !IsNil(o.BeepEnabled) {
		toSerialize["beep_enabled"] = o.BeepEnabled
	}
	return toSerialize, nil
}

func (o *JoinConferenceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_control_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJoinConferenceRequest := _JoinConferenceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJoinConferenceRequest)

	if err != nil {
		return err
	}

	*o = JoinConferenceRequest(varJoinConferenceRequest)

	return err
}

type NullableJoinConferenceRequest struct {
	value *JoinConferenceRequest
	isSet bool
}

func (v NullableJoinConferenceRequest) Get() *JoinConferenceRequest {
	return v.value
}

func (v *NullableJoinConferenceRequest) Set(val *JoinConferenceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinConferenceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinConferenceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinConferenceRequest(val *JoinConferenceRequest) *NullableJoinConferenceRequest {
	return &NullableJoinConferenceRequest{value: val, isSet: true}
}

func (v NullableJoinConferenceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinConferenceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


