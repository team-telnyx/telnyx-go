/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SubNumberOrderRegulatoryRequirement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubNumberOrderRegulatoryRequirement{}

// SubNumberOrderRegulatoryRequirement struct for SubNumberOrderRegulatoryRequirement
type SubNumberOrderRegulatoryRequirement struct {
	RecordType *string `json:"record_type,omitempty"`
	// Unique id for a requirement.
	RequirementId *string `json:"requirement_id,omitempty"`
	FieldType *string `json:"field_type,omitempty"`
}

// NewSubNumberOrderRegulatoryRequirement instantiates a new SubNumberOrderRegulatoryRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubNumberOrderRegulatoryRequirement() *SubNumberOrderRegulatoryRequirement {
	this := SubNumberOrderRegulatoryRequirement{}
	return &this
}

// NewSubNumberOrderRegulatoryRequirementWithDefaults instantiates a new SubNumberOrderRegulatoryRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubNumberOrderRegulatoryRequirementWithDefaults() *SubNumberOrderRegulatoryRequirement {
	this := SubNumberOrderRegulatoryRequirement{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SubNumberOrderRegulatoryRequirement) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrderRegulatoryRequirement) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SubNumberOrderRegulatoryRequirement) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SubNumberOrderRegulatoryRequirement) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRequirementId returns the RequirementId field value if set, zero value otherwise.
func (o *SubNumberOrderRegulatoryRequirement) GetRequirementId() string {
	if o == nil || IsNil(o.RequirementId) {
		var ret string
		return ret
	}
	return *o.RequirementId
}

// GetRequirementIdOk returns a tuple with the RequirementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrderRegulatoryRequirement) GetRequirementIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequirementId) {
		return nil, false
	}
	return o.RequirementId, true
}

// HasRequirementId returns a boolean if a field has been set.
func (o *SubNumberOrderRegulatoryRequirement) HasRequirementId() bool {
	if o != nil && !IsNil(o.RequirementId) {
		return true
	}

	return false
}

// SetRequirementId gets a reference to the given string and assigns it to the RequirementId field.
func (o *SubNumberOrderRegulatoryRequirement) SetRequirementId(v string) {
	o.RequirementId = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *SubNumberOrderRegulatoryRequirement) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrderRegulatoryRequirement) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *SubNumberOrderRegulatoryRequirement) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *SubNumberOrderRegulatoryRequirement) SetFieldType(v string) {
	o.FieldType = &v
}

func (o SubNumberOrderRegulatoryRequirement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubNumberOrderRegulatoryRequirement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.RequirementId) {
		toSerialize["requirement_id"] = o.RequirementId
	}
	if !IsNil(o.FieldType) {
		toSerialize["field_type"] = o.FieldType
	}
	return toSerialize, nil
}

type NullableSubNumberOrderRegulatoryRequirement struct {
	value *SubNumberOrderRegulatoryRequirement
	isSet bool
}

func (v NullableSubNumberOrderRegulatoryRequirement) Get() *SubNumberOrderRegulatoryRequirement {
	return v.value
}

func (v *NullableSubNumberOrderRegulatoryRequirement) Set(val *SubNumberOrderRegulatoryRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableSubNumberOrderRegulatoryRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableSubNumberOrderRegulatoryRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubNumberOrderRegulatoryRequirement(val *SubNumberOrderRegulatoryRequirement) *NullableSubNumberOrderRegulatoryRequirement {
	return &NullableSubNumberOrderRegulatoryRequirement{value: val, isSet: true}
}

func (v NullableSubNumberOrderRegulatoryRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubNumberOrderRegulatoryRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


