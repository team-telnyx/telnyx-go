/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomStorageConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomStorageConfiguration{}

// CustomStorageConfiguration struct for CustomStorageConfiguration
type CustomStorageConfiguration struct {
	Backend string `json:"backend"`
	Configuration CustomStorageConfigurationConfiguration `json:"configuration"`
}

type _CustomStorageConfiguration CustomStorageConfiguration

// NewCustomStorageConfiguration instantiates a new CustomStorageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomStorageConfiguration(backend string, configuration CustomStorageConfigurationConfiguration) *CustomStorageConfiguration {
	this := CustomStorageConfiguration{}
	this.Backend = backend
	this.Configuration = configuration
	return &this
}

// NewCustomStorageConfigurationWithDefaults instantiates a new CustomStorageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomStorageConfigurationWithDefaults() *CustomStorageConfiguration {
	this := CustomStorageConfiguration{}
	return &this
}

// GetBackend returns the Backend field value
func (o *CustomStorageConfiguration) GetBackend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *CustomStorageConfiguration) GetBackendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backend, true
}

// SetBackend sets field value
func (o *CustomStorageConfiguration) SetBackend(v string) {
	o.Backend = v
}

// GetConfiguration returns the Configuration field value
func (o *CustomStorageConfiguration) GetConfiguration() CustomStorageConfigurationConfiguration {
	if o == nil {
		var ret CustomStorageConfigurationConfiguration
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *CustomStorageConfiguration) GetConfigurationOk() (*CustomStorageConfigurationConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *CustomStorageConfiguration) SetConfiguration(v CustomStorageConfigurationConfiguration) {
	o.Configuration = v
}

func (o CustomStorageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomStorageConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backend"] = o.Backend
	toSerialize["configuration"] = o.Configuration
	return toSerialize, nil
}

func (o *CustomStorageConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backend",
		"configuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomStorageConfiguration := _CustomStorageConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomStorageConfiguration)

	if err != nil {
		return err
	}

	*o = CustomStorageConfiguration(varCustomStorageConfiguration)

	return err
}

type NullableCustomStorageConfiguration struct {
	value *CustomStorageConfiguration
	isSet bool
}

func (v NullableCustomStorageConfiguration) Get() *CustomStorageConfiguration {
	return v.value
}

func (v *NullableCustomStorageConfiguration) Set(val *CustomStorageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomStorageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomStorageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomStorageConfiguration(val *CustomStorageConfiguration) *NullableCustomStorageConfiguration {
	return &NullableCustomStorageConfiguration{value: val, isSet: true}
}

func (v NullableCustomStorageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomStorageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


