/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the ConferenceSpeakEndedPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceSpeakEndedPayload{}

// ConferenceSpeakEndedPayload struct for ConferenceSpeakEndedPayload
type ConferenceSpeakEndedPayload struct {
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionId *string `json:"connection_id,omitempty"`
	// ID that is unique to the call session that started the conference.
	CreatorCallSessionId *string `json:"creator_call_session_id,omitempty"`
	// ID of the conference the text was spoken in.
	ConferenceId *string `json:"conference_id,omitempty"`
	// ISO 8601 datetime of when the event occurred.
	OccurredAt *time.Time `json:"occurred_at,omitempty"`
}

// NewConferenceSpeakEndedPayload instantiates a new ConferenceSpeakEndedPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceSpeakEndedPayload() *ConferenceSpeakEndedPayload {
	this := ConferenceSpeakEndedPayload{}
	return &this
}

// NewConferenceSpeakEndedPayloadWithDefaults instantiates a new ConferenceSpeakEndedPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceSpeakEndedPayloadWithDefaults() *ConferenceSpeakEndedPayload {
	this := ConferenceSpeakEndedPayload{}
	return &this
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ConferenceSpeakEndedPayload) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceSpeakEndedPayload) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ConferenceSpeakEndedPayload) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *ConferenceSpeakEndedPayload) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetCreatorCallSessionId returns the CreatorCallSessionId field value if set, zero value otherwise.
func (o *ConferenceSpeakEndedPayload) GetCreatorCallSessionId() string {
	if o == nil || IsNil(o.CreatorCallSessionId) {
		var ret string
		return ret
	}
	return *o.CreatorCallSessionId
}

// GetCreatorCallSessionIdOk returns a tuple with the CreatorCallSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceSpeakEndedPayload) GetCreatorCallSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorCallSessionId) {
		return nil, false
	}
	return o.CreatorCallSessionId, true
}

// HasCreatorCallSessionId returns a boolean if a field has been set.
func (o *ConferenceSpeakEndedPayload) HasCreatorCallSessionId() bool {
	if o != nil && !IsNil(o.CreatorCallSessionId) {
		return true
	}

	return false
}

// SetCreatorCallSessionId gets a reference to the given string and assigns it to the CreatorCallSessionId field.
func (o *ConferenceSpeakEndedPayload) SetCreatorCallSessionId(v string) {
	o.CreatorCallSessionId = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceSpeakEndedPayload) GetConferenceId() string {
	if o == nil || IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceSpeakEndedPayload) GetConferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceSpeakEndedPayload) HasConferenceId() bool {
	if o != nil && !IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceSpeakEndedPayload) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetOccurredAt returns the OccurredAt field value if set, zero value otherwise.
func (o *ConferenceSpeakEndedPayload) GetOccurredAt() time.Time {
	if o == nil || IsNil(o.OccurredAt) {
		var ret time.Time
		return ret
	}
	return *o.OccurredAt
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceSpeakEndedPayload) GetOccurredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OccurredAt) {
		return nil, false
	}
	return o.OccurredAt, true
}

// HasOccurredAt returns a boolean if a field has been set.
func (o *ConferenceSpeakEndedPayload) HasOccurredAt() bool {
	if o != nil && !IsNil(o.OccurredAt) {
		return true
	}

	return false
}

// SetOccurredAt gets a reference to the given time.Time and assigns it to the OccurredAt field.
func (o *ConferenceSpeakEndedPayload) SetOccurredAt(v time.Time) {
	o.OccurredAt = &v
}

func (o ConferenceSpeakEndedPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceSpeakEndedPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.CreatorCallSessionId) {
		toSerialize["creator_call_session_id"] = o.CreatorCallSessionId
	}
	if !IsNil(o.ConferenceId) {
		toSerialize["conference_id"] = o.ConferenceId
	}
	if !IsNil(o.OccurredAt) {
		toSerialize["occurred_at"] = o.OccurredAt
	}
	return toSerialize, nil
}

type NullableConferenceSpeakEndedPayload struct {
	value *ConferenceSpeakEndedPayload
	isSet bool
}

func (v NullableConferenceSpeakEndedPayload) Get() *ConferenceSpeakEndedPayload {
	return v.value
}

func (v *NullableConferenceSpeakEndedPayload) Set(val *ConferenceSpeakEndedPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceSpeakEndedPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceSpeakEndedPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceSpeakEndedPayload(val *ConferenceSpeakEndedPayload) *NullableConferenceSpeakEndedPayload {
	return &NullableConferenceSpeakEndedPayload{value: val, isSet: true}
}

func (v NullableConferenceSpeakEndedPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceSpeakEndedPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


