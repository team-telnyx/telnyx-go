/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the Carrier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Carrier{}

// Carrier struct for Carrier
type Carrier struct {
	// Region code that matches the specific country calling code if the requested phone number type is mobile
	MobileCountryCode *string `json:"mobile_country_code,omitempty"`
	// National destination code (NDC), with a 0 prefix, if an NDC is found and the requested phone number type is mobile
	MobileNetworkCode *string `json:"mobile_network_code,omitempty"`
	// SPID (Service Provider ID) name, if the requested phone number has been ported; otherwise, the name of carrier who owns the phone number block
	Name *string `json:"name,omitempty"`
	// A phone number type that identifies the type of service associated with the requested phone number
	Type *string `json:"type,omitempty"`
	// Unused
	ErrorCode *string `json:"error_code,omitempty"`
	// If known to Telnyx and applicable, the primary network carrier.
	NormalizedCarrier *string `json:"normalized_carrier,omitempty"`
}

// NewCarrier instantiates a new Carrier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarrier() *Carrier {
	this := Carrier{}
	return &this
}

// NewCarrierWithDefaults instantiates a new Carrier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarrierWithDefaults() *Carrier {
	this := Carrier{}
	return &this
}

// GetMobileCountryCode returns the MobileCountryCode field value if set, zero value otherwise.
func (o *Carrier) GetMobileCountryCode() string {
	if o == nil || IsNil(o.MobileCountryCode) {
		var ret string
		return ret
	}
	return *o.MobileCountryCode
}

// GetMobileCountryCodeOk returns a tuple with the MobileCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carrier) GetMobileCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MobileCountryCode) {
		return nil, false
	}
	return o.MobileCountryCode, true
}

// HasMobileCountryCode returns a boolean if a field has been set.
func (o *Carrier) HasMobileCountryCode() bool {
	if o != nil && !IsNil(o.MobileCountryCode) {
		return true
	}

	return false
}

// SetMobileCountryCode gets a reference to the given string and assigns it to the MobileCountryCode field.
func (o *Carrier) SetMobileCountryCode(v string) {
	o.MobileCountryCode = &v
}

// GetMobileNetworkCode returns the MobileNetworkCode field value if set, zero value otherwise.
func (o *Carrier) GetMobileNetworkCode() string {
	if o == nil || IsNil(o.MobileNetworkCode) {
		var ret string
		return ret
	}
	return *o.MobileNetworkCode
}

// GetMobileNetworkCodeOk returns a tuple with the MobileNetworkCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carrier) GetMobileNetworkCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MobileNetworkCode) {
		return nil, false
	}
	return o.MobileNetworkCode, true
}

// HasMobileNetworkCode returns a boolean if a field has been set.
func (o *Carrier) HasMobileNetworkCode() bool {
	if o != nil && !IsNil(o.MobileNetworkCode) {
		return true
	}

	return false
}

// SetMobileNetworkCode gets a reference to the given string and assigns it to the MobileNetworkCode field.
func (o *Carrier) SetMobileNetworkCode(v string) {
	o.MobileNetworkCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Carrier) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carrier) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Carrier) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Carrier) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Carrier) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carrier) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Carrier) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Carrier) SetType(v string) {
	o.Type = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *Carrier) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carrier) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *Carrier) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *Carrier) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetNormalizedCarrier returns the NormalizedCarrier field value if set, zero value otherwise.
func (o *Carrier) GetNormalizedCarrier() string {
	if o == nil || IsNil(o.NormalizedCarrier) {
		var ret string
		return ret
	}
	return *o.NormalizedCarrier
}

// GetNormalizedCarrierOk returns a tuple with the NormalizedCarrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carrier) GetNormalizedCarrierOk() (*string, bool) {
	if o == nil || IsNil(o.NormalizedCarrier) {
		return nil, false
	}
	return o.NormalizedCarrier, true
}

// HasNormalizedCarrier returns a boolean if a field has been set.
func (o *Carrier) HasNormalizedCarrier() bool {
	if o != nil && !IsNil(o.NormalizedCarrier) {
		return true
	}

	return false
}

// SetNormalizedCarrier gets a reference to the given string and assigns it to the NormalizedCarrier field.
func (o *Carrier) SetNormalizedCarrier(v string) {
	o.NormalizedCarrier = &v
}

func (o Carrier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Carrier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MobileCountryCode) {
		toSerialize["mobile_country_code"] = o.MobileCountryCode
	}
	if !IsNil(o.MobileNetworkCode) {
		toSerialize["mobile_network_code"] = o.MobileNetworkCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.NormalizedCarrier) {
		toSerialize["normalized_carrier"] = o.NormalizedCarrier
	}
	return toSerialize, nil
}

type NullableCarrier struct {
	value *Carrier
	isSet bool
}

func (v NullableCarrier) Get() *Carrier {
	return v.value
}

func (v *NullableCarrier) Set(val *Carrier) {
	v.value = val
	v.isSet = true
}

func (v NullableCarrier) IsSet() bool {
	return v.isSet
}

func (v *NullableCarrier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarrier(val *Carrier) *NullableCarrier {
	return &NullableCarrier{value: val, isSet: true}
}

func (v NullableCarrier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarrier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


