/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferenceRecordingResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceRecordingResource{}

// ConferenceRecordingResource struct for ConferenceRecordingResource
type ConferenceRecordingResource struct {
	// The id of the account the resource belongs to.
	AccountSid *string `json:"account_sid,omitempty"`
	// The identifier of the related participant's call.
	CallSid *string `json:"call_sid,omitempty"`
	// The number of channels in the recording.
	Channels *int32 `json:"channels,omitempty"`
	// The identifier of the related conference.
	ConferenceSid *string `json:"conference_sid,omitempty"`
	// The timestamp of when the resource was created.
	DateCreated *string `json:"date_created,omitempty"`
	// The timestamp of when the resource was last updated.
	DateUpdated *string `json:"date_updated,omitempty"`
	// Duratin of the recording in seconds.
	Duration *int32 `json:"duration,omitempty"`
	// The recording error, if any.
	ErrorCode *string `json:"error_code,omitempty"`
	// The URL to use to download the recording.
	MediaUrl *string `json:"media_url,omitempty"`
	// The unique identifier of the recording.
	Sid *string `json:"sid,omitempty"`
	// How the recording was started.
	Source *string `json:"source,omitempty"`
	// The timestamp of when the recording was started.
	StartTime *string `json:"start_time,omitempty"`
	// The status of the recording.
	Status *string `json:"status,omitempty"`
	// A list of related resources identified by their relative URIs.
	SubresourceUris map[string]interface{} `json:"subresource_uris,omitempty"`
	// The relative URI for this recording.
	Uri *string `json:"uri,omitempty"`
}

// NewConferenceRecordingResource instantiates a new ConferenceRecordingResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceRecordingResource() *ConferenceRecordingResource {
	this := ConferenceRecordingResource{}
	return &this
}

// NewConferenceRecordingResourceWithDefaults instantiates a new ConferenceRecordingResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceRecordingResourceWithDefaults() *ConferenceRecordingResource {
	this := ConferenceRecordingResource{}
	return &this
}

// GetAccountSid returns the AccountSid field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetAccountSid() string {
	if o == nil || IsNil(o.AccountSid) {
		var ret string
		return ret
	}
	return *o.AccountSid
}

// GetAccountSidOk returns a tuple with the AccountSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetAccountSidOk() (*string, bool) {
	if o == nil || IsNil(o.AccountSid) {
		return nil, false
	}
	return o.AccountSid, true
}

// HasAccountSid returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasAccountSid() bool {
	if o != nil && !IsNil(o.AccountSid) {
		return true
	}

	return false
}

// SetAccountSid gets a reference to the given string and assigns it to the AccountSid field.
func (o *ConferenceRecordingResource) SetAccountSid(v string) {
	o.AccountSid = &v
}

// GetCallSid returns the CallSid field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetCallSid() string {
	if o == nil || IsNil(o.CallSid) {
		var ret string
		return ret
	}
	return *o.CallSid
}

// GetCallSidOk returns a tuple with the CallSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetCallSidOk() (*string, bool) {
	if o == nil || IsNil(o.CallSid) {
		return nil, false
	}
	return o.CallSid, true
}

// HasCallSid returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasCallSid() bool {
	if o != nil && !IsNil(o.CallSid) {
		return true
	}

	return false
}

// SetCallSid gets a reference to the given string and assigns it to the CallSid field.
func (o *ConferenceRecordingResource) SetCallSid(v string) {
	o.CallSid = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetChannels() int32 {
	if o == nil || IsNil(o.Channels) {
		var ret int32
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetChannelsOk() (*int32, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given int32 and assigns it to the Channels field.
func (o *ConferenceRecordingResource) SetChannels(v int32) {
	o.Channels = &v
}

// GetConferenceSid returns the ConferenceSid field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetConferenceSid() string {
	if o == nil || IsNil(o.ConferenceSid) {
		var ret string
		return ret
	}
	return *o.ConferenceSid
}

// GetConferenceSidOk returns a tuple with the ConferenceSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetConferenceSidOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceSid) {
		return nil, false
	}
	return o.ConferenceSid, true
}

// HasConferenceSid returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasConferenceSid() bool {
	if o != nil && !IsNil(o.ConferenceSid) {
		return true
	}

	return false
}

// SetConferenceSid gets a reference to the given string and assigns it to the ConferenceSid field.
func (o *ConferenceRecordingResource) SetConferenceSid(v string) {
	o.ConferenceSid = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *ConferenceRecordingResource) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetDateUpdated() string {
	if o == nil || IsNil(o.DateUpdated) {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetDateUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateUpdated) {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasDateUpdated() bool {
	if o != nil && !IsNil(o.DateUpdated) {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *ConferenceRecordingResource) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *ConferenceRecordingResource) SetDuration(v int32) {
	o.Duration = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *ConferenceRecordingResource) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetMediaUrl returns the MediaUrl field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetMediaUrl() string {
	if o == nil || IsNil(o.MediaUrl) {
		var ret string
		return ret
	}
	return *o.MediaUrl
}

// GetMediaUrlOk returns a tuple with the MediaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetMediaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MediaUrl) {
		return nil, false
	}
	return o.MediaUrl, true
}

// HasMediaUrl returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasMediaUrl() bool {
	if o != nil && !IsNil(o.MediaUrl) {
		return true
	}

	return false
}

// SetMediaUrl gets a reference to the given string and assigns it to the MediaUrl field.
func (o *ConferenceRecordingResource) SetMediaUrl(v string) {
	o.MediaUrl = &v
}

// GetSid returns the Sid field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetSid() string {
	if o == nil || IsNil(o.Sid) {
		var ret string
		return ret
	}
	return *o.Sid
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetSidOk() (*string, bool) {
	if o == nil || IsNil(o.Sid) {
		return nil, false
	}
	return o.Sid, true
}

// HasSid returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasSid() bool {
	if o != nil && !IsNil(o.Sid) {
		return true
	}

	return false
}

// SetSid gets a reference to the given string and assigns it to the Sid field.
func (o *ConferenceRecordingResource) SetSid(v string) {
	o.Sid = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ConferenceRecordingResource) SetSource(v string) {
	o.Source = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *ConferenceRecordingResource) SetStartTime(v string) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConferenceRecordingResource) SetStatus(v string) {
	o.Status = &v
}

// GetSubresourceUris returns the SubresourceUris field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetSubresourceUris() map[string]interface{} {
	if o == nil || IsNil(o.SubresourceUris) {
		var ret map[string]interface{}
		return ret
	}
	return o.SubresourceUris
}

// GetSubresourceUrisOk returns a tuple with the SubresourceUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetSubresourceUrisOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SubresourceUris) {
		return map[string]interface{}{}, false
	}
	return o.SubresourceUris, true
}

// HasSubresourceUris returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasSubresourceUris() bool {
	if o != nil && !IsNil(o.SubresourceUris) {
		return true
	}

	return false
}

// SetSubresourceUris gets a reference to the given map[string]interface{} and assigns it to the SubresourceUris field.
func (o *ConferenceRecordingResource) SetSubresourceUris(v map[string]interface{}) {
	o.SubresourceUris = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ConferenceRecordingResource) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingResource) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ConferenceRecordingResource) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ConferenceRecordingResource) SetUri(v string) {
	o.Uri = &v
}

func (o ConferenceRecordingResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceRecordingResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountSid) {
		toSerialize["account_sid"] = o.AccountSid
	}
	if !IsNil(o.CallSid) {
		toSerialize["call_sid"] = o.CallSid
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.ConferenceSid) {
		toSerialize["conference_sid"] = o.ConferenceSid
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.DateUpdated) {
		toSerialize["date_updated"] = o.DateUpdated
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.MediaUrl) {
		toSerialize["media_url"] = o.MediaUrl
	}
	if !IsNil(o.Sid) {
		toSerialize["sid"] = o.Sid
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SubresourceUris) {
		toSerialize["subresource_uris"] = o.SubresourceUris
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableConferenceRecordingResource struct {
	value *ConferenceRecordingResource
	isSet bool
}

func (v NullableConferenceRecordingResource) Get() *ConferenceRecordingResource {
	return v.value
}

func (v *NullableConferenceRecordingResource) Set(val *ConferenceRecordingResource) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceRecordingResource) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceRecordingResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceRecordingResource(val *ConferenceRecordingResource) *NullableConferenceRecordingResource {
	return &NullableConferenceRecordingResource{value: val, isSet: true}
}

func (v NullableConferenceRecordingResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceRecordingResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


