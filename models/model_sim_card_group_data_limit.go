/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardGroupDataLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardGroupDataLimit{}

// SIMCardGroupDataLimit Upper limit on the amount of data the SIM cards, within the group, can use.
type SIMCardGroupDataLimit struct {
	Amount *float64 `json:"amount,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewSIMCardGroupDataLimit instantiates a new SIMCardGroupDataLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardGroupDataLimit() *SIMCardGroupDataLimit {
	this := SIMCardGroupDataLimit{}
	return &this
}

// NewSIMCardGroupDataLimitWithDefaults instantiates a new SIMCardGroupDataLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardGroupDataLimitWithDefaults() *SIMCardGroupDataLimit {
	this := SIMCardGroupDataLimit{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SIMCardGroupDataLimit) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardGroupDataLimit) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SIMCardGroupDataLimit) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *SIMCardGroupDataLimit) SetAmount(v float64) {
	o.Amount = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SIMCardGroupDataLimit) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardGroupDataLimit) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SIMCardGroupDataLimit) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *SIMCardGroupDataLimit) SetUnit(v string) {
	o.Unit = &v
}

func (o SIMCardGroupDataLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardGroupDataLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableSIMCardGroupDataLimit struct {
	value *SIMCardGroupDataLimit
	isSet bool
}

func (v NullableSIMCardGroupDataLimit) Get() *SIMCardGroupDataLimit {
	return v.value
}

func (v *NullableSIMCardGroupDataLimit) Set(val *SIMCardGroupDataLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardGroupDataLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardGroupDataLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardGroupDataLimit(val *SIMCardGroupDataLimit) *NullableSIMCardGroupDataLimit {
	return &NullableSIMCardGroupDataLimit{value: val, isSet: true}
}

func (v NullableSIMCardGroupDataLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardGroupDataLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


