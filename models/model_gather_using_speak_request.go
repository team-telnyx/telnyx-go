/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GatherUsingSpeakRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatherUsingSpeakRequest{}

// GatherUsingSpeakRequest struct for GatherUsingSpeakRequest
type GatherUsingSpeakRequest struct {
	// The text or SSML to be converted into speech. There is a 3,000 character limit.
	Payload string `json:"payload"`
	// The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. There is a 3,000 character limit.
	InvalidPayload *string `json:"invalid_payload,omitempty"`
	// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).
	PayloadType *string `json:"payload_type,omitempty"`
	// This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.
	ServiceLevel *string `json:"service_level,omitempty"`
	// Specifies the voice used in speech synthesis.  - Define voices using the format `<Provider>.<Model>.<VoiceId>`. Specifying only the provider will give default values for voice_id and model_id.   **Supported Providers:** - **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). For long-form engine, append `-LongForm` to the `VoiceId` (e.g., `AWS.Polly.Danielle-LongForm`). For generative engine, the latest provided by AWS Polly, append `-Generative` to the `VoiceId` (e.g., `AWS.Polly.Danielle-Generative`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility. - **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).) - **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.eleven_multilingual_v2.21m00Tcm4TlvDq8ikWAM`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration identifier secret in `\"voice_settings\": {\"api_key_ref\": \"<secret_identifier>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).  - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`  For service_level basic, you may define the gender of the speaker (male or female).
	Voice string `json:"voice"`
	VoiceSettings *ElevenLabsVoiceSettings `json:"voice_settings,omitempty"`
	// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
	Language *string `json:"language,omitempty"`
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits *int32 `json:"minimum_digits,omitempty"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits *int32 `json:"maximum_digits,omitempty"`
	// The maximum number of times that a file should be played back if there is no input from the user on the call.
	MaximumTries *int32 `json:"maximum_tries,omitempty"`
	// The number of milliseconds to wait for a DTMF response after speak ends before a replaying the sound file.
	TimeoutMillis *int32 `json:"timeout_millis,omitempty"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit *string `json:"terminating_digit,omitempty"`
	// A list of all digits accepted as valid.
	ValidDigits *string `json:"valid_digits,omitempty"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis *int32 `json:"inter_digit_timeout_millis,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
}

type _GatherUsingSpeakRequest GatherUsingSpeakRequest

// NewGatherUsingSpeakRequest instantiates a new GatherUsingSpeakRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatherUsingSpeakRequest(payload string, voice string) *GatherUsingSpeakRequest {
	this := GatherUsingSpeakRequest{}
	this.Payload = payload
	var payloadType string = "text"
	this.PayloadType = &payloadType
	var serviceLevel string = "premium"
	this.ServiceLevel = &serviceLevel
	this.Voice = voice
	var minimumDigits int32 = 1
	this.MinimumDigits = &minimumDigits
	var maximumDigits int32 = 128
	this.MaximumDigits = &maximumDigits
	var maximumTries int32 = 3
	this.MaximumTries = &maximumTries
	var timeoutMillis int32 = 60000
	this.TimeoutMillis = &timeoutMillis
	var terminatingDigit string = "#"
	this.TerminatingDigit = &terminatingDigit
	var validDigits string = "0123456789#*"
	this.ValidDigits = &validDigits
	var interDigitTimeoutMillis int32 = 5000
	this.InterDigitTimeoutMillis = &interDigitTimeoutMillis
	return &this
}

// NewGatherUsingSpeakRequestWithDefaults instantiates a new GatherUsingSpeakRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatherUsingSpeakRequestWithDefaults() *GatherUsingSpeakRequest {
	this := GatherUsingSpeakRequest{}
	var payloadType string = "text"
	this.PayloadType = &payloadType
	var serviceLevel string = "premium"
	this.ServiceLevel = &serviceLevel
	var minimumDigits int32 = 1
	this.MinimumDigits = &minimumDigits
	var maximumDigits int32 = 128
	this.MaximumDigits = &maximumDigits
	var maximumTries int32 = 3
	this.MaximumTries = &maximumTries
	var timeoutMillis int32 = 60000
	this.TimeoutMillis = &timeoutMillis
	var terminatingDigit string = "#"
	this.TerminatingDigit = &terminatingDigit
	var validDigits string = "0123456789#*"
	this.ValidDigits = &validDigits
	var interDigitTimeoutMillis int32 = 5000
	this.InterDigitTimeoutMillis = &interDigitTimeoutMillis
	return &this
}

// GetPayload returns the Payload field value
func (o *GatherUsingSpeakRequest) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *GatherUsingSpeakRequest) SetPayload(v string) {
	o.Payload = v
}

// GetInvalidPayload returns the InvalidPayload field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetInvalidPayload() string {
	if o == nil || IsNil(o.InvalidPayload) {
		var ret string
		return ret
	}
	return *o.InvalidPayload
}

// GetInvalidPayloadOk returns a tuple with the InvalidPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetInvalidPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidPayload) {
		return nil, false
	}
	return o.InvalidPayload, true
}

// HasInvalidPayload returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasInvalidPayload() bool {
	if o != nil && !IsNil(o.InvalidPayload) {
		return true
	}

	return false
}

// SetInvalidPayload gets a reference to the given string and assigns it to the InvalidPayload field.
func (o *GatherUsingSpeakRequest) SetInvalidPayload(v string) {
	o.InvalidPayload = &v
}

// GetPayloadType returns the PayloadType field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetPayloadType() string {
	if o == nil || IsNil(o.PayloadType) {
		var ret string
		return ret
	}
	return *o.PayloadType
}

// GetPayloadTypeOk returns a tuple with the PayloadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetPayloadTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadType) {
		return nil, false
	}
	return o.PayloadType, true
}

// HasPayloadType returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasPayloadType() bool {
	if o != nil && !IsNil(o.PayloadType) {
		return true
	}

	return false
}

// SetPayloadType gets a reference to the given string and assigns it to the PayloadType field.
func (o *GatherUsingSpeakRequest) SetPayloadType(v string) {
	o.PayloadType = &v
}

// GetServiceLevel returns the ServiceLevel field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetServiceLevel() string {
	if o == nil || IsNil(o.ServiceLevel) {
		var ret string
		return ret
	}
	return *o.ServiceLevel
}

// GetServiceLevelOk returns a tuple with the ServiceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetServiceLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceLevel) {
		return nil, false
	}
	return o.ServiceLevel, true
}

// HasServiceLevel returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasServiceLevel() bool {
	if o != nil && !IsNil(o.ServiceLevel) {
		return true
	}

	return false
}

// SetServiceLevel gets a reference to the given string and assigns it to the ServiceLevel field.
func (o *GatherUsingSpeakRequest) SetServiceLevel(v string) {
	o.ServiceLevel = &v
}

// GetVoice returns the Voice field value
func (o *GatherUsingSpeakRequest) GetVoice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetVoiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Voice, true
}

// SetVoice sets field value
func (o *GatherUsingSpeakRequest) SetVoice(v string) {
	o.Voice = v
}

// GetVoiceSettings returns the VoiceSettings field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetVoiceSettings() ElevenLabsVoiceSettings {
	if o == nil || IsNil(o.VoiceSettings) {
		var ret ElevenLabsVoiceSettings
		return ret
	}
	return *o.VoiceSettings
}

// GetVoiceSettingsOk returns a tuple with the VoiceSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetVoiceSettingsOk() (*ElevenLabsVoiceSettings, bool) {
	if o == nil || IsNil(o.VoiceSettings) {
		return nil, false
	}
	return o.VoiceSettings, true
}

// HasVoiceSettings returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasVoiceSettings() bool {
	if o != nil && !IsNil(o.VoiceSettings) {
		return true
	}

	return false
}

// SetVoiceSettings gets a reference to the given ElevenLabsVoiceSettings and assigns it to the VoiceSettings field.
func (o *GatherUsingSpeakRequest) SetVoiceSettings(v ElevenLabsVoiceSettings) {
	o.VoiceSettings = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *GatherUsingSpeakRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetMinimumDigits returns the MinimumDigits field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetMinimumDigits() int32 {
	if o == nil || IsNil(o.MinimumDigits) {
		var ret int32
		return ret
	}
	return *o.MinimumDigits
}

// GetMinimumDigitsOk returns a tuple with the MinimumDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetMinimumDigitsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumDigits) {
		return nil, false
	}
	return o.MinimumDigits, true
}

// HasMinimumDigits returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasMinimumDigits() bool {
	if o != nil && !IsNil(o.MinimumDigits) {
		return true
	}

	return false
}

// SetMinimumDigits gets a reference to the given int32 and assigns it to the MinimumDigits field.
func (o *GatherUsingSpeakRequest) SetMinimumDigits(v int32) {
	o.MinimumDigits = &v
}

// GetMaximumDigits returns the MaximumDigits field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetMaximumDigits() int32 {
	if o == nil || IsNil(o.MaximumDigits) {
		var ret int32
		return ret
	}
	return *o.MaximumDigits
}

// GetMaximumDigitsOk returns a tuple with the MaximumDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetMaximumDigitsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumDigits) {
		return nil, false
	}
	return o.MaximumDigits, true
}

// HasMaximumDigits returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasMaximumDigits() bool {
	if o != nil && !IsNil(o.MaximumDigits) {
		return true
	}

	return false
}

// SetMaximumDigits gets a reference to the given int32 and assigns it to the MaximumDigits field.
func (o *GatherUsingSpeakRequest) SetMaximumDigits(v int32) {
	o.MaximumDigits = &v
}

// GetMaximumTries returns the MaximumTries field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetMaximumTries() int32 {
	if o == nil || IsNil(o.MaximumTries) {
		var ret int32
		return ret
	}
	return *o.MaximumTries
}

// GetMaximumTriesOk returns a tuple with the MaximumTries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetMaximumTriesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumTries) {
		return nil, false
	}
	return o.MaximumTries, true
}

// HasMaximumTries returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasMaximumTries() bool {
	if o != nil && !IsNil(o.MaximumTries) {
		return true
	}

	return false
}

// SetMaximumTries gets a reference to the given int32 and assigns it to the MaximumTries field.
func (o *GatherUsingSpeakRequest) SetMaximumTries(v int32) {
	o.MaximumTries = &v
}

// GetTimeoutMillis returns the TimeoutMillis field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetTimeoutMillis() int32 {
	if o == nil || IsNil(o.TimeoutMillis) {
		var ret int32
		return ret
	}
	return *o.TimeoutMillis
}

// GetTimeoutMillisOk returns a tuple with the TimeoutMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetTimeoutMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutMillis) {
		return nil, false
	}
	return o.TimeoutMillis, true
}

// HasTimeoutMillis returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasTimeoutMillis() bool {
	if o != nil && !IsNil(o.TimeoutMillis) {
		return true
	}

	return false
}

// SetTimeoutMillis gets a reference to the given int32 and assigns it to the TimeoutMillis field.
func (o *GatherUsingSpeakRequest) SetTimeoutMillis(v int32) {
	o.TimeoutMillis = &v
}

// GetTerminatingDigit returns the TerminatingDigit field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetTerminatingDigit() string {
	if o == nil || IsNil(o.TerminatingDigit) {
		var ret string
		return ret
	}
	return *o.TerminatingDigit
}

// GetTerminatingDigitOk returns a tuple with the TerminatingDigit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetTerminatingDigitOk() (*string, bool) {
	if o == nil || IsNil(o.TerminatingDigit) {
		return nil, false
	}
	return o.TerminatingDigit, true
}

// HasTerminatingDigit returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasTerminatingDigit() bool {
	if o != nil && !IsNil(o.TerminatingDigit) {
		return true
	}

	return false
}

// SetTerminatingDigit gets a reference to the given string and assigns it to the TerminatingDigit field.
func (o *GatherUsingSpeakRequest) SetTerminatingDigit(v string) {
	o.TerminatingDigit = &v
}

// GetValidDigits returns the ValidDigits field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetValidDigits() string {
	if o == nil || IsNil(o.ValidDigits) {
		var ret string
		return ret
	}
	return *o.ValidDigits
}

// GetValidDigitsOk returns a tuple with the ValidDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetValidDigitsOk() (*string, bool) {
	if o == nil || IsNil(o.ValidDigits) {
		return nil, false
	}
	return o.ValidDigits, true
}

// HasValidDigits returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasValidDigits() bool {
	if o != nil && !IsNil(o.ValidDigits) {
		return true
	}

	return false
}

// SetValidDigits gets a reference to the given string and assigns it to the ValidDigits field.
func (o *GatherUsingSpeakRequest) SetValidDigits(v string) {
	o.ValidDigits = &v
}

// GetInterDigitTimeoutMillis returns the InterDigitTimeoutMillis field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetInterDigitTimeoutMillis() int32 {
	if o == nil || IsNil(o.InterDigitTimeoutMillis) {
		var ret int32
		return ret
	}
	return *o.InterDigitTimeoutMillis
}

// GetInterDigitTimeoutMillisOk returns a tuple with the InterDigitTimeoutMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetInterDigitTimeoutMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.InterDigitTimeoutMillis) {
		return nil, false
	}
	return o.InterDigitTimeoutMillis, true
}

// HasInterDigitTimeoutMillis returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasInterDigitTimeoutMillis() bool {
	if o != nil && !IsNil(o.InterDigitTimeoutMillis) {
		return true
	}

	return false
}

// SetInterDigitTimeoutMillis gets a reference to the given int32 and assigns it to the InterDigitTimeoutMillis field.
func (o *GatherUsingSpeakRequest) SetInterDigitTimeoutMillis(v int32) {
	o.InterDigitTimeoutMillis = &v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *GatherUsingSpeakRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *GatherUsingSpeakRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingSpeakRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *GatherUsingSpeakRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *GatherUsingSpeakRequest) SetCommandId(v string) {
	o.CommandId = &v
}

func (o GatherUsingSpeakRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatherUsingSpeakRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payload"] = o.Payload
	if !IsNil(o.InvalidPayload) {
		toSerialize["invalid_payload"] = o.InvalidPayload
	}
	if !IsNil(o.PayloadType) {
		toSerialize["payload_type"] = o.PayloadType
	}
	if !IsNil(o.ServiceLevel) {
		toSerialize["service_level"] = o.ServiceLevel
	}
	toSerialize["voice"] = o.Voice
	if !IsNil(o.VoiceSettings) {
		toSerialize["voice_settings"] = o.VoiceSettings
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.MinimumDigits) {
		toSerialize["minimum_digits"] = o.MinimumDigits
	}
	if !IsNil(o.MaximumDigits) {
		toSerialize["maximum_digits"] = o.MaximumDigits
	}
	if !IsNil(o.MaximumTries) {
		toSerialize["maximum_tries"] = o.MaximumTries
	}
	if !IsNil(o.TimeoutMillis) {
		toSerialize["timeout_millis"] = o.TimeoutMillis
	}
	if !IsNil(o.TerminatingDigit) {
		toSerialize["terminating_digit"] = o.TerminatingDigit
	}
	if !IsNil(o.ValidDigits) {
		toSerialize["valid_digits"] = o.ValidDigits
	}
	if !IsNil(o.InterDigitTimeoutMillis) {
		toSerialize["inter_digit_timeout_millis"] = o.InterDigitTimeoutMillis
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	return toSerialize, nil
}

func (o *GatherUsingSpeakRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
		"voice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGatherUsingSpeakRequest := _GatherUsingSpeakRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGatherUsingSpeakRequest)

	if err != nil {
		return err
	}

	*o = GatherUsingSpeakRequest(varGatherUsingSpeakRequest)

	return err
}

type NullableGatherUsingSpeakRequest struct {
	value *GatherUsingSpeakRequest
	isSet bool
}

func (v NullableGatherUsingSpeakRequest) Get() *GatherUsingSpeakRequest {
	return v.value
}

func (v *NullableGatherUsingSpeakRequest) Set(val *GatherUsingSpeakRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGatherUsingSpeakRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGatherUsingSpeakRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatherUsingSpeakRequest(val *GatherUsingSpeakRequest) *NullableGatherUsingSpeakRequest {
	return &NullableGatherUsingSpeakRequest{value: val, isSet: true}
}

func (v NullableGatherUsingSpeakRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatherUsingSpeakRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


