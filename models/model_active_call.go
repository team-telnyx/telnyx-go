/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActiveCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveCall{}

// ActiveCall struct for ActiveCall
type ActiveCall struct {
	RecordType string `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call
	CallSessionId string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events
	CallLegId string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlId string `json:"call_control_id"`
	// State received from a command.
	ClientState string `json:"client_state"`
	// Indicates the duration of the call in seconds
	CallDuration int32 `json:"call_duration"`
}

type _ActiveCall ActiveCall

// NewActiveCall instantiates a new ActiveCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveCall(recordType string, callSessionId string, callLegId string, callControlId string, clientState string, callDuration int32) *ActiveCall {
	this := ActiveCall{}
	this.RecordType = recordType
	this.CallSessionId = callSessionId
	this.CallLegId = callLegId
	this.CallControlId = callControlId
	this.ClientState = clientState
	this.CallDuration = callDuration
	return &this
}

// NewActiveCallWithDefaults instantiates a new ActiveCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveCallWithDefaults() *ActiveCall {
	this := ActiveCall{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *ActiveCall) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *ActiveCall) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *ActiveCall) SetRecordType(v string) {
	o.RecordType = v
}

// GetCallSessionId returns the CallSessionId field value
func (o *ActiveCall) GetCallSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value
// and a boolean to check if the value has been set.
func (o *ActiveCall) GetCallSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallSessionId, true
}

// SetCallSessionId sets field value
func (o *ActiveCall) SetCallSessionId(v string) {
	o.CallSessionId = v
}

// GetCallLegId returns the CallLegId field value
func (o *ActiveCall) GetCallLegId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value
// and a boolean to check if the value has been set.
func (o *ActiveCall) GetCallLegIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallLegId, true
}

// SetCallLegId sets field value
func (o *ActiveCall) SetCallLegId(v string) {
	o.CallLegId = v
}

// GetCallControlId returns the CallControlId field value
func (o *ActiveCall) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *ActiveCall) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *ActiveCall) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetClientState returns the ClientState field value
func (o *ActiveCall) GetClientState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value
// and a boolean to check if the value has been set.
func (o *ActiveCall) GetClientStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientState, true
}

// SetClientState sets field value
func (o *ActiveCall) SetClientState(v string) {
	o.ClientState = v
}

// GetCallDuration returns the CallDuration field value
func (o *ActiveCall) GetCallDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CallDuration
}

// GetCallDurationOk returns a tuple with the CallDuration field value
// and a boolean to check if the value has been set.
func (o *ActiveCall) GetCallDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallDuration, true
}

// SetCallDuration sets field value
func (o *ActiveCall) SetCallDuration(v int32) {
	o.CallDuration = v
}

func (o ActiveCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_type"] = o.RecordType
	toSerialize["call_session_id"] = o.CallSessionId
	toSerialize["call_leg_id"] = o.CallLegId
	toSerialize["call_control_id"] = o.CallControlId
	toSerialize["client_state"] = o.ClientState
	toSerialize["call_duration"] = o.CallDuration
	return toSerialize, nil
}

func (o *ActiveCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
		"call_session_id",
		"call_leg_id",
		"call_control_id",
		"client_state",
		"call_duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveCall := _ActiveCall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveCall)

	if err != nil {
		return err
	}

	*o = ActiveCall(varActiveCall)

	return err
}

type NullableActiveCall struct {
	value *ActiveCall
	isSet bool
}

func (v NullableActiveCall) Get() *ActiveCall {
	return v.value
}

func (v *NullableActiveCall) Set(val *ActiveCall) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveCall) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveCall(val *ActiveCall) *NullableActiveCall {
	return &NullableActiveCall{value: val, isSet: true}
}

func (v NullableActiveCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


