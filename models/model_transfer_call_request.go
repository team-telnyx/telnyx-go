/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransferCallRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferCallRequest{}

// TransferCallRequest struct for TransferCallRequest
type TransferCallRequest struct {
	// The DID or SIP URI to dial out to.
	To string `json:"to"`
	// The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `to` number of the original call if omitted.
	From *string `json:"from,omitempty"`
	// The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.
	FromDisplayName *string `json:"from_display_name,omitempty"`
	// The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioUrl *string `json:"audio_url,omitempty"`
	// If set to false, early media will not be passed to the originating leg.
	EarlyMedia *bool `json:"early_media,omitempty"`
	// The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
	MediaName *string `json:"media_name,omitempty"`
	// The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 600 seconds.
	TimeoutSecs *int32 `json:"timeout_secs,omitempty"`
	// Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.
	TimeLimitSecs *int32 `json:"time_limit_secs,omitempty"`
	// Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.
	AnsweringMachineDetection *string `json:"answering_machine_detection,omitempty"`
	AnsweringMachineDetectionConfig *CallRequestAnsweringMachineDetectionConfig `json:"answering_machine_detection_config,omitempty"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.
	TargetLegClientState *string `json:"target_leg_client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	// Defines whether media should be encrypted on the new call leg.
	MediaEncryption *string `json:"media_encryption,omitempty"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername *string `json:"sip_auth_username,omitempty"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword *string `json:"sip_auth_password,omitempty"`
	// SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers,omitempty"`
	// Defines SIP transport protocol to be used on the call.
	SipTransportProtocol *string `json:"sip_transport_protocol,omitempty"`
	SoundModifications *SoundModifications `json:"sound_modifications,omitempty"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookUrl *string `json:"webhook_url,omitempty"`
	// HTTP request type used for `webhook_url`.
	WebhookUrlMethod *string `json:"webhook_url_method,omitempty"`
	// When enabled, DTMF tones are not passed to the call participant. The webhooks containing the DTMF information will be sent.
	MuteDtmf *string `json:"mute_dtmf,omitempty"`
}

type _TransferCallRequest TransferCallRequest

// NewTransferCallRequest instantiates a new TransferCallRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferCallRequest(to string) *TransferCallRequest {
	this := TransferCallRequest{}
	this.To = to
	var earlyMedia bool = true
	this.EarlyMedia = &earlyMedia
	var timeoutSecs int32 = 30
	this.TimeoutSecs = &timeoutSecs
	var timeLimitSecs int32 = 14400
	this.TimeLimitSecs = &timeLimitSecs
	var answeringMachineDetection string = "disabled"
	this.AnsweringMachineDetection = &answeringMachineDetection
	var mediaEncryption string = "disabled"
	this.MediaEncryption = &mediaEncryption
	var sipTransportProtocol string = "UDP"
	this.SipTransportProtocol = &sipTransportProtocol
	var webhookUrlMethod string = "POST"
	this.WebhookUrlMethod = &webhookUrlMethod
	var muteDtmf string = "none"
	this.MuteDtmf = &muteDtmf
	return &this
}

// NewTransferCallRequestWithDefaults instantiates a new TransferCallRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferCallRequestWithDefaults() *TransferCallRequest {
	this := TransferCallRequest{}
	var earlyMedia bool = true
	this.EarlyMedia = &earlyMedia
	var timeoutSecs int32 = 30
	this.TimeoutSecs = &timeoutSecs
	var timeLimitSecs int32 = 14400
	this.TimeLimitSecs = &timeLimitSecs
	var answeringMachineDetection string = "disabled"
	this.AnsweringMachineDetection = &answeringMachineDetection
	var mediaEncryption string = "disabled"
	this.MediaEncryption = &mediaEncryption
	var sipTransportProtocol string = "UDP"
	this.SipTransportProtocol = &sipTransportProtocol
	var webhookUrlMethod string = "POST"
	this.WebhookUrlMethod = &webhookUrlMethod
	var muteDtmf string = "none"
	this.MuteDtmf = &muteDtmf
	return &this
}

// GetTo returns the To field value
func (o *TransferCallRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *TransferCallRequest) SetTo(v string) {
	o.To = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *TransferCallRequest) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *TransferCallRequest) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *TransferCallRequest) SetFrom(v string) {
	o.From = &v
}

// GetFromDisplayName returns the FromDisplayName field value if set, zero value otherwise.
func (o *TransferCallRequest) GetFromDisplayName() string {
	if o == nil || IsNil(o.FromDisplayName) {
		var ret string
		return ret
	}
	return *o.FromDisplayName
}

// GetFromDisplayNameOk returns a tuple with the FromDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetFromDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.FromDisplayName) {
		return nil, false
	}
	return o.FromDisplayName, true
}

// HasFromDisplayName returns a boolean if a field has been set.
func (o *TransferCallRequest) HasFromDisplayName() bool {
	if o != nil && !IsNil(o.FromDisplayName) {
		return true
	}

	return false
}

// SetFromDisplayName gets a reference to the given string and assigns it to the FromDisplayName field.
func (o *TransferCallRequest) SetFromDisplayName(v string) {
	o.FromDisplayName = &v
}

// GetAudioUrl returns the AudioUrl field value if set, zero value otherwise.
func (o *TransferCallRequest) GetAudioUrl() string {
	if o == nil || IsNil(o.AudioUrl) {
		var ret string
		return ret
	}
	return *o.AudioUrl
}

// GetAudioUrlOk returns a tuple with the AudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioUrl) {
		return nil, false
	}
	return o.AudioUrl, true
}

// HasAudioUrl returns a boolean if a field has been set.
func (o *TransferCallRequest) HasAudioUrl() bool {
	if o != nil && !IsNil(o.AudioUrl) {
		return true
	}

	return false
}

// SetAudioUrl gets a reference to the given string and assigns it to the AudioUrl field.
func (o *TransferCallRequest) SetAudioUrl(v string) {
	o.AudioUrl = &v
}

// GetEarlyMedia returns the EarlyMedia field value if set, zero value otherwise.
func (o *TransferCallRequest) GetEarlyMedia() bool {
	if o == nil || IsNil(o.EarlyMedia) {
		var ret bool
		return ret
	}
	return *o.EarlyMedia
}

// GetEarlyMediaOk returns a tuple with the EarlyMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetEarlyMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.EarlyMedia) {
		return nil, false
	}
	return o.EarlyMedia, true
}

// HasEarlyMedia returns a boolean if a field has been set.
func (o *TransferCallRequest) HasEarlyMedia() bool {
	if o != nil && !IsNil(o.EarlyMedia) {
		return true
	}

	return false
}

// SetEarlyMedia gets a reference to the given bool and assigns it to the EarlyMedia field.
func (o *TransferCallRequest) SetEarlyMedia(v bool) {
	o.EarlyMedia = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *TransferCallRequest) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *TransferCallRequest) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *TransferCallRequest) SetMediaName(v string) {
	o.MediaName = &v
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise.
func (o *TransferCallRequest) GetTimeoutSecs() int32 {
	if o == nil || IsNil(o.TimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSecs) {
		return nil, false
	}
	return o.TimeoutSecs, true
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *TransferCallRequest) HasTimeoutSecs() bool {
	if o != nil && !IsNil(o.TimeoutSecs) {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given int32 and assigns it to the TimeoutSecs field.
func (o *TransferCallRequest) SetTimeoutSecs(v int32) {
	o.TimeoutSecs = &v
}

// GetTimeLimitSecs returns the TimeLimitSecs field value if set, zero value otherwise.
func (o *TransferCallRequest) GetTimeLimitSecs() int32 {
	if o == nil || IsNil(o.TimeLimitSecs) {
		var ret int32
		return ret
	}
	return *o.TimeLimitSecs
}

// GetTimeLimitSecsOk returns a tuple with the TimeLimitSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetTimeLimitSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeLimitSecs) {
		return nil, false
	}
	return o.TimeLimitSecs, true
}

// HasTimeLimitSecs returns a boolean if a field has been set.
func (o *TransferCallRequest) HasTimeLimitSecs() bool {
	if o != nil && !IsNil(o.TimeLimitSecs) {
		return true
	}

	return false
}

// SetTimeLimitSecs gets a reference to the given int32 and assigns it to the TimeLimitSecs field.
func (o *TransferCallRequest) SetTimeLimitSecs(v int32) {
	o.TimeLimitSecs = &v
}

// GetAnsweringMachineDetection returns the AnsweringMachineDetection field value if set, zero value otherwise.
func (o *TransferCallRequest) GetAnsweringMachineDetection() string {
	if o == nil || IsNil(o.AnsweringMachineDetection) {
		var ret string
		return ret
	}
	return *o.AnsweringMachineDetection
}

// GetAnsweringMachineDetectionOk returns a tuple with the AnsweringMachineDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetAnsweringMachineDetectionOk() (*string, bool) {
	if o == nil || IsNil(o.AnsweringMachineDetection) {
		return nil, false
	}
	return o.AnsweringMachineDetection, true
}

// HasAnsweringMachineDetection returns a boolean if a field has been set.
func (o *TransferCallRequest) HasAnsweringMachineDetection() bool {
	if o != nil && !IsNil(o.AnsweringMachineDetection) {
		return true
	}

	return false
}

// SetAnsweringMachineDetection gets a reference to the given string and assigns it to the AnsweringMachineDetection field.
func (o *TransferCallRequest) SetAnsweringMachineDetection(v string) {
	o.AnsweringMachineDetection = &v
}

// GetAnsweringMachineDetectionConfig returns the AnsweringMachineDetectionConfig field value if set, zero value otherwise.
func (o *TransferCallRequest) GetAnsweringMachineDetectionConfig() CallRequestAnsweringMachineDetectionConfig {
	if o == nil || IsNil(o.AnsweringMachineDetectionConfig) {
		var ret CallRequestAnsweringMachineDetectionConfig
		return ret
	}
	return *o.AnsweringMachineDetectionConfig
}

// GetAnsweringMachineDetectionConfigOk returns a tuple with the AnsweringMachineDetectionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetAnsweringMachineDetectionConfigOk() (*CallRequestAnsweringMachineDetectionConfig, bool) {
	if o == nil || IsNil(o.AnsweringMachineDetectionConfig) {
		return nil, false
	}
	return o.AnsweringMachineDetectionConfig, true
}

// HasAnsweringMachineDetectionConfig returns a boolean if a field has been set.
func (o *TransferCallRequest) HasAnsweringMachineDetectionConfig() bool {
	if o != nil && !IsNil(o.AnsweringMachineDetectionConfig) {
		return true
	}

	return false
}

// SetAnsweringMachineDetectionConfig gets a reference to the given CallRequestAnsweringMachineDetectionConfig and assigns it to the AnsweringMachineDetectionConfig field.
func (o *TransferCallRequest) SetAnsweringMachineDetectionConfig(v CallRequestAnsweringMachineDetectionConfig) {
	o.AnsweringMachineDetectionConfig = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *TransferCallRequest) GetCustomHeaders() []CustomSipHeader {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret []CustomSipHeader
		return ret
	}
	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetCustomHeadersOk() ([]CustomSipHeader, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *TransferCallRequest) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given []CustomSipHeader and assigns it to the CustomHeaders field.
func (o *TransferCallRequest) SetCustomHeaders(v []CustomSipHeader) {
	o.CustomHeaders = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *TransferCallRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *TransferCallRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *TransferCallRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetTargetLegClientState returns the TargetLegClientState field value if set, zero value otherwise.
func (o *TransferCallRequest) GetTargetLegClientState() string {
	if o == nil || IsNil(o.TargetLegClientState) {
		var ret string
		return ret
	}
	return *o.TargetLegClientState
}

// GetTargetLegClientStateOk returns a tuple with the TargetLegClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetTargetLegClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.TargetLegClientState) {
		return nil, false
	}
	return o.TargetLegClientState, true
}

// HasTargetLegClientState returns a boolean if a field has been set.
func (o *TransferCallRequest) HasTargetLegClientState() bool {
	if o != nil && !IsNil(o.TargetLegClientState) {
		return true
	}

	return false
}

// SetTargetLegClientState gets a reference to the given string and assigns it to the TargetLegClientState field.
func (o *TransferCallRequest) SetTargetLegClientState(v string) {
	o.TargetLegClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *TransferCallRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *TransferCallRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *TransferCallRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetMediaEncryption returns the MediaEncryption field value if set, zero value otherwise.
func (o *TransferCallRequest) GetMediaEncryption() string {
	if o == nil || IsNil(o.MediaEncryption) {
		var ret string
		return ret
	}
	return *o.MediaEncryption
}

// GetMediaEncryptionOk returns a tuple with the MediaEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetMediaEncryptionOk() (*string, bool) {
	if o == nil || IsNil(o.MediaEncryption) {
		return nil, false
	}
	return o.MediaEncryption, true
}

// HasMediaEncryption returns a boolean if a field has been set.
func (o *TransferCallRequest) HasMediaEncryption() bool {
	if o != nil && !IsNil(o.MediaEncryption) {
		return true
	}

	return false
}

// SetMediaEncryption gets a reference to the given string and assigns it to the MediaEncryption field.
func (o *TransferCallRequest) SetMediaEncryption(v string) {
	o.MediaEncryption = &v
}

// GetSipAuthUsername returns the SipAuthUsername field value if set, zero value otherwise.
func (o *TransferCallRequest) GetSipAuthUsername() string {
	if o == nil || IsNil(o.SipAuthUsername) {
		var ret string
		return ret
	}
	return *o.SipAuthUsername
}

// GetSipAuthUsernameOk returns a tuple with the SipAuthUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetSipAuthUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthUsername) {
		return nil, false
	}
	return o.SipAuthUsername, true
}

// HasSipAuthUsername returns a boolean if a field has been set.
func (o *TransferCallRequest) HasSipAuthUsername() bool {
	if o != nil && !IsNil(o.SipAuthUsername) {
		return true
	}

	return false
}

// SetSipAuthUsername gets a reference to the given string and assigns it to the SipAuthUsername field.
func (o *TransferCallRequest) SetSipAuthUsername(v string) {
	o.SipAuthUsername = &v
}

// GetSipAuthPassword returns the SipAuthPassword field value if set, zero value otherwise.
func (o *TransferCallRequest) GetSipAuthPassword() string {
	if o == nil || IsNil(o.SipAuthPassword) {
		var ret string
		return ret
	}
	return *o.SipAuthPassword
}

// GetSipAuthPasswordOk returns a tuple with the SipAuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetSipAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthPassword) {
		return nil, false
	}
	return o.SipAuthPassword, true
}

// HasSipAuthPassword returns a boolean if a field has been set.
func (o *TransferCallRequest) HasSipAuthPassword() bool {
	if o != nil && !IsNil(o.SipAuthPassword) {
		return true
	}

	return false
}

// SetSipAuthPassword gets a reference to the given string and assigns it to the SipAuthPassword field.
func (o *TransferCallRequest) SetSipAuthPassword(v string) {
	o.SipAuthPassword = &v
}

// GetSipHeaders returns the SipHeaders field value if set, zero value otherwise.
func (o *TransferCallRequest) GetSipHeaders() []SipHeader {
	if o == nil || IsNil(o.SipHeaders) {
		var ret []SipHeader
		return ret
	}
	return o.SipHeaders
}

// GetSipHeadersOk returns a tuple with the SipHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetSipHeadersOk() ([]SipHeader, bool) {
	if o == nil || IsNil(o.SipHeaders) {
		return nil, false
	}
	return o.SipHeaders, true
}

// HasSipHeaders returns a boolean if a field has been set.
func (o *TransferCallRequest) HasSipHeaders() bool {
	if o != nil && !IsNil(o.SipHeaders) {
		return true
	}

	return false
}

// SetSipHeaders gets a reference to the given []SipHeader and assigns it to the SipHeaders field.
func (o *TransferCallRequest) SetSipHeaders(v []SipHeader) {
	o.SipHeaders = v
}

// GetSipTransportProtocol returns the SipTransportProtocol field value if set, zero value otherwise.
func (o *TransferCallRequest) GetSipTransportProtocol() string {
	if o == nil || IsNil(o.SipTransportProtocol) {
		var ret string
		return ret
	}
	return *o.SipTransportProtocol
}

// GetSipTransportProtocolOk returns a tuple with the SipTransportProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetSipTransportProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.SipTransportProtocol) {
		return nil, false
	}
	return o.SipTransportProtocol, true
}

// HasSipTransportProtocol returns a boolean if a field has been set.
func (o *TransferCallRequest) HasSipTransportProtocol() bool {
	if o != nil && !IsNil(o.SipTransportProtocol) {
		return true
	}

	return false
}

// SetSipTransportProtocol gets a reference to the given string and assigns it to the SipTransportProtocol field.
func (o *TransferCallRequest) SetSipTransportProtocol(v string) {
	o.SipTransportProtocol = &v
}

// GetSoundModifications returns the SoundModifications field value if set, zero value otherwise.
func (o *TransferCallRequest) GetSoundModifications() SoundModifications {
	if o == nil || IsNil(o.SoundModifications) {
		var ret SoundModifications
		return ret
	}
	return *o.SoundModifications
}

// GetSoundModificationsOk returns a tuple with the SoundModifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetSoundModificationsOk() (*SoundModifications, bool) {
	if o == nil || IsNil(o.SoundModifications) {
		return nil, false
	}
	return o.SoundModifications, true
}

// HasSoundModifications returns a boolean if a field has been set.
func (o *TransferCallRequest) HasSoundModifications() bool {
	if o != nil && !IsNil(o.SoundModifications) {
		return true
	}

	return false
}

// SetSoundModifications gets a reference to the given SoundModifications and assigns it to the SoundModifications field.
func (o *TransferCallRequest) SetSoundModifications(v SoundModifications) {
	o.SoundModifications = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *TransferCallRequest) GetWebhookUrl() string {
	if o == nil || IsNil(o.WebhookUrl) {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrl) {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *TransferCallRequest) HasWebhookUrl() bool {
	if o != nil && !IsNil(o.WebhookUrl) {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *TransferCallRequest) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetWebhookUrlMethod returns the WebhookUrlMethod field value if set, zero value otherwise.
func (o *TransferCallRequest) GetWebhookUrlMethod() string {
	if o == nil || IsNil(o.WebhookUrlMethod) {
		var ret string
		return ret
	}
	return *o.WebhookUrlMethod
}

// GetWebhookUrlMethodOk returns a tuple with the WebhookUrlMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetWebhookUrlMethodOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrlMethod) {
		return nil, false
	}
	return o.WebhookUrlMethod, true
}

// HasWebhookUrlMethod returns a boolean if a field has been set.
func (o *TransferCallRequest) HasWebhookUrlMethod() bool {
	if o != nil && !IsNil(o.WebhookUrlMethod) {
		return true
	}

	return false
}

// SetWebhookUrlMethod gets a reference to the given string and assigns it to the WebhookUrlMethod field.
func (o *TransferCallRequest) SetWebhookUrlMethod(v string) {
	o.WebhookUrlMethod = &v
}

// GetMuteDtmf returns the MuteDtmf field value if set, zero value otherwise.
func (o *TransferCallRequest) GetMuteDtmf() string {
	if o == nil || IsNil(o.MuteDtmf) {
		var ret string
		return ret
	}
	return *o.MuteDtmf
}

// GetMuteDtmfOk returns a tuple with the MuteDtmf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferCallRequest) GetMuteDtmfOk() (*string, bool) {
	if o == nil || IsNil(o.MuteDtmf) {
		return nil, false
	}
	return o.MuteDtmf, true
}

// HasMuteDtmf returns a boolean if a field has been set.
func (o *TransferCallRequest) HasMuteDtmf() bool {
	if o != nil && !IsNil(o.MuteDtmf) {
		return true
	}

	return false
}

// SetMuteDtmf gets a reference to the given string and assigns it to the MuteDtmf field.
func (o *TransferCallRequest) SetMuteDtmf(v string) {
	o.MuteDtmf = &v
}

func (o TransferCallRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferCallRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.FromDisplayName) {
		toSerialize["from_display_name"] = o.FromDisplayName
	}
	if !IsNil(o.AudioUrl) {
		toSerialize["audio_url"] = o.AudioUrl
	}
	if !IsNil(o.EarlyMedia) {
		toSerialize["early_media"] = o.EarlyMedia
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	if !IsNil(o.TimeoutSecs) {
		toSerialize["timeout_secs"] = o.TimeoutSecs
	}
	if !IsNil(o.TimeLimitSecs) {
		toSerialize["time_limit_secs"] = o.TimeLimitSecs
	}
	if !IsNil(o.AnsweringMachineDetection) {
		toSerialize["answering_machine_detection"] = o.AnsweringMachineDetection
	}
	if !IsNil(o.AnsweringMachineDetectionConfig) {
		toSerialize["answering_machine_detection_config"] = o.AnsweringMachineDetectionConfig
	}
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.TargetLegClientState) {
		toSerialize["target_leg_client_state"] = o.TargetLegClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.MediaEncryption) {
		toSerialize["media_encryption"] = o.MediaEncryption
	}
	if !IsNil(o.SipAuthUsername) {
		toSerialize["sip_auth_username"] = o.SipAuthUsername
	}
	if !IsNil(o.SipAuthPassword) {
		toSerialize["sip_auth_password"] = o.SipAuthPassword
	}
	if !IsNil(o.SipHeaders) {
		toSerialize["sip_headers"] = o.SipHeaders
	}
	if !IsNil(o.SipTransportProtocol) {
		toSerialize["sip_transport_protocol"] = o.SipTransportProtocol
	}
	if !IsNil(o.SoundModifications) {
		toSerialize["sound_modifications"] = o.SoundModifications
	}
	if !IsNil(o.WebhookUrl) {
		toSerialize["webhook_url"] = o.WebhookUrl
	}
	if !IsNil(o.WebhookUrlMethod) {
		toSerialize["webhook_url_method"] = o.WebhookUrlMethod
	}
	if !IsNil(o.MuteDtmf) {
		toSerialize["mute_dtmf"] = o.MuteDtmf
	}
	return toSerialize, nil
}

func (o *TransferCallRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferCallRequest := _TransferCallRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferCallRequest)

	if err != nil {
		return err
	}

	*o = TransferCallRequest(varTransferCallRequest)

	return err
}

type NullableTransferCallRequest struct {
	value *TransferCallRequest
	isSet bool
}

func (v NullableTransferCallRequest) Get() *TransferCallRequest {
	return v.value
}

func (v *NullableTransferCallRequest) Set(val *TransferCallRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferCallRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferCallRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferCallRequest(val *TransferCallRequest) *NullableTransferCallRequest {
	return &NullableTransferCallRequest{value: val, isSet: true}
}

func (v NullableTransferCallRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferCallRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


