/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// RecordingSource Defines how the recording was created.
type RecordingSource string

// List of RecordingSource
const (
	START_CALL_RECORDING_API RecordingSource = "StartCallRecordingAPI"
	START_CONFERENCE_RECORDING_API RecordingSource = "StartConferenceRecordingAPI"
	OUTBOUND_API RecordingSource = "OutboundAPI"
	DIAL_VERB RecordingSource = "DialVerb"
	CONFERENCE RecordingSource = "Conference"
	RECORD_VERB RecordingSource = "RecordVerb"
	TRUNKING RecordingSource = "Trunking"
)

// All allowed values of RecordingSource enum
var AllowedRecordingSourceEnumValues = []RecordingSource{
	"StartCallRecordingAPI",
	"StartConferenceRecordingAPI",
	"OutboundAPI",
	"DialVerb",
	"Conference",
	"RecordVerb",
	"Trunking",
}

func (v *RecordingSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordingSource(value)
	for _, existing := range AllowedRecordingSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordingSource", value)
}

// NewRecordingSourceFromValue returns a pointer to a valid RecordingSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordingSourceFromValue(v string) (*RecordingSource, error) {
	ev := RecordingSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordingSource: valid values are %v", v, AllowedRecordingSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordingSource) IsValid() bool {
	for _, existing := range AllowedRecordingSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecordingSource value
func (v RecordingSource) Ptr() *RecordingSource {
	return &v
}

type NullableRecordingSource struct {
	value *RecordingSource
	isSet bool
}

func (v NullableRecordingSource) Get() *RecordingSource {
	return v.value
}

func (v *NullableRecordingSource) Set(val *RecordingSource) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingSource) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingSource(val *RecordingSource) *NullableRecordingSource {
	return &NullableRecordingSource{value: val, isSet: true}
}

func (v NullableRecordingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

