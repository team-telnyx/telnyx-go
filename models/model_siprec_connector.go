/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SiprecConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiprecConnector{}

// SiprecConnector struct for SiprecConnector
type SiprecConnector struct {
	// Hostname/IPv4 address of the SIPREC SRS.
	Host string `json:"host"`
	// Port for the SIPREC SRS.
	Port int32 `json:"port"`
	// Name for the SIPREC connector resource.
	Name string `json:"name"`
	// Subdomain to route the call when using Telnyx SRS (optional for non-Telnyx SRS).
	AppSubdomain *string `json:"app_subdomain,omitempty"`
}

type _SiprecConnector SiprecConnector

// NewSiprecConnector instantiates a new SiprecConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiprecConnector(host string, port int32, name string) *SiprecConnector {
	this := SiprecConnector{}
	this.Host = host
	this.Port = port
	this.Name = name
	return &this
}

// NewSiprecConnectorWithDefaults instantiates a new SiprecConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiprecConnectorWithDefaults() *SiprecConnector {
	this := SiprecConnector{}
	return &this
}

// GetHost returns the Host field value
func (o *SiprecConnector) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *SiprecConnector) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *SiprecConnector) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *SiprecConnector) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SiprecConnector) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SiprecConnector) SetPort(v int32) {
	o.Port = v
}

// GetName returns the Name field value
func (o *SiprecConnector) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SiprecConnector) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SiprecConnector) SetName(v string) {
	o.Name = v
}

// GetAppSubdomain returns the AppSubdomain field value if set, zero value otherwise.
func (o *SiprecConnector) GetAppSubdomain() string {
	if o == nil || IsNil(o.AppSubdomain) {
		var ret string
		return ret
	}
	return *o.AppSubdomain
}

// GetAppSubdomainOk returns a tuple with the AppSubdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiprecConnector) GetAppSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.AppSubdomain) {
		return nil, false
	}
	return o.AppSubdomain, true
}

// HasAppSubdomain returns a boolean if a field has been set.
func (o *SiprecConnector) HasAppSubdomain() bool {
	if o != nil && !IsNil(o.AppSubdomain) {
		return true
	}

	return false
}

// SetAppSubdomain gets a reference to the given string and assigns it to the AppSubdomain field.
func (o *SiprecConnector) SetAppSubdomain(v string) {
	o.AppSubdomain = &v
}

func (o SiprecConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiprecConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	toSerialize["name"] = o.Name
	if !IsNil(o.AppSubdomain) {
		toSerialize["app_subdomain"] = o.AppSubdomain
	}
	return toSerialize, nil
}

func (o *SiprecConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiprecConnector := _SiprecConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSiprecConnector)

	if err != nil {
		return err
	}

	*o = SiprecConnector(varSiprecConnector)

	return err
}

type NullableSiprecConnector struct {
	value *SiprecConnector
	isSet bool
}

func (v NullableSiprecConnector) Get() *SiprecConnector {
	return v.value
}

func (v *NullableSiprecConnector) Set(val *SiprecConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableSiprecConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableSiprecConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiprecConnector(val *SiprecConnector) *NullableSiprecConnector {
	return &NullableSiprecConnector{value: val, isSet: true}
}

func (v NullableSiprecConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiprecConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


