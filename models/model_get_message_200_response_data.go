/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetMessage200ResponseData - struct for GetMessage200ResponseData
type GetMessage200ResponseData struct {
	InboundMessagePayload *InboundMessagePayload
	OutboundMessagePayload *OutboundMessagePayload
}

// InboundMessagePayloadAsGetMessage200ResponseData is a convenience function that returns InboundMessagePayload wrapped in GetMessage200ResponseData
func InboundMessagePayloadAsGetMessage200ResponseData(v *InboundMessagePayload) GetMessage200ResponseData {
	return GetMessage200ResponseData{
		InboundMessagePayload: v,
	}
}

// OutboundMessagePayloadAsGetMessage200ResponseData is a convenience function that returns OutboundMessagePayload wrapped in GetMessage200ResponseData
func OutboundMessagePayloadAsGetMessage200ResponseData(v *OutboundMessagePayload) GetMessage200ResponseData {
	return GetMessage200ResponseData{
		OutboundMessagePayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMessage200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InboundMessagePayload
	err = newStrictDecoder(data).Decode(&dst.InboundMessagePayload)
	if err == nil {
		jsonInboundMessagePayload, _ := json.Marshal(dst.InboundMessagePayload)
		if string(jsonInboundMessagePayload) == "{}" { // empty struct
			dst.InboundMessagePayload = nil
		} else {
			if err = validator.Validate(dst.InboundMessagePayload); err != nil {
				dst.InboundMessagePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.InboundMessagePayload = nil
	}

	// try to unmarshal data into OutboundMessagePayload
	err = newStrictDecoder(data).Decode(&dst.OutboundMessagePayload)
	if err == nil {
		jsonOutboundMessagePayload, _ := json.Marshal(dst.OutboundMessagePayload)
		if string(jsonOutboundMessagePayload) == "{}" { // empty struct
			dst.OutboundMessagePayload = nil
		} else {
			if err = validator.Validate(dst.OutboundMessagePayload); err != nil {
				dst.OutboundMessagePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.OutboundMessagePayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InboundMessagePayload = nil
		dst.OutboundMessagePayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMessage200ResponseData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMessage200ResponseData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMessage200ResponseData) MarshalJSON() ([]byte, error) {
	if src.InboundMessagePayload != nil {
		return json.Marshal(&src.InboundMessagePayload)
	}

	if src.OutboundMessagePayload != nil {
		return json.Marshal(&src.OutboundMessagePayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMessage200ResponseData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InboundMessagePayload != nil {
		return obj.InboundMessagePayload
	}

	if obj.OutboundMessagePayload != nil {
		return obj.OutboundMessagePayload
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetMessage200ResponseData) GetActualInstanceValue() (interface{}) {
	if obj.InboundMessagePayload != nil {
		return *obj.InboundMessagePayload
	}

	if obj.OutboundMessagePayload != nil {
		return *obj.OutboundMessagePayload
	}

	// all schemas are nil
	return nil
}

type NullableGetMessage200ResponseData struct {
	value *GetMessage200ResponseData
	isSet bool
}

func (v NullableGetMessage200ResponseData) Get() *GetMessage200ResponseData {
	return v.value
}

func (v *NullableGetMessage200ResponseData) Set(val *GetMessage200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMessage200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMessage200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMessage200ResponseData(val *GetMessage200ResponseData) *NullableGetMessage200ResponseData {
	return &NullableGetMessage200ResponseData{value: val, isSet: true}
}

func (v NullableGetMessage200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMessage200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


