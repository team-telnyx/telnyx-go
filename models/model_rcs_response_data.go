/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the RCSResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSResponseData{}

// RCSResponseData struct for RCSResponseData
type RCSResponseData struct {
	RecordType *string `json:"record_type,omitempty"`
	Direction *string `json:"direction,omitempty"`
	// message ID
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	MessagingProfileId *string `json:"messaging_profile_id,omitempty"`
	From *RCSFrom `json:"from,omitempty"`
	To []RCSToItem `json:"to,omitempty"`
	Body *RCSAgentMessage `json:"body,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	ReceivedAt *time.Time `json:"received_at,omitempty"`
}

// NewRCSResponseData instantiates a new RCSResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSResponseData() *RCSResponseData {
	this := RCSResponseData{}
	return &this
}

// NewRCSResponseDataWithDefaults instantiates a new RCSResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSResponseDataWithDefaults() *RCSResponseData {
	this := RCSResponseData{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RCSResponseData) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RCSResponseData) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RCSResponseData) SetRecordType(v string) {
	o.RecordType = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *RCSResponseData) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *RCSResponseData) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *RCSResponseData) SetDirection(v string) {
	o.Direction = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RCSResponseData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RCSResponseData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RCSResponseData) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RCSResponseData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RCSResponseData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RCSResponseData) SetType(v string) {
	o.Type = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *RCSResponseData) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *RCSResponseData) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *RCSResponseData) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetMessagingProfileId returns the MessagingProfileId field value if set, zero value otherwise.
func (o *RCSResponseData) GetMessagingProfileId() string {
	if o == nil || IsNil(o.MessagingProfileId) {
		var ret string
		return ret
	}
	return *o.MessagingProfileId
}

// GetMessagingProfileIdOk returns a tuple with the MessagingProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetMessagingProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessagingProfileId) {
		return nil, false
	}
	return o.MessagingProfileId, true
}

// HasMessagingProfileId returns a boolean if a field has been set.
func (o *RCSResponseData) HasMessagingProfileId() bool {
	if o != nil && !IsNil(o.MessagingProfileId) {
		return true
	}

	return false
}

// SetMessagingProfileId gets a reference to the given string and assigns it to the MessagingProfileId field.
func (o *RCSResponseData) SetMessagingProfileId(v string) {
	o.MessagingProfileId = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *RCSResponseData) GetFrom() RCSFrom {
	if o == nil || IsNil(o.From) {
		var ret RCSFrom
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetFromOk() (*RCSFrom, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *RCSResponseData) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given RCSFrom and assigns it to the From field.
func (o *RCSResponseData) SetFrom(v RCSFrom) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *RCSResponseData) GetTo() []RCSToItem {
	if o == nil || IsNil(o.To) {
		var ret []RCSToItem
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetToOk() ([]RCSToItem, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *RCSResponseData) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given []RCSToItem and assigns it to the To field.
func (o *RCSResponseData) SetTo(v []RCSToItem) {
	o.To = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *RCSResponseData) GetBody() RCSAgentMessage {
	if o == nil || IsNil(o.Body) {
		var ret RCSAgentMessage
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetBodyOk() (*RCSAgentMessage, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *RCSResponseData) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given RCSAgentMessage and assigns it to the Body field.
func (o *RCSResponseData) SetBody(v RCSAgentMessage) {
	o.Body = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *RCSResponseData) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *RCSResponseData) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *RCSResponseData) SetEncoding(v string) {
	o.Encoding = &v
}

// GetReceivedAt returns the ReceivedAt field value if set, zero value otherwise.
func (o *RCSResponseData) GetReceivedAt() time.Time {
	if o == nil || IsNil(o.ReceivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ReceivedAt
}

// GetReceivedAtOk returns a tuple with the ReceivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSResponseData) GetReceivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReceivedAt) {
		return nil, false
	}
	return o.ReceivedAt, true
}

// HasReceivedAt returns a boolean if a field has been set.
func (o *RCSResponseData) HasReceivedAt() bool {
	if o != nil && !IsNil(o.ReceivedAt) {
		return true
	}

	return false
}

// SetReceivedAt gets a reference to the given time.Time and assigns it to the ReceivedAt field.
func (o *RCSResponseData) SetReceivedAt(v time.Time) {
	o.ReceivedAt = &v
}

func (o RCSResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.MessagingProfileId) {
		toSerialize["messaging_profile_id"] = o.MessagingProfileId
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.ReceivedAt) {
		toSerialize["received_at"] = o.ReceivedAt
	}
	return toSerialize, nil
}

type NullableRCSResponseData struct {
	value *RCSResponseData
	isSet bool
}

func (v NullableRCSResponseData) Get() *RCSResponseData {
	return v.value
}

func (v *NullableRCSResponseData) Set(val *RCSResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSResponseData(val *RCSResponseData) *NullableRCSResponseData {
	return &NullableRCSResponseData{value: val, isSet: true}
}

func (v NullableRCSResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


