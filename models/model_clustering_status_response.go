/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusteringStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusteringStatusResponse{}

// ClusteringStatusResponse struct for ClusteringStatusResponse
type ClusteringStatusResponse struct {
	Status TaskStatus `json:"status"`
	Bucket string `json:"bucket"`
	Clusters []RecursiveCluster `json:"clusters"`
}

type _ClusteringStatusResponse ClusteringStatusResponse

// NewClusteringStatusResponse instantiates a new ClusteringStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusteringStatusResponse(status TaskStatus, bucket string, clusters []RecursiveCluster) *ClusteringStatusResponse {
	this := ClusteringStatusResponse{}
	this.Status = status
	this.Bucket = bucket
	this.Clusters = clusters
	return &this
}

// NewClusteringStatusResponseWithDefaults instantiates a new ClusteringStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusteringStatusResponseWithDefaults() *ClusteringStatusResponse {
	this := ClusteringStatusResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *ClusteringStatusResponse) GetStatus() TaskStatus {
	if o == nil {
		var ret TaskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ClusteringStatusResponse) GetStatusOk() (*TaskStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ClusteringStatusResponse) SetStatus(v TaskStatus) {
	o.Status = v
}

// GetBucket returns the Bucket field value
func (o *ClusteringStatusResponse) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *ClusteringStatusResponse) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *ClusteringStatusResponse) SetBucket(v string) {
	o.Bucket = v
}

// GetClusters returns the Clusters field value
func (o *ClusteringStatusResponse) GetClusters() []RecursiveCluster {
	if o == nil {
		var ret []RecursiveCluster
		return ret
	}

	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value
// and a boolean to check if the value has been set.
func (o *ClusteringStatusResponse) GetClustersOk() ([]RecursiveCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Clusters, true
}

// SetClusters sets field value
func (o *ClusteringStatusResponse) SetClusters(v []RecursiveCluster) {
	o.Clusters = v
}

func (o ClusteringStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusteringStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["bucket"] = o.Bucket
	toSerialize["clusters"] = o.Clusters
	return toSerialize, nil
}

func (o *ClusteringStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"bucket",
		"clusters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusteringStatusResponse := _ClusteringStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusteringStatusResponse)

	if err != nil {
		return err
	}

	*o = ClusteringStatusResponse(varClusteringStatusResponse)

	return err
}

type NullableClusteringStatusResponse struct {
	value *ClusteringStatusResponse
	isSet bool
}

func (v NullableClusteringStatusResponse) Get() *ClusteringStatusResponse {
	return v.value
}

func (v *NullableClusteringStatusResponse) Set(val *ClusteringStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClusteringStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClusteringStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusteringStatusResponse(val *ClusteringStatusResponse) *NullableClusteringStatusResponse {
	return &NullableClusteringStatusResponse{value: val, isSet: true}
}

func (v NullableClusteringStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusteringStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


