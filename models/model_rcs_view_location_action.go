/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSViewLocationAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSViewLocationAction{}

// RCSViewLocationAction Opens the user's default map app and selects the agent-specified location.
type RCSViewLocationAction struct {
	LatLong *RCSLatLng `json:"lat_long,omitempty"`
	// The label of the pin dropped
	Label *string `json:"label,omitempty"`
	// query string (Android only)
	Query *string `json:"query,omitempty"`
}

// NewRCSViewLocationAction instantiates a new RCSViewLocationAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSViewLocationAction() *RCSViewLocationAction {
	this := RCSViewLocationAction{}
	return &this
}

// NewRCSViewLocationActionWithDefaults instantiates a new RCSViewLocationAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSViewLocationActionWithDefaults() *RCSViewLocationAction {
	this := RCSViewLocationAction{}
	return &this
}

// GetLatLong returns the LatLong field value if set, zero value otherwise.
func (o *RCSViewLocationAction) GetLatLong() RCSLatLng {
	if o == nil || IsNil(o.LatLong) {
		var ret RCSLatLng
		return ret
	}
	return *o.LatLong
}

// GetLatLongOk returns a tuple with the LatLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSViewLocationAction) GetLatLongOk() (*RCSLatLng, bool) {
	if o == nil || IsNil(o.LatLong) {
		return nil, false
	}
	return o.LatLong, true
}

// HasLatLong returns a boolean if a field has been set.
func (o *RCSViewLocationAction) HasLatLong() bool {
	if o != nil && !IsNil(o.LatLong) {
		return true
	}

	return false
}

// SetLatLong gets a reference to the given RCSLatLng and assigns it to the LatLong field.
func (o *RCSViewLocationAction) SetLatLong(v RCSLatLng) {
	o.LatLong = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *RCSViewLocationAction) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSViewLocationAction) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *RCSViewLocationAction) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *RCSViewLocationAction) SetLabel(v string) {
	o.Label = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *RCSViewLocationAction) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSViewLocationAction) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *RCSViewLocationAction) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *RCSViewLocationAction) SetQuery(v string) {
	o.Query = &v
}

func (o RCSViewLocationAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSViewLocationAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LatLong) {
		toSerialize["lat_long"] = o.LatLong
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableRCSViewLocationAction struct {
	value *RCSViewLocationAction
	isSet bool
}

func (v NullableRCSViewLocationAction) Get() *RCSViewLocationAction {
	return v.value
}

func (v *NullableRCSViewLocationAction) Set(val *RCSViewLocationAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSViewLocationAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSViewLocationAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSViewLocationAction(val *RCSViewLocationAction) *NullableRCSViewLocationAction {
	return &NullableRCSViewLocationAction{value: val, isSet: true}
}

func (v NullableRCSViewLocationAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSViewLocationAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


