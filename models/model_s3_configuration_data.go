/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the S3ConfigurationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3ConfigurationData{}

// S3ConfigurationData struct for S3ConfigurationData
type S3ConfigurationData struct {
	// Name of the bucket to be used to store recording files.
	Bucket *string `json:"bucket,omitempty"`
	Region *Region `json:"region,omitempty"`
	// AWS credentials access key id.
	AwsAccessKeyId *string `json:"aws_access_key_id,omitempty"`
	// AWS secret access key.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
}

// NewS3ConfigurationData instantiates a new S3ConfigurationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3ConfigurationData() *S3ConfigurationData {
	this := S3ConfigurationData{}
	return &this
}

// NewS3ConfigurationDataWithDefaults instantiates a new S3ConfigurationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ConfigurationDataWithDefaults() *S3ConfigurationData {
	this := S3ConfigurationData{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *S3ConfigurationData) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ConfigurationData) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *S3ConfigurationData) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *S3ConfigurationData) SetBucket(v string) {
	o.Bucket = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *S3ConfigurationData) GetRegion() Region {
	if o == nil || IsNil(o.Region) {
		var ret Region
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ConfigurationData) GetRegionOk() (*Region, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *S3ConfigurationData) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given Region and assigns it to the Region field.
func (o *S3ConfigurationData) SetRegion(v Region) {
	o.Region = &v
}

// GetAwsAccessKeyId returns the AwsAccessKeyId field value if set, zero value otherwise.
func (o *S3ConfigurationData) GetAwsAccessKeyId() string {
	if o == nil || IsNil(o.AwsAccessKeyId) {
		var ret string
		return ret
	}
	return *o.AwsAccessKeyId
}

// GetAwsAccessKeyIdOk returns a tuple with the AwsAccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ConfigurationData) GetAwsAccessKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.AwsAccessKeyId) {
		return nil, false
	}
	return o.AwsAccessKeyId, true
}

// HasAwsAccessKeyId returns a boolean if a field has been set.
func (o *S3ConfigurationData) HasAwsAccessKeyId() bool {
	if o != nil && !IsNil(o.AwsAccessKeyId) {
		return true
	}

	return false
}

// SetAwsAccessKeyId gets a reference to the given string and assigns it to the AwsAccessKeyId field.
func (o *S3ConfigurationData) SetAwsAccessKeyId(v string) {
	o.AwsAccessKeyId = &v
}

// GetAwsSecretAccessKey returns the AwsSecretAccessKey field value if set, zero value otherwise.
func (o *S3ConfigurationData) GetAwsSecretAccessKey() string {
	if o == nil || IsNil(o.AwsSecretAccessKey) {
		var ret string
		return ret
	}
	return *o.AwsSecretAccessKey
}

// GetAwsSecretAccessKeyOk returns a tuple with the AwsSecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3ConfigurationData) GetAwsSecretAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AwsSecretAccessKey) {
		return nil, false
	}
	return o.AwsSecretAccessKey, true
}

// HasAwsSecretAccessKey returns a boolean if a field has been set.
func (o *S3ConfigurationData) HasAwsSecretAccessKey() bool {
	if o != nil && !IsNil(o.AwsSecretAccessKey) {
		return true
	}

	return false
}

// SetAwsSecretAccessKey gets a reference to the given string and assigns it to the AwsSecretAccessKey field.
func (o *S3ConfigurationData) SetAwsSecretAccessKey(v string) {
	o.AwsSecretAccessKey = &v
}

func (o S3ConfigurationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3ConfigurationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.AwsAccessKeyId) {
		toSerialize["aws_access_key_id"] = o.AwsAccessKeyId
	}
	if !IsNil(o.AwsSecretAccessKey) {
		toSerialize["aws_secret_access_key"] = o.AwsSecretAccessKey
	}
	return toSerialize, nil
}

type NullableS3ConfigurationData struct {
	value *S3ConfigurationData
	isSet bool
}

func (v NullableS3ConfigurationData) Get() *S3ConfigurationData {
	return v.value
}

func (v *NullableS3ConfigurationData) Set(val *S3ConfigurationData) {
	v.value = val
	v.isSet = true
}

func (v NullableS3ConfigurationData) IsSet() bool {
	return v.isSet
}

func (v *NullableS3ConfigurationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3ConfigurationData(val *S3ConfigurationData) *NullableS3ConfigurationData {
	return &NullableS3ConfigurationData{value: val, isSet: true}
}

func (v NullableS3ConfigurationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3ConfigurationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


