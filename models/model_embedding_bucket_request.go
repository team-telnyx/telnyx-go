/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbeddingBucketRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingBucketRequest{}

// EmbeddingBucketRequest struct for EmbeddingBucketRequest
type EmbeddingBucketRequest struct {
	BucketName string `json:"bucket_name"`
	DocumentChunkSize *int32 `json:"document_chunk_size,omitempty"`
	DocumentChunkOverlapSize *int32 `json:"document_chunk_overlap_size,omitempty"`
	EmbeddingModel *SupportedEmbeddingModels `json:"embedding_model,omitempty"`
	Loader *SupportedEmbeddingLoaders `json:"loader,omitempty"`
}

type _EmbeddingBucketRequest EmbeddingBucketRequest

// NewEmbeddingBucketRequest instantiates a new EmbeddingBucketRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingBucketRequest(bucketName string) *EmbeddingBucketRequest {
	this := EmbeddingBucketRequest{}
	this.BucketName = bucketName
	var documentChunkSize int32 = 1024
	this.DocumentChunkSize = &documentChunkSize
	var documentChunkOverlapSize int32 = 512
	this.DocumentChunkOverlapSize = &documentChunkOverlapSize
	var embeddingModel SupportedEmbeddingModels = THENLPER_GTE_LARGE
	this.EmbeddingModel = &embeddingModel
	var loader SupportedEmbeddingLoaders = DEFAULT
	this.Loader = &loader
	return &this
}

// NewEmbeddingBucketRequestWithDefaults instantiates a new EmbeddingBucketRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingBucketRequestWithDefaults() *EmbeddingBucketRequest {
	this := EmbeddingBucketRequest{}
	var documentChunkSize int32 = 1024
	this.DocumentChunkSize = &documentChunkSize
	var documentChunkOverlapSize int32 = 512
	this.DocumentChunkOverlapSize = &documentChunkOverlapSize
	var embeddingModel SupportedEmbeddingModels = THENLPER_GTE_LARGE
	this.EmbeddingModel = &embeddingModel
	var loader SupportedEmbeddingLoaders = DEFAULT
	this.Loader = &loader
	return &this
}

// GetBucketName returns the BucketName field value
func (o *EmbeddingBucketRequest) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *EmbeddingBucketRequest) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *EmbeddingBucketRequest) SetBucketName(v string) {
	o.BucketName = v
}

// GetDocumentChunkSize returns the DocumentChunkSize field value if set, zero value otherwise.
func (o *EmbeddingBucketRequest) GetDocumentChunkSize() int32 {
	if o == nil || IsNil(o.DocumentChunkSize) {
		var ret int32
		return ret
	}
	return *o.DocumentChunkSize
}

// GetDocumentChunkSizeOk returns a tuple with the DocumentChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingBucketRequest) GetDocumentChunkSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.DocumentChunkSize) {
		return nil, false
	}
	return o.DocumentChunkSize, true
}

// HasDocumentChunkSize returns a boolean if a field has been set.
func (o *EmbeddingBucketRequest) HasDocumentChunkSize() bool {
	if o != nil && !IsNil(o.DocumentChunkSize) {
		return true
	}

	return false
}

// SetDocumentChunkSize gets a reference to the given int32 and assigns it to the DocumentChunkSize field.
func (o *EmbeddingBucketRequest) SetDocumentChunkSize(v int32) {
	o.DocumentChunkSize = &v
}

// GetDocumentChunkOverlapSize returns the DocumentChunkOverlapSize field value if set, zero value otherwise.
func (o *EmbeddingBucketRequest) GetDocumentChunkOverlapSize() int32 {
	if o == nil || IsNil(o.DocumentChunkOverlapSize) {
		var ret int32
		return ret
	}
	return *o.DocumentChunkOverlapSize
}

// GetDocumentChunkOverlapSizeOk returns a tuple with the DocumentChunkOverlapSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingBucketRequest) GetDocumentChunkOverlapSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.DocumentChunkOverlapSize) {
		return nil, false
	}
	return o.DocumentChunkOverlapSize, true
}

// HasDocumentChunkOverlapSize returns a boolean if a field has been set.
func (o *EmbeddingBucketRequest) HasDocumentChunkOverlapSize() bool {
	if o != nil && !IsNil(o.DocumentChunkOverlapSize) {
		return true
	}

	return false
}

// SetDocumentChunkOverlapSize gets a reference to the given int32 and assigns it to the DocumentChunkOverlapSize field.
func (o *EmbeddingBucketRequest) SetDocumentChunkOverlapSize(v int32) {
	o.DocumentChunkOverlapSize = &v
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise.
func (o *EmbeddingBucketRequest) GetEmbeddingModel() SupportedEmbeddingModels {
	if o == nil || IsNil(o.EmbeddingModel) {
		var ret SupportedEmbeddingModels
		return ret
	}
	return *o.EmbeddingModel
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingBucketRequest) GetEmbeddingModelOk() (*SupportedEmbeddingModels, bool) {
	if o == nil || IsNil(o.EmbeddingModel) {
		return nil, false
	}
	return o.EmbeddingModel, true
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *EmbeddingBucketRequest) HasEmbeddingModel() bool {
	if o != nil && !IsNil(o.EmbeddingModel) {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given SupportedEmbeddingModels and assigns it to the EmbeddingModel field.
func (o *EmbeddingBucketRequest) SetEmbeddingModel(v SupportedEmbeddingModels) {
	o.EmbeddingModel = &v
}

// GetLoader returns the Loader field value if set, zero value otherwise.
func (o *EmbeddingBucketRequest) GetLoader() SupportedEmbeddingLoaders {
	if o == nil || IsNil(o.Loader) {
		var ret SupportedEmbeddingLoaders
		return ret
	}
	return *o.Loader
}

// GetLoaderOk returns a tuple with the Loader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingBucketRequest) GetLoaderOk() (*SupportedEmbeddingLoaders, bool) {
	if o == nil || IsNil(o.Loader) {
		return nil, false
	}
	return o.Loader, true
}

// HasLoader returns a boolean if a field has been set.
func (o *EmbeddingBucketRequest) HasLoader() bool {
	if o != nil && !IsNil(o.Loader) {
		return true
	}

	return false
}

// SetLoader gets a reference to the given SupportedEmbeddingLoaders and assigns it to the Loader field.
func (o *EmbeddingBucketRequest) SetLoader(v SupportedEmbeddingLoaders) {
	o.Loader = &v
}

func (o EmbeddingBucketRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingBucketRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName
	if !IsNil(o.DocumentChunkSize) {
		toSerialize["document_chunk_size"] = o.DocumentChunkSize
	}
	if !IsNil(o.DocumentChunkOverlapSize) {
		toSerialize["document_chunk_overlap_size"] = o.DocumentChunkOverlapSize
	}
	if !IsNil(o.EmbeddingModel) {
		toSerialize["embedding_model"] = o.EmbeddingModel
	}
	if !IsNil(o.Loader) {
		toSerialize["loader"] = o.Loader
	}
	return toSerialize, nil
}

func (o *EmbeddingBucketRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingBucketRequest := _EmbeddingBucketRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddingBucketRequest)

	if err != nil {
		return err
	}

	*o = EmbeddingBucketRequest(varEmbeddingBucketRequest)

	return err
}

type NullableEmbeddingBucketRequest struct {
	value *EmbeddingBucketRequest
	isSet bool
}

func (v NullableEmbeddingBucketRequest) Get() *EmbeddingBucketRequest {
	return v.value
}

func (v *NullableEmbeddingBucketRequest) Set(val *EmbeddingBucketRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingBucketRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingBucketRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingBucketRequest(val *EmbeddingBucketRequest) *NullableEmbeddingBucketRequest {
	return &NullableEmbeddingBucketRequest{value: val, isSet: true}
}

func (v NullableEmbeddingBucketRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingBucketRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


