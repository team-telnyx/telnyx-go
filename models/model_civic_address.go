/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CivicAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CivicAddress{}

// CivicAddress struct for CivicAddress
type CivicAddress struct {
	// Uniquely identifies the resource.
	Id *string `json:"id,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	CityOrTown *string `json:"city_or_town,omitempty"`
	CityOrTownAlias *string `json:"city_or_town_alias,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
	Country *string `json:"country,omitempty"`
	CountryOrDistrict *string `json:"country_or_district,omitempty"`
	// Identifies what is the default location in the list of locations.
	DefaultLocationId *string `json:"default_location_id,omitempty"`
	Description *string `json:"description,omitempty"`
	HouseNumber *string `json:"house_number,omitempty"`
	HouseNumberSuffix *string `json:"house_number_suffix,omitempty"`
	PostalOrZipCode *string `json:"postal_or_zip_code,omitempty"`
	StateOrProvince *string `json:"state_or_province,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
	StreetSuffix *string `json:"street_suffix,omitempty"`
	Locations []Location `json:"locations,omitempty"`
}

// NewCivicAddress instantiates a new CivicAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCivicAddress() *CivicAddress {
	this := CivicAddress{}
	return &this
}

// NewCivicAddressWithDefaults instantiates a new CivicAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCivicAddressWithDefaults() *CivicAddress {
	this := CivicAddress{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CivicAddress) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CivicAddress) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CivicAddress) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *CivicAddress) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *CivicAddress) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *CivicAddress) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCityOrTown returns the CityOrTown field value if set, zero value otherwise.
func (o *CivicAddress) GetCityOrTown() string {
	if o == nil || IsNil(o.CityOrTown) {
		var ret string
		return ret
	}
	return *o.CityOrTown
}

// GetCityOrTownOk returns a tuple with the CityOrTown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetCityOrTownOk() (*string, bool) {
	if o == nil || IsNil(o.CityOrTown) {
		return nil, false
	}
	return o.CityOrTown, true
}

// HasCityOrTown returns a boolean if a field has been set.
func (o *CivicAddress) HasCityOrTown() bool {
	if o != nil && !IsNil(o.CityOrTown) {
		return true
	}

	return false
}

// SetCityOrTown gets a reference to the given string and assigns it to the CityOrTown field.
func (o *CivicAddress) SetCityOrTown(v string) {
	o.CityOrTown = &v
}

// GetCityOrTownAlias returns the CityOrTownAlias field value if set, zero value otherwise.
func (o *CivicAddress) GetCityOrTownAlias() string {
	if o == nil || IsNil(o.CityOrTownAlias) {
		var ret string
		return ret
	}
	return *o.CityOrTownAlias
}

// GetCityOrTownAliasOk returns a tuple with the CityOrTownAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetCityOrTownAliasOk() (*string, bool) {
	if o == nil || IsNil(o.CityOrTownAlias) {
		return nil, false
	}
	return o.CityOrTownAlias, true
}

// HasCityOrTownAlias returns a boolean if a field has been set.
func (o *CivicAddress) HasCityOrTownAlias() bool {
	if o != nil && !IsNil(o.CityOrTownAlias) {
		return true
	}

	return false
}

// SetCityOrTownAlias gets a reference to the given string and assigns it to the CityOrTownAlias field.
func (o *CivicAddress) SetCityOrTownAlias(v string) {
	o.CityOrTownAlias = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *CivicAddress) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *CivicAddress) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *CivicAddress) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CivicAddress) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CivicAddress) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CivicAddress) SetCountry(v string) {
	o.Country = &v
}

// GetCountryOrDistrict returns the CountryOrDistrict field value if set, zero value otherwise.
func (o *CivicAddress) GetCountryOrDistrict() string {
	if o == nil || IsNil(o.CountryOrDistrict) {
		var ret string
		return ret
	}
	return *o.CountryOrDistrict
}

// GetCountryOrDistrictOk returns a tuple with the CountryOrDistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetCountryOrDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOrDistrict) {
		return nil, false
	}
	return o.CountryOrDistrict, true
}

// HasCountryOrDistrict returns a boolean if a field has been set.
func (o *CivicAddress) HasCountryOrDistrict() bool {
	if o != nil && !IsNil(o.CountryOrDistrict) {
		return true
	}

	return false
}

// SetCountryOrDistrict gets a reference to the given string and assigns it to the CountryOrDistrict field.
func (o *CivicAddress) SetCountryOrDistrict(v string) {
	o.CountryOrDistrict = &v
}

// GetDefaultLocationId returns the DefaultLocationId field value if set, zero value otherwise.
func (o *CivicAddress) GetDefaultLocationId() string {
	if o == nil || IsNil(o.DefaultLocationId) {
		var ret string
		return ret
	}
	return *o.DefaultLocationId
}

// GetDefaultLocationIdOk returns a tuple with the DefaultLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetDefaultLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultLocationId) {
		return nil, false
	}
	return o.DefaultLocationId, true
}

// HasDefaultLocationId returns a boolean if a field has been set.
func (o *CivicAddress) HasDefaultLocationId() bool {
	if o != nil && !IsNil(o.DefaultLocationId) {
		return true
	}

	return false
}

// SetDefaultLocationId gets a reference to the given string and assigns it to the DefaultLocationId field.
func (o *CivicAddress) SetDefaultLocationId(v string) {
	o.DefaultLocationId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CivicAddress) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CivicAddress) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CivicAddress) SetDescription(v string) {
	o.Description = &v
}

// GetHouseNumber returns the HouseNumber field value if set, zero value otherwise.
func (o *CivicAddress) GetHouseNumber() string {
	if o == nil || IsNil(o.HouseNumber) {
		var ret string
		return ret
	}
	return *o.HouseNumber
}

// GetHouseNumberOk returns a tuple with the HouseNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetHouseNumberOk() (*string, bool) {
	if o == nil || IsNil(o.HouseNumber) {
		return nil, false
	}
	return o.HouseNumber, true
}

// HasHouseNumber returns a boolean if a field has been set.
func (o *CivicAddress) HasHouseNumber() bool {
	if o != nil && !IsNil(o.HouseNumber) {
		return true
	}

	return false
}

// SetHouseNumber gets a reference to the given string and assigns it to the HouseNumber field.
func (o *CivicAddress) SetHouseNumber(v string) {
	o.HouseNumber = &v
}

// GetHouseNumberSuffix returns the HouseNumberSuffix field value if set, zero value otherwise.
func (o *CivicAddress) GetHouseNumberSuffix() string {
	if o == nil || IsNil(o.HouseNumberSuffix) {
		var ret string
		return ret
	}
	return *o.HouseNumberSuffix
}

// GetHouseNumberSuffixOk returns a tuple with the HouseNumberSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetHouseNumberSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.HouseNumberSuffix) {
		return nil, false
	}
	return o.HouseNumberSuffix, true
}

// HasHouseNumberSuffix returns a boolean if a field has been set.
func (o *CivicAddress) HasHouseNumberSuffix() bool {
	if o != nil && !IsNil(o.HouseNumberSuffix) {
		return true
	}

	return false
}

// SetHouseNumberSuffix gets a reference to the given string and assigns it to the HouseNumberSuffix field.
func (o *CivicAddress) SetHouseNumberSuffix(v string) {
	o.HouseNumberSuffix = &v
}

// GetPostalOrZipCode returns the PostalOrZipCode field value if set, zero value otherwise.
func (o *CivicAddress) GetPostalOrZipCode() string {
	if o == nil || IsNil(o.PostalOrZipCode) {
		var ret string
		return ret
	}
	return *o.PostalOrZipCode
}

// GetPostalOrZipCodeOk returns a tuple with the PostalOrZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetPostalOrZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalOrZipCode) {
		return nil, false
	}
	return o.PostalOrZipCode, true
}

// HasPostalOrZipCode returns a boolean if a field has been set.
func (o *CivicAddress) HasPostalOrZipCode() bool {
	if o != nil && !IsNil(o.PostalOrZipCode) {
		return true
	}

	return false
}

// SetPostalOrZipCode gets a reference to the given string and assigns it to the PostalOrZipCode field.
func (o *CivicAddress) SetPostalOrZipCode(v string) {
	o.PostalOrZipCode = &v
}

// GetStateOrProvince returns the StateOrProvince field value if set, zero value otherwise.
func (o *CivicAddress) GetStateOrProvince() string {
	if o == nil || IsNil(o.StateOrProvince) {
		var ret string
		return ret
	}
	return *o.StateOrProvince
}

// GetStateOrProvinceOk returns a tuple with the StateOrProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetStateOrProvinceOk() (*string, bool) {
	if o == nil || IsNil(o.StateOrProvince) {
		return nil, false
	}
	return o.StateOrProvince, true
}

// HasStateOrProvince returns a boolean if a field has been set.
func (o *CivicAddress) HasStateOrProvince() bool {
	if o != nil && !IsNil(o.StateOrProvince) {
		return true
	}

	return false
}

// SetStateOrProvince gets a reference to the given string and assigns it to the StateOrProvince field.
func (o *CivicAddress) SetStateOrProvince(v string) {
	o.StateOrProvince = &v
}

// GetStreetName returns the StreetName field value if set, zero value otherwise.
func (o *CivicAddress) GetStreetName() string {
	if o == nil || IsNil(o.StreetName) {
		var ret string
		return ret
	}
	return *o.StreetName
}

// GetStreetNameOk returns a tuple with the StreetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetStreetNameOk() (*string, bool) {
	if o == nil || IsNil(o.StreetName) {
		return nil, false
	}
	return o.StreetName, true
}

// HasStreetName returns a boolean if a field has been set.
func (o *CivicAddress) HasStreetName() bool {
	if o != nil && !IsNil(o.StreetName) {
		return true
	}

	return false
}

// SetStreetName gets a reference to the given string and assigns it to the StreetName field.
func (o *CivicAddress) SetStreetName(v string) {
	o.StreetName = &v
}

// GetStreetSuffix returns the StreetSuffix field value if set, zero value otherwise.
func (o *CivicAddress) GetStreetSuffix() string {
	if o == nil || IsNil(o.StreetSuffix) {
		var ret string
		return ret
	}
	return *o.StreetSuffix
}

// GetStreetSuffixOk returns a tuple with the StreetSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetStreetSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.StreetSuffix) {
		return nil, false
	}
	return o.StreetSuffix, true
}

// HasStreetSuffix returns a boolean if a field has been set.
func (o *CivicAddress) HasStreetSuffix() bool {
	if o != nil && !IsNil(o.StreetSuffix) {
		return true
	}

	return false
}

// SetStreetSuffix gets a reference to the given string and assigns it to the StreetSuffix field.
func (o *CivicAddress) SetStreetSuffix(v string) {
	o.StreetSuffix = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *CivicAddress) GetLocations() []Location {
	if o == nil || IsNil(o.Locations) {
		var ret []Location
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CivicAddress) GetLocationsOk() ([]Location, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *CivicAddress) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []Location and assigns it to the Locations field.
func (o *CivicAddress) SetLocations(v []Location) {
	o.Locations = v
}

func (o CivicAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CivicAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CityOrTown) {
		toSerialize["city_or_town"] = o.CityOrTown
	}
	if !IsNil(o.CityOrTownAlias) {
		toSerialize["city_or_town_alias"] = o.CityOrTownAlias
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CountryOrDistrict) {
		toSerialize["country_or_district"] = o.CountryOrDistrict
	}
	if !IsNil(o.DefaultLocationId) {
		toSerialize["default_location_id"] = o.DefaultLocationId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HouseNumber) {
		toSerialize["house_number"] = o.HouseNumber
	}
	if !IsNil(o.HouseNumberSuffix) {
		toSerialize["house_number_suffix"] = o.HouseNumberSuffix
	}
	if !IsNil(o.PostalOrZipCode) {
		toSerialize["postal_or_zip_code"] = o.PostalOrZipCode
	}
	if !IsNil(o.StateOrProvince) {
		toSerialize["state_or_province"] = o.StateOrProvince
	}
	if !IsNil(o.StreetName) {
		toSerialize["street_name"] = o.StreetName
	}
	if !IsNil(o.StreetSuffix) {
		toSerialize["street_suffix"] = o.StreetSuffix
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	return toSerialize, nil
}

type NullableCivicAddress struct {
	value *CivicAddress
	isSet bool
}

func (v NullableCivicAddress) Get() *CivicAddress {
	return v.value
}

func (v *NullableCivicAddress) Set(val *CivicAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCivicAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCivicAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCivicAddress(val *CivicAddress) *NullableCivicAddress {
	return &NullableCivicAddress{value: val, isSet: true}
}

func (v NullableCivicAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCivicAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


