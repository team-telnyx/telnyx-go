/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// AvailableService the model 'AvailableService'
type AvailableService string

// List of AvailableService
const (
	CLOUD_VPN AvailableService = "cloud_vpn"
	PRIVATE_WIRELESS_GATEWAY AvailableService = "private_wireless_gateway"
	VIRTUAL_CROSS_CONNECT AvailableService = "virtual_cross_connect"
)

// All allowed values of AvailableService enum
var AllowedAvailableServiceEnumValues = []AvailableService{
	"cloud_vpn",
	"private_wireless_gateway",
	"virtual_cross_connect",
}

func (v *AvailableService) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailableService(value)
	for _, existing := range AllowedAvailableServiceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailableService", value)
}

// NewAvailableServiceFromValue returns a pointer to a valid AvailableService
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailableServiceFromValue(v string) (*AvailableService, error) {
	ev := AvailableService(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailableService: valid values are %v", v, AllowedAvailableServiceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailableService) IsValid() bool {
	for _, existing := range AllowedAvailableServiceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailableService value
func (v AvailableService) Ptr() *AvailableService {
	return &v
}

type NullableAvailableService struct {
	value *AvailableService
	isSet bool
}

func (v NullableAvailableService) Get() *AvailableService {
	return v.value
}

func (v *NullableAvailableService) Set(val *AvailableService) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableService) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableService(val *AvailableService) *NullableAvailableService {
	return &NullableAvailableService{value: val, isSet: true}
}

func (v NullableAvailableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

