/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SoundModifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoundModifications{}

// SoundModifications Use this field to modify sound effects, for example adjust the pitch.
type SoundModifications struct {
	// Set the pitch directly, value should be > 0, default 1 (lower = lower tone)
	Pitch *float64 `json:"pitch,omitempty"`
	// Adjust the pitch in semitones, values should be between -14 and 14, default 0
	Semitone *float64 `json:"semitone,omitempty"`
	// Adjust the pitch in octaves, values should be between -1 and 1, default 0
	Octaves *float64 `json:"octaves,omitempty"`
	// The track to which the sound modifications will be applied. Accepted values are `inbound` or `outbound`
	Track *string `json:"track,omitempty"`
}

// NewSoundModifications instantiates a new SoundModifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoundModifications() *SoundModifications {
	this := SoundModifications{}
	var track string = "outbound"
	this.Track = &track
	return &this
}

// NewSoundModificationsWithDefaults instantiates a new SoundModifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoundModificationsWithDefaults() *SoundModifications {
	this := SoundModifications{}
	var track string = "outbound"
	this.Track = &track
	return &this
}

// GetPitch returns the Pitch field value if set, zero value otherwise.
func (o *SoundModifications) GetPitch() float64 {
	if o == nil || IsNil(o.Pitch) {
		var ret float64
		return ret
	}
	return *o.Pitch
}

// GetPitchOk returns a tuple with the Pitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoundModifications) GetPitchOk() (*float64, bool) {
	if o == nil || IsNil(o.Pitch) {
		return nil, false
	}
	return o.Pitch, true
}

// HasPitch returns a boolean if a field has been set.
func (o *SoundModifications) HasPitch() bool {
	if o != nil && !IsNil(o.Pitch) {
		return true
	}

	return false
}

// SetPitch gets a reference to the given float64 and assigns it to the Pitch field.
func (o *SoundModifications) SetPitch(v float64) {
	o.Pitch = &v
}

// GetSemitone returns the Semitone field value if set, zero value otherwise.
func (o *SoundModifications) GetSemitone() float64 {
	if o == nil || IsNil(o.Semitone) {
		var ret float64
		return ret
	}
	return *o.Semitone
}

// GetSemitoneOk returns a tuple with the Semitone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoundModifications) GetSemitoneOk() (*float64, bool) {
	if o == nil || IsNil(o.Semitone) {
		return nil, false
	}
	return o.Semitone, true
}

// HasSemitone returns a boolean if a field has been set.
func (o *SoundModifications) HasSemitone() bool {
	if o != nil && !IsNil(o.Semitone) {
		return true
	}

	return false
}

// SetSemitone gets a reference to the given float64 and assigns it to the Semitone field.
func (o *SoundModifications) SetSemitone(v float64) {
	o.Semitone = &v
}

// GetOctaves returns the Octaves field value if set, zero value otherwise.
func (o *SoundModifications) GetOctaves() float64 {
	if o == nil || IsNil(o.Octaves) {
		var ret float64
		return ret
	}
	return *o.Octaves
}

// GetOctavesOk returns a tuple with the Octaves field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoundModifications) GetOctavesOk() (*float64, bool) {
	if o == nil || IsNil(o.Octaves) {
		return nil, false
	}
	return o.Octaves, true
}

// HasOctaves returns a boolean if a field has been set.
func (o *SoundModifications) HasOctaves() bool {
	if o != nil && !IsNil(o.Octaves) {
		return true
	}

	return false
}

// SetOctaves gets a reference to the given float64 and assigns it to the Octaves field.
func (o *SoundModifications) SetOctaves(v float64) {
	o.Octaves = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *SoundModifications) GetTrack() string {
	if o == nil || IsNil(o.Track) {
		var ret string
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoundModifications) GetTrackOk() (*string, bool) {
	if o == nil || IsNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *SoundModifications) HasTrack() bool {
	if o != nil && !IsNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given string and assigns it to the Track field.
func (o *SoundModifications) SetTrack(v string) {
	o.Track = &v
}

func (o SoundModifications) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoundModifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pitch) {
		toSerialize["pitch"] = o.Pitch
	}
	if !IsNil(o.Semitone) {
		toSerialize["semitone"] = o.Semitone
	}
	if !IsNil(o.Octaves) {
		toSerialize["octaves"] = o.Octaves
	}
	if !IsNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	return toSerialize, nil
}

type NullableSoundModifications struct {
	value *SoundModifications
	isSet bool
}

func (v NullableSoundModifications) Get() *SoundModifications {
	return v.value
}

func (v *NullableSoundModifications) Set(val *SoundModifications) {
	v.value = val
	v.isSet = true
}

func (v NullableSoundModifications) IsSet() bool {
	return v.isSet
}

func (v *NullableSoundModifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoundModifications(val *SoundModifications) *NullableSoundModifications {
	return &NullableSoundModifications{value: val, isSet: true}
}

func (v NullableSoundModifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoundModifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


