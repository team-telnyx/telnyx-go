/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the PortingOrdersComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortingOrdersComment{}

// PortingOrdersComment struct for PortingOrdersComment
type PortingOrdersComment struct {
	Id *string `json:"id,omitempty"`
	// Body of comment
	Body *string `json:"body,omitempty"`
	PortingOrderId *string `json:"porting_order_id,omitempty"`
	// Indicates whether this comment was created by a Telnyx Admin, user, or system
	UserType *string `json:"user_type,omitempty"`
	// The ID of the user who created this comment
	UserId *string `json:"user_id,omitempty"`
	// The email address of the user who created this comment
	UserEmail *string `json:"user_email,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewPortingOrdersComment instantiates a new PortingOrdersComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortingOrdersComment() *PortingOrdersComment {
	this := PortingOrdersComment{}
	return &this
}

// NewPortingOrdersCommentWithDefaults instantiates a new PortingOrdersComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortingOrdersCommentWithDefaults() *PortingOrdersComment {
	this := PortingOrdersComment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortingOrdersComment) SetId(v string) {
	o.Id = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *PortingOrdersComment) SetBody(v string) {
	o.Body = &v
}

// GetPortingOrderId returns the PortingOrderId field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetPortingOrderId() string {
	if o == nil || IsNil(o.PortingOrderId) {
		var ret string
		return ret
	}
	return *o.PortingOrderId
}

// GetPortingOrderIdOk returns a tuple with the PortingOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetPortingOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortingOrderId) {
		return nil, false
	}
	return o.PortingOrderId, true
}

// HasPortingOrderId returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasPortingOrderId() bool {
	if o != nil && !IsNil(o.PortingOrderId) {
		return true
	}

	return false
}

// SetPortingOrderId gets a reference to the given string and assigns it to the PortingOrderId field.
func (o *PortingOrdersComment) SetPortingOrderId(v string) {
	o.PortingOrderId = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *PortingOrdersComment) SetUserType(v string) {
	o.UserType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PortingOrdersComment) SetUserId(v string) {
	o.UserId = &v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *PortingOrdersComment) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *PortingOrdersComment) SetRecordType(v string) {
	o.RecordType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PortingOrdersComment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrdersComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PortingOrdersComment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PortingOrdersComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o PortingOrdersComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortingOrdersComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.PortingOrderId) {
		toSerialize["porting_order_id"] = o.PortingOrderId
	}
	if !IsNil(o.UserType) {
		toSerialize["user_type"] = o.UserType
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserEmail) {
		toSerialize["user_email"] = o.UserEmail
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullablePortingOrdersComment struct {
	value *PortingOrdersComment
	isSet bool
}

func (v NullablePortingOrdersComment) Get() *PortingOrdersComment {
	return v.value
}

func (v *NullablePortingOrdersComment) Set(val *PortingOrdersComment) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingOrdersComment) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingOrdersComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingOrdersComment(val *PortingOrdersComment) *NullablePortingOrdersComment {
	return &NullablePortingOrdersComment{value: val, isSet: true}
}

func (v NullablePortingOrdersComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingOrdersComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


