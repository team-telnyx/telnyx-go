/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CampaignCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignCost{}

// CampaignCost struct for CampaignCost
type CampaignCost struct {
	CampaignUsecase string `json:"campaignUsecase"`
	MonthlyCost string `json:"monthlyCost"`
	UpFrontCost string `json:"upFrontCost"`
	Description string `json:"description"`
}

type _CampaignCost CampaignCost

// NewCampaignCost instantiates a new CampaignCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignCost(campaignUsecase string, monthlyCost string, upFrontCost string, description string) *CampaignCost {
	this := CampaignCost{}
	this.CampaignUsecase = campaignUsecase
	this.MonthlyCost = monthlyCost
	this.UpFrontCost = upFrontCost
	this.Description = description
	return &this
}

// NewCampaignCostWithDefaults instantiates a new CampaignCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignCostWithDefaults() *CampaignCost {
	this := CampaignCost{}
	return &this
}

// GetCampaignUsecase returns the CampaignUsecase field value
func (o *CampaignCost) GetCampaignUsecase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CampaignUsecase
}

// GetCampaignUsecaseOk returns a tuple with the CampaignUsecase field value
// and a boolean to check if the value has been set.
func (o *CampaignCost) GetCampaignUsecaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CampaignUsecase, true
}

// SetCampaignUsecase sets field value
func (o *CampaignCost) SetCampaignUsecase(v string) {
	o.CampaignUsecase = v
}

// GetMonthlyCost returns the MonthlyCost field value
func (o *CampaignCost) GetMonthlyCost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonthlyCost
}

// GetMonthlyCostOk returns a tuple with the MonthlyCost field value
// and a boolean to check if the value has been set.
func (o *CampaignCost) GetMonthlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonthlyCost, true
}

// SetMonthlyCost sets field value
func (o *CampaignCost) SetMonthlyCost(v string) {
	o.MonthlyCost = v
}

// GetUpFrontCost returns the UpFrontCost field value
func (o *CampaignCost) GetUpFrontCost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpFrontCost
}

// GetUpFrontCostOk returns a tuple with the UpFrontCost field value
// and a boolean to check if the value has been set.
func (o *CampaignCost) GetUpFrontCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpFrontCost, true
}

// SetUpFrontCost sets field value
func (o *CampaignCost) SetUpFrontCost(v string) {
	o.UpFrontCost = v
}

// GetDescription returns the Description field value
func (o *CampaignCost) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CampaignCost) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CampaignCost) SetDescription(v string) {
	o.Description = v
}

func (o CampaignCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["campaignUsecase"] = o.CampaignUsecase
	toSerialize["monthlyCost"] = o.MonthlyCost
	toSerialize["upFrontCost"] = o.UpFrontCost
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *CampaignCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"campaignUsecase",
		"monthlyCost",
		"upFrontCost",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCampaignCost := _CampaignCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCampaignCost)

	if err != nil {
		return err
	}

	*o = CampaignCost(varCampaignCost)

	return err
}

type NullableCampaignCost struct {
	value *CampaignCost
	isSet bool
}

func (v NullableCampaignCost) Get() *CampaignCost {
	return v.value
}

func (v *NullableCampaignCost) Set(val *CampaignCost) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignCost) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignCost(val *CampaignCost) *NullableCampaignCost {
	return &NullableCampaignCost{value: val, isSet: true}
}

func (v NullableCampaignCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


