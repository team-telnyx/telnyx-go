/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the InboundMessagePayloadCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InboundMessagePayloadCost{}

// InboundMessagePayloadCost struct for InboundMessagePayloadCost
type InboundMessagePayloadCost struct {
	// The amount deducted from your account.
	Amount *float64 `json:"amount,omitempty"`
	// The ISO 4217 currency identifier.
	Currency *string `json:"currency,omitempty"`
}

// NewInboundMessagePayloadCost instantiates a new InboundMessagePayloadCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInboundMessagePayloadCost() *InboundMessagePayloadCost {
	this := InboundMessagePayloadCost{}
	return &this
}

// NewInboundMessagePayloadCostWithDefaults instantiates a new InboundMessagePayloadCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInboundMessagePayloadCostWithDefaults() *InboundMessagePayloadCost {
	this := InboundMessagePayloadCost{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *InboundMessagePayloadCost) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessagePayloadCost) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *InboundMessagePayloadCost) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *InboundMessagePayloadCost) SetAmount(v float64) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *InboundMessagePayloadCost) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InboundMessagePayloadCost) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *InboundMessagePayloadCost) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *InboundMessagePayloadCost) SetCurrency(v string) {
	o.Currency = &v
}

func (o InboundMessagePayloadCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InboundMessagePayloadCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

type NullableInboundMessagePayloadCost struct {
	value *InboundMessagePayloadCost
	isSet bool
}

func (v NullableInboundMessagePayloadCost) Get() *InboundMessagePayloadCost {
	return v.value
}

func (v *NullableInboundMessagePayloadCost) Set(val *InboundMessagePayloadCost) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundMessagePayloadCost) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundMessagePayloadCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundMessagePayloadCost(val *InboundMessagePayloadCost) *NullableInboundMessagePayloadCost {
	return &NullableInboundMessagePayloadCost{value: val, isSet: true}
}

func (v NullableInboundMessagePayloadCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundMessagePayloadCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


