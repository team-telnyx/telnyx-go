/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferenceHoldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceHoldRequest{}

// ConferenceHoldRequest struct for ConferenceHoldRequest
type ConferenceHoldRequest struct {
	// List of unique identifiers and tokens for controlling the call. When empty all participants will be placed on hold.
	CallControlIds []string `json:"call_control_ids,omitempty"`
	// The URL of a file to be played to the participants when they are put on hold. media_name and audio_url cannot be used together in one request.
	AudioUrl *string `json:"audio_url,omitempty"`
	// The media_name of a file to be played to the participants when they are put on hold. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
	MediaName *string `json:"media_name,omitempty"`
}

// NewConferenceHoldRequest instantiates a new ConferenceHoldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceHoldRequest() *ConferenceHoldRequest {
	this := ConferenceHoldRequest{}
	return &this
}

// NewConferenceHoldRequestWithDefaults instantiates a new ConferenceHoldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceHoldRequestWithDefaults() *ConferenceHoldRequest {
	this := ConferenceHoldRequest{}
	return &this
}

// GetCallControlIds returns the CallControlIds field value if set, zero value otherwise.
func (o *ConferenceHoldRequest) GetCallControlIds() []string {
	if o == nil || IsNil(o.CallControlIds) {
		var ret []string
		return ret
	}
	return o.CallControlIds
}

// GetCallControlIdsOk returns a tuple with the CallControlIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceHoldRequest) GetCallControlIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CallControlIds) {
		return nil, false
	}
	return o.CallControlIds, true
}

// HasCallControlIds returns a boolean if a field has been set.
func (o *ConferenceHoldRequest) HasCallControlIds() bool {
	if o != nil && !IsNil(o.CallControlIds) {
		return true
	}

	return false
}

// SetCallControlIds gets a reference to the given []string and assigns it to the CallControlIds field.
func (o *ConferenceHoldRequest) SetCallControlIds(v []string) {
	o.CallControlIds = v
}

// GetAudioUrl returns the AudioUrl field value if set, zero value otherwise.
func (o *ConferenceHoldRequest) GetAudioUrl() string {
	if o == nil || IsNil(o.AudioUrl) {
		var ret string
		return ret
	}
	return *o.AudioUrl
}

// GetAudioUrlOk returns a tuple with the AudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceHoldRequest) GetAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioUrl) {
		return nil, false
	}
	return o.AudioUrl, true
}

// HasAudioUrl returns a boolean if a field has been set.
func (o *ConferenceHoldRequest) HasAudioUrl() bool {
	if o != nil && !IsNil(o.AudioUrl) {
		return true
	}

	return false
}

// SetAudioUrl gets a reference to the given string and assigns it to the AudioUrl field.
func (o *ConferenceHoldRequest) SetAudioUrl(v string) {
	o.AudioUrl = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *ConferenceHoldRequest) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceHoldRequest) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *ConferenceHoldRequest) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *ConferenceHoldRequest) SetMediaName(v string) {
	o.MediaName = &v
}

func (o ConferenceHoldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceHoldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallControlIds) {
		toSerialize["call_control_ids"] = o.CallControlIds
	}
	if !IsNil(o.AudioUrl) {
		toSerialize["audio_url"] = o.AudioUrl
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	return toSerialize, nil
}

type NullableConferenceHoldRequest struct {
	value *ConferenceHoldRequest
	isSet bool
}

func (v NullableConferenceHoldRequest) Get() *ConferenceHoldRequest {
	return v.value
}

func (v *NullableConferenceHoldRequest) Set(val *ConferenceHoldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceHoldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceHoldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceHoldRequest(val *ConferenceHoldRequest) *NullableConferenceHoldRequest {
	return &NullableConferenceHoldRequest{value: val, isSet: true}
}

func (v NullableConferenceHoldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceHoldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


