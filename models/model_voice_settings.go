/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VoiceSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoiceSettings{}

// VoiceSettings struct for VoiceSettings
type VoiceSettings struct {
	// The voice to be used by the voice assistant. Check the full list of [available voices](https://developers.telnyx.com/api/call-control/list-text-to-speech-voices) via our voices API. To use ElevenLabs, you must reference your ElevenLabs API key as an integration secret under the `api_key_ref` field. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. For Telnyx voices, use `Telnyx.<model_id>.<voice_id>` (e.g. Telnyx.KokoroTTS.af_heart)
	Voice string `json:"voice"`
	// The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your ElevenLabs API key. Warning: Free plans are unlikely to work with this integration.
	ApiKeyRef *string `json:"api_key_ref,omitempty"`
}

type _VoiceSettings VoiceSettings

// NewVoiceSettings instantiates a new VoiceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoiceSettings(voice string) *VoiceSettings {
	this := VoiceSettings{}
	this.Voice = voice
	return &this
}

// NewVoiceSettingsWithDefaults instantiates a new VoiceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoiceSettingsWithDefaults() *VoiceSettings {
	this := VoiceSettings{}
	return &this
}

// GetVoice returns the Voice field value
func (o *VoiceSettings) GetVoice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value
// and a boolean to check if the value has been set.
func (o *VoiceSettings) GetVoiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Voice, true
}

// SetVoice sets field value
func (o *VoiceSettings) SetVoice(v string) {
	o.Voice = v
}

// GetApiKeyRef returns the ApiKeyRef field value if set, zero value otherwise.
func (o *VoiceSettings) GetApiKeyRef() string {
	if o == nil || IsNil(o.ApiKeyRef) {
		var ret string
		return ret
	}
	return *o.ApiKeyRef
}

// GetApiKeyRefOk returns a tuple with the ApiKeyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceSettings) GetApiKeyRefOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKeyRef) {
		return nil, false
	}
	return o.ApiKeyRef, true
}

// HasApiKeyRef returns a boolean if a field has been set.
func (o *VoiceSettings) HasApiKeyRef() bool {
	if o != nil && !IsNil(o.ApiKeyRef) {
		return true
	}

	return false
}

// SetApiKeyRef gets a reference to the given string and assigns it to the ApiKeyRef field.
func (o *VoiceSettings) SetApiKeyRef(v string) {
	o.ApiKeyRef = &v
}

func (o VoiceSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoiceSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["voice"] = o.Voice
	if !IsNil(o.ApiKeyRef) {
		toSerialize["api_key_ref"] = o.ApiKeyRef
	}
	return toSerialize, nil
}

func (o *VoiceSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"voice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVoiceSettings := _VoiceSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVoiceSettings)

	if err != nil {
		return err
	}

	*o = VoiceSettings(varVoiceSettings)

	return err
}

type NullableVoiceSettings struct {
	value *VoiceSettings
	isSet bool
}

func (v NullableVoiceSettings) Get() *VoiceSettings {
	return v.value
}

func (v *NullableVoiceSettings) Set(val *VoiceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableVoiceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableVoiceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoiceSettings(val *VoiceSettings) *NullableVoiceSettings {
	return &NullableVoiceSettings{value: val, isSet: true}
}

func (v NullableVoiceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoiceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


