/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardAction{}

// SIMCardAction This object represents a SIM card action. It allows tracking the current status of an operation that impacts the SIM card.
type SIMCardAction struct {
	// Identifies the resource.
	Id *string `json:"id,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	// The related SIM card identifier.
	SimCardId *string `json:"sim_card_id,omitempty"`
	// The operation type. It can be one of the following: <br/> <ul>  <li><code>enable</code> - move the SIM card to the <code>enabled</code> status</li>  <li><code>enable_standby_sim_card</code> - move a SIM card previously on the <code>standby</code> status to the <code>enabled</code> status after it consumes data.</li>  <li><code>disable</code> - move the SIM card to the <code>disabled</code> status</li>  <li><code>set_standby</code> - move the SIM card to the <code>standby</code> status</li>  </ul>
	ActionType *string `json:"action_type,omitempty"`
	Status *SIMCardActionStatus `json:"status,omitempty"`
	// A JSON object representation of the action params.
	Settings map[string]interface{} `json:"settings,omitempty"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewSIMCardAction instantiates a new SIMCardAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardAction() *SIMCardAction {
	this := SIMCardAction{}
	return &this
}

// NewSIMCardActionWithDefaults instantiates a new SIMCardAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardActionWithDefaults() *SIMCardAction {
	this := SIMCardAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SIMCardAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SIMCardAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SIMCardAction) SetId(v string) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SIMCardAction) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SIMCardAction) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SIMCardAction) SetRecordType(v string) {
	o.RecordType = &v
}

// GetSimCardId returns the SimCardId field value if set, zero value otherwise.
func (o *SIMCardAction) GetSimCardId() string {
	if o == nil || IsNil(o.SimCardId) {
		var ret string
		return ret
	}
	return *o.SimCardId
}

// GetSimCardIdOk returns a tuple with the SimCardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetSimCardIdOk() (*string, bool) {
	if o == nil || IsNil(o.SimCardId) {
		return nil, false
	}
	return o.SimCardId, true
}

// HasSimCardId returns a boolean if a field has been set.
func (o *SIMCardAction) HasSimCardId() bool {
	if o != nil && !IsNil(o.SimCardId) {
		return true
	}

	return false
}

// SetSimCardId gets a reference to the given string and assigns it to the SimCardId field.
func (o *SIMCardAction) SetSimCardId(v string) {
	o.SimCardId = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *SIMCardAction) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *SIMCardAction) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *SIMCardAction) SetActionType(v string) {
	o.ActionType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SIMCardAction) GetStatus() SIMCardActionStatus {
	if o == nil || IsNil(o.Status) {
		var ret SIMCardActionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetStatusOk() (*SIMCardActionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SIMCardAction) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SIMCardActionStatus and assigns it to the Status field.
func (o *SIMCardAction) SetStatus(v SIMCardActionStatus) {
	o.Status = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SIMCardAction) GetSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SIMCardAction) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *SIMCardAction) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *SIMCardAction) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SIMCardAction) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SIMCardAction) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SIMCardAction) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SIMCardAction) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardAction) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SIMCardAction) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SIMCardAction) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o SIMCardAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.SimCardId) {
		toSerialize["sim_card_id"] = o.SimCardId
	}
	if !IsNil(o.ActionType) {
		toSerialize["action_type"] = o.ActionType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableSIMCardAction struct {
	value *SIMCardAction
	isSet bool
}

func (v NullableSIMCardAction) Get() *SIMCardAction {
	return v.value
}

func (v *NullableSIMCardAction) Set(val *SIMCardAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardAction(val *SIMCardAction) *NullableSIMCardAction {
	return &NullableSIMCardAction{value: val, isSet: true}
}

func (v NullableSIMCardAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


