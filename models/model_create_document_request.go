/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreateDocumentRequest - struct for CreateDocumentRequest
type CreateDocumentRequest struct {
	CreateDocumentRequestOneOf *CreateDocumentRequestOneOf
	CreateDocumentRequestOneOf1 *CreateDocumentRequestOneOf1
}

// CreateDocumentRequestOneOfAsCreateDocumentRequest is a convenience function that returns CreateDocumentRequestOneOf wrapped in CreateDocumentRequest
func CreateDocumentRequestOneOfAsCreateDocumentRequest(v *CreateDocumentRequestOneOf) CreateDocumentRequest {
	return CreateDocumentRequest{
		CreateDocumentRequestOneOf: v,
	}
}

// CreateDocumentRequestOneOf1AsCreateDocumentRequest is a convenience function that returns CreateDocumentRequestOneOf1 wrapped in CreateDocumentRequest
func CreateDocumentRequestOneOf1AsCreateDocumentRequest(v *CreateDocumentRequestOneOf1) CreateDocumentRequest {
	return CreateDocumentRequest{
		CreateDocumentRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDocumentRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateDocumentRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateDocumentRequestOneOf)
	if err == nil {
		jsonCreateDocumentRequestOneOf, _ := json.Marshal(dst.CreateDocumentRequestOneOf)
		if string(jsonCreateDocumentRequestOneOf) == "{}" { // empty struct
			dst.CreateDocumentRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.CreateDocumentRequestOneOf); err != nil {
				dst.CreateDocumentRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateDocumentRequestOneOf = nil
	}

	// try to unmarshal data into CreateDocumentRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateDocumentRequestOneOf1)
	if err == nil {
		jsonCreateDocumentRequestOneOf1, _ := json.Marshal(dst.CreateDocumentRequestOneOf1)
		if string(jsonCreateDocumentRequestOneOf1) == "{}" { // empty struct
			dst.CreateDocumentRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.CreateDocumentRequestOneOf1); err != nil {
				dst.CreateDocumentRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateDocumentRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateDocumentRequestOneOf = nil
		dst.CreateDocumentRequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDocumentRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDocumentRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDocumentRequest) MarshalJSON() ([]byte, error) {
	if src.CreateDocumentRequestOneOf != nil {
		return json.Marshal(&src.CreateDocumentRequestOneOf)
	}

	if src.CreateDocumentRequestOneOf1 != nil {
		return json.Marshal(&src.CreateDocumentRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDocumentRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateDocumentRequestOneOf != nil {
		return obj.CreateDocumentRequestOneOf
	}

	if obj.CreateDocumentRequestOneOf1 != nil {
		return obj.CreateDocumentRequestOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateDocumentRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateDocumentRequestOneOf != nil {
		return *obj.CreateDocumentRequestOneOf
	}

	if obj.CreateDocumentRequestOneOf1 != nil {
		return *obj.CreateDocumentRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableCreateDocumentRequest struct {
	value *CreateDocumentRequest
	isSet bool
}

func (v NullableCreateDocumentRequest) Get() *CreateDocumentRequest {
	return v.value
}

func (v *NullableCreateDocumentRequest) Set(val *CreateDocumentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDocumentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDocumentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDocumentRequest(val *CreateDocumentRequest) *NullableCreateDocumentRequest {
	return &NullableCreateDocumentRequest{value: val, isSet: true}
}

func (v NullableCreateDocumentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDocumentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


