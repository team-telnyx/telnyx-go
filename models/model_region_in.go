/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RegionIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionIn{}

// RegionIn struct for RegionIn
type RegionIn struct {
	// The region the interface should be deployed to.
	RegionCode *string `json:"region_code,omitempty"`
}

// NewRegionIn instantiates a new RegionIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionIn() *RegionIn {
	this := RegionIn{}
	return &this
}

// NewRegionInWithDefaults instantiates a new RegionIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionInWithDefaults() *RegionIn {
	this := RegionIn{}
	return &this
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *RegionIn) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionIn) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *RegionIn) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *RegionIn) SetRegionCode(v string) {
	o.RegionCode = &v
}

func (o RegionIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegionCode) {
		toSerialize["region_code"] = o.RegionCode
	}
	return toSerialize, nil
}

type NullableRegionIn struct {
	value *RegionIn
	isSet bool
}

func (v NullableRegionIn) Get() *RegionIn {
	return v.value
}

func (v *NullableRegionIn) Set(val *RegionIn) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionIn) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionIn(val *RegionIn) *NullableRegionIn {
	return &NullableRegionIn{value: val, isSet: true}
}

func (v NullableRegionIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


