/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// StreamBidirectionalTargetLegs Specifies which call legs should receive the bidirectional stream audio.
type StreamBidirectionalTargetLegs string

// List of StreamBidirectionalTargetLegs
const (
	BOTH StreamBidirectionalTargetLegs = "both"
	SELF StreamBidirectionalTargetLegs = "self"
	OPPOSITE StreamBidirectionalTargetLegs = "opposite"
)

// All allowed values of StreamBidirectionalTargetLegs enum
var AllowedStreamBidirectionalTargetLegsEnumValues = []StreamBidirectionalTargetLegs{
	"both",
	"self",
	"opposite",
}

func (v *StreamBidirectionalTargetLegs) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamBidirectionalTargetLegs(value)
	for _, existing := range AllowedStreamBidirectionalTargetLegsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamBidirectionalTargetLegs", value)
}

// NewStreamBidirectionalTargetLegsFromValue returns a pointer to a valid StreamBidirectionalTargetLegs
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamBidirectionalTargetLegsFromValue(v string) (*StreamBidirectionalTargetLegs, error) {
	ev := StreamBidirectionalTargetLegs(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamBidirectionalTargetLegs: valid values are %v", v, AllowedStreamBidirectionalTargetLegsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamBidirectionalTargetLegs) IsValid() bool {
	for _, existing := range AllowedStreamBidirectionalTargetLegsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamBidirectionalTargetLegs value
func (v StreamBidirectionalTargetLegs) Ptr() *StreamBidirectionalTargetLegs {
	return &v
}

type NullableStreamBidirectionalTargetLegs struct {
	value *StreamBidirectionalTargetLegs
	isSet bool
}

func (v NullableStreamBidirectionalTargetLegs) Get() *StreamBidirectionalTargetLegs {
	return v.value
}

func (v *NullableStreamBidirectionalTargetLegs) Set(val *StreamBidirectionalTargetLegs) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamBidirectionalTargetLegs) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamBidirectionalTargetLegs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamBidirectionalTargetLegs(val *StreamBidirectionalTargetLegs) *NullableStreamBidirectionalTargetLegs {
	return &NullableStreamBidirectionalTargetLegs{value: val, isSet: true}
}

func (v NullableStreamBidirectionalTargetLegs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamBidirectionalTargetLegs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

