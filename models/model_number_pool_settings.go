/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NumberPoolSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberPoolSettings{}

// NumberPoolSettings Number Pool allows you to send messages from a pool of numbers of different types, assigning weights to each type. The pool consists of all the long code and toll free numbers assigned to the messaging profile.  To disable this feature, set the object field to `null`. 
type NumberPoolSettings struct {
	// Defines the probability weight for a Toll Free number to be selected when sending a message. The higher the weight the higher the probability. The sum of the weights for all number types does not necessarily need to add to 100. Weight must be a non-negative number, and when equal to zero it will remove the number type from the pool. 
	TollFreeWeight float32 `json:"toll_free_weight"`
	// Defines the probability weight for a Long Code number to be selected when sending a message. The higher the weight the higher the probability. The sum of the weights for all number types does not necessarily need to add to 100.  Weight must be a non-negative number, and when equal to zero it will remove the number type from the pool. 
	LongCodeWeight float32 `json:"long_code_weight"`
	// If set to true all unhealthy numbers will be automatically excluded from the pool. Health metrics per number are calculated on a regular basis, taking into account the deliverability rate and the amount of messages marked as spam by upstream carriers. Numbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy. 
	SkipUnhealthy bool `json:"skip_unhealthy"`
	// If set to true, Number Pool will try to choose the same sending number for all messages to a particular recipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a new number will be chosen. 
	StickySender *bool `json:"sticky_sender,omitempty"`
	// If set to true, Number Pool will try to choose a sending number with the same area code as the destination number. If there are no such numbers available, a nunber with a different area code will be chosen. Currently only NANP numbers are supported. 
	Geomatch *bool `json:"geomatch,omitempty"`
}

type _NumberPoolSettings NumberPoolSettings

// NewNumberPoolSettings instantiates a new NumberPoolSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberPoolSettings(tollFreeWeight float32, longCodeWeight float32, skipUnhealthy bool) *NumberPoolSettings {
	this := NumberPoolSettings{}
	this.TollFreeWeight = tollFreeWeight
	this.LongCodeWeight = longCodeWeight
	this.SkipUnhealthy = skipUnhealthy
	var stickySender bool = false
	this.StickySender = &stickySender
	var geomatch bool = false
	this.Geomatch = &geomatch
	return &this
}

// NewNumberPoolSettingsWithDefaults instantiates a new NumberPoolSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberPoolSettingsWithDefaults() *NumberPoolSettings {
	this := NumberPoolSettings{}
	var stickySender bool = false
	this.StickySender = &stickySender
	var geomatch bool = false
	this.Geomatch = &geomatch
	return &this
}

// GetTollFreeWeight returns the TollFreeWeight field value
func (o *NumberPoolSettings) GetTollFreeWeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TollFreeWeight
}

// GetTollFreeWeightOk returns a tuple with the TollFreeWeight field value
// and a boolean to check if the value has been set.
func (o *NumberPoolSettings) GetTollFreeWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TollFreeWeight, true
}

// SetTollFreeWeight sets field value
func (o *NumberPoolSettings) SetTollFreeWeight(v float32) {
	o.TollFreeWeight = v
}

// GetLongCodeWeight returns the LongCodeWeight field value
func (o *NumberPoolSettings) GetLongCodeWeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LongCodeWeight
}

// GetLongCodeWeightOk returns a tuple with the LongCodeWeight field value
// and a boolean to check if the value has been set.
func (o *NumberPoolSettings) GetLongCodeWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LongCodeWeight, true
}

// SetLongCodeWeight sets field value
func (o *NumberPoolSettings) SetLongCodeWeight(v float32) {
	o.LongCodeWeight = v
}

// GetSkipUnhealthy returns the SkipUnhealthy field value
func (o *NumberPoolSettings) GetSkipUnhealthy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipUnhealthy
}

// GetSkipUnhealthyOk returns a tuple with the SkipUnhealthy field value
// and a boolean to check if the value has been set.
func (o *NumberPoolSettings) GetSkipUnhealthyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipUnhealthy, true
}

// SetSkipUnhealthy sets field value
func (o *NumberPoolSettings) SetSkipUnhealthy(v bool) {
	o.SkipUnhealthy = v
}

// GetStickySender returns the StickySender field value if set, zero value otherwise.
func (o *NumberPoolSettings) GetStickySender() bool {
	if o == nil || IsNil(o.StickySender) {
		var ret bool
		return ret
	}
	return *o.StickySender
}

// GetStickySenderOk returns a tuple with the StickySender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberPoolSettings) GetStickySenderOk() (*bool, bool) {
	if o == nil || IsNil(o.StickySender) {
		return nil, false
	}
	return o.StickySender, true
}

// HasStickySender returns a boolean if a field has been set.
func (o *NumberPoolSettings) HasStickySender() bool {
	if o != nil && !IsNil(o.StickySender) {
		return true
	}

	return false
}

// SetStickySender gets a reference to the given bool and assigns it to the StickySender field.
func (o *NumberPoolSettings) SetStickySender(v bool) {
	o.StickySender = &v
}

// GetGeomatch returns the Geomatch field value if set, zero value otherwise.
func (o *NumberPoolSettings) GetGeomatch() bool {
	if o == nil || IsNil(o.Geomatch) {
		var ret bool
		return ret
	}
	return *o.Geomatch
}

// GetGeomatchOk returns a tuple with the Geomatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberPoolSettings) GetGeomatchOk() (*bool, bool) {
	if o == nil || IsNil(o.Geomatch) {
		return nil, false
	}
	return o.Geomatch, true
}

// HasGeomatch returns a boolean if a field has been set.
func (o *NumberPoolSettings) HasGeomatch() bool {
	if o != nil && !IsNil(o.Geomatch) {
		return true
	}

	return false
}

// SetGeomatch gets a reference to the given bool and assigns it to the Geomatch field.
func (o *NumberPoolSettings) SetGeomatch(v bool) {
	o.Geomatch = &v
}

func (o NumberPoolSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberPoolSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["toll_free_weight"] = o.TollFreeWeight
	toSerialize["long_code_weight"] = o.LongCodeWeight
	toSerialize["skip_unhealthy"] = o.SkipUnhealthy
	if !IsNil(o.StickySender) {
		toSerialize["sticky_sender"] = o.StickySender
	}
	if !IsNil(o.Geomatch) {
		toSerialize["geomatch"] = o.Geomatch
	}
	return toSerialize, nil
}

func (o *NumberPoolSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"toll_free_weight",
		"long_code_weight",
		"skip_unhealthy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNumberPoolSettings := _NumberPoolSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNumberPoolSettings)

	if err != nil {
		return err
	}

	*o = NumberPoolSettings(varNumberPoolSettings)

	return err
}

type NullableNumberPoolSettings struct {
	value *NumberPoolSettings
	isSet bool
}

func (v NullableNumberPoolSettings) Get() *NumberPoolSettings {
	return v.value
}

func (v *NullableNumberPoolSettings) Set(val *NumberPoolSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberPoolSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberPoolSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberPoolSettings(val *NumberPoolSettings) *NullableNumberPoolSettings {
	return &NullableNumberPoolSettings{value: val, isSet: true}
}

func (v NullableNumberPoolSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberPoolSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


