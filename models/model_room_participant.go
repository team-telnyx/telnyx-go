/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RoomParticipant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomParticipant{}

// RoomParticipant struct for RoomParticipant
type RoomParticipant struct {
	// A unique identifier for the room participant.
	Id *string `json:"id,omitempty"`
	// Identify the room session that participant is part of.
	SessionId *string `json:"session_id,omitempty"`
	// Context provided to the given participant through the client SDK
	Context *string `json:"context,omitempty"`
	// ISO 8601 timestamp when the participant joined the session.
	JoinedAt *string `json:"joined_at,omitempty"`
	// ISO 8601 timestamp when the participant was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// ISO 8601 timestamp when the participant left the session.
	LeftAt *string `json:"left_at,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
}

// NewRoomParticipant instantiates a new RoomParticipant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomParticipant() *RoomParticipant {
	this := RoomParticipant{}
	return &this
}

// NewRoomParticipantWithDefaults instantiates a new RoomParticipant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomParticipantWithDefaults() *RoomParticipant {
	this := RoomParticipant{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoomParticipant) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoomParticipant) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoomParticipant) SetId(v string) {
	o.Id = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *RoomParticipant) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *RoomParticipant) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *RoomParticipant) SetSessionId(v string) {
	o.SessionId = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *RoomParticipant) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *RoomParticipant) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *RoomParticipant) SetContext(v string) {
	o.Context = &v
}

// GetJoinedAt returns the JoinedAt field value if set, zero value otherwise.
func (o *RoomParticipant) GetJoinedAt() string {
	if o == nil || IsNil(o.JoinedAt) {
		var ret string
		return ret
	}
	return *o.JoinedAt
}

// GetJoinedAtOk returns a tuple with the JoinedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetJoinedAtOk() (*string, bool) {
	if o == nil || IsNil(o.JoinedAt) {
		return nil, false
	}
	return o.JoinedAt, true
}

// HasJoinedAt returns a boolean if a field has been set.
func (o *RoomParticipant) HasJoinedAt() bool {
	if o != nil && !IsNil(o.JoinedAt) {
		return true
	}

	return false
}

// SetJoinedAt gets a reference to the given string and assigns it to the JoinedAt field.
func (o *RoomParticipant) SetJoinedAt(v string) {
	o.JoinedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RoomParticipant) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RoomParticipant) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RoomParticipant) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetLeftAt returns the LeftAt field value if set, zero value otherwise.
func (o *RoomParticipant) GetLeftAt() string {
	if o == nil || IsNil(o.LeftAt) {
		var ret string
		return ret
	}
	return *o.LeftAt
}

// GetLeftAtOk returns a tuple with the LeftAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetLeftAtOk() (*string, bool) {
	if o == nil || IsNil(o.LeftAt) {
		return nil, false
	}
	return o.LeftAt, true
}

// HasLeftAt returns a boolean if a field has been set.
func (o *RoomParticipant) HasLeftAt() bool {
	if o != nil && !IsNil(o.LeftAt) {
		return true
	}

	return false
}

// SetLeftAt gets a reference to the given string and assigns it to the LeftAt field.
func (o *RoomParticipant) SetLeftAt(v string) {
	o.LeftAt = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RoomParticipant) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomParticipant) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RoomParticipant) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RoomParticipant) SetRecordType(v string) {
	o.RecordType = &v
}

func (o RoomParticipant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomParticipant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.JoinedAt) {
		toSerialize["joined_at"] = o.JoinedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.LeftAt) {
		toSerialize["left_at"] = o.LeftAt
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullableRoomParticipant struct {
	value *RoomParticipant
	isSet bool
}

func (v NullableRoomParticipant) Get() *RoomParticipant {
	return v.value
}

func (v *NullableRoomParticipant) Set(val *RoomParticipant) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomParticipant(val *RoomParticipant) *NullableRoomParticipant {
	return &NullableRoomParticipant{value: val, isSet: true}
}

func (v NullableRoomParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


