/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the InitiateCallResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitiateCallResult{}

// InitiateCallResult struct for InitiateCallResult
type InitiateCallResult struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewInitiateCallResult instantiates a new InitiateCallResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiateCallResult() *InitiateCallResult {
	this := InitiateCallResult{}
	return &this
}

// NewInitiateCallResultWithDefaults instantiates a new InitiateCallResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiateCallResultWithDefaults() *InitiateCallResult {
	this := InitiateCallResult{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *InitiateCallResult) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallResult) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *InitiateCallResult) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *InitiateCallResult) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *InitiateCallResult) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallResult) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *InitiateCallResult) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *InitiateCallResult) SetTo(v string) {
	o.To = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InitiateCallResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateCallResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InitiateCallResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InitiateCallResult) SetStatus(v string) {
	o.Status = &v
}

func (o InitiateCallResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitiateCallResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableInitiateCallResult struct {
	value *InitiateCallResult
	isSet bool
}

func (v NullableInitiateCallResult) Get() *InitiateCallResult {
	return v.value
}

func (v *NullableInitiateCallResult) Set(val *InitiateCallResult) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiateCallResult) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiateCallResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiateCallResult(val *InitiateCallResult) *NullableInitiateCallResult {
	return &NullableInitiateCallResult{value: val, isSet: true}
}

func (v NullableInitiateCallResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiateCallResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


