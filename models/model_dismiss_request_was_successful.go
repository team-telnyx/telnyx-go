/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the DismissRequestWasSuccessful type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DismissRequestWasSuccessful{}

// DismissRequestWasSuccessful struct for DismissRequestWasSuccessful
type DismissRequestWasSuccessful struct {
	// Describes wether or not the operation was successful
	Success *bool `json:"success,omitempty"`
}

// NewDismissRequestWasSuccessful instantiates a new DismissRequestWasSuccessful object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDismissRequestWasSuccessful() *DismissRequestWasSuccessful {
	this := DismissRequestWasSuccessful{}
	return &this
}

// NewDismissRequestWasSuccessfulWithDefaults instantiates a new DismissRequestWasSuccessful object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDismissRequestWasSuccessfulWithDefaults() *DismissRequestWasSuccessful {
	this := DismissRequestWasSuccessful{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *DismissRequestWasSuccessful) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DismissRequestWasSuccessful) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *DismissRequestWasSuccessful) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *DismissRequestWasSuccessful) SetSuccess(v bool) {
	o.Success = &v
}

func (o DismissRequestWasSuccessful) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DismissRequestWasSuccessful) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableDismissRequestWasSuccessful struct {
	value *DismissRequestWasSuccessful
	isSet bool
}

func (v NullableDismissRequestWasSuccessful) Get() *DismissRequestWasSuccessful {
	return v.value
}

func (v *NullableDismissRequestWasSuccessful) Set(val *DismissRequestWasSuccessful) {
	v.value = val
	v.isSet = true
}

func (v NullableDismissRequestWasSuccessful) IsSet() bool {
	return v.isSet
}

func (v *NullableDismissRequestWasSuccessful) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDismissRequestWasSuccessful(val *DismissRequestWasSuccessful) *NullableDismissRequestWasSuccessful {
	return &NullableDismissRequestWasSuccessful{value: val, isSet: true}
}

func (v NullableDismissRequestWasSuccessful) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDismissRequestWasSuccessful) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


