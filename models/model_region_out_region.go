/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RegionOutRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionOutRegion{}

// RegionOutRegion struct for RegionOutRegion
type RegionOutRegion struct {
	// Region code of the interface.
	Code *string `json:"code,omitempty"`
	// Region name of the interface.
	Name *string `json:"name,omitempty"`
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
}

// NewRegionOutRegion instantiates a new RegionOutRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionOutRegion() *RegionOutRegion {
	this := RegionOutRegion{}
	return &this
}

// NewRegionOutRegionWithDefaults instantiates a new RegionOutRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionOutRegionWithDefaults() *RegionOutRegion {
	this := RegionOutRegion{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RegionOutRegion) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionOutRegion) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RegionOutRegion) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RegionOutRegion) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegionOutRegion) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionOutRegion) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegionOutRegion) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegionOutRegion) SetName(v string) {
	o.Name = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RegionOutRegion) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionOutRegion) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RegionOutRegion) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RegionOutRegion) SetRecordType(v string) {
	o.RecordType = &v
}

func (o RegionOutRegion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionOutRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullableRegionOutRegion struct {
	value *RegionOutRegion
	isSet bool
}

func (v NullableRegionOutRegion) Get() *RegionOutRegion {
	return v.value
}

func (v *NullableRegionOutRegion) Set(val *RegionOutRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionOutRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionOutRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionOutRegion(val *RegionOutRegion) *NullableRegionOutRegion {
	return &NullableRegionOutRegion{value: val, isSet: true}
}

func (v NullableRegionOutRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionOutRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


