/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferencePlayRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferencePlayRequest{}

// ConferencePlayRequest struct for ConferencePlayRequest
type ConferencePlayRequest struct {
	// The URL of a file to be played back in the conference. media_name and audio_url cannot be used together in one request.
	AudioUrl *string `json:"audio_url,omitempty"`
	// The media_name of a file to be played back in the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
	MediaName *string `json:"media_name,omitempty"`
	Loop *Loopcount `json:"loop,omitempty"`
	// List of call control ids identifying participants the audio file should be played to. If not given, the audio file will be played to the entire conference.
	CallControlIds []string `json:"call_control_ids,omitempty"`
}

// NewConferencePlayRequest instantiates a new ConferencePlayRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferencePlayRequest() *ConferencePlayRequest {
	this := ConferencePlayRequest{}
	return &this
}

// NewConferencePlayRequestWithDefaults instantiates a new ConferencePlayRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferencePlayRequestWithDefaults() *ConferencePlayRequest {
	this := ConferencePlayRequest{}
	return &this
}

// GetAudioUrl returns the AudioUrl field value if set, zero value otherwise.
func (o *ConferencePlayRequest) GetAudioUrl() string {
	if o == nil || IsNil(o.AudioUrl) {
		var ret string
		return ret
	}
	return *o.AudioUrl
}

// GetAudioUrlOk returns a tuple with the AudioUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferencePlayRequest) GetAudioUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AudioUrl) {
		return nil, false
	}
	return o.AudioUrl, true
}

// HasAudioUrl returns a boolean if a field has been set.
func (o *ConferencePlayRequest) HasAudioUrl() bool {
	if o != nil && !IsNil(o.AudioUrl) {
		return true
	}

	return false
}

// SetAudioUrl gets a reference to the given string and assigns it to the AudioUrl field.
func (o *ConferencePlayRequest) SetAudioUrl(v string) {
	o.AudioUrl = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *ConferencePlayRequest) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferencePlayRequest) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *ConferencePlayRequest) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *ConferencePlayRequest) SetMediaName(v string) {
	o.MediaName = &v
}

// GetLoop returns the Loop field value if set, zero value otherwise.
func (o *ConferencePlayRequest) GetLoop() Loopcount {
	if o == nil || IsNil(o.Loop) {
		var ret Loopcount
		return ret
	}
	return *o.Loop
}

// GetLoopOk returns a tuple with the Loop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferencePlayRequest) GetLoopOk() (*Loopcount, bool) {
	if o == nil || IsNil(o.Loop) {
		return nil, false
	}
	return o.Loop, true
}

// HasLoop returns a boolean if a field has been set.
func (o *ConferencePlayRequest) HasLoop() bool {
	if o != nil && !IsNil(o.Loop) {
		return true
	}

	return false
}

// SetLoop gets a reference to the given Loopcount and assigns it to the Loop field.
func (o *ConferencePlayRequest) SetLoop(v Loopcount) {
	o.Loop = &v
}

// GetCallControlIds returns the CallControlIds field value if set, zero value otherwise.
func (o *ConferencePlayRequest) GetCallControlIds() []string {
	if o == nil || IsNil(o.CallControlIds) {
		var ret []string
		return ret
	}
	return o.CallControlIds
}

// GetCallControlIdsOk returns a tuple with the CallControlIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferencePlayRequest) GetCallControlIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CallControlIds) {
		return nil, false
	}
	return o.CallControlIds, true
}

// HasCallControlIds returns a boolean if a field has been set.
func (o *ConferencePlayRequest) HasCallControlIds() bool {
	if o != nil && !IsNil(o.CallControlIds) {
		return true
	}

	return false
}

// SetCallControlIds gets a reference to the given []string and assigns it to the CallControlIds field.
func (o *ConferencePlayRequest) SetCallControlIds(v []string) {
	o.CallControlIds = v
}

func (o ConferencePlayRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferencePlayRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioUrl) {
		toSerialize["audio_url"] = o.AudioUrl
	}
	if !IsNil(o.MediaName) {
		toSerialize["media_name"] = o.MediaName
	}
	if !IsNil(o.Loop) {
		toSerialize["loop"] = o.Loop
	}
	if !IsNil(o.CallControlIds) {
		toSerialize["call_control_ids"] = o.CallControlIds
	}
	return toSerialize, nil
}

type NullableConferencePlayRequest struct {
	value *ConferencePlayRequest
	isSet bool
}

func (v NullableConferencePlayRequest) Get() *ConferencePlayRequest {
	return v.value
}

func (v *NullableConferencePlayRequest) Set(val *ConferencePlayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConferencePlayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConferencePlayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferencePlayRequest(val *ConferencePlayRequest) *NullableConferencePlayRequest {
	return &NullableConferencePlayRequest{value: val, isSet: true}
}

func (v NullableConferencePlayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferencePlayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


