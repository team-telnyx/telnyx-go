/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// FqdnConnectionTransportProtocol One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.
type FqdnConnectionTransportProtocol string

// List of FqdnConnectionTransportProtocol
const (
	UDP FqdnConnectionTransportProtocol = "UDP"
	TCP FqdnConnectionTransportProtocol = "TCP"
	TLS FqdnConnectionTransportProtocol = "TLS"
)

// All allowed values of FqdnConnectionTransportProtocol enum
var AllowedFqdnConnectionTransportProtocolEnumValues = []FqdnConnectionTransportProtocol{
	"UDP",
	"TCP",
	"TLS",
}

func (v *FqdnConnectionTransportProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FqdnConnectionTransportProtocol(value)
	for _, existing := range AllowedFqdnConnectionTransportProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FqdnConnectionTransportProtocol", value)
}

// NewFqdnConnectionTransportProtocolFromValue returns a pointer to a valid FqdnConnectionTransportProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFqdnConnectionTransportProtocolFromValue(v string) (*FqdnConnectionTransportProtocol, error) {
	ev := FqdnConnectionTransportProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FqdnConnectionTransportProtocol: valid values are %v", v, AllowedFqdnConnectionTransportProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FqdnConnectionTransportProtocol) IsValid() bool {
	for _, existing := range AllowedFqdnConnectionTransportProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FqdnConnectionTransportProtocol value
func (v FqdnConnectionTransportProtocol) Ptr() *FqdnConnectionTransportProtocol {
	return &v
}

type NullableFqdnConnectionTransportProtocol struct {
	value *FqdnConnectionTransportProtocol
	isSet bool
}

func (v NullableFqdnConnectionTransportProtocol) Get() *FqdnConnectionTransportProtocol {
	return v.value
}

func (v *NullableFqdnConnectionTransportProtocol) Set(val *FqdnConnectionTransportProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableFqdnConnectionTransportProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableFqdnConnectionTransportProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFqdnConnectionTransportProtocol(val *FqdnConnectionTransportProtocol) *NullableFqdnConnectionTransportProtocol {
	return &NullableFqdnConnectionTransportProtocol{value: val, isSet: true}
}

func (v NullableFqdnConnectionTransportProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFqdnConnectionTransportProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

