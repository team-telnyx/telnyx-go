/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ErrorRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorRecord{}

// ErrorRecord struct for ErrorRecord
type ErrorRecord struct {
	// an application-specific error code, expressed as a stringified 5-digit integer
	Code *string `json:"code,omitempty"`
	// a short, human-readable summary of the problem, with NO punctuation, that SHOULD NOT CHANGE from occurrence to occurrence of the problem, except for purposes of localization
	Title *string `json:"title,omitempty"`
	// a human-readable explanation specific to this occurrence of the problem. Like title, this fieldâ€™s value can be localized
	Detail *string `json:"detail,omitempty"`
	Source *SourceResponse `json:"source,omitempty"`
	Meta *MetaResponse `json:"meta,omitempty"`
}

// NewErrorRecord instantiates a new ErrorRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorRecord() *ErrorRecord {
	this := ErrorRecord{}
	return &this
}

// NewErrorRecordWithDefaults instantiates a new ErrorRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorRecordWithDefaults() *ErrorRecord {
	this := ErrorRecord{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorRecord) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorRecord) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorRecord) SetCode(v string) {
	o.Code = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ErrorRecord) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ErrorRecord) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ErrorRecord) SetTitle(v string) {
	o.Title = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ErrorRecord) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ErrorRecord) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ErrorRecord) SetDetail(v string) {
	o.Detail = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ErrorRecord) GetSource() SourceResponse {
	if o == nil || IsNil(o.Source) {
		var ret SourceResponse
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetSourceOk() (*SourceResponse, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ErrorRecord) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given SourceResponse and assigns it to the Source field.
func (o *ErrorRecord) SetSource(v SourceResponse) {
	o.Source = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ErrorRecord) GetMeta() MetaResponse {
	if o == nil || IsNil(o.Meta) {
		var ret MetaResponse
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetMetaOk() (*MetaResponse, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ErrorRecord) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaResponse and assigns it to the Meta field.
func (o *ErrorRecord) SetMeta(v MetaResponse) {
	o.Meta = &v
}

func (o ErrorRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableErrorRecord struct {
	value *ErrorRecord
	isSet bool
}

func (v NullableErrorRecord) Get() *ErrorRecord {
	return v.value
}

func (v *NullableErrorRecord) Set(val *ErrorRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorRecord(val *ErrorRecord) *NullableErrorRecord {
	return &NullableErrorRecord{value: val, isSet: true}
}

func (v NullableErrorRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


