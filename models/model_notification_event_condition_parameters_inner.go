/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the NotificationEventConditionParametersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationEventConditionParametersInner{}

// NotificationEventConditionParametersInner struct for NotificationEventConditionParametersInner
type NotificationEventConditionParametersInner struct {
	Name *string `json:"name,omitempty"`
	Optional *bool `json:"optional,omitempty"`
	DataType *string `json:"data_type,omitempty"`
}

// NewNotificationEventConditionParametersInner instantiates a new NotificationEventConditionParametersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationEventConditionParametersInner() *NotificationEventConditionParametersInner {
	this := NotificationEventConditionParametersInner{}
	return &this
}

// NewNotificationEventConditionParametersInnerWithDefaults instantiates a new NotificationEventConditionParametersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationEventConditionParametersInnerWithDefaults() *NotificationEventConditionParametersInner {
	this := NotificationEventConditionParametersInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationEventConditionParametersInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventConditionParametersInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationEventConditionParametersInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationEventConditionParametersInner) SetName(v string) {
	o.Name = &v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *NotificationEventConditionParametersInner) GetOptional() bool {
	if o == nil || IsNil(o.Optional) {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventConditionParametersInner) GetOptionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Optional) {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *NotificationEventConditionParametersInner) HasOptional() bool {
	if o != nil && !IsNil(o.Optional) {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *NotificationEventConditionParametersInner) SetOptional(v bool) {
	o.Optional = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *NotificationEventConditionParametersInner) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationEventConditionParametersInner) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *NotificationEventConditionParametersInner) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *NotificationEventConditionParametersInner) SetDataType(v string) {
	o.DataType = &v
}

func (o NotificationEventConditionParametersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationEventConditionParametersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Optional) {
		toSerialize["optional"] = o.Optional
	}
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	return toSerialize, nil
}

type NullableNotificationEventConditionParametersInner struct {
	value *NotificationEventConditionParametersInner
	isSet bool
}

func (v NullableNotificationEventConditionParametersInner) Get() *NotificationEventConditionParametersInner {
	return v.value
}

func (v *NullableNotificationEventConditionParametersInner) Set(val *NotificationEventConditionParametersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationEventConditionParametersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationEventConditionParametersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationEventConditionParametersInner(val *NotificationEventConditionParametersInner) *NullableNotificationEventConditionParametersInner {
	return &NullableNotificationEventConditionParametersInner{value: val, isSet: true}
}

func (v NullableNotificationEventConditionParametersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationEventConditionParametersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


