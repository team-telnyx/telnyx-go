/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCSComposeTextMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSComposeTextMessage{}

// RCSComposeTextMessage Compose and send a text message.
type RCSComposeTextMessage struct {
	// phone number in +E.164 format
	PhoneNumber string `json:"phone_number"`
	// Draft to go into the send message text field.
	Text *string `json:"text,omitempty"`
}

type _RCSComposeTextMessage RCSComposeTextMessage

// NewRCSComposeTextMessage instantiates a new RCSComposeTextMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSComposeTextMessage(phoneNumber string) *RCSComposeTextMessage {
	this := RCSComposeTextMessage{}
	this.PhoneNumber = phoneNumber
	return &this
}

// NewRCSComposeTextMessageWithDefaults instantiates a new RCSComposeTextMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSComposeTextMessageWithDefaults() *RCSComposeTextMessage {
	this := RCSComposeTextMessage{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *RCSComposeTextMessage) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *RCSComposeTextMessage) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *RCSComposeTextMessage) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RCSComposeTextMessage) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSComposeTextMessage) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RCSComposeTextMessage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RCSComposeTextMessage) SetText(v string) {
	o.Text = &v
}

func (o RCSComposeTextMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSComposeTextMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["phone_number"] = o.PhoneNumber
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

func (o *RCSComposeTextMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"phone_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCSComposeTextMessage := _RCSComposeTextMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCSComposeTextMessage)

	if err != nil {
		return err
	}

	*o = RCSComposeTextMessage(varRCSComposeTextMessage)

	return err
}

type NullableRCSComposeTextMessage struct {
	value *RCSComposeTextMessage
	isSet bool
}

func (v NullableRCSComposeTextMessage) Get() *RCSComposeTextMessage {
	return v.value
}

func (v *NullableRCSComposeTextMessage) Set(val *RCSComposeTextMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSComposeTextMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSComposeTextMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSComposeTextMessage(val *RCSComposeTextMessage) *NullableRCSComposeTextMessage {
	return &NullableRCSComposeTextMessage{value: val, isSet: true}
}

func (v NullableRCSComposeTextMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSComposeTextMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


