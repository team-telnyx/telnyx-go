/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Conference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conference{}

// Conference struct for Conference
type Conference struct {
	RecordType string `json:"record_type"`
	// Uniquely identifies the conference
	Id string `json:"id"`
	// Name of the conference
	Name string `json:"name"`
	// ISO 8601 formatted date of when the conference was created
	CreatedAt string `json:"created_at"`
	// ISO 8601 formatted date of when the conference will expire
	ExpiresAt string `json:"expires_at"`
	// ISO 8601 formatted date of when the conference was last updated
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Region where the conference is hosted
	Region *string `json:"region,omitempty"`
	// Status of the conference
	Status *string `json:"status,omitempty"`
	// Reason why the conference ended
	EndReason *string `json:"end_reason,omitempty"`
	EndedBy *ConferenceEndedBy `json:"ended_by,omitempty"`
	// Identifies the connection associated with the conference
	ConnectionId *string `json:"connection_id,omitempty"`
}

type _Conference Conference

// NewConference instantiates a new Conference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConference(recordType string, id string, name string, createdAt string, expiresAt string) *Conference {
	this := Conference{}
	this.RecordType = recordType
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	this.ExpiresAt = expiresAt
	return &this
}

// NewConferenceWithDefaults instantiates a new Conference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceWithDefaults() *Conference {
	this := Conference{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *Conference) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *Conference) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *Conference) SetRecordType(v string) {
	o.RecordType = v
}

// GetId returns the Id field value
func (o *Conference) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Conference) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Conference) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Conference) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Conference) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Conference) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Conference) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Conference) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Conference) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *Conference) GetExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Conference) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *Conference) SetExpiresAt(v string) {
	o.ExpiresAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Conference) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Conference) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Conference) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Conference) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Conference) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Conference) SetRegion(v string) {
	o.Region = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Conference) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Conference) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Conference) SetStatus(v string) {
	o.Status = &v
}

// GetEndReason returns the EndReason field value if set, zero value otherwise.
func (o *Conference) GetEndReason() string {
	if o == nil || IsNil(o.EndReason) {
		var ret string
		return ret
	}
	return *o.EndReason
}

// GetEndReasonOk returns a tuple with the EndReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetEndReasonOk() (*string, bool) {
	if o == nil || IsNil(o.EndReason) {
		return nil, false
	}
	return o.EndReason, true
}

// HasEndReason returns a boolean if a field has been set.
func (o *Conference) HasEndReason() bool {
	if o != nil && !IsNil(o.EndReason) {
		return true
	}

	return false
}

// SetEndReason gets a reference to the given string and assigns it to the EndReason field.
func (o *Conference) SetEndReason(v string) {
	o.EndReason = &v
}

// GetEndedBy returns the EndedBy field value if set, zero value otherwise.
func (o *Conference) GetEndedBy() ConferenceEndedBy {
	if o == nil || IsNil(o.EndedBy) {
		var ret ConferenceEndedBy
		return ret
	}
	return *o.EndedBy
}

// GetEndedByOk returns a tuple with the EndedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetEndedByOk() (*ConferenceEndedBy, bool) {
	if o == nil || IsNil(o.EndedBy) {
		return nil, false
	}
	return o.EndedBy, true
}

// HasEndedBy returns a boolean if a field has been set.
func (o *Conference) HasEndedBy() bool {
	if o != nil && !IsNil(o.EndedBy) {
		return true
	}

	return false
}

// SetEndedBy gets a reference to the given ConferenceEndedBy and assigns it to the EndedBy field.
func (o *Conference) SetEndedBy(v ConferenceEndedBy) {
	o.EndedBy = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *Conference) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *Conference) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *Conference) SetConnectionId(v string) {
	o.ConnectionId = &v
}

func (o Conference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_type"] = o.RecordType
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["expires_at"] = o.ExpiresAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.EndReason) {
		toSerialize["end_reason"] = o.EndReason
	}
	if !IsNil(o.EndedBy) {
		toSerialize["ended_by"] = o.EndedBy
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	return toSerialize, nil
}

func (o *Conference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
		"id",
		"name",
		"created_at",
		"expires_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConference := _Conference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConference)

	if err != nil {
		return err
	}

	*o = Conference(varConference)

	return err
}

type NullableConference struct {
	value *Conference
	isSet bool
}

func (v NullableConference) Get() *Conference {
	return v.value
}

func (v *NullableConference) Set(val *Conference) {
	v.value = val
	v.isSet = true
}

func (v NullableConference) IsSet() bool {
	return v.isSet
}

func (v *NullableConference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConference(val *Conference) *NullableConference {
	return &NullableConference{value: val, isSet: true}
}

func (v NullableConference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


