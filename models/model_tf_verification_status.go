/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// TFVerificationStatus Tollfree verification status
type TFVerificationStatus string

// List of TFVerificationStatus
const (
	VERIFIED TFVerificationStatus = "Verified"
	REJECTED TFVerificationStatus = "Rejected"
	WAITING_FOR_VENDOR TFVerificationStatus = "Waiting For Vendor"
	WAITING_FOR_CUSTOMER TFVerificationStatus = "Waiting For Customer"
	WAITING_FOR_TELNYX TFVerificationStatus = "Waiting For Telnyx"
	IN_PROGRESS TFVerificationStatus = "In Progress"
)

// All allowed values of TFVerificationStatus enum
var AllowedTFVerificationStatusEnumValues = []TFVerificationStatus{
	"Verified",
	"Rejected",
	"Waiting For Vendor",
	"Waiting For Customer",
	"Waiting For Telnyx",
	"In Progress",
}

func (v *TFVerificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TFVerificationStatus(value)
	for _, existing := range AllowedTFVerificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TFVerificationStatus", value)
}

// NewTFVerificationStatusFromValue returns a pointer to a valid TFVerificationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTFVerificationStatusFromValue(v string) (*TFVerificationStatus, error) {
	ev := TFVerificationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TFVerificationStatus: valid values are %v", v, AllowedTFVerificationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TFVerificationStatus) IsValid() bool {
	for _, existing := range AllowedTFVerificationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TFVerificationStatus value
func (v TFVerificationStatus) Ptr() *TFVerificationStatus {
	return &v
}

type NullableTFVerificationStatus struct {
	value *TFVerificationStatus
	isSet bool
}

func (v NullableTFVerificationStatus) Get() *TFVerificationStatus {
	return v.value
}

func (v *NullableTFVerificationStatus) Set(val *TFVerificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTFVerificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTFVerificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTFVerificationStatus(val *TFVerificationStatus) *NullableTFVerificationStatus {
	return &NullableTFVerificationStatus{value: val, isSet: true}
}

func (v NullableTFVerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTFVerificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

