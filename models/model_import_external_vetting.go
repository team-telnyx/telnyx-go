/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportExternalVetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportExternalVetting{}

// ImportExternalVetting struct for ImportExternalVetting
type ImportExternalVetting struct {
	// External vetting provider ID for the brand.
	EvpId string `json:"evpId"`
	// Unique ID that identifies a vetting transaction performed by a vetting provider. This ID is provided by the vetting provider at time of vetting.
	VettingId string `json:"vettingId"`
	// Required by some providers for vetting record confirmation.
	VettingToken *string `json:"vettingToken,omitempty"`
}

type _ImportExternalVetting ImportExternalVetting

// NewImportExternalVetting instantiates a new ImportExternalVetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportExternalVetting(evpId string, vettingId string) *ImportExternalVetting {
	this := ImportExternalVetting{}
	this.EvpId = evpId
	this.VettingId = vettingId
	return &this
}

// NewImportExternalVettingWithDefaults instantiates a new ImportExternalVetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportExternalVettingWithDefaults() *ImportExternalVetting {
	this := ImportExternalVetting{}
	return &this
}

// GetEvpId returns the EvpId field value
func (o *ImportExternalVetting) GetEvpId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EvpId
}

// GetEvpIdOk returns a tuple with the EvpId field value
// and a boolean to check if the value has been set.
func (o *ImportExternalVetting) GetEvpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvpId, true
}

// SetEvpId sets field value
func (o *ImportExternalVetting) SetEvpId(v string) {
	o.EvpId = v
}

// GetVettingId returns the VettingId field value
func (o *ImportExternalVetting) GetVettingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VettingId
}

// GetVettingIdOk returns a tuple with the VettingId field value
// and a boolean to check if the value has been set.
func (o *ImportExternalVetting) GetVettingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VettingId, true
}

// SetVettingId sets field value
func (o *ImportExternalVetting) SetVettingId(v string) {
	o.VettingId = v
}

// GetVettingToken returns the VettingToken field value if set, zero value otherwise.
func (o *ImportExternalVetting) GetVettingToken() string {
	if o == nil || IsNil(o.VettingToken) {
		var ret string
		return ret
	}
	return *o.VettingToken
}

// GetVettingTokenOk returns a tuple with the VettingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportExternalVetting) GetVettingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.VettingToken) {
		return nil, false
	}
	return o.VettingToken, true
}

// HasVettingToken returns a boolean if a field has been set.
func (o *ImportExternalVetting) HasVettingToken() bool {
	if o != nil && !IsNil(o.VettingToken) {
		return true
	}

	return false
}

// SetVettingToken gets a reference to the given string and assigns it to the VettingToken field.
func (o *ImportExternalVetting) SetVettingToken(v string) {
	o.VettingToken = &v
}

func (o ImportExternalVetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportExternalVetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["evpId"] = o.EvpId
	toSerialize["vettingId"] = o.VettingId
	if !IsNil(o.VettingToken) {
		toSerialize["vettingToken"] = o.VettingToken
	}
	return toSerialize, nil
}

func (o *ImportExternalVetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"evpId",
		"vettingId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportExternalVetting := _ImportExternalVetting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportExternalVetting)

	if err != nil {
		return err
	}

	*o = ImportExternalVetting(varImportExternalVetting)

	return err
}

type NullableImportExternalVetting struct {
	value *ImportExternalVetting
	isSet bool
}

func (v NullableImportExternalVetting) Get() *ImportExternalVetting {
	return v.value
}

func (v *NullableImportExternalVetting) Set(val *ImportExternalVetting) {
	v.value = val
	v.isSet = true
}

func (v NullableImportExternalVetting) IsSet() bool {
	return v.isSet
}

func (v *NullableImportExternalVetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportExternalVetting(val *ImportExternalVetting) *NullableImportExternalVetting {
	return &NullableImportExternalVetting{value: val, isSet: true}
}

func (v NullableImportExternalVetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportExternalVetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


