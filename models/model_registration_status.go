/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RegistrationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrationStatus{}

// RegistrationStatus struct for RegistrationStatus
type RegistrationStatus struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	// The current registration status of your SIP connection
	Status *string `json:"status,omitempty"`
	// The user name of the SIP connection
	SipUsername *string `json:"sip_username,omitempty"`
	// The ip used during the SIP connection
	IpAddress *string `json:"ip_address,omitempty"`
	// The protocol of the SIP connection
	Transport *string `json:"transport,omitempty"`
	// The port of the SIP connection
	Port *int32 `json:"port,omitempty"`
	// The user agent of the SIP connection
	UserAgent *string `json:"user_agent,omitempty"`
	// ISO 8601 formatted date indicating when the resource was last updated.
	LastRegistration *string `json:"last_registration,omitempty"`
}

// NewRegistrationStatus instantiates a new RegistrationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrationStatus() *RegistrationStatus {
	this := RegistrationStatus{}
	return &this
}

// NewRegistrationStatusWithDefaults instantiates a new RegistrationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrationStatusWithDefaults() *RegistrationStatus {
	this := RegistrationStatus{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RegistrationStatus) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RegistrationStatus) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RegistrationStatus) SetRecordType(v string) {
	o.RecordType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RegistrationStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RegistrationStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RegistrationStatus) SetStatus(v string) {
	o.Status = &v
}

// GetSipUsername returns the SipUsername field value if set, zero value otherwise.
func (o *RegistrationStatus) GetSipUsername() string {
	if o == nil || IsNil(o.SipUsername) {
		var ret string
		return ret
	}
	return *o.SipUsername
}

// GetSipUsernameOk returns a tuple with the SipUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetSipUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SipUsername) {
		return nil, false
	}
	return o.SipUsername, true
}

// HasSipUsername returns a boolean if a field has been set.
func (o *RegistrationStatus) HasSipUsername() bool {
	if o != nil && !IsNil(o.SipUsername) {
		return true
	}

	return false
}

// SetSipUsername gets a reference to the given string and assigns it to the SipUsername field.
func (o *RegistrationStatus) SetSipUsername(v string) {
	o.SipUsername = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *RegistrationStatus) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *RegistrationStatus) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *RegistrationStatus) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *RegistrationStatus) GetTransport() string {
	if o == nil || IsNil(o.Transport) {
		var ret string
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetTransportOk() (*string, bool) {
	if o == nil || IsNil(o.Transport) {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *RegistrationStatus) HasTransport() bool {
	if o != nil && !IsNil(o.Transport) {
		return true
	}

	return false
}

// SetTransport gets a reference to the given string and assigns it to the Transport field.
func (o *RegistrationStatus) SetTransport(v string) {
	o.Transport = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RegistrationStatus) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RegistrationStatus) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *RegistrationStatus) SetPort(v int32) {
	o.Port = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *RegistrationStatus) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *RegistrationStatus) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *RegistrationStatus) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetLastRegistration returns the LastRegistration field value if set, zero value otherwise.
func (o *RegistrationStatus) GetLastRegistration() string {
	if o == nil || IsNil(o.LastRegistration) {
		var ret string
		return ret
	}
	return *o.LastRegistration
}

// GetLastRegistrationOk returns a tuple with the LastRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationStatus) GetLastRegistrationOk() (*string, bool) {
	if o == nil || IsNil(o.LastRegistration) {
		return nil, false
	}
	return o.LastRegistration, true
}

// HasLastRegistration returns a boolean if a field has been set.
func (o *RegistrationStatus) HasLastRegistration() bool {
	if o != nil && !IsNil(o.LastRegistration) {
		return true
	}

	return false
}

// SetLastRegistration gets a reference to the given string and assigns it to the LastRegistration field.
func (o *RegistrationStatus) SetLastRegistration(v string) {
	o.LastRegistration = &v
}

func (o RegistrationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SipUsername) {
		toSerialize["sip_username"] = o.SipUsername
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.Transport) {
		toSerialize["transport"] = o.Transport
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.LastRegistration) {
		toSerialize["last_registration"] = o.LastRegistration
	}
	return toSerialize, nil
}

type NullableRegistrationStatus struct {
	value *RegistrationStatus
	isSet bool
}

func (v NullableRegistrationStatus) Get() *RegistrationStatus {
	return v.value
}

func (v *NullableRegistrationStatus) Set(val *RegistrationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationStatus(val *RegistrationStatus) *NullableRegistrationStatus {
	return &NullableRegistrationStatus{value: val, isSet: true}
}

func (v NullableRegistrationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


