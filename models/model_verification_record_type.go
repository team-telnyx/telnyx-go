/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// VerificationRecordType The possible verification record types.
type VerificationRecordType string

// List of VerificationRecordType
const (
	VERIFICATION VerificationRecordType = "verification"
)

// All allowed values of VerificationRecordType enum
var AllowedVerificationRecordTypeEnumValues = []VerificationRecordType{
	"verification",
}

func (v *VerificationRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationRecordType(value)
	for _, existing := range AllowedVerificationRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationRecordType", value)
}

// NewVerificationRecordTypeFromValue returns a pointer to a valid VerificationRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationRecordTypeFromValue(v string) (*VerificationRecordType, error) {
	ev := VerificationRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationRecordType: valid values are %v", v, AllowedVerificationRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationRecordType) IsValid() bool {
	for _, existing := range AllowedVerificationRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VerificationRecordType value
func (v VerificationRecordType) Ptr() *VerificationRecordType {
	return &v
}

type NullableVerificationRecordType struct {
	value *VerificationRecordType
	isSet bool
}

func (v NullableVerificationRecordType) Get() *VerificationRecordType {
	return v.value
}

func (v *NullableVerificationRecordType) Set(val *VerificationRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationRecordType(val *VerificationRecordType) *NullableVerificationRecordType {
	return &NullableVerificationRecordType{value: val, isSet: true}
}

func (v NullableVerificationRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

