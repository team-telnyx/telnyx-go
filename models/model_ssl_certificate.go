/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
)

// checks if the SSLCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLCertificate{}

// SSLCertificate struct for SSLCertificate
type SSLCertificate struct {
	// Unique identifier for the SSL certificate
	Id *string `json:"id,omitempty"`
	IssuedTo *SSLCertificateIssuedTo `json:"issued_to,omitempty"`
	IssuedBy *SSLCertificateIssuedBy `json:"issued_by,omitempty"`
	// The time the certificate is valid from
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// The time the certificate is valid to
	ValidTo *time.Time `json:"valid_to,omitempty"`
	// Time when SSL certificate was uploaded
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewSSLCertificate instantiates a new SSLCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCertificate() *SSLCertificate {
	this := SSLCertificate{}
	return &this
}

// NewSSLCertificateWithDefaults instantiates a new SSLCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertificateWithDefaults() *SSLCertificate {
	this := SSLCertificate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SSLCertificate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SSLCertificate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SSLCertificate) SetId(v string) {
	o.Id = &v
}

// GetIssuedTo returns the IssuedTo field value if set, zero value otherwise.
func (o *SSLCertificate) GetIssuedTo() SSLCertificateIssuedTo {
	if o == nil || IsNil(o.IssuedTo) {
		var ret SSLCertificateIssuedTo
		return ret
	}
	return *o.IssuedTo
}

// GetIssuedToOk returns a tuple with the IssuedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetIssuedToOk() (*SSLCertificateIssuedTo, bool) {
	if o == nil || IsNil(o.IssuedTo) {
		return nil, false
	}
	return o.IssuedTo, true
}

// HasIssuedTo returns a boolean if a field has been set.
func (o *SSLCertificate) HasIssuedTo() bool {
	if o != nil && !IsNil(o.IssuedTo) {
		return true
	}

	return false
}

// SetIssuedTo gets a reference to the given SSLCertificateIssuedTo and assigns it to the IssuedTo field.
func (o *SSLCertificate) SetIssuedTo(v SSLCertificateIssuedTo) {
	o.IssuedTo = &v
}

// GetIssuedBy returns the IssuedBy field value if set, zero value otherwise.
func (o *SSLCertificate) GetIssuedBy() SSLCertificateIssuedBy {
	if o == nil || IsNil(o.IssuedBy) {
		var ret SSLCertificateIssuedBy
		return ret
	}
	return *o.IssuedBy
}

// GetIssuedByOk returns a tuple with the IssuedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetIssuedByOk() (*SSLCertificateIssuedBy, bool) {
	if o == nil || IsNil(o.IssuedBy) {
		return nil, false
	}
	return o.IssuedBy, true
}

// HasIssuedBy returns a boolean if a field has been set.
func (o *SSLCertificate) HasIssuedBy() bool {
	if o != nil && !IsNil(o.IssuedBy) {
		return true
	}

	return false
}

// SetIssuedBy gets a reference to the given SSLCertificateIssuedBy and assigns it to the IssuedBy field.
func (o *SSLCertificate) SetIssuedBy(v SSLCertificateIssuedBy) {
	o.IssuedBy = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *SSLCertificate) GetValidFrom() time.Time {
	if o == nil || IsNil(o.ValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *SSLCertificate) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *SSLCertificate) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *SSLCertificate) GetValidTo() time.Time {
	if o == nil || IsNil(o.ValidTo) {
		var ret time.Time
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetValidToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidTo) {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *SSLCertificate) HasValidTo() bool {
	if o != nil && !IsNil(o.ValidTo) {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given time.Time and assigns it to the ValidTo field.
func (o *SSLCertificate) SetValidTo(v time.Time) {
	o.ValidTo = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SSLCertificate) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SSLCertificate) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SSLCertificate) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o SSLCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssuedTo) {
		toSerialize["issued_to"] = o.IssuedTo
	}
	if !IsNil(o.IssuedBy) {
		toSerialize["issued_by"] = o.IssuedBy
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if !IsNil(o.ValidTo) {
		toSerialize["valid_to"] = o.ValidTo
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSSLCertificate struct {
	value *SSLCertificate
	isSet bool
}

func (v NullableSSLCertificate) Get() *SSLCertificate {
	return v.value
}

func (v *NullableSSLCertificate) Set(val *SSLCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCertificate(val *SSLCertificate) *NullableSSLCertificate {
	return &NullableSSLCertificate{value: val, isSet: true}
}

func (v NullableSSLCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


