/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// UseCaseCategories Tollfree usecase categories
type UseCaseCategories string

// List of UseCaseCategories
const (
	_2_FA UseCaseCategories = "2FA"
	APP_NOTIFICATIONS UseCaseCategories = "App Notifications"
	APPOINTMENTS UseCaseCategories = "Appointments"
	AUCTIONS UseCaseCategories = "Auctions"
	AUTO_REPAIR_SERVICES UseCaseCategories = "Auto Repair Services"
	BANK_TRANSFERS UseCaseCategories = "Bank Transfers"
	BILLING UseCaseCategories = "Billing"
	BOOKING_CONFIRMATIONS UseCaseCategories = "Booking Confirmations"
	BUSINESS_UPDATES UseCaseCategories = "Business Updates"
	COVID_19_ALERTS UseCaseCategories = "COVID-19 Alerts"
	CAREER_TRAINING UseCaseCategories = "Career Training"
	CHATBOT UseCaseCategories = "Chatbot"
	CONVERSATIONAL___ALERTS UseCaseCategories = "Conversational / Alerts"
	COURIER_SERVICES__DELIVERIES UseCaseCategories = "Courier Services & Deliveries"
	EMERGENCY_ALERTS UseCaseCategories = "Emergency Alerts"
	EVENTS__PLANNING UseCaseCategories = "Events & Planning"
	FINANCIAL_SERVICES UseCaseCategories = "Financial Services"
	FRAUD_ALERTS UseCaseCategories = "Fraud Alerts"
	FUNDRAISING UseCaseCategories = "Fundraising"
	GENERAL_MARKETING UseCaseCategories = "General Marketing"
	GENERAL_SCHOOL_UPDATES UseCaseCategories = "General School Updates"
	HR___STAFFING UseCaseCategories = "HR / Staffing"
	HEALTHCARE_ALERTS UseCaseCategories = "Healthcare Alerts"
	HOUSING_COMMUNITY_UPDATES UseCaseCategories = "Housing Community Updates"
	INSURANCE_SERVICES UseCaseCategories = "Insurance Services"
	JOB_DISPATCH UseCaseCategories = "Job Dispatch"
	LEGAL_SERVICES UseCaseCategories = "Legal Services"
	MIXED UseCaseCategories = "Mixed"
	MOTIVATIONAL_REMINDERS UseCaseCategories = "Motivational Reminders"
	NOTARY_NOTIFICATIONS UseCaseCategories = "Notary Notifications"
	ORDER_NOTIFICATIONS UseCaseCategories = "Order Notifications"
	POLITICAL UseCaseCategories = "Political"
	PUBLIC_WORKS UseCaseCategories = "Public Works"
	REAL_ESTATE_SERVICES UseCaseCategories = "Real Estate Services"
	RELIGIOUS_SERVICES UseCaseCategories = "Religious Services"
	REPAIR_AND_DIAGNOSTICS_ALERTS UseCaseCategories = "Repair and Diagnostics Alerts"
	REWARDS_PROGRAM UseCaseCategories = "Rewards Program"
	SURVEYS UseCaseCategories = "Surveys"
	SYSTEM_ALERTS UseCaseCategories = "System Alerts"
	VOTING_REMINDERS UseCaseCategories = "Voting Reminders"
	WAITLIST_ALERTS UseCaseCategories = "Waitlist Alerts"
	WEBINAR_REMINDERS UseCaseCategories = "Webinar Reminders"
	WORKSHOP_ALERTS UseCaseCategories = "Workshop Alerts"
)

// All allowed values of UseCaseCategories enum
var AllowedUseCaseCategoriesEnumValues = []UseCaseCategories{
	"2FA",
	"App Notifications",
	"Appointments",
	"Auctions",
	"Auto Repair Services",
	"Bank Transfers",
	"Billing",
	"Booking Confirmations",
	"Business Updates",
	"COVID-19 Alerts",
	"Career Training",
	"Chatbot",
	"Conversational / Alerts",
	"Courier Services & Deliveries",
	"Emergency Alerts",
	"Events & Planning",
	"Financial Services",
	"Fraud Alerts",
	"Fundraising",
	"General Marketing",
	"General School Updates",
	"HR / Staffing",
	"Healthcare Alerts",
	"Housing Community Updates",
	"Insurance Services",
	"Job Dispatch",
	"Legal Services",
	"Mixed",
	"Motivational Reminders",
	"Notary Notifications",
	"Order Notifications",
	"Political",
	"Public Works",
	"Real Estate Services",
	"Religious Services",
	"Repair and Diagnostics Alerts",
	"Rewards Program",
	"Surveys",
	"System Alerts",
	"Voting Reminders",
	"Waitlist Alerts",
	"Webinar Reminders",
	"Workshop Alerts",
}

func (v *UseCaseCategories) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UseCaseCategories(value)
	for _, existing := range AllowedUseCaseCategoriesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UseCaseCategories", value)
}

// NewUseCaseCategoriesFromValue returns a pointer to a valid UseCaseCategories
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUseCaseCategoriesFromValue(v string) (*UseCaseCategories, error) {
	ev := UseCaseCategories(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UseCaseCategories: valid values are %v", v, AllowedUseCaseCategoriesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UseCaseCategories) IsValid() bool {
	for _, existing := range AllowedUseCaseCategoriesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UseCaseCategories value
func (v UseCaseCategories) Ptr() *UseCaseCategories {
	return &v
}

type NullableUseCaseCategories struct {
	value *UseCaseCategories
	isSet bool
}

func (v NullableUseCaseCategories) Get() *UseCaseCategories {
	return v.value
}

func (v *NullableUseCaseCategories) Set(val *UseCaseCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableUseCaseCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableUseCaseCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseCaseCategories(val *UseCaseCategories) *NullableUseCaseCategories {
	return &NullableUseCaseCategories{value: val, isSet: true}
}

func (v NullableUseCaseCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseCaseCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

