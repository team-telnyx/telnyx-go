/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSReply{}

// RCSReply struct for RCSReply
type RCSReply struct {
	// Text that is shown in the suggested reply (maximum 25 characters)
	Text *string `json:"text,omitempty"`
	// Payload (base64 encoded) that will be sent to the agent in the user event that results when the user taps the suggested action. Maximum 2048 characters.
	PostbackData *string `json:"postback_data,omitempty"`
}

// NewRCSReply instantiates a new RCSReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSReply() *RCSReply {
	this := RCSReply{}
	return &this
}

// NewRCSReplyWithDefaults instantiates a new RCSReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSReplyWithDefaults() *RCSReply {
	this := RCSReply{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RCSReply) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSReply) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RCSReply) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RCSReply) SetText(v string) {
	o.Text = &v
}

// GetPostbackData returns the PostbackData field value if set, zero value otherwise.
func (o *RCSReply) GetPostbackData() string {
	if o == nil || IsNil(o.PostbackData) {
		var ret string
		return ret
	}
	return *o.PostbackData
}

// GetPostbackDataOk returns a tuple with the PostbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSReply) GetPostbackDataOk() (*string, bool) {
	if o == nil || IsNil(o.PostbackData) {
		return nil, false
	}
	return o.PostbackData, true
}

// HasPostbackData returns a boolean if a field has been set.
func (o *RCSReply) HasPostbackData() bool {
	if o != nil && !IsNil(o.PostbackData) {
		return true
	}

	return false
}

// SetPostbackData gets a reference to the given string and assigns it to the PostbackData field.
func (o *RCSReply) SetPostbackData(v string) {
	o.PostbackData = &v
}

func (o RCSReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.PostbackData) {
		toSerialize["postback_data"] = o.PostbackData
	}
	return toSerialize, nil
}

type NullableRCSReply struct {
	value *RCSReply
	isSet bool
}

func (v NullableRCSReply) Get() *RCSReply {
	return v.value
}

func (v *NullableRCSReply) Set(val *RCSReply) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSReply) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSReply(val *RCSReply) *NullableRCSReply {
	return &NullableRCSReply{value: val, isSet: true}
}

func (v NullableRCSReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


