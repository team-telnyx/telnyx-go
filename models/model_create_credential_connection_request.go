/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCredentialConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCredentialConnectionRequest{}

// CreateCredentialConnectionRequest struct for CreateCredentialConnectionRequest
type CreateCredentialConnectionRequest struct {
	// Defaults to true
	Active *bool `json:"active,omitempty"`
	// The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).
	UserName string `json:"user_name"`
	// The password to be used as part of the credentials. Must be 8 to 128 characters long.
	Password string `json:"password"`
	AnchorsiteOverride *AnchorsiteOverride `json:"anchorsite_override,omitempty"`
	// A user-assigned name to help manage the connection.
	ConnectionName string `json:"connection_name"`
	// This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).
	SipUriCallingPreference *string `json:"sip_uri_calling_preference,omitempty"`
	// When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.
	DefaultOnHoldComfortNoiseEnabled *bool `json:"default_on_hold_comfort_noise_enabled,omitempty"`
	DtmfType *DtmfType `json:"dtmf_type,omitempty"`
	// Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.
	EncodeContactHeaderEnabled *bool `json:"encode_contact_header_enabled,omitempty"`
	EncryptedMedia NullableEncryptedMedia `json:"encrypted_media,omitempty"`
	// Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.
	OnnetT38PassthroughEnabled *bool `json:"onnet_t38_passthrough_enabled,omitempty"`
	// The uuid of the push credential for Ios
	IosPushCredentialId NullableString `json:"ios_push_credential_id,omitempty"`
	// The uuid of the push credential for Android
	AndroidPushCredentialId NullableString `json:"android_push_credential_id,omitempty"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.
	WebhookEventUrl *string `json:"webhook_event_url,omitempty"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverUrl NullableString `json:"webhook_event_failover_url,omitempty"`
	// Determines which webhook format will be used, Telnyx API v1, v2 or texml. Note - texml can only be set when the outbound object parameter call_parking_enabled is included and set to true.
	WebhookApiVersion *string `json:"webhook_api_version,omitempty"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs NullableInt32 `json:"webhook_timeout_secs,omitempty"`
	// Tags associated with the connection.
	Tags []string `json:"tags,omitempty"`
	RtcpSettings *ConnectionRtcpSettings `json:"rtcp_settings,omitempty"`
	Inbound *CredentialInbound `json:"inbound,omitempty"`
	Outbound *CredentialOutbound `json:"outbound,omitempty"`
}

type _CreateCredentialConnectionRequest CreateCredentialConnectionRequest

// NewCreateCredentialConnectionRequest instantiates a new CreateCredentialConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCredentialConnectionRequest(userName string, password string, connectionName string) *CreateCredentialConnectionRequest {
	this := CreateCredentialConnectionRequest{}
	this.UserName = userName
	this.Password = password
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	this.ConnectionName = connectionName
	var defaultOnHoldComfortNoiseEnabled bool = false
	this.DefaultOnHoldComfortNoiseEnabled = &defaultOnHoldComfortNoiseEnabled
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var encodeContactHeaderEnabled bool = false
	this.EncodeContactHeaderEnabled = &encodeContactHeaderEnabled
	var onnetT38PassthroughEnabled bool = false
	this.OnnetT38PassthroughEnabled = &onnetT38PassthroughEnabled
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	return &this
}

// NewCreateCredentialConnectionRequestWithDefaults instantiates a new CreateCredentialConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCredentialConnectionRequestWithDefaults() *CreateCredentialConnectionRequest {
	this := CreateCredentialConnectionRequest{}
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	var defaultOnHoldComfortNoiseEnabled bool = false
	this.DefaultOnHoldComfortNoiseEnabled = &defaultOnHoldComfortNoiseEnabled
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var encodeContactHeaderEnabled bool = false
	this.EncodeContactHeaderEnabled = &encodeContactHeaderEnabled
	var onnetT38PassthroughEnabled bool = false
	this.OnnetT38PassthroughEnabled = &onnetT38PassthroughEnabled
	var webhookEventFailoverUrl string = ""
	this.WebhookEventFailoverUrl = *NewNullableString(&webhookEventFailoverUrl)
	var webhookApiVersion string = "1"
	this.WebhookApiVersion = &webhookApiVersion
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateCredentialConnectionRequest) SetActive(v bool) {
	o.Active = &v
}

// GetUserName returns the UserName field value
func (o *CreateCredentialConnectionRequest) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *CreateCredentialConnectionRequest) SetUserName(v string) {
	o.UserName = v
}

// GetPassword returns the Password field value
func (o *CreateCredentialConnectionRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateCredentialConnectionRequest) SetPassword(v string) {
	o.Password = v
}

// GetAnchorsiteOverride returns the AnchorsiteOverride field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetAnchorsiteOverride() AnchorsiteOverride {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		var ret AnchorsiteOverride
		return ret
	}
	return *o.AnchorsiteOverride
}

// GetAnchorsiteOverrideOk returns a tuple with the AnchorsiteOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetAnchorsiteOverrideOk() (*AnchorsiteOverride, bool) {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		return nil, false
	}
	return o.AnchorsiteOverride, true
}

// HasAnchorsiteOverride returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasAnchorsiteOverride() bool {
	if o != nil && !IsNil(o.AnchorsiteOverride) {
		return true
	}

	return false
}

// SetAnchorsiteOverride gets a reference to the given AnchorsiteOverride and assigns it to the AnchorsiteOverride field.
func (o *CreateCredentialConnectionRequest) SetAnchorsiteOverride(v AnchorsiteOverride) {
	o.AnchorsiteOverride = &v
}

// GetConnectionName returns the ConnectionName field value
func (o *CreateCredentialConnectionRequest) GetConnectionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetConnectionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionName, true
}

// SetConnectionName sets field value
func (o *CreateCredentialConnectionRequest) SetConnectionName(v string) {
	o.ConnectionName = v
}

// GetSipUriCallingPreference returns the SipUriCallingPreference field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetSipUriCallingPreference() string {
	if o == nil || IsNil(o.SipUriCallingPreference) {
		var ret string
		return ret
	}
	return *o.SipUriCallingPreference
}

// GetSipUriCallingPreferenceOk returns a tuple with the SipUriCallingPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetSipUriCallingPreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.SipUriCallingPreference) {
		return nil, false
	}
	return o.SipUriCallingPreference, true
}

// HasSipUriCallingPreference returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasSipUriCallingPreference() bool {
	if o != nil && !IsNil(o.SipUriCallingPreference) {
		return true
	}

	return false
}

// SetSipUriCallingPreference gets a reference to the given string and assigns it to the SipUriCallingPreference field.
func (o *CreateCredentialConnectionRequest) SetSipUriCallingPreference(v string) {
	o.SipUriCallingPreference = &v
}

// GetDefaultOnHoldComfortNoiseEnabled returns the DefaultOnHoldComfortNoiseEnabled field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetDefaultOnHoldComfortNoiseEnabled() bool {
	if o == nil || IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		var ret bool
		return ret
	}
	return *o.DefaultOnHoldComfortNoiseEnabled
}

// GetDefaultOnHoldComfortNoiseEnabledOk returns a tuple with the DefaultOnHoldComfortNoiseEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetDefaultOnHoldComfortNoiseEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		return nil, false
	}
	return o.DefaultOnHoldComfortNoiseEnabled, true
}

// HasDefaultOnHoldComfortNoiseEnabled returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasDefaultOnHoldComfortNoiseEnabled() bool {
	if o != nil && !IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		return true
	}

	return false
}

// SetDefaultOnHoldComfortNoiseEnabled gets a reference to the given bool and assigns it to the DefaultOnHoldComfortNoiseEnabled field.
func (o *CreateCredentialConnectionRequest) SetDefaultOnHoldComfortNoiseEnabled(v bool) {
	o.DefaultOnHoldComfortNoiseEnabled = &v
}

// GetDtmfType returns the DtmfType field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetDtmfType() DtmfType {
	if o == nil || IsNil(o.DtmfType) {
		var ret DtmfType
		return ret
	}
	return *o.DtmfType
}

// GetDtmfTypeOk returns a tuple with the DtmfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetDtmfTypeOk() (*DtmfType, bool) {
	if o == nil || IsNil(o.DtmfType) {
		return nil, false
	}
	return o.DtmfType, true
}

// HasDtmfType returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasDtmfType() bool {
	if o != nil && !IsNil(o.DtmfType) {
		return true
	}

	return false
}

// SetDtmfType gets a reference to the given DtmfType and assigns it to the DtmfType field.
func (o *CreateCredentialConnectionRequest) SetDtmfType(v DtmfType) {
	o.DtmfType = &v
}

// GetEncodeContactHeaderEnabled returns the EncodeContactHeaderEnabled field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetEncodeContactHeaderEnabled() bool {
	if o == nil || IsNil(o.EncodeContactHeaderEnabled) {
		var ret bool
		return ret
	}
	return *o.EncodeContactHeaderEnabled
}

// GetEncodeContactHeaderEnabledOk returns a tuple with the EncodeContactHeaderEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetEncodeContactHeaderEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncodeContactHeaderEnabled) {
		return nil, false
	}
	return o.EncodeContactHeaderEnabled, true
}

// HasEncodeContactHeaderEnabled returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasEncodeContactHeaderEnabled() bool {
	if o != nil && !IsNil(o.EncodeContactHeaderEnabled) {
		return true
	}

	return false
}

// SetEncodeContactHeaderEnabled gets a reference to the given bool and assigns it to the EncodeContactHeaderEnabled field.
func (o *CreateCredentialConnectionRequest) SetEncodeContactHeaderEnabled(v bool) {
	o.EncodeContactHeaderEnabled = &v
}

// GetEncryptedMedia returns the EncryptedMedia field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCredentialConnectionRequest) GetEncryptedMedia() EncryptedMedia {
	if o == nil || IsNil(o.EncryptedMedia.Get()) {
		var ret EncryptedMedia
		return ret
	}
	return *o.EncryptedMedia.Get()
}

// GetEncryptedMediaOk returns a tuple with the EncryptedMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCredentialConnectionRequest) GetEncryptedMediaOk() (*EncryptedMedia, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptedMedia.Get(), o.EncryptedMedia.IsSet()
}

// HasEncryptedMedia returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasEncryptedMedia() bool {
	if o != nil && o.EncryptedMedia.IsSet() {
		return true
	}

	return false
}

// SetEncryptedMedia gets a reference to the given NullableEncryptedMedia and assigns it to the EncryptedMedia field.
func (o *CreateCredentialConnectionRequest) SetEncryptedMedia(v EncryptedMedia) {
	o.EncryptedMedia.Set(&v)
}
// SetEncryptedMediaNil sets the value for EncryptedMedia to be an explicit nil
func (o *CreateCredentialConnectionRequest) SetEncryptedMediaNil() {
	o.EncryptedMedia.Set(nil)
}

// UnsetEncryptedMedia ensures that no value is present for EncryptedMedia, not even an explicit nil
func (o *CreateCredentialConnectionRequest) UnsetEncryptedMedia() {
	o.EncryptedMedia.Unset()
}

// GetOnnetT38PassthroughEnabled returns the OnnetT38PassthroughEnabled field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetOnnetT38PassthroughEnabled() bool {
	if o == nil || IsNil(o.OnnetT38PassthroughEnabled) {
		var ret bool
		return ret
	}
	return *o.OnnetT38PassthroughEnabled
}

// GetOnnetT38PassthroughEnabledOk returns a tuple with the OnnetT38PassthroughEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetOnnetT38PassthroughEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OnnetT38PassthroughEnabled) {
		return nil, false
	}
	return o.OnnetT38PassthroughEnabled, true
}

// HasOnnetT38PassthroughEnabled returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasOnnetT38PassthroughEnabled() bool {
	if o != nil && !IsNil(o.OnnetT38PassthroughEnabled) {
		return true
	}

	return false
}

// SetOnnetT38PassthroughEnabled gets a reference to the given bool and assigns it to the OnnetT38PassthroughEnabled field.
func (o *CreateCredentialConnectionRequest) SetOnnetT38PassthroughEnabled(v bool) {
	o.OnnetT38PassthroughEnabled = &v
}

// GetIosPushCredentialId returns the IosPushCredentialId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCredentialConnectionRequest) GetIosPushCredentialId() string {
	if o == nil || IsNil(o.IosPushCredentialId.Get()) {
		var ret string
		return ret
	}
	return *o.IosPushCredentialId.Get()
}

// GetIosPushCredentialIdOk returns a tuple with the IosPushCredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCredentialConnectionRequest) GetIosPushCredentialIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IosPushCredentialId.Get(), o.IosPushCredentialId.IsSet()
}

// HasIosPushCredentialId returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasIosPushCredentialId() bool {
	if o != nil && o.IosPushCredentialId.IsSet() {
		return true
	}

	return false
}

// SetIosPushCredentialId gets a reference to the given NullableString and assigns it to the IosPushCredentialId field.
func (o *CreateCredentialConnectionRequest) SetIosPushCredentialId(v string) {
	o.IosPushCredentialId.Set(&v)
}
// SetIosPushCredentialIdNil sets the value for IosPushCredentialId to be an explicit nil
func (o *CreateCredentialConnectionRequest) SetIosPushCredentialIdNil() {
	o.IosPushCredentialId.Set(nil)
}

// UnsetIosPushCredentialId ensures that no value is present for IosPushCredentialId, not even an explicit nil
func (o *CreateCredentialConnectionRequest) UnsetIosPushCredentialId() {
	o.IosPushCredentialId.Unset()
}

// GetAndroidPushCredentialId returns the AndroidPushCredentialId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCredentialConnectionRequest) GetAndroidPushCredentialId() string {
	if o == nil || IsNil(o.AndroidPushCredentialId.Get()) {
		var ret string
		return ret
	}
	return *o.AndroidPushCredentialId.Get()
}

// GetAndroidPushCredentialIdOk returns a tuple with the AndroidPushCredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCredentialConnectionRequest) GetAndroidPushCredentialIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidPushCredentialId.Get(), o.AndroidPushCredentialId.IsSet()
}

// HasAndroidPushCredentialId returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasAndroidPushCredentialId() bool {
	if o != nil && o.AndroidPushCredentialId.IsSet() {
		return true
	}

	return false
}

// SetAndroidPushCredentialId gets a reference to the given NullableString and assigns it to the AndroidPushCredentialId field.
func (o *CreateCredentialConnectionRequest) SetAndroidPushCredentialId(v string) {
	o.AndroidPushCredentialId.Set(&v)
}
// SetAndroidPushCredentialIdNil sets the value for AndroidPushCredentialId to be an explicit nil
func (o *CreateCredentialConnectionRequest) SetAndroidPushCredentialIdNil() {
	o.AndroidPushCredentialId.Set(nil)
}

// UnsetAndroidPushCredentialId ensures that no value is present for AndroidPushCredentialId, not even an explicit nil
func (o *CreateCredentialConnectionRequest) UnsetAndroidPushCredentialId() {
	o.AndroidPushCredentialId.Unset()
}

// GetWebhookEventUrl returns the WebhookEventUrl field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetWebhookEventUrl() string {
	if o == nil || IsNil(o.WebhookEventUrl) {
		var ret string
		return ret
	}
	return *o.WebhookEventUrl
}

// GetWebhookEventUrlOk returns a tuple with the WebhookEventUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetWebhookEventUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookEventUrl) {
		return nil, false
	}
	return o.WebhookEventUrl, true
}

// HasWebhookEventUrl returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasWebhookEventUrl() bool {
	if o != nil && !IsNil(o.WebhookEventUrl) {
		return true
	}

	return false
}

// SetWebhookEventUrl gets a reference to the given string and assigns it to the WebhookEventUrl field.
func (o *CreateCredentialConnectionRequest) SetWebhookEventUrl(v string) {
	o.WebhookEventUrl = &v
}

// GetWebhookEventFailoverUrl returns the WebhookEventFailoverUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCredentialConnectionRequest) GetWebhookEventFailoverUrl() string {
	if o == nil || IsNil(o.WebhookEventFailoverUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebhookEventFailoverUrl.Get()
}

// GetWebhookEventFailoverUrlOk returns a tuple with the WebhookEventFailoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCredentialConnectionRequest) GetWebhookEventFailoverUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookEventFailoverUrl.Get(), o.WebhookEventFailoverUrl.IsSet()
}

// HasWebhookEventFailoverUrl returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasWebhookEventFailoverUrl() bool {
	if o != nil && o.WebhookEventFailoverUrl.IsSet() {
		return true
	}

	return false
}

// SetWebhookEventFailoverUrl gets a reference to the given NullableString and assigns it to the WebhookEventFailoverUrl field.
func (o *CreateCredentialConnectionRequest) SetWebhookEventFailoverUrl(v string) {
	o.WebhookEventFailoverUrl.Set(&v)
}
// SetWebhookEventFailoverUrlNil sets the value for WebhookEventFailoverUrl to be an explicit nil
func (o *CreateCredentialConnectionRequest) SetWebhookEventFailoverUrlNil() {
	o.WebhookEventFailoverUrl.Set(nil)
}

// UnsetWebhookEventFailoverUrl ensures that no value is present for WebhookEventFailoverUrl, not even an explicit nil
func (o *CreateCredentialConnectionRequest) UnsetWebhookEventFailoverUrl() {
	o.WebhookEventFailoverUrl.Unset()
}

// GetWebhookApiVersion returns the WebhookApiVersion field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetWebhookApiVersion() string {
	if o == nil || IsNil(o.WebhookApiVersion) {
		var ret string
		return ret
	}
	return *o.WebhookApiVersion
}

// GetWebhookApiVersionOk returns a tuple with the WebhookApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetWebhookApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookApiVersion) {
		return nil, false
	}
	return o.WebhookApiVersion, true
}

// HasWebhookApiVersion returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasWebhookApiVersion() bool {
	if o != nil && !IsNil(o.WebhookApiVersion) {
		return true
	}

	return false
}

// SetWebhookApiVersion gets a reference to the given string and assigns it to the WebhookApiVersion field.
func (o *CreateCredentialConnectionRequest) SetWebhookApiVersion(v string) {
	o.WebhookApiVersion = &v
}

// GetWebhookTimeoutSecs returns the WebhookTimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCredentialConnectionRequest) GetWebhookTimeoutSecs() int32 {
	if o == nil || IsNil(o.WebhookTimeoutSecs.Get()) {
		var ret int32
		return ret
	}
	return *o.WebhookTimeoutSecs.Get()
}

// GetWebhookTimeoutSecsOk returns a tuple with the WebhookTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCredentialConnectionRequest) GetWebhookTimeoutSecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookTimeoutSecs.Get(), o.WebhookTimeoutSecs.IsSet()
}

// HasWebhookTimeoutSecs returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasWebhookTimeoutSecs() bool {
	if o != nil && o.WebhookTimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetWebhookTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the WebhookTimeoutSecs field.
func (o *CreateCredentialConnectionRequest) SetWebhookTimeoutSecs(v int32) {
	o.WebhookTimeoutSecs.Set(&v)
}
// SetWebhookTimeoutSecsNil sets the value for WebhookTimeoutSecs to be an explicit nil
func (o *CreateCredentialConnectionRequest) SetWebhookTimeoutSecsNil() {
	o.WebhookTimeoutSecs.Set(nil)
}

// UnsetWebhookTimeoutSecs ensures that no value is present for WebhookTimeoutSecs, not even an explicit nil
func (o *CreateCredentialConnectionRequest) UnsetWebhookTimeoutSecs() {
	o.WebhookTimeoutSecs.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreateCredentialConnectionRequest) SetTags(v []string) {
	o.Tags = v
}

// GetRtcpSettings returns the RtcpSettings field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetRtcpSettings() ConnectionRtcpSettings {
	if o == nil || IsNil(o.RtcpSettings) {
		var ret ConnectionRtcpSettings
		return ret
	}
	return *o.RtcpSettings
}

// GetRtcpSettingsOk returns a tuple with the RtcpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetRtcpSettingsOk() (*ConnectionRtcpSettings, bool) {
	if o == nil || IsNil(o.RtcpSettings) {
		return nil, false
	}
	return o.RtcpSettings, true
}

// HasRtcpSettings returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasRtcpSettings() bool {
	if o != nil && !IsNil(o.RtcpSettings) {
		return true
	}

	return false
}

// SetRtcpSettings gets a reference to the given ConnectionRtcpSettings and assigns it to the RtcpSettings field.
func (o *CreateCredentialConnectionRequest) SetRtcpSettings(v ConnectionRtcpSettings) {
	o.RtcpSettings = &v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetInbound() CredentialInbound {
	if o == nil || IsNil(o.Inbound) {
		var ret CredentialInbound
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetInboundOk() (*CredentialInbound, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given CredentialInbound and assigns it to the Inbound field.
func (o *CreateCredentialConnectionRequest) SetInbound(v CredentialInbound) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *CreateCredentialConnectionRequest) GetOutbound() CredentialOutbound {
	if o == nil || IsNil(o.Outbound) {
		var ret CredentialOutbound
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCredentialConnectionRequest) GetOutboundOk() (*CredentialOutbound, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *CreateCredentialConnectionRequest) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given CredentialOutbound and assigns it to the Outbound field.
func (o *CreateCredentialConnectionRequest) SetOutbound(v CredentialOutbound) {
	o.Outbound = &v
}

func (o CreateCredentialConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCredentialConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["user_name"] = o.UserName
	toSerialize["password"] = o.Password
	if !IsNil(o.AnchorsiteOverride) {
		toSerialize["anchorsite_override"] = o.AnchorsiteOverride
	}
	toSerialize["connection_name"] = o.ConnectionName
	if !IsNil(o.SipUriCallingPreference) {
		toSerialize["sip_uri_calling_preference"] = o.SipUriCallingPreference
	}
	if !IsNil(o.DefaultOnHoldComfortNoiseEnabled) {
		toSerialize["default_on_hold_comfort_noise_enabled"] = o.DefaultOnHoldComfortNoiseEnabled
	}
	if !IsNil(o.DtmfType) {
		toSerialize["dtmf_type"] = o.DtmfType
	}
	if !IsNil(o.EncodeContactHeaderEnabled) {
		toSerialize["encode_contact_header_enabled"] = o.EncodeContactHeaderEnabled
	}
	if o.EncryptedMedia.IsSet() {
		toSerialize["encrypted_media"] = o.EncryptedMedia.Get()
	}
	if !IsNil(o.OnnetT38PassthroughEnabled) {
		toSerialize["onnet_t38_passthrough_enabled"] = o.OnnetT38PassthroughEnabled
	}
	if o.IosPushCredentialId.IsSet() {
		toSerialize["ios_push_credential_id"] = o.IosPushCredentialId.Get()
	}
	if o.AndroidPushCredentialId.IsSet() {
		toSerialize["android_push_credential_id"] = o.AndroidPushCredentialId.Get()
	}
	if !IsNil(o.WebhookEventUrl) {
		toSerialize["webhook_event_url"] = o.WebhookEventUrl
	}
	if o.WebhookEventFailoverUrl.IsSet() {
		toSerialize["webhook_event_failover_url"] = o.WebhookEventFailoverUrl.Get()
	}
	if !IsNil(o.WebhookApiVersion) {
		toSerialize["webhook_api_version"] = o.WebhookApiVersion
	}
	if o.WebhookTimeoutSecs.IsSet() {
		toSerialize["webhook_timeout_secs"] = o.WebhookTimeoutSecs.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.RtcpSettings) {
		toSerialize["rtcp_settings"] = o.RtcpSettings
	}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	return toSerialize, nil
}

func (o *CreateCredentialConnectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_name",
		"password",
		"connection_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCredentialConnectionRequest := _CreateCredentialConnectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCredentialConnectionRequest)

	if err != nil {
		return err
	}

	*o = CreateCredentialConnectionRequest(varCreateCredentialConnectionRequest)

	return err
}

type NullableCreateCredentialConnectionRequest struct {
	value *CreateCredentialConnectionRequest
	isSet bool
}

func (v NullableCreateCredentialConnectionRequest) Get() *CreateCredentialConnectionRequest {
	return v.value
}

func (v *NullableCreateCredentialConnectionRequest) Set(val *CreateCredentialConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCredentialConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCredentialConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCredentialConnectionRequest(val *CreateCredentialConnectionRequest) *NullableCreateCredentialConnectionRequest {
	return &NullableCreateCredentialConnectionRequest{value: val, isSet: true}
}

func (v NullableCreateCredentialConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCredentialConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


