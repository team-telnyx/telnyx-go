/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GatherUsingAIRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatherUsingAIRequest{}

// GatherUsingAIRequest struct for GatherUsingAIRequest
type GatherUsingAIRequest struct {
	// The parameters described as a JSON Schema object that needs to be gathered by the voice assistant. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format
	Parameters map[string]interface{} `json:"parameters"`
	Assistant *Assistant `json:"assistant,omitempty"`
	Transcription *TranscriptionConfig `json:"transcription,omitempty"`
	Language *GoogleTranscriptionLanguage `json:"language,omitempty"`
	// The voice to be used by the voice assistant. Currently we support ElevenLabs, Telnyx and AWS voices.   **Supported Providers:** - **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). For long-form engine, append `-LongForm` to the `VoiceId` (e.g., `AWS.Polly.Danielle-LongForm`). For generative engine, the latest provided by AWS Polly, append `-Generative` to the `VoiceId` (e.g., `AWS.Polly.Danielle-Generative`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility. - **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).) - **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.BaseModel.John`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration secret under `\"voice_settings\": {\"api_key_ref\": \"<secret_id>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).  - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`
	Voice *string `json:"voice,omitempty"`
	VoiceSettings *AIAssistantStartRequestVoiceSettings `json:"voice_settings,omitempty"`
	// Text that will be played when the gathering starts, if none then nothing will be played when the gathering starts. The greeting can be text for any voice or SSML for `AWS.Polly.<voice_id>` voices. There is a 3,000 character limit.
	Greeting *string `json:"greeting,omitempty"`
	// Default is `false`. If set to `true`, the voice assistant will send partial results via the `call.ai_gather.partial_results` [callback](https://developers.telnyx.com/api/call-control/call-gather-using-ai#callbacks) in real time as individual fields are gathered. If set to `false`, the voice assistant will only send the final result via the `call.ai_gather.ended` callback.
	SendPartialResults *bool `json:"send_partial_results,omitempty"`
	// Default is `false`. If set to `true`, the voice assistant will send updates to the message history via the `call.ai_gather.message_history_updated` [callback](https://developers.telnyx.com/api/call-control/call-gather-using-ai#callbacks) in real time as the message history is updated.
	SendMessageHistoryUpdates *bool `json:"send_message_history_updates,omitempty"`
	// The message history you want the voice assistant to be aware of, this can be useful to keep the context of the conversation, or to pass additional information to the voice assistant.
	MessageHistory []CallAIGatherEndedPayloadMessageHistoryInner `json:"message_history,omitempty"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	InterruptionSettings *InterruptionSettings `json:"interruption_settings,omitempty"`
	// The number of milliseconds to wait for a user response before the voice assistant times out and check if the user is still there.
	UserResponseTimeoutMs *int32 `json:"user_response_timeout_ms,omitempty"`
}

type _GatherUsingAIRequest GatherUsingAIRequest

// NewGatherUsingAIRequest instantiates a new GatherUsingAIRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatherUsingAIRequest(parameters map[string]interface{}) *GatherUsingAIRequest {
	this := GatherUsingAIRequest{}
	this.Parameters = parameters
	var language GoogleTranscriptionLanguage = EN
	this.Language = &language
	var voice string = "Telnyx.KokoroTTS.af"
	this.Voice = &voice
	var userResponseTimeoutMs int32 = 10000
	this.UserResponseTimeoutMs = &userResponseTimeoutMs
	return &this
}

// NewGatherUsingAIRequestWithDefaults instantiates a new GatherUsingAIRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatherUsingAIRequestWithDefaults() *GatherUsingAIRequest {
	this := GatherUsingAIRequest{}
	var language GoogleTranscriptionLanguage = EN
	this.Language = &language
	var voice string = "Telnyx.KokoroTTS.af"
	this.Voice = &voice
	var userResponseTimeoutMs int32 = 10000
	this.UserResponseTimeoutMs = &userResponseTimeoutMs
	return &this
}

// GetParameters returns the Parameters field value
func (o *GatherUsingAIRequest) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *GatherUsingAIRequest) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetAssistant returns the Assistant field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetAssistant() Assistant {
	if o == nil || IsNil(o.Assistant) {
		var ret Assistant
		return ret
	}
	return *o.Assistant
}

// GetAssistantOk returns a tuple with the Assistant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetAssistantOk() (*Assistant, bool) {
	if o == nil || IsNil(o.Assistant) {
		return nil, false
	}
	return o.Assistant, true
}

// HasAssistant returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasAssistant() bool {
	if o != nil && !IsNil(o.Assistant) {
		return true
	}

	return false
}

// SetAssistant gets a reference to the given Assistant and assigns it to the Assistant field.
func (o *GatherUsingAIRequest) SetAssistant(v Assistant) {
	o.Assistant = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetTranscription() TranscriptionConfig {
	if o == nil || IsNil(o.Transcription) {
		var ret TranscriptionConfig
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetTranscriptionOk() (*TranscriptionConfig, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given TranscriptionConfig and assigns it to the Transcription field.
func (o *GatherUsingAIRequest) SetTranscription(v TranscriptionConfig) {
	o.Transcription = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetLanguage() GoogleTranscriptionLanguage {
	if o == nil || IsNil(o.Language) {
		var ret GoogleTranscriptionLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetLanguageOk() (*GoogleTranscriptionLanguage, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given GoogleTranscriptionLanguage and assigns it to the Language field.
func (o *GatherUsingAIRequest) SetLanguage(v GoogleTranscriptionLanguage) {
	o.Language = &v
}

// GetVoice returns the Voice field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetVoice() string {
	if o == nil || IsNil(o.Voice) {
		var ret string
		return ret
	}
	return *o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetVoiceOk() (*string, bool) {
	if o == nil || IsNil(o.Voice) {
		return nil, false
	}
	return o.Voice, true
}

// HasVoice returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasVoice() bool {
	if o != nil && !IsNil(o.Voice) {
		return true
	}

	return false
}

// SetVoice gets a reference to the given string and assigns it to the Voice field.
func (o *GatherUsingAIRequest) SetVoice(v string) {
	o.Voice = &v
}

// GetVoiceSettings returns the VoiceSettings field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetVoiceSettings() AIAssistantStartRequestVoiceSettings {
	if o == nil || IsNil(o.VoiceSettings) {
		var ret AIAssistantStartRequestVoiceSettings
		return ret
	}
	return *o.VoiceSettings
}

// GetVoiceSettingsOk returns a tuple with the VoiceSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetVoiceSettingsOk() (*AIAssistantStartRequestVoiceSettings, bool) {
	if o == nil || IsNil(o.VoiceSettings) {
		return nil, false
	}
	return o.VoiceSettings, true
}

// HasVoiceSettings returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasVoiceSettings() bool {
	if o != nil && !IsNil(o.VoiceSettings) {
		return true
	}

	return false
}

// SetVoiceSettings gets a reference to the given AIAssistantStartRequestVoiceSettings and assigns it to the VoiceSettings field.
func (o *GatherUsingAIRequest) SetVoiceSettings(v AIAssistantStartRequestVoiceSettings) {
	o.VoiceSettings = &v
}

// GetGreeting returns the Greeting field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetGreeting() string {
	if o == nil || IsNil(o.Greeting) {
		var ret string
		return ret
	}
	return *o.Greeting
}

// GetGreetingOk returns a tuple with the Greeting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetGreetingOk() (*string, bool) {
	if o == nil || IsNil(o.Greeting) {
		return nil, false
	}
	return o.Greeting, true
}

// HasGreeting returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasGreeting() bool {
	if o != nil && !IsNil(o.Greeting) {
		return true
	}

	return false
}

// SetGreeting gets a reference to the given string and assigns it to the Greeting field.
func (o *GatherUsingAIRequest) SetGreeting(v string) {
	o.Greeting = &v
}

// GetSendPartialResults returns the SendPartialResults field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetSendPartialResults() bool {
	if o == nil || IsNil(o.SendPartialResults) {
		var ret bool
		return ret
	}
	return *o.SendPartialResults
}

// GetSendPartialResultsOk returns a tuple with the SendPartialResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetSendPartialResultsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendPartialResults) {
		return nil, false
	}
	return o.SendPartialResults, true
}

// HasSendPartialResults returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasSendPartialResults() bool {
	if o != nil && !IsNil(o.SendPartialResults) {
		return true
	}

	return false
}

// SetSendPartialResults gets a reference to the given bool and assigns it to the SendPartialResults field.
func (o *GatherUsingAIRequest) SetSendPartialResults(v bool) {
	o.SendPartialResults = &v
}

// GetSendMessageHistoryUpdates returns the SendMessageHistoryUpdates field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetSendMessageHistoryUpdates() bool {
	if o == nil || IsNil(o.SendMessageHistoryUpdates) {
		var ret bool
		return ret
	}
	return *o.SendMessageHistoryUpdates
}

// GetSendMessageHistoryUpdatesOk returns a tuple with the SendMessageHistoryUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetSendMessageHistoryUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.SendMessageHistoryUpdates) {
		return nil, false
	}
	return o.SendMessageHistoryUpdates, true
}

// HasSendMessageHistoryUpdates returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasSendMessageHistoryUpdates() bool {
	if o != nil && !IsNil(o.SendMessageHistoryUpdates) {
		return true
	}

	return false
}

// SetSendMessageHistoryUpdates gets a reference to the given bool and assigns it to the SendMessageHistoryUpdates field.
func (o *GatherUsingAIRequest) SetSendMessageHistoryUpdates(v bool) {
	o.SendMessageHistoryUpdates = &v
}

// GetMessageHistory returns the MessageHistory field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetMessageHistory() []CallAIGatherEndedPayloadMessageHistoryInner {
	if o == nil || IsNil(o.MessageHistory) {
		var ret []CallAIGatherEndedPayloadMessageHistoryInner
		return ret
	}
	return o.MessageHistory
}

// GetMessageHistoryOk returns a tuple with the MessageHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetMessageHistoryOk() ([]CallAIGatherEndedPayloadMessageHistoryInner, bool) {
	if o == nil || IsNil(o.MessageHistory) {
		return nil, false
	}
	return o.MessageHistory, true
}

// HasMessageHistory returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasMessageHistory() bool {
	if o != nil && !IsNil(o.MessageHistory) {
		return true
	}

	return false
}

// SetMessageHistory gets a reference to the given []CallAIGatherEndedPayloadMessageHistoryInner and assigns it to the MessageHistory field.
func (o *GatherUsingAIRequest) SetMessageHistory(v []CallAIGatherEndedPayloadMessageHistoryInner) {
	o.MessageHistory = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *GatherUsingAIRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *GatherUsingAIRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetInterruptionSettings returns the InterruptionSettings field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetInterruptionSettings() InterruptionSettings {
	if o == nil || IsNil(o.InterruptionSettings) {
		var ret InterruptionSettings
		return ret
	}
	return *o.InterruptionSettings
}

// GetInterruptionSettingsOk returns a tuple with the InterruptionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetInterruptionSettingsOk() (*InterruptionSettings, bool) {
	if o == nil || IsNil(o.InterruptionSettings) {
		return nil, false
	}
	return o.InterruptionSettings, true
}

// HasInterruptionSettings returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasInterruptionSettings() bool {
	if o != nil && !IsNil(o.InterruptionSettings) {
		return true
	}

	return false
}

// SetInterruptionSettings gets a reference to the given InterruptionSettings and assigns it to the InterruptionSettings field.
func (o *GatherUsingAIRequest) SetInterruptionSettings(v InterruptionSettings) {
	o.InterruptionSettings = &v
}

// GetUserResponseTimeoutMs returns the UserResponseTimeoutMs field value if set, zero value otherwise.
func (o *GatherUsingAIRequest) GetUserResponseTimeoutMs() int32 {
	if o == nil || IsNil(o.UserResponseTimeoutMs) {
		var ret int32
		return ret
	}
	return *o.UserResponseTimeoutMs
}

// GetUserResponseTimeoutMsOk returns a tuple with the UserResponseTimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatherUsingAIRequest) GetUserResponseTimeoutMsOk() (*int32, bool) {
	if o == nil || IsNil(o.UserResponseTimeoutMs) {
		return nil, false
	}
	return o.UserResponseTimeoutMs, true
}

// HasUserResponseTimeoutMs returns a boolean if a field has been set.
func (o *GatherUsingAIRequest) HasUserResponseTimeoutMs() bool {
	if o != nil && !IsNil(o.UserResponseTimeoutMs) {
		return true
	}

	return false
}

// SetUserResponseTimeoutMs gets a reference to the given int32 and assigns it to the UserResponseTimeoutMs field.
func (o *GatherUsingAIRequest) SetUserResponseTimeoutMs(v int32) {
	o.UserResponseTimeoutMs = &v
}

func (o GatherUsingAIRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatherUsingAIRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parameters"] = o.Parameters
	if !IsNil(o.Assistant) {
		toSerialize["assistant"] = o.Assistant
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Voice) {
		toSerialize["voice"] = o.Voice
	}
	if !IsNil(o.VoiceSettings) {
		toSerialize["voice_settings"] = o.VoiceSettings
	}
	if !IsNil(o.Greeting) {
		toSerialize["greeting"] = o.Greeting
	}
	if !IsNil(o.SendPartialResults) {
		toSerialize["send_partial_results"] = o.SendPartialResults
	}
	if !IsNil(o.SendMessageHistoryUpdates) {
		toSerialize["send_message_history_updates"] = o.SendMessageHistoryUpdates
	}
	if !IsNil(o.MessageHistory) {
		toSerialize["message_history"] = o.MessageHistory
	}
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.InterruptionSettings) {
		toSerialize["interruption_settings"] = o.InterruptionSettings
	}
	if !IsNil(o.UserResponseTimeoutMs) {
		toSerialize["user_response_timeout_ms"] = o.UserResponseTimeoutMs
	}
	return toSerialize, nil
}

func (o *GatherUsingAIRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGatherUsingAIRequest := _GatherUsingAIRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGatherUsingAIRequest)

	if err != nil {
		return err
	}

	*o = GatherUsingAIRequest(varGatherUsingAIRequest)

	return err
}

type NullableGatherUsingAIRequest struct {
	value *GatherUsingAIRequest
	isSet bool
}

func (v NullableGatherUsingAIRequest) Get() *GatherUsingAIRequest {
	return v.value
}

func (v *NullableGatherUsingAIRequest) Set(val *GatherUsingAIRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGatherUsingAIRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGatherUsingAIRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatherUsingAIRequest(val *GatherUsingAIRequest) *NullableGatherUsingAIRequest {
	return &NullableGatherUsingAIRequest{value: val, isSet: true}
}

func (v NullableGatherUsingAIRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatherUsingAIRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


