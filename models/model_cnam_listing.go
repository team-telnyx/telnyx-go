/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CnamListing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CnamListing{}

// CnamListing The CNAM listing settings for a phone number.
type CnamListing struct {
	// Enables CNAM listings for this number. Requires cnam_listing_details to also be set.
	CnamListingEnabled *bool `json:"cnam_listing_enabled,omitempty"`
	// The CNAM listing details for this number. Must be alphanumeric characters or spaces with a maximum length of 15. Requires cnam_listing_enabled to also be set to true.
	CnamListingDetails *string `json:"cnam_listing_details,omitempty"`
}

// NewCnamListing instantiates a new CnamListing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCnamListing() *CnamListing {
	this := CnamListing{}
	var cnamListingEnabled bool = false
	this.CnamListingEnabled = &cnamListingEnabled
	return &this
}

// NewCnamListingWithDefaults instantiates a new CnamListing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCnamListingWithDefaults() *CnamListing {
	this := CnamListing{}
	var cnamListingEnabled bool = false
	this.CnamListingEnabled = &cnamListingEnabled
	return &this
}

// GetCnamListingEnabled returns the CnamListingEnabled field value if set, zero value otherwise.
func (o *CnamListing) GetCnamListingEnabled() bool {
	if o == nil || IsNil(o.CnamListingEnabled) {
		var ret bool
		return ret
	}
	return *o.CnamListingEnabled
}

// GetCnamListingEnabledOk returns a tuple with the CnamListingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CnamListing) GetCnamListingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CnamListingEnabled) {
		return nil, false
	}
	return o.CnamListingEnabled, true
}

// HasCnamListingEnabled returns a boolean if a field has been set.
func (o *CnamListing) HasCnamListingEnabled() bool {
	if o != nil && !IsNil(o.CnamListingEnabled) {
		return true
	}

	return false
}

// SetCnamListingEnabled gets a reference to the given bool and assigns it to the CnamListingEnabled field.
func (o *CnamListing) SetCnamListingEnabled(v bool) {
	o.CnamListingEnabled = &v
}

// GetCnamListingDetails returns the CnamListingDetails field value if set, zero value otherwise.
func (o *CnamListing) GetCnamListingDetails() string {
	if o == nil || IsNil(o.CnamListingDetails) {
		var ret string
		return ret
	}
	return *o.CnamListingDetails
}

// GetCnamListingDetailsOk returns a tuple with the CnamListingDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CnamListing) GetCnamListingDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.CnamListingDetails) {
		return nil, false
	}
	return o.CnamListingDetails, true
}

// HasCnamListingDetails returns a boolean if a field has been set.
func (o *CnamListing) HasCnamListingDetails() bool {
	if o != nil && !IsNil(o.CnamListingDetails) {
		return true
	}

	return false
}

// SetCnamListingDetails gets a reference to the given string and assigns it to the CnamListingDetails field.
func (o *CnamListing) SetCnamListingDetails(v string) {
	o.CnamListingDetails = &v
}

func (o CnamListing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CnamListing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CnamListingEnabled) {
		toSerialize["cnam_listing_enabled"] = o.CnamListingEnabled
	}
	if !IsNil(o.CnamListingDetails) {
		toSerialize["cnam_listing_details"] = o.CnamListingDetails
	}
	return toSerialize, nil
}

type NullableCnamListing struct {
	value *CnamListing
	isSet bool
}

func (v NullableCnamListing) Get() *CnamListing {
	return v.value
}

func (v *NullableCnamListing) Set(val *CnamListing) {
	v.value = val
	v.isSet = true
}

func (v NullableCnamListing) IsSet() bool {
	return v.isSet
}

func (v *NullableCnamListing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCnamListing(val *CnamListing) *NullableCnamListing {
	return &NullableCnamListing{value: val, isSet: true}
}

func (v NullableCnamListing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCnamListing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


