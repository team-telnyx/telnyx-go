/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidateAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateAddressRequest{}

// ValidateAddressRequest struct for ValidateAddressRequest
type ValidateAddressRequest struct {
	// The primary street address information about the address.
	StreetAddress string `json:"street_address"`
	// Additional street address information about the address such as, but not limited to, unit number or apartment number.
	ExtendedAddress *string `json:"extended_address,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the city of the address.
	Locality *string `json:"locality,omitempty"`
	// The locality of the address. For US addresses, this corresponds to the state of the address.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// The postal code of the address.
	PostalCode string `json:"postal_code"`
	// The two-character (ISO 3166-1 alpha-2) country code of the address.
	CountryCode string `json:"country_code"`
}

type _ValidateAddressRequest ValidateAddressRequest

// NewValidateAddressRequest instantiates a new ValidateAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateAddressRequest(streetAddress string, postalCode string, countryCode string) *ValidateAddressRequest {
	this := ValidateAddressRequest{}
	this.StreetAddress = streetAddress
	this.PostalCode = postalCode
	this.CountryCode = countryCode
	return &this
}

// NewValidateAddressRequestWithDefaults instantiates a new ValidateAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateAddressRequestWithDefaults() *ValidateAddressRequest {
	this := ValidateAddressRequest{}
	return &this
}

// GetStreetAddress returns the StreetAddress field value
func (o *ValidateAddressRequest) GetStreetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressRequest) GetStreetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreetAddress, true
}

// SetStreetAddress sets field value
func (o *ValidateAddressRequest) SetStreetAddress(v string) {
	o.StreetAddress = v
}

// GetExtendedAddress returns the ExtendedAddress field value if set, zero value otherwise.
func (o *ValidateAddressRequest) GetExtendedAddress() string {
	if o == nil || IsNil(o.ExtendedAddress) {
		var ret string
		return ret
	}
	return *o.ExtendedAddress
}

// GetExtendedAddressOk returns a tuple with the ExtendedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressRequest) GetExtendedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ExtendedAddress) {
		return nil, false
	}
	return o.ExtendedAddress, true
}

// HasExtendedAddress returns a boolean if a field has been set.
func (o *ValidateAddressRequest) HasExtendedAddress() bool {
	if o != nil && !IsNil(o.ExtendedAddress) {
		return true
	}

	return false
}

// SetExtendedAddress gets a reference to the given string and assigns it to the ExtendedAddress field.
func (o *ValidateAddressRequest) SetExtendedAddress(v string) {
	o.ExtendedAddress = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *ValidateAddressRequest) GetLocality() string {
	if o == nil || IsNil(o.Locality) {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressRequest) GetLocalityOk() (*string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *ValidateAddressRequest) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *ValidateAddressRequest) SetLocality(v string) {
	o.Locality = &v
}

// GetAdministrativeArea returns the AdministrativeArea field value if set, zero value otherwise.
func (o *ValidateAddressRequest) GetAdministrativeArea() string {
	if o == nil || IsNil(o.AdministrativeArea) {
		var ret string
		return ret
	}
	return *o.AdministrativeArea
}

// GetAdministrativeAreaOk returns a tuple with the AdministrativeArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateAddressRequest) GetAdministrativeAreaOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrativeArea) {
		return nil, false
	}
	return o.AdministrativeArea, true
}

// HasAdministrativeArea returns a boolean if a field has been set.
func (o *ValidateAddressRequest) HasAdministrativeArea() bool {
	if o != nil && !IsNil(o.AdministrativeArea) {
		return true
	}

	return false
}

// SetAdministrativeArea gets a reference to the given string and assigns it to the AdministrativeArea field.
func (o *ValidateAddressRequest) SetAdministrativeArea(v string) {
	o.AdministrativeArea = &v
}

// GetPostalCode returns the PostalCode field value
func (o *ValidateAddressRequest) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressRequest) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *ValidateAddressRequest) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountryCode returns the CountryCode field value
func (o *ValidateAddressRequest) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *ValidateAddressRequest) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *ValidateAddressRequest) SetCountryCode(v string) {
	o.CountryCode = v
}

func (o ValidateAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["street_address"] = o.StreetAddress
	if !IsNil(o.ExtendedAddress) {
		toSerialize["extended_address"] = o.ExtendedAddress
	}
	if !IsNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !IsNil(o.AdministrativeArea) {
		toSerialize["administrative_area"] = o.AdministrativeArea
	}
	toSerialize["postal_code"] = o.PostalCode
	toSerialize["country_code"] = o.CountryCode
	return toSerialize, nil
}

func (o *ValidateAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"street_address",
		"postal_code",
		"country_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidateAddressRequest := _ValidateAddressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidateAddressRequest)

	if err != nil {
		return err
	}

	*o = ValidateAddressRequest(varValidateAddressRequest)

	return err
}

type NullableValidateAddressRequest struct {
	value *ValidateAddressRequest
	isSet bool
}

func (v NullableValidateAddressRequest) Get() *ValidateAddressRequest {
	return v.value
}

func (v *NullableValidateAddressRequest) Set(val *ValidateAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateAddressRequest(val *ValidateAddressRequest) *NullableValidateAddressRequest {
	return &NullableValidateAddressRequest{value: val, isSet: true}
}

func (v NullableValidateAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


