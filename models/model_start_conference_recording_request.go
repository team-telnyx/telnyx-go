/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StartConferenceRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartConferenceRecordingRequest{}

// StartConferenceRecordingRequest struct for StartConferenceRecordingRequest
type StartConferenceRecordingRequest struct {
	// The audio file format used when storing the conference recording. Can be either `mp3` or `wav`.
	Format string `json:"format"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `conference_id`.
	CommandId *string `json:"command_id,omitempty"`
	// If enabled, a beep sound will be played at the start of a recording.
	PlayBeep *bool `json:"play_beep,omitempty"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	Trim *string `json:"trim,omitempty"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.
	CustomFileName *string `json:"custom_file_name,omitempty"`
}

type _StartConferenceRecordingRequest StartConferenceRecordingRequest

// NewStartConferenceRecordingRequest instantiates a new StartConferenceRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartConferenceRecordingRequest(format string) *StartConferenceRecordingRequest {
	this := StartConferenceRecordingRequest{}
	this.Format = format
	return &this
}

// NewStartConferenceRecordingRequestWithDefaults instantiates a new StartConferenceRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartConferenceRecordingRequestWithDefaults() *StartConferenceRecordingRequest {
	this := StartConferenceRecordingRequest{}
	return &this
}

// GetFormat returns the Format field value
func (o *StartConferenceRecordingRequest) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *StartConferenceRecordingRequest) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *StartConferenceRecordingRequest) SetFormat(v string) {
	o.Format = v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *StartConferenceRecordingRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartConferenceRecordingRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *StartConferenceRecordingRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *StartConferenceRecordingRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetPlayBeep returns the PlayBeep field value if set, zero value otherwise.
func (o *StartConferenceRecordingRequest) GetPlayBeep() bool {
	if o == nil || IsNil(o.PlayBeep) {
		var ret bool
		return ret
	}
	return *o.PlayBeep
}

// GetPlayBeepOk returns a tuple with the PlayBeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartConferenceRecordingRequest) GetPlayBeepOk() (*bool, bool) {
	if o == nil || IsNil(o.PlayBeep) {
		return nil, false
	}
	return o.PlayBeep, true
}

// HasPlayBeep returns a boolean if a field has been set.
func (o *StartConferenceRecordingRequest) HasPlayBeep() bool {
	if o != nil && !IsNil(o.PlayBeep) {
		return true
	}

	return false
}

// SetPlayBeep gets a reference to the given bool and assigns it to the PlayBeep field.
func (o *StartConferenceRecordingRequest) SetPlayBeep(v bool) {
	o.PlayBeep = &v
}

// GetTrim returns the Trim field value if set, zero value otherwise.
func (o *StartConferenceRecordingRequest) GetTrim() string {
	if o == nil || IsNil(o.Trim) {
		var ret string
		return ret
	}
	return *o.Trim
}

// GetTrimOk returns a tuple with the Trim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartConferenceRecordingRequest) GetTrimOk() (*string, bool) {
	if o == nil || IsNil(o.Trim) {
		return nil, false
	}
	return o.Trim, true
}

// HasTrim returns a boolean if a field has been set.
func (o *StartConferenceRecordingRequest) HasTrim() bool {
	if o != nil && !IsNil(o.Trim) {
		return true
	}

	return false
}

// SetTrim gets a reference to the given string and assigns it to the Trim field.
func (o *StartConferenceRecordingRequest) SetTrim(v string) {
	o.Trim = &v
}

// GetCustomFileName returns the CustomFileName field value if set, zero value otherwise.
func (o *StartConferenceRecordingRequest) GetCustomFileName() string {
	if o == nil || IsNil(o.CustomFileName) {
		var ret string
		return ret
	}
	return *o.CustomFileName
}

// GetCustomFileNameOk returns a tuple with the CustomFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartConferenceRecordingRequest) GetCustomFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFileName) {
		return nil, false
	}
	return o.CustomFileName, true
}

// HasCustomFileName returns a boolean if a field has been set.
func (o *StartConferenceRecordingRequest) HasCustomFileName() bool {
	if o != nil && !IsNil(o.CustomFileName) {
		return true
	}

	return false
}

// SetCustomFileName gets a reference to the given string and assigns it to the CustomFileName field.
func (o *StartConferenceRecordingRequest) SetCustomFileName(v string) {
	o.CustomFileName = &v
}

func (o StartConferenceRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartConferenceRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format"] = o.Format
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.PlayBeep) {
		toSerialize["play_beep"] = o.PlayBeep
	}
	if !IsNil(o.Trim) {
		toSerialize["trim"] = o.Trim
	}
	if !IsNil(o.CustomFileName) {
		toSerialize["custom_file_name"] = o.CustomFileName
	}
	return toSerialize, nil
}

func (o *StartConferenceRecordingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"format",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStartConferenceRecordingRequest := _StartConferenceRecordingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStartConferenceRecordingRequest)

	if err != nil {
		return err
	}

	*o = StartConferenceRecordingRequest(varStartConferenceRecordingRequest)

	return err
}

type NullableStartConferenceRecordingRequest struct {
	value *StartConferenceRecordingRequest
	isSet bool
}

func (v NullableStartConferenceRecordingRequest) Get() *StartConferenceRecordingRequest {
	return v.value
}

func (v *NullableStartConferenceRecordingRequest) Set(val *StartConferenceRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartConferenceRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartConferenceRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartConferenceRecordingRequest(val *StartConferenceRecordingRequest) *NullableStartConferenceRecordingRequest {
	return &NullableStartConferenceRecordingRequest{value: val, isSet: true}
}

func (v NullableStartConferenceRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartConferenceRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


