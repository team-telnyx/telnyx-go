/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallRecordingSavedPayloadPublicRecordingUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRecordingSavedPayloadPublicRecordingUrls{}

// CallRecordingSavedPayloadPublicRecordingUrls Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.
type CallRecordingSavedPayloadPublicRecordingUrls struct {
	// Recording URL in requested `mp3` format.
	Mp3 NullableString `json:"mp3,omitempty"`
	// Recording URL in requested `wav` format.
	Wav NullableString `json:"wav,omitempty"`
}

// NewCallRecordingSavedPayloadPublicRecordingUrls instantiates a new CallRecordingSavedPayloadPublicRecordingUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRecordingSavedPayloadPublicRecordingUrls() *CallRecordingSavedPayloadPublicRecordingUrls {
	this := CallRecordingSavedPayloadPublicRecordingUrls{}
	return &this
}

// NewCallRecordingSavedPayloadPublicRecordingUrlsWithDefaults instantiates a new CallRecordingSavedPayloadPublicRecordingUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordingSavedPayloadPublicRecordingUrlsWithDefaults() *CallRecordingSavedPayloadPublicRecordingUrls {
	this := CallRecordingSavedPayloadPublicRecordingUrls{}
	return &this
}

// GetMp3 returns the Mp3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecordingSavedPayloadPublicRecordingUrls) GetMp3() string {
	if o == nil || IsNil(o.Mp3.Get()) {
		var ret string
		return ret
	}
	return *o.Mp3.Get()
}

// GetMp3Ok returns a tuple with the Mp3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecordingSavedPayloadPublicRecordingUrls) GetMp3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mp3.Get(), o.Mp3.IsSet()
}

// HasMp3 returns a boolean if a field has been set.
func (o *CallRecordingSavedPayloadPublicRecordingUrls) HasMp3() bool {
	if o != nil && o.Mp3.IsSet() {
		return true
	}

	return false
}

// SetMp3 gets a reference to the given NullableString and assigns it to the Mp3 field.
func (o *CallRecordingSavedPayloadPublicRecordingUrls) SetMp3(v string) {
	o.Mp3.Set(&v)
}
// SetMp3Nil sets the value for Mp3 to be an explicit nil
func (o *CallRecordingSavedPayloadPublicRecordingUrls) SetMp3Nil() {
	o.Mp3.Set(nil)
}

// UnsetMp3 ensures that no value is present for Mp3, not even an explicit nil
func (o *CallRecordingSavedPayloadPublicRecordingUrls) UnsetMp3() {
	o.Mp3.Unset()
}

// GetWav returns the Wav field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecordingSavedPayloadPublicRecordingUrls) GetWav() string {
	if o == nil || IsNil(o.Wav.Get()) {
		var ret string
		return ret
	}
	return *o.Wav.Get()
}

// GetWavOk returns a tuple with the Wav field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecordingSavedPayloadPublicRecordingUrls) GetWavOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wav.Get(), o.Wav.IsSet()
}

// HasWav returns a boolean if a field has been set.
func (o *CallRecordingSavedPayloadPublicRecordingUrls) HasWav() bool {
	if o != nil && o.Wav.IsSet() {
		return true
	}

	return false
}

// SetWav gets a reference to the given NullableString and assigns it to the Wav field.
func (o *CallRecordingSavedPayloadPublicRecordingUrls) SetWav(v string) {
	o.Wav.Set(&v)
}
// SetWavNil sets the value for Wav to be an explicit nil
func (o *CallRecordingSavedPayloadPublicRecordingUrls) SetWavNil() {
	o.Wav.Set(nil)
}

// UnsetWav ensures that no value is present for Wav, not even an explicit nil
func (o *CallRecordingSavedPayloadPublicRecordingUrls) UnsetWav() {
	o.Wav.Unset()
}

func (o CallRecordingSavedPayloadPublicRecordingUrls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRecordingSavedPayloadPublicRecordingUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Mp3.IsSet() {
		toSerialize["mp3"] = o.Mp3.Get()
	}
	if o.Wav.IsSet() {
		toSerialize["wav"] = o.Wav.Get()
	}
	return toSerialize, nil
}

type NullableCallRecordingSavedPayloadPublicRecordingUrls struct {
	value *CallRecordingSavedPayloadPublicRecordingUrls
	isSet bool
}

func (v NullableCallRecordingSavedPayloadPublicRecordingUrls) Get() *CallRecordingSavedPayloadPublicRecordingUrls {
	return v.value
}

func (v *NullableCallRecordingSavedPayloadPublicRecordingUrls) Set(val *CallRecordingSavedPayloadPublicRecordingUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecordingSavedPayloadPublicRecordingUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecordingSavedPayloadPublicRecordingUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecordingSavedPayloadPublicRecordingUrls(val *CallRecordingSavedPayloadPublicRecordingUrls) *NullableCallRecordingSavedPayloadPublicRecordingUrls {
	return &NullableCallRecordingSavedPayloadPublicRecordingUrls{value: val, isSet: true}
}

func (v NullableCallRecordingSavedPayloadPublicRecordingUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecordingSavedPayloadPublicRecordingUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


