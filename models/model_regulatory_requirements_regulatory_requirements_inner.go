/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RegulatoryRequirementsRegulatoryRequirementsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegulatoryRequirementsRegulatoryRequirementsInner{}

// RegulatoryRequirementsRegulatoryRequirementsInner struct for RegulatoryRequirementsRegulatoryRequirementsInner
type RegulatoryRequirementsRegulatoryRequirementsInner struct {
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty"`
	Example *string `json:"example,omitempty"`
	Name *string `json:"name,omitempty"`
	FieldType *string `json:"field_type,omitempty"`
	AcceptanceCriteria *RegulatoryRequirementsRegulatoryRequirementsInnerAcceptanceCriteria `json:"acceptance_criteria,omitempty"`
}

// NewRegulatoryRequirementsRegulatoryRequirementsInner instantiates a new RegulatoryRequirementsRegulatoryRequirementsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegulatoryRequirementsRegulatoryRequirementsInner() *RegulatoryRequirementsRegulatoryRequirementsInner {
	this := RegulatoryRequirementsRegulatoryRequirementsInner{}
	return &this
}

// NewRegulatoryRequirementsRegulatoryRequirementsInnerWithDefaults instantiates a new RegulatoryRequirementsRegulatoryRequirementsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegulatoryRequirementsRegulatoryRequirementsInnerWithDefaults() *RegulatoryRequirementsRegulatoryRequirementsInner {
	this := RegulatoryRequirementsRegulatoryRequirementsInner{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) SetId(v string) {
	o.Id = &v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetExample() string {
	if o == nil || IsNil(o.Example) {
		var ret string
		return ret
	}
	return *o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetExampleOk() (*string, bool) {
	if o == nil || IsNil(o.Example) {
		return nil, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) HasExample() bool {
	if o != nil && !IsNil(o.Example) {
		return true
	}

	return false
}

// SetExample gets a reference to the given string and assigns it to the Example field.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) SetExample(v string) {
	o.Example = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) SetName(v string) {
	o.Name = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) SetFieldType(v string) {
	o.FieldType = &v
}

// GetAcceptanceCriteria returns the AcceptanceCriteria field value if set, zero value otherwise.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetAcceptanceCriteria() RegulatoryRequirementsRegulatoryRequirementsInnerAcceptanceCriteria {
	if o == nil || IsNil(o.AcceptanceCriteria) {
		var ret RegulatoryRequirementsRegulatoryRequirementsInnerAcceptanceCriteria
		return ret
	}
	return *o.AcceptanceCriteria
}

// GetAcceptanceCriteriaOk returns a tuple with the AcceptanceCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) GetAcceptanceCriteriaOk() (*RegulatoryRequirementsRegulatoryRequirementsInnerAcceptanceCriteria, bool) {
	if o == nil || IsNil(o.AcceptanceCriteria) {
		return nil, false
	}
	return o.AcceptanceCriteria, true
}

// HasAcceptanceCriteria returns a boolean if a field has been set.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) HasAcceptanceCriteria() bool {
	if o != nil && !IsNil(o.AcceptanceCriteria) {
		return true
	}

	return false
}

// SetAcceptanceCriteria gets a reference to the given RegulatoryRequirementsRegulatoryRequirementsInnerAcceptanceCriteria and assigns it to the AcceptanceCriteria field.
func (o *RegulatoryRequirementsRegulatoryRequirementsInner) SetAcceptanceCriteria(v RegulatoryRequirementsRegulatoryRequirementsInnerAcceptanceCriteria) {
	o.AcceptanceCriteria = &v
}

func (o RegulatoryRequirementsRegulatoryRequirementsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegulatoryRequirementsRegulatoryRequirementsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Example) {
		toSerialize["example"] = o.Example
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FieldType) {
		toSerialize["field_type"] = o.FieldType
	}
	if !IsNil(o.AcceptanceCriteria) {
		toSerialize["acceptance_criteria"] = o.AcceptanceCriteria
	}
	return toSerialize, nil
}

type NullableRegulatoryRequirementsRegulatoryRequirementsInner struct {
	value *RegulatoryRequirementsRegulatoryRequirementsInner
	isSet bool
}

func (v NullableRegulatoryRequirementsRegulatoryRequirementsInner) Get() *RegulatoryRequirementsRegulatoryRequirementsInner {
	return v.value
}

func (v *NullableRegulatoryRequirementsRegulatoryRequirementsInner) Set(val *RegulatoryRequirementsRegulatoryRequirementsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRegulatoryRequirementsRegulatoryRequirementsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRegulatoryRequirementsRegulatoryRequirementsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegulatoryRequirementsRegulatoryRequirementsInner(val *RegulatoryRequirementsRegulatoryRequirementsInner) *NullableRegulatoryRequirementsRegulatoryRequirementsInner {
	return &NullableRegulatoryRequirementsRegulatoryRequirementsInner{value: val, isSet: true}
}

func (v NullableRegulatoryRequirementsRegulatoryRequirementsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegulatoryRequirementsRegulatoryRequirementsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


