/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnqueueRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnqueueRequest{}

// EnqueueRequest struct for EnqueueRequest
type EnqueueRequest struct {
	// The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it will be created.
	QueueName string `json:"queue_name"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState *string `json:"client_state,omitempty"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.
	CommandId *string `json:"command_id,omitempty"`
	// The number of seconds after which the call will be removed from the queue.
	MaxWaitTimeSecs *int32 `json:"max_wait_time_secs,omitempty"`
	// The maximum number of calls allowed in the queue at a given time. Can't be modified for an existing queue.
	MaxSize *int32 `json:"max_size,omitempty"`
}

type _EnqueueRequest EnqueueRequest

// NewEnqueueRequest instantiates a new EnqueueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnqueueRequest(queueName string) *EnqueueRequest {
	this := EnqueueRequest{}
	this.QueueName = queueName
	var maxSize int32 = 100
	this.MaxSize = &maxSize
	return &this
}

// NewEnqueueRequestWithDefaults instantiates a new EnqueueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnqueueRequestWithDefaults() *EnqueueRequest {
	this := EnqueueRequest{}
	var maxSize int32 = 100
	this.MaxSize = &maxSize
	return &this
}

// GetQueueName returns the QueueName field value
func (o *EnqueueRequest) GetQueueName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueueName
}

// GetQueueNameOk returns a tuple with the QueueName field value
// and a boolean to check if the value has been set.
func (o *EnqueueRequest) GetQueueNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueueName, true
}

// SetQueueName sets field value
func (o *EnqueueRequest) SetQueueName(v string) {
	o.QueueName = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *EnqueueRequest) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnqueueRequest) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *EnqueueRequest) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *EnqueueRequest) SetClientState(v string) {
	o.ClientState = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *EnqueueRequest) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnqueueRequest) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *EnqueueRequest) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *EnqueueRequest) SetCommandId(v string) {
	o.CommandId = &v
}

// GetMaxWaitTimeSecs returns the MaxWaitTimeSecs field value if set, zero value otherwise.
func (o *EnqueueRequest) GetMaxWaitTimeSecs() int32 {
	if o == nil || IsNil(o.MaxWaitTimeSecs) {
		var ret int32
		return ret
	}
	return *o.MaxWaitTimeSecs
}

// GetMaxWaitTimeSecsOk returns a tuple with the MaxWaitTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnqueueRequest) GetMaxWaitTimeSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxWaitTimeSecs) {
		return nil, false
	}
	return o.MaxWaitTimeSecs, true
}

// HasMaxWaitTimeSecs returns a boolean if a field has been set.
func (o *EnqueueRequest) HasMaxWaitTimeSecs() bool {
	if o != nil && !IsNil(o.MaxWaitTimeSecs) {
		return true
	}

	return false
}

// SetMaxWaitTimeSecs gets a reference to the given int32 and assigns it to the MaxWaitTimeSecs field.
func (o *EnqueueRequest) SetMaxWaitTimeSecs(v int32) {
	o.MaxWaitTimeSecs = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *EnqueueRequest) GetMaxSize() int32 {
	if o == nil || IsNil(o.MaxSize) {
		var ret int32
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnqueueRequest) GetMaxSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *EnqueueRequest) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int32 and assigns it to the MaxSize field.
func (o *EnqueueRequest) SetMaxSize(v int32) {
	o.MaxSize = &v
}

func (o EnqueueRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnqueueRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queue_name"] = o.QueueName
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CommandId) {
		toSerialize["command_id"] = o.CommandId
	}
	if !IsNil(o.MaxWaitTimeSecs) {
		toSerialize["max_wait_time_secs"] = o.MaxWaitTimeSecs
	}
	if !IsNil(o.MaxSize) {
		toSerialize["max_size"] = o.MaxSize
	}
	return toSerialize, nil
}

func (o *EnqueueRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queue_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnqueueRequest := _EnqueueRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnqueueRequest)

	if err != nil {
		return err
	}

	*o = EnqueueRequest(varEnqueueRequest)

	return err
}

type NullableEnqueueRequest struct {
	value *EnqueueRequest
	isSet bool
}

func (v NullableEnqueueRequest) Get() *EnqueueRequest {
	return v.value
}

func (v *NullableEnqueueRequest) Set(val *EnqueueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnqueueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnqueueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnqueueRequest(val *EnqueueRequest) *NullableEnqueueRequest {
	return &NullableEnqueueRequest{value: val, isSet: true}
}

func (v NullableEnqueueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnqueueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


