/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IntegrationSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationSecret{}

// IntegrationSecret struct for IntegrationSecret
type IntegrationSecret struct {
	RecordType string `json:"record_type"`
	Id string `json:"id"`
	Identifier string `json:"identifier"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _IntegrationSecret IntegrationSecret

// NewIntegrationSecret instantiates a new IntegrationSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationSecret(recordType string, id string, identifier string, createdAt time.Time) *IntegrationSecret {
	this := IntegrationSecret{}
	this.RecordType = recordType
	this.Id = id
	this.Identifier = identifier
	this.CreatedAt = createdAt
	return &this
}

// NewIntegrationSecretWithDefaults instantiates a new IntegrationSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationSecretWithDefaults() *IntegrationSecret {
	this := IntegrationSecret{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *IntegrationSecret) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *IntegrationSecret) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *IntegrationSecret) SetRecordType(v string) {
	o.RecordType = v
}

// GetId returns the Id field value
func (o *IntegrationSecret) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntegrationSecret) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IntegrationSecret) SetId(v string) {
	o.Id = v
}

// GetIdentifier returns the Identifier field value
func (o *IntegrationSecret) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *IntegrationSecret) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *IntegrationSecret) SetIdentifier(v string) {
	o.Identifier = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IntegrationSecret) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IntegrationSecret) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IntegrationSecret) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IntegrationSecret) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationSecret) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IntegrationSecret) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IntegrationSecret) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o IntegrationSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_type"] = o.RecordType
	toSerialize["id"] = o.Id
	toSerialize["identifier"] = o.Identifier
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *IntegrationSecret) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
		"id",
		"identifier",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationSecret := _IntegrationSecret{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntegrationSecret)

	if err != nil {
		return err
	}

	*o = IntegrationSecret(varIntegrationSecret)

	return err
}

type NullableIntegrationSecret struct {
	value *IntegrationSecret
	isSet bool
}

func (v NullableIntegrationSecret) Get() *IntegrationSecret {
	return v.value
}

func (v *NullableIntegrationSecret) Set(val *IntegrationSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationSecret(val *IntegrationSecret) *NullableIntegrationSecret {
	return &NullableIntegrationSecret{value: val, isSet: true}
}

func (v NullableIntegrationSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


