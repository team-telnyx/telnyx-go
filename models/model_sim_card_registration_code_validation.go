/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SIMCardRegistrationCodeValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SIMCardRegistrationCodeValidation{}

// SIMCardRegistrationCodeValidation struct for SIMCardRegistrationCodeValidation
type SIMCardRegistrationCodeValidation struct {
	RecordType *string `json:"record_type,omitempty"`
	// The 10-digit SIM card registration code
	RegistrationCode *string `json:"registration_code,omitempty"`
	// The attribute that denotes whether the code is valid or not
	Valid *bool `json:"valid,omitempty"`
	// The validation message
	InvalidDetail NullableString `json:"invalid_detail,omitempty"`
}

// NewSIMCardRegistrationCodeValidation instantiates a new SIMCardRegistrationCodeValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSIMCardRegistrationCodeValidation() *SIMCardRegistrationCodeValidation {
	this := SIMCardRegistrationCodeValidation{}
	return &this
}

// NewSIMCardRegistrationCodeValidationWithDefaults instantiates a new SIMCardRegistrationCodeValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSIMCardRegistrationCodeValidationWithDefaults() *SIMCardRegistrationCodeValidation {
	this := SIMCardRegistrationCodeValidation{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SIMCardRegistrationCodeValidation) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardRegistrationCodeValidation) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SIMCardRegistrationCodeValidation) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SIMCardRegistrationCodeValidation) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRegistrationCode returns the RegistrationCode field value if set, zero value otherwise.
func (o *SIMCardRegistrationCodeValidation) GetRegistrationCode() string {
	if o == nil || IsNil(o.RegistrationCode) {
		var ret string
		return ret
	}
	return *o.RegistrationCode
}

// GetRegistrationCodeOk returns a tuple with the RegistrationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardRegistrationCodeValidation) GetRegistrationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrationCode) {
		return nil, false
	}
	return o.RegistrationCode, true
}

// HasRegistrationCode returns a boolean if a field has been set.
func (o *SIMCardRegistrationCodeValidation) HasRegistrationCode() bool {
	if o != nil && !IsNil(o.RegistrationCode) {
		return true
	}

	return false
}

// SetRegistrationCode gets a reference to the given string and assigns it to the RegistrationCode field.
func (o *SIMCardRegistrationCodeValidation) SetRegistrationCode(v string) {
	o.RegistrationCode = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *SIMCardRegistrationCodeValidation) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SIMCardRegistrationCodeValidation) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *SIMCardRegistrationCodeValidation) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *SIMCardRegistrationCodeValidation) SetValid(v bool) {
	o.Valid = &v
}

// GetInvalidDetail returns the InvalidDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SIMCardRegistrationCodeValidation) GetInvalidDetail() string {
	if o == nil || IsNil(o.InvalidDetail.Get()) {
		var ret string
		return ret
	}
	return *o.InvalidDetail.Get()
}

// GetInvalidDetailOk returns a tuple with the InvalidDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SIMCardRegistrationCodeValidation) GetInvalidDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvalidDetail.Get(), o.InvalidDetail.IsSet()
}

// HasInvalidDetail returns a boolean if a field has been set.
func (o *SIMCardRegistrationCodeValidation) HasInvalidDetail() bool {
	if o != nil && o.InvalidDetail.IsSet() {
		return true
	}

	return false
}

// SetInvalidDetail gets a reference to the given NullableString and assigns it to the InvalidDetail field.
func (o *SIMCardRegistrationCodeValidation) SetInvalidDetail(v string) {
	o.InvalidDetail.Set(&v)
}
// SetInvalidDetailNil sets the value for InvalidDetail to be an explicit nil
func (o *SIMCardRegistrationCodeValidation) SetInvalidDetailNil() {
	o.InvalidDetail.Set(nil)
}

// UnsetInvalidDetail ensures that no value is present for InvalidDetail, not even an explicit nil
func (o *SIMCardRegistrationCodeValidation) UnsetInvalidDetail() {
	o.InvalidDetail.Unset()
}

func (o SIMCardRegistrationCodeValidation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SIMCardRegistrationCodeValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.RegistrationCode) {
		toSerialize["registration_code"] = o.RegistrationCode
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	if o.InvalidDetail.IsSet() {
		toSerialize["invalid_detail"] = o.InvalidDetail.Get()
	}
	return toSerialize, nil
}

type NullableSIMCardRegistrationCodeValidation struct {
	value *SIMCardRegistrationCodeValidation
	isSet bool
}

func (v NullableSIMCardRegistrationCodeValidation) Get() *SIMCardRegistrationCodeValidation {
	return v.value
}

func (v *NullableSIMCardRegistrationCodeValidation) Set(val *SIMCardRegistrationCodeValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableSIMCardRegistrationCodeValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableSIMCardRegistrationCodeValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSIMCardRegistrationCodeValidation(val *SIMCardRegistrationCodeValidation) *NullableSIMCardRegistrationCodeValidation {
	return &NullableSIMCardRegistrationCodeValidation{value: val, isSet: true}
}

func (v NullableSIMCardRegistrationCodeValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSIMCardRegistrationCodeValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


