/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the SubNumberOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubNumberOrder{}

// SubNumberOrder struct for SubNumberOrder
type SubNumberOrder struct {
	Id *string `json:"id,omitempty"`
	OrderRequestId *string `json:"order_request_id,omitempty"`
	CountryCode *string `json:"country_code,omitempty"`
	PhoneNumberType *string `json:"phone_number_type,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	RegulatoryRequirements []SubNumberOrderRegulatoryRequirement `json:"regulatory_requirements,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
	// The count of phone numbers in the number order.
	PhoneNumbersCount *int32 `json:"phone_numbers_count,omitempty"`
	// An ISO 8901 datetime string denoting when the number order was created.
	CreatedAt *string `json:"created_at,omitempty"`
	// An ISO 8901 datetime string for when the number order was updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// True if all requirements are met for every phone number, false otherwise.
	RequirementsMet *bool `json:"requirements_met,omitempty"`
	// The status of the order.
	Status *string `json:"status,omitempty"`
	// A customer reference string for customer look ups.
	CustomerReference *string `json:"customer_reference,omitempty"`
	// True if the sub number order is a block sub number order
	IsBlockSubNumberOrder *bool `json:"is_block_sub_number_order,omitempty"`
}

// NewSubNumberOrder instantiates a new SubNumberOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubNumberOrder() *SubNumberOrder {
	this := SubNumberOrder{}
	return &this
}

// NewSubNumberOrderWithDefaults instantiates a new SubNumberOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubNumberOrderWithDefaults() *SubNumberOrder {
	this := SubNumberOrder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubNumberOrder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubNumberOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubNumberOrder) SetId(v string) {
	o.Id = &v
}

// GetOrderRequestId returns the OrderRequestId field value if set, zero value otherwise.
func (o *SubNumberOrder) GetOrderRequestId() string {
	if o == nil || IsNil(o.OrderRequestId) {
		var ret string
		return ret
	}
	return *o.OrderRequestId
}

// GetOrderRequestIdOk returns a tuple with the OrderRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetOrderRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderRequestId) {
		return nil, false
	}
	return o.OrderRequestId, true
}

// HasOrderRequestId returns a boolean if a field has been set.
func (o *SubNumberOrder) HasOrderRequestId() bool {
	if o != nil && !IsNil(o.OrderRequestId) {
		return true
	}

	return false
}

// SetOrderRequestId gets a reference to the given string and assigns it to the OrderRequestId field.
func (o *SubNumberOrder) SetOrderRequestId(v string) {
	o.OrderRequestId = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *SubNumberOrder) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *SubNumberOrder) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *SubNumberOrder) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetPhoneNumberType returns the PhoneNumberType field value if set, zero value otherwise.
func (o *SubNumberOrder) GetPhoneNumberType() string {
	if o == nil || IsNil(o.PhoneNumberType) {
		var ret string
		return ret
	}
	return *o.PhoneNumberType
}

// GetPhoneNumberTypeOk returns a tuple with the PhoneNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetPhoneNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumberType) {
		return nil, false
	}
	return o.PhoneNumberType, true
}

// HasPhoneNumberType returns a boolean if a field has been set.
func (o *SubNumberOrder) HasPhoneNumberType() bool {
	if o != nil && !IsNil(o.PhoneNumberType) {
		return true
	}

	return false
}

// SetPhoneNumberType gets a reference to the given string and assigns it to the PhoneNumberType field.
func (o *SubNumberOrder) SetPhoneNumberType(v string) {
	o.PhoneNumberType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SubNumberOrder) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SubNumberOrder) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SubNumberOrder) SetUserId(v string) {
	o.UserId = &v
}

// GetRegulatoryRequirements returns the RegulatoryRequirements field value if set, zero value otherwise.
func (o *SubNumberOrder) GetRegulatoryRequirements() []SubNumberOrderRegulatoryRequirement {
	if o == nil || IsNil(o.RegulatoryRequirements) {
		var ret []SubNumberOrderRegulatoryRequirement
		return ret
	}
	return o.RegulatoryRequirements
}

// GetRegulatoryRequirementsOk returns a tuple with the RegulatoryRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetRegulatoryRequirementsOk() ([]SubNumberOrderRegulatoryRequirement, bool) {
	if o == nil || IsNil(o.RegulatoryRequirements) {
		return nil, false
	}
	return o.RegulatoryRequirements, true
}

// HasRegulatoryRequirements returns a boolean if a field has been set.
func (o *SubNumberOrder) HasRegulatoryRequirements() bool {
	if o != nil && !IsNil(o.RegulatoryRequirements) {
		return true
	}

	return false
}

// SetRegulatoryRequirements gets a reference to the given []SubNumberOrderRegulatoryRequirement and assigns it to the RegulatoryRequirements field.
func (o *SubNumberOrder) SetRegulatoryRequirements(v []SubNumberOrderRegulatoryRequirement) {
	o.RegulatoryRequirements = v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *SubNumberOrder) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *SubNumberOrder) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *SubNumberOrder) SetRecordType(v string) {
	o.RecordType = &v
}

// GetPhoneNumbersCount returns the PhoneNumbersCount field value if set, zero value otherwise.
func (o *SubNumberOrder) GetPhoneNumbersCount() int32 {
	if o == nil || IsNil(o.PhoneNumbersCount) {
		var ret int32
		return ret
	}
	return *o.PhoneNumbersCount
}

// GetPhoneNumbersCountOk returns a tuple with the PhoneNumbersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetPhoneNumbersCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PhoneNumbersCount) {
		return nil, false
	}
	return o.PhoneNumbersCount, true
}

// HasPhoneNumbersCount returns a boolean if a field has been set.
func (o *SubNumberOrder) HasPhoneNumbersCount() bool {
	if o != nil && !IsNil(o.PhoneNumbersCount) {
		return true
	}

	return false
}

// SetPhoneNumbersCount gets a reference to the given int32 and assigns it to the PhoneNumbersCount field.
func (o *SubNumberOrder) SetPhoneNumbersCount(v int32) {
	o.PhoneNumbersCount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SubNumberOrder) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SubNumberOrder) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SubNumberOrder) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubNumberOrder) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubNumberOrder) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *SubNumberOrder) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetRequirementsMet returns the RequirementsMet field value if set, zero value otherwise.
func (o *SubNumberOrder) GetRequirementsMet() bool {
	if o == nil || IsNil(o.RequirementsMet) {
		var ret bool
		return ret
	}
	return *o.RequirementsMet
}

// GetRequirementsMetOk returns a tuple with the RequirementsMet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetRequirementsMetOk() (*bool, bool) {
	if o == nil || IsNil(o.RequirementsMet) {
		return nil, false
	}
	return o.RequirementsMet, true
}

// HasRequirementsMet returns a boolean if a field has been set.
func (o *SubNumberOrder) HasRequirementsMet() bool {
	if o != nil && !IsNil(o.RequirementsMet) {
		return true
	}

	return false
}

// SetRequirementsMet gets a reference to the given bool and assigns it to the RequirementsMet field.
func (o *SubNumberOrder) SetRequirementsMet(v bool) {
	o.RequirementsMet = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SubNumberOrder) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SubNumberOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SubNumberOrder) SetStatus(v string) {
	o.Status = &v
}

// GetCustomerReference returns the CustomerReference field value if set, zero value otherwise.
func (o *SubNumberOrder) GetCustomerReference() string {
	if o == nil || IsNil(o.CustomerReference) {
		var ret string
		return ret
	}
	return *o.CustomerReference
}

// GetCustomerReferenceOk returns a tuple with the CustomerReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetCustomerReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerReference) {
		return nil, false
	}
	return o.CustomerReference, true
}

// HasCustomerReference returns a boolean if a field has been set.
func (o *SubNumberOrder) HasCustomerReference() bool {
	if o != nil && !IsNil(o.CustomerReference) {
		return true
	}

	return false
}

// SetCustomerReference gets a reference to the given string and assigns it to the CustomerReference field.
func (o *SubNumberOrder) SetCustomerReference(v string) {
	o.CustomerReference = &v
}

// GetIsBlockSubNumberOrder returns the IsBlockSubNumberOrder field value if set, zero value otherwise.
func (o *SubNumberOrder) GetIsBlockSubNumberOrder() bool {
	if o == nil || IsNil(o.IsBlockSubNumberOrder) {
		var ret bool
		return ret
	}
	return *o.IsBlockSubNumberOrder
}

// GetIsBlockSubNumberOrderOk returns a tuple with the IsBlockSubNumberOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubNumberOrder) GetIsBlockSubNumberOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBlockSubNumberOrder) {
		return nil, false
	}
	return o.IsBlockSubNumberOrder, true
}

// HasIsBlockSubNumberOrder returns a boolean if a field has been set.
func (o *SubNumberOrder) HasIsBlockSubNumberOrder() bool {
	if o != nil && !IsNil(o.IsBlockSubNumberOrder) {
		return true
	}

	return false
}

// SetIsBlockSubNumberOrder gets a reference to the given bool and assigns it to the IsBlockSubNumberOrder field.
func (o *SubNumberOrder) SetIsBlockSubNumberOrder(v bool) {
	o.IsBlockSubNumberOrder = &v
}

func (o SubNumberOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubNumberOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrderRequestId) {
		toSerialize["order_request_id"] = o.OrderRequestId
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.PhoneNumberType) {
		toSerialize["phone_number_type"] = o.PhoneNumberType
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.RegulatoryRequirements) {
		toSerialize["regulatory_requirements"] = o.RegulatoryRequirements
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.PhoneNumbersCount) {
		toSerialize["phone_numbers_count"] = o.PhoneNumbersCount
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.RequirementsMet) {
		toSerialize["requirements_met"] = o.RequirementsMet
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CustomerReference) {
		toSerialize["customer_reference"] = o.CustomerReference
	}
	if !IsNil(o.IsBlockSubNumberOrder) {
		toSerialize["is_block_sub_number_order"] = o.IsBlockSubNumberOrder
	}
	return toSerialize, nil
}

type NullableSubNumberOrder struct {
	value *SubNumberOrder
	isSet bool
}

func (v NullableSubNumberOrder) Get() *SubNumberOrder {
	return v.value
}

func (v *NullableSubNumberOrder) Set(val *SubNumberOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableSubNumberOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableSubNumberOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubNumberOrder(val *SubNumberOrder) *NullableSubNumberOrder {
	return &NullableSubNumberOrder{value: val, isSet: true}
}

func (v NullableSubNumberOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubNumberOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


