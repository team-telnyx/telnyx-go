/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthenticationProviderCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationProviderCreate{}

// AuthenticationProviderCreate struct for AuthenticationProviderCreate
type AuthenticationProviderCreate struct {
	// The name associated with the authentication provider.
	Name string `json:"name"`
	// The short name associated with the authentication provider. This must be unique and URL-friendly, as it's going to be part of the login URL.
	ShortName string `json:"short_name"`
	// The active status of the authentication provider
	Active *bool `json:"active,omitempty"`
	Settings Settings `json:"settings"`
	// The URL for the identity provider metadata file to populate the settings automatically. If the settings attribute is provided, that will be used instead.
	SettingsUrl *string `json:"settings_url,omitempty"`
}

type _AuthenticationProviderCreate AuthenticationProviderCreate

// NewAuthenticationProviderCreate instantiates a new AuthenticationProviderCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationProviderCreate(name string, shortName string, settings Settings) *AuthenticationProviderCreate {
	this := AuthenticationProviderCreate{}
	this.Name = name
	this.ShortName = shortName
	var active bool = true
	this.Active = &active
	this.Settings = settings
	return &this
}

// NewAuthenticationProviderCreateWithDefaults instantiates a new AuthenticationProviderCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationProviderCreateWithDefaults() *AuthenticationProviderCreate {
	this := AuthenticationProviderCreate{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetName returns the Name field value
func (o *AuthenticationProviderCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthenticationProviderCreate) SetName(v string) {
	o.Name = v
}

// GetShortName returns the ShortName field value
func (o *AuthenticationProviderCreate) GetShortName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderCreate) GetShortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortName, true
}

// SetShortName sets field value
func (o *AuthenticationProviderCreate) SetShortName(v string) {
	o.ShortName = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AuthenticationProviderCreate) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderCreate) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AuthenticationProviderCreate) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *AuthenticationProviderCreate) SetActive(v bool) {
	o.Active = &v
}

// GetSettings returns the Settings field value
func (o *AuthenticationProviderCreate) GetSettings() Settings {
	if o == nil {
		var ret Settings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderCreate) GetSettingsOk() (*Settings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *AuthenticationProviderCreate) SetSettings(v Settings) {
	o.Settings = v
}

// GetSettingsUrl returns the SettingsUrl field value if set, zero value otherwise.
func (o *AuthenticationProviderCreate) GetSettingsUrl() string {
	if o == nil || IsNil(o.SettingsUrl) {
		var ret string
		return ret
	}
	return *o.SettingsUrl
}

// GetSettingsUrlOk returns a tuple with the SettingsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderCreate) GetSettingsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SettingsUrl) {
		return nil, false
	}
	return o.SettingsUrl, true
}

// HasSettingsUrl returns a boolean if a field has been set.
func (o *AuthenticationProviderCreate) HasSettingsUrl() bool {
	if o != nil && !IsNil(o.SettingsUrl) {
		return true
	}

	return false
}

// SetSettingsUrl gets a reference to the given string and assigns it to the SettingsUrl field.
func (o *AuthenticationProviderCreate) SetSettingsUrl(v string) {
	o.SettingsUrl = &v
}

func (o AuthenticationProviderCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationProviderCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["short_name"] = o.ShortName
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["settings"] = o.Settings
	if !IsNil(o.SettingsUrl) {
		toSerialize["settings_url"] = o.SettingsUrl
	}
	return toSerialize, nil
}

func (o *AuthenticationProviderCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"short_name",
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationProviderCreate := _AuthenticationProviderCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthenticationProviderCreate)

	if err != nil {
		return err
	}

	*o = AuthenticationProviderCreate(varAuthenticationProviderCreate)

	return err
}

type NullableAuthenticationProviderCreate struct {
	value *AuthenticationProviderCreate
	isSet bool
}

func (v NullableAuthenticationProviderCreate) Get() *AuthenticationProviderCreate {
	return v.value
}

func (v *NullableAuthenticationProviderCreate) Set(val *AuthenticationProviderCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviderCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviderCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviderCreate(val *AuthenticationProviderCreate) *NullableAuthenticationProviderCreate {
	return &NullableAuthenticationProviderCreate{value: val, isSet: true}
}

func (v NullableAuthenticationProviderCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviderCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


