/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// Direction The direction of the fax.
type Direction string

// List of Direction
const (
	INBOUND Direction = "inbound"
	OUTBOUND Direction = "outbound"
)

// All allowed values of Direction enum
var AllowedDirectionEnumValues = []Direction{
	"inbound",
	"outbound",
}

func (v *Direction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Direction(value)
	for _, existing := range AllowedDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Direction", value)
}

// NewDirectionFromValue returns a pointer to a valid Direction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectionFromValue(v string) (*Direction, error) {
	ev := Direction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Direction: valid values are %v", v, AllowedDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Direction) IsValid() bool {
	for _, existing := range AllowedDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Direction value
func (v Direction) Ptr() *Direction {
	return &v
}

type NullableDirection struct {
	value *Direction
	isSet bool
}

func (v NullableDirection) Get() *Direction {
	return v.value
}

func (v *NullableDirection) Set(val *Direction) {
	v.value = val
	v.isSet = true
}

func (v NullableDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirection(val *Direction) *NullableDirection {
	return &NullableDirection{value: val, isSet: true}
}

func (v NullableDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

