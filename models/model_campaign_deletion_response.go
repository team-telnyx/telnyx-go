/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CampaignDeletionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignDeletionResponse{}

// CampaignDeletionResponse struct for CampaignDeletionResponse
type CampaignDeletionResponse struct {
	Time float32 `json:"time"`
	RecordType *string `json:"record_type,omitempty"`
	Message *string `json:"message,omitempty"`
}

type _CampaignDeletionResponse CampaignDeletionResponse

// NewCampaignDeletionResponse instantiates a new CampaignDeletionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignDeletionResponse(time float32) *CampaignDeletionResponse {
	this := CampaignDeletionResponse{}
	this.Time = time
	return &this
}

// NewCampaignDeletionResponseWithDefaults instantiates a new CampaignDeletionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignDeletionResponseWithDefaults() *CampaignDeletionResponse {
	this := CampaignDeletionResponse{}
	return &this
}

// GetTime returns the Time field value
func (o *CampaignDeletionResponse) GetTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *CampaignDeletionResponse) GetTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *CampaignDeletionResponse) SetTime(v float32) {
	o.Time = v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *CampaignDeletionResponse) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignDeletionResponse) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *CampaignDeletionResponse) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *CampaignDeletionResponse) SetRecordType(v string) {
	o.RecordType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CampaignDeletionResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignDeletionResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CampaignDeletionResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CampaignDeletionResponse) SetMessage(v string) {
	o.Message = &v
}

func (o CampaignDeletionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignDeletionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["time"] = o.Time
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

func (o *CampaignDeletionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCampaignDeletionResponse := _CampaignDeletionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCampaignDeletionResponse)

	if err != nil {
		return err
	}

	*o = CampaignDeletionResponse(varCampaignDeletionResponse)

	return err
}

type NullableCampaignDeletionResponse struct {
	value *CampaignDeletionResponse
	isSet bool
}

func (v NullableCampaignDeletionResponse) Get() *CampaignDeletionResponse {
	return v.value
}

func (v *NullableCampaignDeletionResponse) Set(val *CampaignDeletionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignDeletionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignDeletionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignDeletionResponse(val *CampaignDeletionResponse) *NullableCampaignDeletionResponse {
	return &NullableCampaignDeletionResponse{value: val, isSet: true}
}

func (v NullableCampaignDeletionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignDeletionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


