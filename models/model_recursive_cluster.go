/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecursiveCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecursiveCluster{}

// RecursiveCluster struct for RecursiveCluster
type RecursiveCluster struct {
	ClusterId string `json:"cluster_id"`
	ClusterHeader *string `json:"cluster_header,omitempty"`
	ClusterSummary string `json:"cluster_summary"`
	Nodes []ClusterNode `json:"nodes,omitempty"`
	TotalNumberOfNodes int32 `json:"total_number_of_nodes"`
	Subclusters []RecursiveCluster `json:"subclusters,omitempty"`
}

type _RecursiveCluster RecursiveCluster

// NewRecursiveCluster instantiates a new RecursiveCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecursiveCluster(clusterId string, clusterSummary string, totalNumberOfNodes int32) *RecursiveCluster {
	this := RecursiveCluster{}
	this.ClusterId = clusterId
	this.ClusterSummary = clusterSummary
	this.TotalNumberOfNodes = totalNumberOfNodes
	return &this
}

// NewRecursiveClusterWithDefaults instantiates a new RecursiveCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecursiveClusterWithDefaults() *RecursiveCluster {
	this := RecursiveCluster{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *RecursiveCluster) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *RecursiveCluster) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *RecursiveCluster) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterHeader returns the ClusterHeader field value if set, zero value otherwise.
func (o *RecursiveCluster) GetClusterHeader() string {
	if o == nil || IsNil(o.ClusterHeader) {
		var ret string
		return ret
	}
	return *o.ClusterHeader
}

// GetClusterHeaderOk returns a tuple with the ClusterHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecursiveCluster) GetClusterHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterHeader) {
		return nil, false
	}
	return o.ClusterHeader, true
}

// HasClusterHeader returns a boolean if a field has been set.
func (o *RecursiveCluster) HasClusterHeader() bool {
	if o != nil && !IsNil(o.ClusterHeader) {
		return true
	}

	return false
}

// SetClusterHeader gets a reference to the given string and assigns it to the ClusterHeader field.
func (o *RecursiveCluster) SetClusterHeader(v string) {
	o.ClusterHeader = &v
}

// GetClusterSummary returns the ClusterSummary field value
func (o *RecursiveCluster) GetClusterSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterSummary
}

// GetClusterSummaryOk returns a tuple with the ClusterSummary field value
// and a boolean to check if the value has been set.
func (o *RecursiveCluster) GetClusterSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterSummary, true
}

// SetClusterSummary sets field value
func (o *RecursiveCluster) SetClusterSummary(v string) {
	o.ClusterSummary = v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *RecursiveCluster) GetNodes() []ClusterNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []ClusterNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecursiveCluster) GetNodesOk() ([]ClusterNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *RecursiveCluster) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []ClusterNode and assigns it to the Nodes field.
func (o *RecursiveCluster) SetNodes(v []ClusterNode) {
	o.Nodes = v
}

// GetTotalNumberOfNodes returns the TotalNumberOfNodes field value
func (o *RecursiveCluster) GetTotalNumberOfNodes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalNumberOfNodes
}

// GetTotalNumberOfNodesOk returns a tuple with the TotalNumberOfNodes field value
// and a boolean to check if the value has been set.
func (o *RecursiveCluster) GetTotalNumberOfNodesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalNumberOfNodes, true
}

// SetTotalNumberOfNodes sets field value
func (o *RecursiveCluster) SetTotalNumberOfNodes(v int32) {
	o.TotalNumberOfNodes = v
}

// GetSubclusters returns the Subclusters field value if set, zero value otherwise.
func (o *RecursiveCluster) GetSubclusters() []RecursiveCluster {
	if o == nil || IsNil(o.Subclusters) {
		var ret []RecursiveCluster
		return ret
	}
	return o.Subclusters
}

// GetSubclustersOk returns a tuple with the Subclusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecursiveCluster) GetSubclustersOk() ([]RecursiveCluster, bool) {
	if o == nil || IsNil(o.Subclusters) {
		return nil, false
	}
	return o.Subclusters, true
}

// HasSubclusters returns a boolean if a field has been set.
func (o *RecursiveCluster) HasSubclusters() bool {
	if o != nil && !IsNil(o.Subclusters) {
		return true
	}

	return false
}

// SetSubclusters gets a reference to the given []RecursiveCluster and assigns it to the Subclusters field.
func (o *RecursiveCluster) SetSubclusters(v []RecursiveCluster) {
	o.Subclusters = v
}

func (o RecursiveCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecursiveCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster_id"] = o.ClusterId
	if !IsNil(o.ClusterHeader) {
		toSerialize["cluster_header"] = o.ClusterHeader
	}
	toSerialize["cluster_summary"] = o.ClusterSummary
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	toSerialize["total_number_of_nodes"] = o.TotalNumberOfNodes
	if !IsNil(o.Subclusters) {
		toSerialize["subclusters"] = o.Subclusters
	}
	return toSerialize, nil
}

func (o *RecursiveCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster_id",
		"cluster_summary",
		"total_number_of_nodes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecursiveCluster := _RecursiveCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecursiveCluster)

	if err != nil {
		return err
	}

	*o = RecursiveCluster(varRecursiveCluster)

	return err
}

type NullableRecursiveCluster struct {
	value *RecursiveCluster
	isSet bool
}

func (v NullableRecursiveCluster) Get() *RecursiveCluster {
	return v.value
}

func (v *NullableRecursiveCluster) Set(val *RecursiveCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableRecursiveCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableRecursiveCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecursiveCluster(val *RecursiveCluster) *NullableRecursiveCluster {
	return &NullableRecursiveCluster{value: val, isSet: true}
}

func (v NullableRecursiveCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecursiveCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


