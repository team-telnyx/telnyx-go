/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MigrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MigrationParams{}

// MigrationParams struct for MigrationParams
type MigrationParams struct {
	// Unique identifier for the data migration.
	Id *string `json:"id,omitempty"`
	// ID of the Migration Source from which to migrate data.
	SourceId string `json:"source_id"`
	// Bucket name to migrate the data into. Will default to the same name as the `source_bucket_name`.
	TargetBucketName string `json:"target_bucket_name"`
	// Telnyx Cloud Storage region to migrate the data to.
	TargetRegion string `json:"target_region"`
	// If true, will continue to poll the source bucket to ensure new data is continually migrated over.
	Refresh *bool `json:"refresh,omitempty"`
	// Time when data migration was last copied from the source.
	LastCopy *time.Time `json:"last_copy,omitempty"`
	// Status of the migration.
	Status *string `json:"status,omitempty"`
	// Total amount of data found in source bucket to migrate.
	BytesToMigrate *int32 `json:"bytes_to_migrate,omitempty"`
	// Total amount of data that has been succesfully migrated.
	BytesMigrated *int32 `json:"bytes_migrated,omitempty"`
	// Current speed of the migration.
	Speed *int32 `json:"speed,omitempty"`
	// Estimated time the migration will complete.
	Eta *time.Time `json:"eta,omitempty"`
	// Time when data migration was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

type _MigrationParams MigrationParams

// NewMigrationParams instantiates a new MigrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigrationParams(sourceId string, targetBucketName string, targetRegion string) *MigrationParams {
	this := MigrationParams{}
	this.SourceId = sourceId
	this.TargetBucketName = targetBucketName
	this.TargetRegion = targetRegion
	return &this
}

// NewMigrationParamsWithDefaults instantiates a new MigrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationParamsWithDefaults() *MigrationParams {
	this := MigrationParams{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MigrationParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MigrationParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MigrationParams) SetId(v string) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value
func (o *MigrationParams) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *MigrationParams) SetSourceId(v string) {
	o.SourceId = v
}

// GetTargetBucketName returns the TargetBucketName field value
func (o *MigrationParams) GetTargetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetBucketName
}

// GetTargetBucketNameOk returns a tuple with the TargetBucketName field value
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetTargetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetBucketName, true
}

// SetTargetBucketName sets field value
func (o *MigrationParams) SetTargetBucketName(v string) {
	o.TargetBucketName = v
}

// GetTargetRegion returns the TargetRegion field value
func (o *MigrationParams) GetTargetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetRegion
}

// GetTargetRegionOk returns a tuple with the TargetRegion field value
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetTargetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetRegion, true
}

// SetTargetRegion sets field value
func (o *MigrationParams) SetTargetRegion(v string) {
	o.TargetRegion = v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *MigrationParams) GetRefresh() bool {
	if o == nil || IsNil(o.Refresh) {
		var ret bool
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetRefreshOk() (*bool, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *MigrationParams) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given bool and assigns it to the Refresh field.
func (o *MigrationParams) SetRefresh(v bool) {
	o.Refresh = &v
}

// GetLastCopy returns the LastCopy field value if set, zero value otherwise.
func (o *MigrationParams) GetLastCopy() time.Time {
	if o == nil || IsNil(o.LastCopy) {
		var ret time.Time
		return ret
	}
	return *o.LastCopy
}

// GetLastCopyOk returns a tuple with the LastCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetLastCopyOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastCopy) {
		return nil, false
	}
	return o.LastCopy, true
}

// HasLastCopy returns a boolean if a field has been set.
func (o *MigrationParams) HasLastCopy() bool {
	if o != nil && !IsNil(o.LastCopy) {
		return true
	}

	return false
}

// SetLastCopy gets a reference to the given time.Time and assigns it to the LastCopy field.
func (o *MigrationParams) SetLastCopy(v time.Time) {
	o.LastCopy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MigrationParams) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MigrationParams) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MigrationParams) SetStatus(v string) {
	o.Status = &v
}

// GetBytesToMigrate returns the BytesToMigrate field value if set, zero value otherwise.
func (o *MigrationParams) GetBytesToMigrate() int32 {
	if o == nil || IsNil(o.BytesToMigrate) {
		var ret int32
		return ret
	}
	return *o.BytesToMigrate
}

// GetBytesToMigrateOk returns a tuple with the BytesToMigrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetBytesToMigrateOk() (*int32, bool) {
	if o == nil || IsNil(o.BytesToMigrate) {
		return nil, false
	}
	return o.BytesToMigrate, true
}

// HasBytesToMigrate returns a boolean if a field has been set.
func (o *MigrationParams) HasBytesToMigrate() bool {
	if o != nil && !IsNil(o.BytesToMigrate) {
		return true
	}

	return false
}

// SetBytesToMigrate gets a reference to the given int32 and assigns it to the BytesToMigrate field.
func (o *MigrationParams) SetBytesToMigrate(v int32) {
	o.BytesToMigrate = &v
}

// GetBytesMigrated returns the BytesMigrated field value if set, zero value otherwise.
func (o *MigrationParams) GetBytesMigrated() int32 {
	if o == nil || IsNil(o.BytesMigrated) {
		var ret int32
		return ret
	}
	return *o.BytesMigrated
}

// GetBytesMigratedOk returns a tuple with the BytesMigrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetBytesMigratedOk() (*int32, bool) {
	if o == nil || IsNil(o.BytesMigrated) {
		return nil, false
	}
	return o.BytesMigrated, true
}

// HasBytesMigrated returns a boolean if a field has been set.
func (o *MigrationParams) HasBytesMigrated() bool {
	if o != nil && !IsNil(o.BytesMigrated) {
		return true
	}

	return false
}

// SetBytesMigrated gets a reference to the given int32 and assigns it to the BytesMigrated field.
func (o *MigrationParams) SetBytesMigrated(v int32) {
	o.BytesMigrated = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *MigrationParams) GetSpeed() int32 {
	if o == nil || IsNil(o.Speed) {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *MigrationParams) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *MigrationParams) SetSpeed(v int32) {
	o.Speed = &v
}

// GetEta returns the Eta field value if set, zero value otherwise.
func (o *MigrationParams) GetEta() time.Time {
	if o == nil || IsNil(o.Eta) {
		var ret time.Time
		return ret
	}
	return *o.Eta
}

// GetEtaOk returns a tuple with the Eta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetEtaOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Eta) {
		return nil, false
	}
	return o.Eta, true
}

// HasEta returns a boolean if a field has been set.
func (o *MigrationParams) HasEta() bool {
	if o != nil && !IsNil(o.Eta) {
		return true
	}

	return false
}

// SetEta gets a reference to the given time.Time and assigns it to the Eta field.
func (o *MigrationParams) SetEta(v time.Time) {
	o.Eta = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MigrationParams) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationParams) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MigrationParams) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *MigrationParams) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o MigrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MigrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["source_id"] = o.SourceId
	toSerialize["target_bucket_name"] = o.TargetBucketName
	toSerialize["target_region"] = o.TargetRegion
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !IsNil(o.LastCopy) {
		toSerialize["last_copy"] = o.LastCopy
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.BytesToMigrate) {
		toSerialize["bytes_to_migrate"] = o.BytesToMigrate
	}
	if !IsNil(o.BytesMigrated) {
		toSerialize["bytes_migrated"] = o.BytesMigrated
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Eta) {
		toSerialize["eta"] = o.Eta
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

func (o *MigrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_id",
		"target_bucket_name",
		"target_region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMigrationParams := _MigrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMigrationParams)

	if err != nil {
		return err
	}

	*o = MigrationParams(varMigrationParams)

	return err
}

type NullableMigrationParams struct {
	value *MigrationParams
	isSet bool
}

func (v NullableMigrationParams) Get() *MigrationParams {
	return v.value
}

func (v *NullableMigrationParams) Set(val *MigrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrationParams(val *MigrationParams) *NullableMigrationParams {
	return &NullableMigrationParams{value: val, isSet: true}
}

func (v NullableMigrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


