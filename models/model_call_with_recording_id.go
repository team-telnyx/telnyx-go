/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CallWithRecordingId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallWithRecordingId{}

// CallWithRecordingId struct for CallWithRecordingId
type CallWithRecordingId struct {
	RecordType string `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call
	CallSessionId string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events
	CallLegId string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlId string `json:"call_control_id"`
	// Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).
	IsAlive bool `json:"is_alive"`
	// State received from a command.
	ClientState *string `json:"client_state,omitempty"`
	// Indicates the duration of the call in seconds
	CallDuration *int32 `json:"call_duration,omitempty"`
	// The ID of the recording. Only present when the record parameter is set to record-from-answer.
	RecordingId *string `json:"recording_id,omitempty"`
}

type _CallWithRecordingId CallWithRecordingId

// NewCallWithRecordingId instantiates a new CallWithRecordingId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallWithRecordingId(recordType string, callSessionId string, callLegId string, callControlId string, isAlive bool) *CallWithRecordingId {
	this := CallWithRecordingId{}
	this.RecordType = recordType
	this.CallSessionId = callSessionId
	this.CallLegId = callLegId
	this.CallControlId = callControlId
	this.IsAlive = isAlive
	return &this
}

// NewCallWithRecordingIdWithDefaults instantiates a new CallWithRecordingId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallWithRecordingIdWithDefaults() *CallWithRecordingId {
	this := CallWithRecordingId{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *CallWithRecordingId) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *CallWithRecordingId) SetRecordType(v string) {
	o.RecordType = v
}

// GetCallSessionId returns the CallSessionId field value
func (o *CallWithRecordingId) GetCallSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallSessionId
}

// GetCallSessionIdOk returns a tuple with the CallSessionId field value
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetCallSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallSessionId, true
}

// SetCallSessionId sets field value
func (o *CallWithRecordingId) SetCallSessionId(v string) {
	o.CallSessionId = v
}

// GetCallLegId returns the CallLegId field value
func (o *CallWithRecordingId) GetCallLegId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallLegId
}

// GetCallLegIdOk returns a tuple with the CallLegId field value
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetCallLegIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallLegId, true
}

// SetCallLegId sets field value
func (o *CallWithRecordingId) SetCallLegId(v string) {
	o.CallLegId = v
}

// GetCallControlId returns the CallControlId field value
func (o *CallWithRecordingId) GetCallControlId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallControlId
}

// GetCallControlIdOk returns a tuple with the CallControlId field value
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetCallControlIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallControlId, true
}

// SetCallControlId sets field value
func (o *CallWithRecordingId) SetCallControlId(v string) {
	o.CallControlId = v
}

// GetIsAlive returns the IsAlive field value
func (o *CallWithRecordingId) GetIsAlive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAlive
}

// GetIsAliveOk returns a tuple with the IsAlive field value
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetIsAliveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAlive, true
}

// SetIsAlive sets field value
func (o *CallWithRecordingId) SetIsAlive(v bool) {
	o.IsAlive = v
}

// GetClientState returns the ClientState field value if set, zero value otherwise.
func (o *CallWithRecordingId) GetClientState() string {
	if o == nil || IsNil(o.ClientState) {
		var ret string
		return ret
	}
	return *o.ClientState
}

// GetClientStateOk returns a tuple with the ClientState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetClientStateOk() (*string, bool) {
	if o == nil || IsNil(o.ClientState) {
		return nil, false
	}
	return o.ClientState, true
}

// HasClientState returns a boolean if a field has been set.
func (o *CallWithRecordingId) HasClientState() bool {
	if o != nil && !IsNil(o.ClientState) {
		return true
	}

	return false
}

// SetClientState gets a reference to the given string and assigns it to the ClientState field.
func (o *CallWithRecordingId) SetClientState(v string) {
	o.ClientState = &v
}

// GetCallDuration returns the CallDuration field value if set, zero value otherwise.
func (o *CallWithRecordingId) GetCallDuration() int32 {
	if o == nil || IsNil(o.CallDuration) {
		var ret int32
		return ret
	}
	return *o.CallDuration
}

// GetCallDurationOk returns a tuple with the CallDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetCallDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.CallDuration) {
		return nil, false
	}
	return o.CallDuration, true
}

// HasCallDuration returns a boolean if a field has been set.
func (o *CallWithRecordingId) HasCallDuration() bool {
	if o != nil && !IsNil(o.CallDuration) {
		return true
	}

	return false
}

// SetCallDuration gets a reference to the given int32 and assigns it to the CallDuration field.
func (o *CallWithRecordingId) SetCallDuration(v int32) {
	o.CallDuration = &v
}

// GetRecordingId returns the RecordingId field value if set, zero value otherwise.
func (o *CallWithRecordingId) GetRecordingId() string {
	if o == nil || IsNil(o.RecordingId) {
		var ret string
		return ret
	}
	return *o.RecordingId
}

// GetRecordingIdOk returns a tuple with the RecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallWithRecordingId) GetRecordingIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingId) {
		return nil, false
	}
	return o.RecordingId, true
}

// HasRecordingId returns a boolean if a field has been set.
func (o *CallWithRecordingId) HasRecordingId() bool {
	if o != nil && !IsNil(o.RecordingId) {
		return true
	}

	return false
}

// SetRecordingId gets a reference to the given string and assigns it to the RecordingId field.
func (o *CallWithRecordingId) SetRecordingId(v string) {
	o.RecordingId = &v
}

func (o CallWithRecordingId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallWithRecordingId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_type"] = o.RecordType
	toSerialize["call_session_id"] = o.CallSessionId
	toSerialize["call_leg_id"] = o.CallLegId
	toSerialize["call_control_id"] = o.CallControlId
	toSerialize["is_alive"] = o.IsAlive
	if !IsNil(o.ClientState) {
		toSerialize["client_state"] = o.ClientState
	}
	if !IsNil(o.CallDuration) {
		toSerialize["call_duration"] = o.CallDuration
	}
	if !IsNil(o.RecordingId) {
		toSerialize["recording_id"] = o.RecordingId
	}
	return toSerialize, nil
}

func (o *CallWithRecordingId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_type",
		"call_session_id",
		"call_leg_id",
		"call_control_id",
		"is_alive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallWithRecordingId := _CallWithRecordingId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCallWithRecordingId)

	if err != nil {
		return err
	}

	*o = CallWithRecordingId(varCallWithRecordingId)

	return err
}

type NullableCallWithRecordingId struct {
	value *CallWithRecordingId
	isSet bool
}

func (v NullableCallWithRecordingId) Get() *CallWithRecordingId {
	return v.value
}

func (v *NullableCallWithRecordingId) Set(val *CallWithRecordingId) {
	v.value = val
	v.isSet = true
}

func (v NullableCallWithRecordingId) IsSet() bool {
	return v.isSet
}

func (v *NullableCallWithRecordingId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallWithRecordingId(val *CallWithRecordingId) *NullableCallWithRecordingId {
	return &NullableCallWithRecordingId{value: val, isSet: true}
}

func (v NullableCallWithRecordingId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallWithRecordingId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


