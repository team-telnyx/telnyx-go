/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the PortingOrderMisc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortingOrderMisc{}

// PortingOrderMisc struct for PortingOrderMisc
type PortingOrderMisc struct {
	Type *PortingOrderType `json:"type,omitempty"`
	// Remaining numbers can be either kept with their current service provider or disconnected. 'new_billing_telephone_number' is required when 'remaining_numbers_action' is 'keep'.
	RemainingNumbersAction *string `json:"remaining_numbers_action,omitempty"`
	// New billing phone number for the remaining numbers. Used in case the current billing phone number is being ported to Telnyx. This will be set on your account with your current service provider and should be one of the numbers remaining on that account.
	NewBillingPhoneNumber *string `json:"new_billing_phone_number,omitempty"`
}

// NewPortingOrderMisc instantiates a new PortingOrderMisc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortingOrderMisc() *PortingOrderMisc {
	this := PortingOrderMisc{}
	return &this
}

// NewPortingOrderMiscWithDefaults instantiates a new PortingOrderMisc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortingOrderMiscWithDefaults() *PortingOrderMisc {
	this := PortingOrderMisc{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PortingOrderMisc) GetType() PortingOrderType {
	if o == nil || IsNil(o.Type) {
		var ret PortingOrderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderMisc) GetTypeOk() (*PortingOrderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PortingOrderMisc) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PortingOrderType and assigns it to the Type field.
func (o *PortingOrderMisc) SetType(v PortingOrderType) {
	o.Type = &v
}

// GetRemainingNumbersAction returns the RemainingNumbersAction field value if set, zero value otherwise.
func (o *PortingOrderMisc) GetRemainingNumbersAction() string {
	if o == nil || IsNil(o.RemainingNumbersAction) {
		var ret string
		return ret
	}
	return *o.RemainingNumbersAction
}

// GetRemainingNumbersActionOk returns a tuple with the RemainingNumbersAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderMisc) GetRemainingNumbersActionOk() (*string, bool) {
	if o == nil || IsNil(o.RemainingNumbersAction) {
		return nil, false
	}
	return o.RemainingNumbersAction, true
}

// HasRemainingNumbersAction returns a boolean if a field has been set.
func (o *PortingOrderMisc) HasRemainingNumbersAction() bool {
	if o != nil && !IsNil(o.RemainingNumbersAction) {
		return true
	}

	return false
}

// SetRemainingNumbersAction gets a reference to the given string and assigns it to the RemainingNumbersAction field.
func (o *PortingOrderMisc) SetRemainingNumbersAction(v string) {
	o.RemainingNumbersAction = &v
}

// GetNewBillingPhoneNumber returns the NewBillingPhoneNumber field value if set, zero value otherwise.
func (o *PortingOrderMisc) GetNewBillingPhoneNumber() string {
	if o == nil || IsNil(o.NewBillingPhoneNumber) {
		var ret string
		return ret
	}
	return *o.NewBillingPhoneNumber
}

// GetNewBillingPhoneNumberOk returns a tuple with the NewBillingPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortingOrderMisc) GetNewBillingPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.NewBillingPhoneNumber) {
		return nil, false
	}
	return o.NewBillingPhoneNumber, true
}

// HasNewBillingPhoneNumber returns a boolean if a field has been set.
func (o *PortingOrderMisc) HasNewBillingPhoneNumber() bool {
	if o != nil && !IsNil(o.NewBillingPhoneNumber) {
		return true
	}

	return false
}

// SetNewBillingPhoneNumber gets a reference to the given string and assigns it to the NewBillingPhoneNumber field.
func (o *PortingOrderMisc) SetNewBillingPhoneNumber(v string) {
	o.NewBillingPhoneNumber = &v
}

func (o PortingOrderMisc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortingOrderMisc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RemainingNumbersAction) {
		toSerialize["remaining_numbers_action"] = o.RemainingNumbersAction
	}
	if !IsNil(o.NewBillingPhoneNumber) {
		toSerialize["new_billing_phone_number"] = o.NewBillingPhoneNumber
	}
	return toSerialize, nil
}

type NullablePortingOrderMisc struct {
	value *PortingOrderMisc
	isSet bool
}

func (v NullablePortingOrderMisc) Get() *PortingOrderMisc {
	return v.value
}

func (v *NullablePortingOrderMisc) Set(val *PortingOrderMisc) {
	v.value = val
	v.isSet = true
}

func (v NullablePortingOrderMisc) IsSet() bool {
	return v.isSet
}

func (v *NullablePortingOrderMisc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortingOrderMisc(val *PortingOrderMisc) *NullablePortingOrderMisc {
	return &NullablePortingOrderMisc{value: val, isSet: true}
}

func (v NullablePortingOrderMisc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortingOrderMisc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


