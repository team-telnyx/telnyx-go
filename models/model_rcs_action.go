/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSAction{}

// RCSAction When tapped, initiates the corresponding native action on the device.
type RCSAction struct {
	// Text that is shown in the suggested action. Maximum 25 characters.
	Text *string `json:"text,omitempty"`
	// Payload (base64 encoded) that will be sent to the agent in the user event that results when the user taps the suggested action. Maximum 2048 characters.
	PostbackData *string `json:"postback_data,omitempty"`
	// Fallback URL to use if a client doesn't support a suggested action. Fallback URLs open in new browser windows. Maximum 2048 characters.
	FallbackUrl *string `json:"fallback_url,omitempty"`
	DialAction *RCSDialAction `json:"dial_action,omitempty"`
	ViewLocationAction *RCSViewLocationAction `json:"view_location_action,omitempty"`
	CreateCalendarEventAction *RCSCreateCalendarEventAction `json:"create_calendar_event_action,omitempty"`
	OpenUrlAction *RCSOpenUrlAction `json:"open_url_action,omitempty"`
	// Opens the RCS app's location chooser so the user can pick a location to send back to the agent.
	ShareLocationAction map[string]interface{} `json:"share_location_action,omitempty"`
	ComposeAction *RCSComposeAction `json:"compose_action,omitempty"`
}

// NewRCSAction instantiates a new RCSAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSAction() *RCSAction {
	this := RCSAction{}
	return &this
}

// NewRCSActionWithDefaults instantiates a new RCSAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSActionWithDefaults() *RCSAction {
	this := RCSAction{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RCSAction) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RCSAction) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RCSAction) SetText(v string) {
	o.Text = &v
}

// GetPostbackData returns the PostbackData field value if set, zero value otherwise.
func (o *RCSAction) GetPostbackData() string {
	if o == nil || IsNil(o.PostbackData) {
		var ret string
		return ret
	}
	return *o.PostbackData
}

// GetPostbackDataOk returns a tuple with the PostbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetPostbackDataOk() (*string, bool) {
	if o == nil || IsNil(o.PostbackData) {
		return nil, false
	}
	return o.PostbackData, true
}

// HasPostbackData returns a boolean if a field has been set.
func (o *RCSAction) HasPostbackData() bool {
	if o != nil && !IsNil(o.PostbackData) {
		return true
	}

	return false
}

// SetPostbackData gets a reference to the given string and assigns it to the PostbackData field.
func (o *RCSAction) SetPostbackData(v string) {
	o.PostbackData = &v
}

// GetFallbackUrl returns the FallbackUrl field value if set, zero value otherwise.
func (o *RCSAction) GetFallbackUrl() string {
	if o == nil || IsNil(o.FallbackUrl) {
		var ret string
		return ret
	}
	return *o.FallbackUrl
}

// GetFallbackUrlOk returns a tuple with the FallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetFallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackUrl) {
		return nil, false
	}
	return o.FallbackUrl, true
}

// HasFallbackUrl returns a boolean if a field has been set.
func (o *RCSAction) HasFallbackUrl() bool {
	if o != nil && !IsNil(o.FallbackUrl) {
		return true
	}

	return false
}

// SetFallbackUrl gets a reference to the given string and assigns it to the FallbackUrl field.
func (o *RCSAction) SetFallbackUrl(v string) {
	o.FallbackUrl = &v
}

// GetDialAction returns the DialAction field value if set, zero value otherwise.
func (o *RCSAction) GetDialAction() RCSDialAction {
	if o == nil || IsNil(o.DialAction) {
		var ret RCSDialAction
		return ret
	}
	return *o.DialAction
}

// GetDialActionOk returns a tuple with the DialAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetDialActionOk() (*RCSDialAction, bool) {
	if o == nil || IsNil(o.DialAction) {
		return nil, false
	}
	return o.DialAction, true
}

// HasDialAction returns a boolean if a field has been set.
func (o *RCSAction) HasDialAction() bool {
	if o != nil && !IsNil(o.DialAction) {
		return true
	}

	return false
}

// SetDialAction gets a reference to the given RCSDialAction and assigns it to the DialAction field.
func (o *RCSAction) SetDialAction(v RCSDialAction) {
	o.DialAction = &v
}

// GetViewLocationAction returns the ViewLocationAction field value if set, zero value otherwise.
func (o *RCSAction) GetViewLocationAction() RCSViewLocationAction {
	if o == nil || IsNil(o.ViewLocationAction) {
		var ret RCSViewLocationAction
		return ret
	}
	return *o.ViewLocationAction
}

// GetViewLocationActionOk returns a tuple with the ViewLocationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetViewLocationActionOk() (*RCSViewLocationAction, bool) {
	if o == nil || IsNil(o.ViewLocationAction) {
		return nil, false
	}
	return o.ViewLocationAction, true
}

// HasViewLocationAction returns a boolean if a field has been set.
func (o *RCSAction) HasViewLocationAction() bool {
	if o != nil && !IsNil(o.ViewLocationAction) {
		return true
	}

	return false
}

// SetViewLocationAction gets a reference to the given RCSViewLocationAction and assigns it to the ViewLocationAction field.
func (o *RCSAction) SetViewLocationAction(v RCSViewLocationAction) {
	o.ViewLocationAction = &v
}

// GetCreateCalendarEventAction returns the CreateCalendarEventAction field value if set, zero value otherwise.
func (o *RCSAction) GetCreateCalendarEventAction() RCSCreateCalendarEventAction {
	if o == nil || IsNil(o.CreateCalendarEventAction) {
		var ret RCSCreateCalendarEventAction
		return ret
	}
	return *o.CreateCalendarEventAction
}

// GetCreateCalendarEventActionOk returns a tuple with the CreateCalendarEventAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetCreateCalendarEventActionOk() (*RCSCreateCalendarEventAction, bool) {
	if o == nil || IsNil(o.CreateCalendarEventAction) {
		return nil, false
	}
	return o.CreateCalendarEventAction, true
}

// HasCreateCalendarEventAction returns a boolean if a field has been set.
func (o *RCSAction) HasCreateCalendarEventAction() bool {
	if o != nil && !IsNil(o.CreateCalendarEventAction) {
		return true
	}

	return false
}

// SetCreateCalendarEventAction gets a reference to the given RCSCreateCalendarEventAction and assigns it to the CreateCalendarEventAction field.
func (o *RCSAction) SetCreateCalendarEventAction(v RCSCreateCalendarEventAction) {
	o.CreateCalendarEventAction = &v
}

// GetOpenUrlAction returns the OpenUrlAction field value if set, zero value otherwise.
func (o *RCSAction) GetOpenUrlAction() RCSOpenUrlAction {
	if o == nil || IsNil(o.OpenUrlAction) {
		var ret RCSOpenUrlAction
		return ret
	}
	return *o.OpenUrlAction
}

// GetOpenUrlActionOk returns a tuple with the OpenUrlAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetOpenUrlActionOk() (*RCSOpenUrlAction, bool) {
	if o == nil || IsNil(o.OpenUrlAction) {
		return nil, false
	}
	return o.OpenUrlAction, true
}

// HasOpenUrlAction returns a boolean if a field has been set.
func (o *RCSAction) HasOpenUrlAction() bool {
	if o != nil && !IsNil(o.OpenUrlAction) {
		return true
	}

	return false
}

// SetOpenUrlAction gets a reference to the given RCSOpenUrlAction and assigns it to the OpenUrlAction field.
func (o *RCSAction) SetOpenUrlAction(v RCSOpenUrlAction) {
	o.OpenUrlAction = &v
}

// GetShareLocationAction returns the ShareLocationAction field value if set, zero value otherwise.
func (o *RCSAction) GetShareLocationAction() map[string]interface{} {
	if o == nil || IsNil(o.ShareLocationAction) {
		var ret map[string]interface{}
		return ret
	}
	return o.ShareLocationAction
}

// GetShareLocationActionOk returns a tuple with the ShareLocationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetShareLocationActionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ShareLocationAction) {
		return map[string]interface{}{}, false
	}
	return o.ShareLocationAction, true
}

// HasShareLocationAction returns a boolean if a field has been set.
func (o *RCSAction) HasShareLocationAction() bool {
	if o != nil && !IsNil(o.ShareLocationAction) {
		return true
	}

	return false
}

// SetShareLocationAction gets a reference to the given map[string]interface{} and assigns it to the ShareLocationAction field.
func (o *RCSAction) SetShareLocationAction(v map[string]interface{}) {
	o.ShareLocationAction = v
}

// GetComposeAction returns the ComposeAction field value if set, zero value otherwise.
func (o *RCSAction) GetComposeAction() RCSComposeAction {
	if o == nil || IsNil(o.ComposeAction) {
		var ret RCSComposeAction
		return ret
	}
	return *o.ComposeAction
}

// GetComposeActionOk returns a tuple with the ComposeAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSAction) GetComposeActionOk() (*RCSComposeAction, bool) {
	if o == nil || IsNil(o.ComposeAction) {
		return nil, false
	}
	return o.ComposeAction, true
}

// HasComposeAction returns a boolean if a field has been set.
func (o *RCSAction) HasComposeAction() bool {
	if o != nil && !IsNil(o.ComposeAction) {
		return true
	}

	return false
}

// SetComposeAction gets a reference to the given RCSComposeAction and assigns it to the ComposeAction field.
func (o *RCSAction) SetComposeAction(v RCSComposeAction) {
	o.ComposeAction = &v
}

func (o RCSAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.PostbackData) {
		toSerialize["postback_data"] = o.PostbackData
	}
	if !IsNil(o.FallbackUrl) {
		toSerialize["fallback_url"] = o.FallbackUrl
	}
	if !IsNil(o.DialAction) {
		toSerialize["dial_action"] = o.DialAction
	}
	if !IsNil(o.ViewLocationAction) {
		toSerialize["view_location_action"] = o.ViewLocationAction
	}
	if !IsNil(o.CreateCalendarEventAction) {
		toSerialize["create_calendar_event_action"] = o.CreateCalendarEventAction
	}
	if !IsNil(o.OpenUrlAction) {
		toSerialize["open_url_action"] = o.OpenUrlAction
	}
	if !IsNil(o.ShareLocationAction) {
		toSerialize["share_location_action"] = o.ShareLocationAction
	}
	if !IsNil(o.ComposeAction) {
		toSerialize["compose_action"] = o.ComposeAction
	}
	return toSerialize, nil
}

type NullableRCSAction struct {
	value *RCSAction
	isSet bool
}

func (v NullableRCSAction) Get() *RCSAction {
	return v.value
}

func (v *NullableRCSAction) Set(val *RCSAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSAction(val *RCSAction) *NullableRCSAction {
	return &NullableRCSAction{value: val, isSet: true}
}

func (v NullableRCSAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


