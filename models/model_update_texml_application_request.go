/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateTexmlApplicationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTexmlApplicationRequest{}

// UpdateTexmlApplicationRequest struct for UpdateTexmlApplicationRequest
type UpdateTexmlApplicationRequest struct {
	// A user-assigned name to help manage the application.
	FriendlyName string `json:"friendly_name"`
	// Specifies whether the connection can be used.
	Active *bool `json:"active,omitempty"`
	AnchorsiteOverride *AnchorsiteOverride `json:"anchorsite_override,omitempty"`
	DtmfType *DtmfType `json:"dtmf_type,omitempty"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after timing out.
	FirstCommandTimeout *bool `json:"first_command_timeout,omitempty"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs *int32 `json:"first_command_timeout_secs,omitempty"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceUrl string `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.
	VoiceFallbackUrl *string `json:"voice_fallback_url,omitempty"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.
	VoiceMethod *string `json:"voice_method,omitempty"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback *string `json:"status_callback,omitempty"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod *string `json:"status_callback_method,omitempty"`
	// Tags associated with the Texml Application.
	Tags []string `json:"tags,omitempty"`
	Inbound *CreateTexmlApplicationRequestInbound `json:"inbound,omitempty"`
	Outbound *CreateTexmlApplicationRequestOutbound `json:"outbound,omitempty"`
}

type _UpdateTexmlApplicationRequest UpdateTexmlApplicationRequest

// NewUpdateTexmlApplicationRequest instantiates a new UpdateTexmlApplicationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTexmlApplicationRequest(friendlyName string, voiceUrl string) *UpdateTexmlApplicationRequest {
	this := UpdateTexmlApplicationRequest{}
	this.FriendlyName = friendlyName
	var active bool = true
	this.Active = &active
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var firstCommandTimeout bool = false
	this.FirstCommandTimeout = &firstCommandTimeout
	var firstCommandTimeoutSecs int32 = 30
	this.FirstCommandTimeoutSecs = &firstCommandTimeoutSecs
	this.VoiceUrl = voiceUrl
	var voiceMethod string = "post"
	this.VoiceMethod = &voiceMethod
	var statusCallbackMethod string = "post"
	this.StatusCallbackMethod = &statusCallbackMethod
	return &this
}

// NewUpdateTexmlApplicationRequestWithDefaults instantiates a new UpdateTexmlApplicationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTexmlApplicationRequestWithDefaults() *UpdateTexmlApplicationRequest {
	this := UpdateTexmlApplicationRequest{}
	var active bool = true
	this.Active = &active
	var anchorsiteOverride AnchorsiteOverride = LATENCY
	this.AnchorsiteOverride = &anchorsiteOverride
	var dtmfType DtmfType = RFC_2833
	this.DtmfType = &dtmfType
	var firstCommandTimeout bool = false
	this.FirstCommandTimeout = &firstCommandTimeout
	var firstCommandTimeoutSecs int32 = 30
	this.FirstCommandTimeoutSecs = &firstCommandTimeoutSecs
	var voiceMethod string = "post"
	this.VoiceMethod = &voiceMethod
	var statusCallbackMethod string = "post"
	this.StatusCallbackMethod = &statusCallbackMethod
	return &this
}

// GetFriendlyName returns the FriendlyName field value
func (o *UpdateTexmlApplicationRequest) GetFriendlyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetFriendlyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FriendlyName, true
}

// SetFriendlyName sets field value
func (o *UpdateTexmlApplicationRequest) SetFriendlyName(v string) {
	o.FriendlyName = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UpdateTexmlApplicationRequest) SetActive(v bool) {
	o.Active = &v
}

// GetAnchorsiteOverride returns the AnchorsiteOverride field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetAnchorsiteOverride() AnchorsiteOverride {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		var ret AnchorsiteOverride
		return ret
	}
	return *o.AnchorsiteOverride
}

// GetAnchorsiteOverrideOk returns a tuple with the AnchorsiteOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetAnchorsiteOverrideOk() (*AnchorsiteOverride, bool) {
	if o == nil || IsNil(o.AnchorsiteOverride) {
		return nil, false
	}
	return o.AnchorsiteOverride, true
}

// HasAnchorsiteOverride returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasAnchorsiteOverride() bool {
	if o != nil && !IsNil(o.AnchorsiteOverride) {
		return true
	}

	return false
}

// SetAnchorsiteOverride gets a reference to the given AnchorsiteOverride and assigns it to the AnchorsiteOverride field.
func (o *UpdateTexmlApplicationRequest) SetAnchorsiteOverride(v AnchorsiteOverride) {
	o.AnchorsiteOverride = &v
}

// GetDtmfType returns the DtmfType field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetDtmfType() DtmfType {
	if o == nil || IsNil(o.DtmfType) {
		var ret DtmfType
		return ret
	}
	return *o.DtmfType
}

// GetDtmfTypeOk returns a tuple with the DtmfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetDtmfTypeOk() (*DtmfType, bool) {
	if o == nil || IsNil(o.DtmfType) {
		return nil, false
	}
	return o.DtmfType, true
}

// HasDtmfType returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasDtmfType() bool {
	if o != nil && !IsNil(o.DtmfType) {
		return true
	}

	return false
}

// SetDtmfType gets a reference to the given DtmfType and assigns it to the DtmfType field.
func (o *UpdateTexmlApplicationRequest) SetDtmfType(v DtmfType) {
	o.DtmfType = &v
}

// GetFirstCommandTimeout returns the FirstCommandTimeout field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetFirstCommandTimeout() bool {
	if o == nil || IsNil(o.FirstCommandTimeout) {
		var ret bool
		return ret
	}
	return *o.FirstCommandTimeout
}

// GetFirstCommandTimeoutOk returns a tuple with the FirstCommandTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetFirstCommandTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstCommandTimeout) {
		return nil, false
	}
	return o.FirstCommandTimeout, true
}

// HasFirstCommandTimeout returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasFirstCommandTimeout() bool {
	if o != nil && !IsNil(o.FirstCommandTimeout) {
		return true
	}

	return false
}

// SetFirstCommandTimeout gets a reference to the given bool and assigns it to the FirstCommandTimeout field.
func (o *UpdateTexmlApplicationRequest) SetFirstCommandTimeout(v bool) {
	o.FirstCommandTimeout = &v
}

// GetFirstCommandTimeoutSecs returns the FirstCommandTimeoutSecs field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetFirstCommandTimeoutSecs() int32 {
	if o == nil || IsNil(o.FirstCommandTimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.FirstCommandTimeoutSecs
}

// GetFirstCommandTimeoutSecsOk returns a tuple with the FirstCommandTimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetFirstCommandTimeoutSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstCommandTimeoutSecs) {
		return nil, false
	}
	return o.FirstCommandTimeoutSecs, true
}

// HasFirstCommandTimeoutSecs returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasFirstCommandTimeoutSecs() bool {
	if o != nil && !IsNil(o.FirstCommandTimeoutSecs) {
		return true
	}

	return false
}

// SetFirstCommandTimeoutSecs gets a reference to the given int32 and assigns it to the FirstCommandTimeoutSecs field.
func (o *UpdateTexmlApplicationRequest) SetFirstCommandTimeoutSecs(v int32) {
	o.FirstCommandTimeoutSecs = &v
}

// GetVoiceUrl returns the VoiceUrl field value
func (o *UpdateTexmlApplicationRequest) GetVoiceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VoiceUrl
}

// GetVoiceUrlOk returns a tuple with the VoiceUrl field value
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetVoiceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VoiceUrl, true
}

// SetVoiceUrl sets field value
func (o *UpdateTexmlApplicationRequest) SetVoiceUrl(v string) {
	o.VoiceUrl = v
}

// GetVoiceFallbackUrl returns the VoiceFallbackUrl field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetVoiceFallbackUrl() string {
	if o == nil || IsNil(o.VoiceFallbackUrl) {
		var ret string
		return ret
	}
	return *o.VoiceFallbackUrl
}

// GetVoiceFallbackUrlOk returns a tuple with the VoiceFallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetVoiceFallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VoiceFallbackUrl) {
		return nil, false
	}
	return o.VoiceFallbackUrl, true
}

// HasVoiceFallbackUrl returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasVoiceFallbackUrl() bool {
	if o != nil && !IsNil(o.VoiceFallbackUrl) {
		return true
	}

	return false
}

// SetVoiceFallbackUrl gets a reference to the given string and assigns it to the VoiceFallbackUrl field.
func (o *UpdateTexmlApplicationRequest) SetVoiceFallbackUrl(v string) {
	o.VoiceFallbackUrl = &v
}

// GetVoiceMethod returns the VoiceMethod field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetVoiceMethod() string {
	if o == nil || IsNil(o.VoiceMethod) {
		var ret string
		return ret
	}
	return *o.VoiceMethod
}

// GetVoiceMethodOk returns a tuple with the VoiceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetVoiceMethodOk() (*string, bool) {
	if o == nil || IsNil(o.VoiceMethod) {
		return nil, false
	}
	return o.VoiceMethod, true
}

// HasVoiceMethod returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasVoiceMethod() bool {
	if o != nil && !IsNil(o.VoiceMethod) {
		return true
	}

	return false
}

// SetVoiceMethod gets a reference to the given string and assigns it to the VoiceMethod field.
func (o *UpdateTexmlApplicationRequest) SetVoiceMethod(v string) {
	o.VoiceMethod = &v
}

// GetStatusCallback returns the StatusCallback field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetStatusCallback() string {
	if o == nil || IsNil(o.StatusCallback) {
		var ret string
		return ret
	}
	return *o.StatusCallback
}

// GetStatusCallbackOk returns a tuple with the StatusCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetStatusCallbackOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCallback) {
		return nil, false
	}
	return o.StatusCallback, true
}

// HasStatusCallback returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasStatusCallback() bool {
	if o != nil && !IsNil(o.StatusCallback) {
		return true
	}

	return false
}

// SetStatusCallback gets a reference to the given string and assigns it to the StatusCallback field.
func (o *UpdateTexmlApplicationRequest) SetStatusCallback(v string) {
	o.StatusCallback = &v
}

// GetStatusCallbackMethod returns the StatusCallbackMethod field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetStatusCallbackMethod() string {
	if o == nil || IsNil(o.StatusCallbackMethod) {
		var ret string
		return ret
	}
	return *o.StatusCallbackMethod
}

// GetStatusCallbackMethodOk returns a tuple with the StatusCallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetStatusCallbackMethodOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCallbackMethod) {
		return nil, false
	}
	return o.StatusCallbackMethod, true
}

// HasStatusCallbackMethod returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasStatusCallbackMethod() bool {
	if o != nil && !IsNil(o.StatusCallbackMethod) {
		return true
	}

	return false
}

// SetStatusCallbackMethod gets a reference to the given string and assigns it to the StatusCallbackMethod field.
func (o *UpdateTexmlApplicationRequest) SetStatusCallbackMethod(v string) {
	o.StatusCallbackMethod = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateTexmlApplicationRequest) SetTags(v []string) {
	o.Tags = v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetInbound() CreateTexmlApplicationRequestInbound {
	if o == nil || IsNil(o.Inbound) {
		var ret CreateTexmlApplicationRequestInbound
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetInboundOk() (*CreateTexmlApplicationRequestInbound, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given CreateTexmlApplicationRequestInbound and assigns it to the Inbound field.
func (o *UpdateTexmlApplicationRequest) SetInbound(v CreateTexmlApplicationRequestInbound) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *UpdateTexmlApplicationRequest) GetOutbound() CreateTexmlApplicationRequestOutbound {
	if o == nil || IsNil(o.Outbound) {
		var ret CreateTexmlApplicationRequestOutbound
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTexmlApplicationRequest) GetOutboundOk() (*CreateTexmlApplicationRequestOutbound, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *UpdateTexmlApplicationRequest) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given CreateTexmlApplicationRequestOutbound and assigns it to the Outbound field.
func (o *UpdateTexmlApplicationRequest) SetOutbound(v CreateTexmlApplicationRequestOutbound) {
	o.Outbound = &v
}

func (o UpdateTexmlApplicationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTexmlApplicationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["friendly_name"] = o.FriendlyName
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AnchorsiteOverride) {
		toSerialize["anchorsite_override"] = o.AnchorsiteOverride
	}
	if !IsNil(o.DtmfType) {
		toSerialize["dtmf_type"] = o.DtmfType
	}
	if !IsNil(o.FirstCommandTimeout) {
		toSerialize["first_command_timeout"] = o.FirstCommandTimeout
	}
	if !IsNil(o.FirstCommandTimeoutSecs) {
		toSerialize["first_command_timeout_secs"] = o.FirstCommandTimeoutSecs
	}
	toSerialize["voice_url"] = o.VoiceUrl
	if !IsNil(o.VoiceFallbackUrl) {
		toSerialize["voice_fallback_url"] = o.VoiceFallbackUrl
	}
	if !IsNil(o.VoiceMethod) {
		toSerialize["voice_method"] = o.VoiceMethod
	}
	if !IsNil(o.StatusCallback) {
		toSerialize["status_callback"] = o.StatusCallback
	}
	if !IsNil(o.StatusCallbackMethod) {
		toSerialize["status_callback_method"] = o.StatusCallbackMethod
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	return toSerialize, nil
}

func (o *UpdateTexmlApplicationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"friendly_name",
		"voice_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateTexmlApplicationRequest := _UpdateTexmlApplicationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateTexmlApplicationRequest)

	if err != nil {
		return err
	}

	*o = UpdateTexmlApplicationRequest(varUpdateTexmlApplicationRequest)

	return err
}

type NullableUpdateTexmlApplicationRequest struct {
	value *UpdateTexmlApplicationRequest
	isSet bool
}

func (v NullableUpdateTexmlApplicationRequest) Get() *UpdateTexmlApplicationRequest {
	return v.value
}

func (v *NullableUpdateTexmlApplicationRequest) Set(val *UpdateTexmlApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTexmlApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTexmlApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTexmlApplicationRequest(val *UpdateTexmlApplicationRequest) *NullableUpdateTexmlApplicationRequest {
	return &NullableUpdateTexmlApplicationRequest{value: val, isSet: true}
}

func (v NullableUpdateTexmlApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTexmlApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


