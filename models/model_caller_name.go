/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CallerName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallerName{}

// CallerName struct for CallerName
type CallerName struct {
	// The name of the requested phone number's owner as per the CNAM database
	CallerName *string `json:"caller_name,omitempty"`
	// A caller-name lookup specific error code, expressed as a stringified 5-digit integer
	ErrorCode *string `json:"error_code,omitempty"`
}

// NewCallerName instantiates a new CallerName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallerName() *CallerName {
	this := CallerName{}
	return &this
}

// NewCallerNameWithDefaults instantiates a new CallerName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallerNameWithDefaults() *CallerName {
	this := CallerName{}
	return &this
}

// GetCallerName returns the CallerName field value if set, zero value otherwise.
func (o *CallerName) GetCallerName() string {
	if o == nil || IsNil(o.CallerName) {
		var ret string
		return ret
	}
	return *o.CallerName
}

// GetCallerNameOk returns a tuple with the CallerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallerName) GetCallerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerName) {
		return nil, false
	}
	return o.CallerName, true
}

// HasCallerName returns a boolean if a field has been set.
func (o *CallerName) HasCallerName() bool {
	if o != nil && !IsNil(o.CallerName) {
		return true
	}

	return false
}

// SetCallerName gets a reference to the given string and assigns it to the CallerName field.
func (o *CallerName) SetCallerName(v string) {
	o.CallerName = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *CallerName) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallerName) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *CallerName) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *CallerName) SetErrorCode(v string) {
	o.ErrorCode = &v
}

func (o CallerName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallerName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallerName) {
		toSerialize["caller_name"] = o.CallerName
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableCallerName struct {
	value *CallerName
	isSet bool
}

func (v NullableCallerName) Get() *CallerName {
	return v.value
}

func (v *NullableCallerName) Set(val *CallerName) {
	v.value = val
	v.isSet = true
}

func (v NullableCallerName) IsSet() bool {
	return v.isSet
}

func (v *NullableCallerName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallerName(val *CallerName) *NullableCallerName {
	return &NullableCallerName{value: val, isSet: true}
}

func (v NullableCallerName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallerName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


