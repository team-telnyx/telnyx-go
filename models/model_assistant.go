/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Assistant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assistant{}

// Assistant struct for Assistant
type Assistant struct {
	Id string `json:"id"`
	Name string `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	Description *string `json:"description,omitempty"`
	// ID of the model to use. You can use the [Get models API](https://developers.telnyx.com/api/inference/inference-embedding/get-models-public-models-get) to see all of your available models,
	Model string `json:"model"`
	// System instructions for the assistant. These may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)
	Instructions string `json:"instructions"`
	// The tools that the assistant can use. These may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)
	Tools []AssistantToolsInner `json:"tools,omitempty"`
	// Text that the assistant will use to start the conversation. This may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)
	Greeting *string `json:"greeting,omitempty"`
	// This is only needed when using third-party inference providers. The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your LLM provider's API key. Warning: Free plans are unlikely to work with this integration.
	LlmApiKeyRef *string `json:"llm_api_key_ref,omitempty"`
	VoiceSettings *VoiceSettings `json:"voice_settings,omitempty"`
	Transcription *TranscriptionSettings `json:"transcription,omitempty"`
	TelephonySettings *TelephonySettings `json:"telephony_settings,omitempty"`
	MessagingSettings *MessagingSettings `json:"messaging_settings,omitempty"`
	EnabledFeatures []EnabledFeatures `json:"enabled_features,omitempty"`
	InsightSettings *InsightSettings `json:"insight_settings,omitempty"`
	PrivacySettings *PrivacySettings `json:"privacy_settings,omitempty"`
	// If the dynamic_variables_webhook_url is set for the assistant, we will send a request at the start of the conversation. See our [guide](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables) for more information.
	DynamicVariablesWebhookUrl *string `json:"dynamic_variables_webhook_url,omitempty"`
	// Map of dynamic variables and their values
	DynamicVariables map[string]interface{} `json:"dynamic_variables,omitempty"`
}

type _Assistant Assistant

// NewAssistant instantiates a new Assistant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistant(id string, name string, createdAt time.Time, model string, instructions string) *Assistant {
	this := Assistant{}
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	this.Model = model
	this.Instructions = instructions
	return &this
}

// NewAssistantWithDefaults instantiates a new Assistant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantWithDefaults() *Assistant {
	this := Assistant{}
	return &this
}

// GetId returns the Id field value
func (o *Assistant) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Assistant) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Assistant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Assistant) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Assistant) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Assistant) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Assistant) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Assistant) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Assistant) SetDescription(v string) {
	o.Description = &v
}

// GetModel returns the Model field value
func (o *Assistant) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *Assistant) SetModel(v string) {
	o.Model = v
}

// GetInstructions returns the Instructions field value
func (o *Assistant) GetInstructions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instructions, true
}

// SetInstructions sets field value
func (o *Assistant) SetInstructions(v string) {
	o.Instructions = v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *Assistant) GetTools() []AssistantToolsInner {
	if o == nil || IsNil(o.Tools) {
		var ret []AssistantToolsInner
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetToolsOk() ([]AssistantToolsInner, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *Assistant) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []AssistantToolsInner and assigns it to the Tools field.
func (o *Assistant) SetTools(v []AssistantToolsInner) {
	o.Tools = v
}

// GetGreeting returns the Greeting field value if set, zero value otherwise.
func (o *Assistant) GetGreeting() string {
	if o == nil || IsNil(o.Greeting) {
		var ret string
		return ret
	}
	return *o.Greeting
}

// GetGreetingOk returns a tuple with the Greeting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetGreetingOk() (*string, bool) {
	if o == nil || IsNil(o.Greeting) {
		return nil, false
	}
	return o.Greeting, true
}

// HasGreeting returns a boolean if a field has been set.
func (o *Assistant) HasGreeting() bool {
	if o != nil && !IsNil(o.Greeting) {
		return true
	}

	return false
}

// SetGreeting gets a reference to the given string and assigns it to the Greeting field.
func (o *Assistant) SetGreeting(v string) {
	o.Greeting = &v
}

// GetLlmApiKeyRef returns the LlmApiKeyRef field value if set, zero value otherwise.
func (o *Assistant) GetLlmApiKeyRef() string {
	if o == nil || IsNil(o.LlmApiKeyRef) {
		var ret string
		return ret
	}
	return *o.LlmApiKeyRef
}

// GetLlmApiKeyRefOk returns a tuple with the LlmApiKeyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetLlmApiKeyRefOk() (*string, bool) {
	if o == nil || IsNil(o.LlmApiKeyRef) {
		return nil, false
	}
	return o.LlmApiKeyRef, true
}

// HasLlmApiKeyRef returns a boolean if a field has been set.
func (o *Assistant) HasLlmApiKeyRef() bool {
	if o != nil && !IsNil(o.LlmApiKeyRef) {
		return true
	}

	return false
}

// SetLlmApiKeyRef gets a reference to the given string and assigns it to the LlmApiKeyRef field.
func (o *Assistant) SetLlmApiKeyRef(v string) {
	o.LlmApiKeyRef = &v
}

// GetVoiceSettings returns the VoiceSettings field value if set, zero value otherwise.
func (o *Assistant) GetVoiceSettings() VoiceSettings {
	if o == nil || IsNil(o.VoiceSettings) {
		var ret VoiceSettings
		return ret
	}
	return *o.VoiceSettings
}

// GetVoiceSettingsOk returns a tuple with the VoiceSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetVoiceSettingsOk() (*VoiceSettings, bool) {
	if o == nil || IsNil(o.VoiceSettings) {
		return nil, false
	}
	return o.VoiceSettings, true
}

// HasVoiceSettings returns a boolean if a field has been set.
func (o *Assistant) HasVoiceSettings() bool {
	if o != nil && !IsNil(o.VoiceSettings) {
		return true
	}

	return false
}

// SetVoiceSettings gets a reference to the given VoiceSettings and assigns it to the VoiceSettings field.
func (o *Assistant) SetVoiceSettings(v VoiceSettings) {
	o.VoiceSettings = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *Assistant) GetTranscription() TranscriptionSettings {
	if o == nil || IsNil(o.Transcription) {
		var ret TranscriptionSettings
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetTranscriptionOk() (*TranscriptionSettings, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *Assistant) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given TranscriptionSettings and assigns it to the Transcription field.
func (o *Assistant) SetTranscription(v TranscriptionSettings) {
	o.Transcription = &v
}

// GetTelephonySettings returns the TelephonySettings field value if set, zero value otherwise.
func (o *Assistant) GetTelephonySettings() TelephonySettings {
	if o == nil || IsNil(o.TelephonySettings) {
		var ret TelephonySettings
		return ret
	}
	return *o.TelephonySettings
}

// GetTelephonySettingsOk returns a tuple with the TelephonySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetTelephonySettingsOk() (*TelephonySettings, bool) {
	if o == nil || IsNil(o.TelephonySettings) {
		return nil, false
	}
	return o.TelephonySettings, true
}

// HasTelephonySettings returns a boolean if a field has been set.
func (o *Assistant) HasTelephonySettings() bool {
	if o != nil && !IsNil(o.TelephonySettings) {
		return true
	}

	return false
}

// SetTelephonySettings gets a reference to the given TelephonySettings and assigns it to the TelephonySettings field.
func (o *Assistant) SetTelephonySettings(v TelephonySettings) {
	o.TelephonySettings = &v
}

// GetMessagingSettings returns the MessagingSettings field value if set, zero value otherwise.
func (o *Assistant) GetMessagingSettings() MessagingSettings {
	if o == nil || IsNil(o.MessagingSettings) {
		var ret MessagingSettings
		return ret
	}
	return *o.MessagingSettings
}

// GetMessagingSettingsOk returns a tuple with the MessagingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetMessagingSettingsOk() (*MessagingSettings, bool) {
	if o == nil || IsNil(o.MessagingSettings) {
		return nil, false
	}
	return o.MessagingSettings, true
}

// HasMessagingSettings returns a boolean if a field has been set.
func (o *Assistant) HasMessagingSettings() bool {
	if o != nil && !IsNil(o.MessagingSettings) {
		return true
	}

	return false
}

// SetMessagingSettings gets a reference to the given MessagingSettings and assigns it to the MessagingSettings field.
func (o *Assistant) SetMessagingSettings(v MessagingSettings) {
	o.MessagingSettings = &v
}

// GetEnabledFeatures returns the EnabledFeatures field value if set, zero value otherwise.
func (o *Assistant) GetEnabledFeatures() []EnabledFeatures {
	if o == nil || IsNil(o.EnabledFeatures) {
		var ret []EnabledFeatures
		return ret
	}
	return o.EnabledFeatures
}

// GetEnabledFeaturesOk returns a tuple with the EnabledFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetEnabledFeaturesOk() ([]EnabledFeatures, bool) {
	if o == nil || IsNil(o.EnabledFeatures) {
		return nil, false
	}
	return o.EnabledFeatures, true
}

// HasEnabledFeatures returns a boolean if a field has been set.
func (o *Assistant) HasEnabledFeatures() bool {
	if o != nil && !IsNil(o.EnabledFeatures) {
		return true
	}

	return false
}

// SetEnabledFeatures gets a reference to the given []EnabledFeatures and assigns it to the EnabledFeatures field.
func (o *Assistant) SetEnabledFeatures(v []EnabledFeatures) {
	o.EnabledFeatures = v
}

// GetInsightSettings returns the InsightSettings field value if set, zero value otherwise.
func (o *Assistant) GetInsightSettings() InsightSettings {
	if o == nil || IsNil(o.InsightSettings) {
		var ret InsightSettings
		return ret
	}
	return *o.InsightSettings
}

// GetInsightSettingsOk returns a tuple with the InsightSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetInsightSettingsOk() (*InsightSettings, bool) {
	if o == nil || IsNil(o.InsightSettings) {
		return nil, false
	}
	return o.InsightSettings, true
}

// HasInsightSettings returns a boolean if a field has been set.
func (o *Assistant) HasInsightSettings() bool {
	if o != nil && !IsNil(o.InsightSettings) {
		return true
	}

	return false
}

// SetInsightSettings gets a reference to the given InsightSettings and assigns it to the InsightSettings field.
func (o *Assistant) SetInsightSettings(v InsightSettings) {
	o.InsightSettings = &v
}

// GetPrivacySettings returns the PrivacySettings field value if set, zero value otherwise.
func (o *Assistant) GetPrivacySettings() PrivacySettings {
	if o == nil || IsNil(o.PrivacySettings) {
		var ret PrivacySettings
		return ret
	}
	return *o.PrivacySettings
}

// GetPrivacySettingsOk returns a tuple with the PrivacySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetPrivacySettingsOk() (*PrivacySettings, bool) {
	if o == nil || IsNil(o.PrivacySettings) {
		return nil, false
	}
	return o.PrivacySettings, true
}

// HasPrivacySettings returns a boolean if a field has been set.
func (o *Assistant) HasPrivacySettings() bool {
	if o != nil && !IsNil(o.PrivacySettings) {
		return true
	}

	return false
}

// SetPrivacySettings gets a reference to the given PrivacySettings and assigns it to the PrivacySettings field.
func (o *Assistant) SetPrivacySettings(v PrivacySettings) {
	o.PrivacySettings = &v
}

// GetDynamicVariablesWebhookUrl returns the DynamicVariablesWebhookUrl field value if set, zero value otherwise.
func (o *Assistant) GetDynamicVariablesWebhookUrl() string {
	if o == nil || IsNil(o.DynamicVariablesWebhookUrl) {
		var ret string
		return ret
	}
	return *o.DynamicVariablesWebhookUrl
}

// GetDynamicVariablesWebhookUrlOk returns a tuple with the DynamicVariablesWebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetDynamicVariablesWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicVariablesWebhookUrl) {
		return nil, false
	}
	return o.DynamicVariablesWebhookUrl, true
}

// HasDynamicVariablesWebhookUrl returns a boolean if a field has been set.
func (o *Assistant) HasDynamicVariablesWebhookUrl() bool {
	if o != nil && !IsNil(o.DynamicVariablesWebhookUrl) {
		return true
	}

	return false
}

// SetDynamicVariablesWebhookUrl gets a reference to the given string and assigns it to the DynamicVariablesWebhookUrl field.
func (o *Assistant) SetDynamicVariablesWebhookUrl(v string) {
	o.DynamicVariablesWebhookUrl = &v
}

// GetDynamicVariables returns the DynamicVariables field value if set, zero value otherwise.
func (o *Assistant) GetDynamicVariables() map[string]interface{} {
	if o == nil || IsNil(o.DynamicVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.DynamicVariables
}

// GetDynamicVariablesOk returns a tuple with the DynamicVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assistant) GetDynamicVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DynamicVariables) {
		return map[string]interface{}{}, false
	}
	return o.DynamicVariables, true
}

// HasDynamicVariables returns a boolean if a field has been set.
func (o *Assistant) HasDynamicVariables() bool {
	if o != nil && !IsNil(o.DynamicVariables) {
		return true
	}

	return false
}

// SetDynamicVariables gets a reference to the given map[string]interface{} and assigns it to the DynamicVariables field.
func (o *Assistant) SetDynamicVariables(v map[string]interface{}) {
	o.DynamicVariables = v
}

func (o Assistant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assistant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["model"] = o.Model
	toSerialize["instructions"] = o.Instructions
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.Greeting) {
		toSerialize["greeting"] = o.Greeting
	}
	if !IsNil(o.LlmApiKeyRef) {
		toSerialize["llm_api_key_ref"] = o.LlmApiKeyRef
	}
	if !IsNil(o.VoiceSettings) {
		toSerialize["voice_settings"] = o.VoiceSettings
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.TelephonySettings) {
		toSerialize["telephony_settings"] = o.TelephonySettings
	}
	if !IsNil(o.MessagingSettings) {
		toSerialize["messaging_settings"] = o.MessagingSettings
	}
	if !IsNil(o.EnabledFeatures) {
		toSerialize["enabled_features"] = o.EnabledFeatures
	}
	if !IsNil(o.InsightSettings) {
		toSerialize["insight_settings"] = o.InsightSettings
	}
	if !IsNil(o.PrivacySettings) {
		toSerialize["privacy_settings"] = o.PrivacySettings
	}
	if !IsNil(o.DynamicVariablesWebhookUrl) {
		toSerialize["dynamic_variables_webhook_url"] = o.DynamicVariablesWebhookUrl
	}
	if !IsNil(o.DynamicVariables) {
		toSerialize["dynamic_variables"] = o.DynamicVariables
	}
	return toSerialize, nil
}

func (o *Assistant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"created_at",
		"model",
		"instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistant := _Assistant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistant)

	if err != nil {
		return err
	}

	*o = Assistant(varAssistant)

	return err
}

type NullableAssistant struct {
	value *Assistant
	isSet bool
}

func (v NullableAssistant) Get() *Assistant {
	return v.value
}

func (v *NullableAssistant) Set(val *Assistant) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistant) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistant(val *Assistant) *NullableAssistant {
	return &NullableAssistant{value: val, isSet: true}
}

func (v NullableAssistant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


