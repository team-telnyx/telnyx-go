/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the VirtualCrossConnectCoverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualCrossConnectCoverage{}

// VirtualCrossConnectCoverage struct for VirtualCrossConnectCoverage
type VirtualCrossConnectCoverage struct {
	// Identifies the type of the resource.
	RecordType *string `json:"record_type,omitempty"`
	Location *Location `json:"location,omitempty"`
	// The Virtual Private Cloud with which you would like to establish a cross connect.
	CloudProvider *string `json:"cloud_provider,omitempty"`
	// The region where your Virtual Private Cloud hosts are located. Should be identical to how the cloud provider names region, i.e. us-east-1 for AWS but Frankfurt for Azure
	CloudProviderRegion *string `json:"cloud_provider_region,omitempty"`
	// The available throughput in Megabits per Second (Mbps) for your Virtual Cross Connect.
	AvailableBandwidth []float32 `json:"available_bandwidth,omitempty"`
}

// NewVirtualCrossConnectCoverage instantiates a new VirtualCrossConnectCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCrossConnectCoverage() *VirtualCrossConnectCoverage {
	this := VirtualCrossConnectCoverage{}
	return &this
}

// NewVirtualCrossConnectCoverageWithDefaults instantiates a new VirtualCrossConnectCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCrossConnectCoverageWithDefaults() *VirtualCrossConnectCoverage {
	this := VirtualCrossConnectCoverage{}
	return &this
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *VirtualCrossConnectCoverage) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCoverage) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *VirtualCrossConnectCoverage) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *VirtualCrossConnectCoverage) SetRecordType(v string) {
	o.RecordType = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *VirtualCrossConnectCoverage) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCoverage) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *VirtualCrossConnectCoverage) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *VirtualCrossConnectCoverage) SetLocation(v Location) {
	o.Location = &v
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *VirtualCrossConnectCoverage) GetCloudProvider() string {
	if o == nil || IsNil(o.CloudProvider) {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCoverage) GetCloudProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProvider) {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *VirtualCrossConnectCoverage) HasCloudProvider() bool {
	if o != nil && !IsNil(o.CloudProvider) {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *VirtualCrossConnectCoverage) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetCloudProviderRegion returns the CloudProviderRegion field value if set, zero value otherwise.
func (o *VirtualCrossConnectCoverage) GetCloudProviderRegion() string {
	if o == nil || IsNil(o.CloudProviderRegion) {
		var ret string
		return ret
	}
	return *o.CloudProviderRegion
}

// GetCloudProviderRegionOk returns a tuple with the CloudProviderRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCoverage) GetCloudProviderRegionOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProviderRegion) {
		return nil, false
	}
	return o.CloudProviderRegion, true
}

// HasCloudProviderRegion returns a boolean if a field has been set.
func (o *VirtualCrossConnectCoverage) HasCloudProviderRegion() bool {
	if o != nil && !IsNil(o.CloudProviderRegion) {
		return true
	}

	return false
}

// SetCloudProviderRegion gets a reference to the given string and assigns it to the CloudProviderRegion field.
func (o *VirtualCrossConnectCoverage) SetCloudProviderRegion(v string) {
	o.CloudProviderRegion = &v
}

// GetAvailableBandwidth returns the AvailableBandwidth field value if set, zero value otherwise.
func (o *VirtualCrossConnectCoverage) GetAvailableBandwidth() []float32 {
	if o == nil || IsNil(o.AvailableBandwidth) {
		var ret []float32
		return ret
	}
	return o.AvailableBandwidth
}

// GetAvailableBandwidthOk returns a tuple with the AvailableBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCrossConnectCoverage) GetAvailableBandwidthOk() ([]float32, bool) {
	if o == nil || IsNil(o.AvailableBandwidth) {
		return nil, false
	}
	return o.AvailableBandwidth, true
}

// HasAvailableBandwidth returns a boolean if a field has been set.
func (o *VirtualCrossConnectCoverage) HasAvailableBandwidth() bool {
	if o != nil && !IsNil(o.AvailableBandwidth) {
		return true
	}

	return false
}

// SetAvailableBandwidth gets a reference to the given []float32 and assigns it to the AvailableBandwidth field.
func (o *VirtualCrossConnectCoverage) SetAvailableBandwidth(v []float32) {
	o.AvailableBandwidth = v
}

func (o VirtualCrossConnectCoverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualCrossConnectCoverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.CloudProvider) {
		toSerialize["cloud_provider"] = o.CloudProvider
	}
	if !IsNil(o.CloudProviderRegion) {
		toSerialize["cloud_provider_region"] = o.CloudProviderRegion
	}
	if !IsNil(o.AvailableBandwidth) {
		toSerialize["available_bandwidth"] = o.AvailableBandwidth
	}
	return toSerialize, nil
}

type NullableVirtualCrossConnectCoverage struct {
	value *VirtualCrossConnectCoverage
	isSet bool
}

func (v NullableVirtualCrossConnectCoverage) Get() *VirtualCrossConnectCoverage {
	return v.value
}

func (v *NullableVirtualCrossConnectCoverage) Set(val *VirtualCrossConnectCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCrossConnectCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCrossConnectCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCrossConnectCoverage(val *VirtualCrossConnectCoverage) *NullableVirtualCrossConnectCoverage {
	return &NullableVirtualCrossConnectCoverage{value: val, isSet: true}
}

func (v NullableVirtualCrossConnectCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCrossConnectCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


