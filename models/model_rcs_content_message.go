/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RCSContentMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCSContentMessage{}

// RCSContentMessage struct for RCSContentMessage
type RCSContentMessage struct {
	// List of suggested actions and replies
	Suggestions []RCSSuggestion `json:"suggestions,omitempty"`
	// Text (maximum 3072 characters)
	Text *string `json:"text,omitempty"`
	RichCard *RCSRichCard `json:"rich_card,omitempty"`
	ContentInfo *RCSContentInfo `json:"content_info,omitempty"`
}

// NewRCSContentMessage instantiates a new RCSContentMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCSContentMessage() *RCSContentMessage {
	this := RCSContentMessage{}
	return &this
}

// NewRCSContentMessageWithDefaults instantiates a new RCSContentMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCSContentMessageWithDefaults() *RCSContentMessage {
	this := RCSContentMessage{}
	return &this
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise.
func (o *RCSContentMessage) GetSuggestions() []RCSSuggestion {
	if o == nil || IsNil(o.Suggestions) {
		var ret []RCSSuggestion
		return ret
	}
	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSContentMessage) GetSuggestionsOk() ([]RCSSuggestion, bool) {
	if o == nil || IsNil(o.Suggestions) {
		return nil, false
	}
	return o.Suggestions, true
}

// HasSuggestions returns a boolean if a field has been set.
func (o *RCSContentMessage) HasSuggestions() bool {
	if o != nil && !IsNil(o.Suggestions) {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given []RCSSuggestion and assigns it to the Suggestions field.
func (o *RCSContentMessage) SetSuggestions(v []RCSSuggestion) {
	o.Suggestions = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RCSContentMessage) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSContentMessage) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RCSContentMessage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RCSContentMessage) SetText(v string) {
	o.Text = &v
}

// GetRichCard returns the RichCard field value if set, zero value otherwise.
func (o *RCSContentMessage) GetRichCard() RCSRichCard {
	if o == nil || IsNil(o.RichCard) {
		var ret RCSRichCard
		return ret
	}
	return *o.RichCard
}

// GetRichCardOk returns a tuple with the RichCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSContentMessage) GetRichCardOk() (*RCSRichCard, bool) {
	if o == nil || IsNil(o.RichCard) {
		return nil, false
	}
	return o.RichCard, true
}

// HasRichCard returns a boolean if a field has been set.
func (o *RCSContentMessage) HasRichCard() bool {
	if o != nil && !IsNil(o.RichCard) {
		return true
	}

	return false
}

// SetRichCard gets a reference to the given RCSRichCard and assigns it to the RichCard field.
func (o *RCSContentMessage) SetRichCard(v RCSRichCard) {
	o.RichCard = &v
}

// GetContentInfo returns the ContentInfo field value if set, zero value otherwise.
func (o *RCSContentMessage) GetContentInfo() RCSContentInfo {
	if o == nil || IsNil(o.ContentInfo) {
		var ret RCSContentInfo
		return ret
	}
	return *o.ContentInfo
}

// GetContentInfoOk returns a tuple with the ContentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCSContentMessage) GetContentInfoOk() (*RCSContentInfo, bool) {
	if o == nil || IsNil(o.ContentInfo) {
		return nil, false
	}
	return o.ContentInfo, true
}

// HasContentInfo returns a boolean if a field has been set.
func (o *RCSContentMessage) HasContentInfo() bool {
	if o != nil && !IsNil(o.ContentInfo) {
		return true
	}

	return false
}

// SetContentInfo gets a reference to the given RCSContentInfo and assigns it to the ContentInfo field.
func (o *RCSContentMessage) SetContentInfo(v RCSContentInfo) {
	o.ContentInfo = &v
}

func (o RCSContentMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCSContentMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Suggestions) {
		toSerialize["suggestions"] = o.Suggestions
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.RichCard) {
		toSerialize["rich_card"] = o.RichCard
	}
	if !IsNil(o.ContentInfo) {
		toSerialize["content_info"] = o.ContentInfo
	}
	return toSerialize, nil
}

type NullableRCSContentMessage struct {
	value *RCSContentMessage
	isSet bool
}

func (v NullableRCSContentMessage) Get() *RCSContentMessage {
	return v.value
}

func (v *NullableRCSContentMessage) Set(val *RCSContentMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableRCSContentMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableRCSContentMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCSContentMessage(val *RCSContentMessage) *NullableRCSContentMessage {
	return &NullableRCSContentMessage{value: val, isSet: true}
}

func (v NullableRCSContentMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCSContentMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


