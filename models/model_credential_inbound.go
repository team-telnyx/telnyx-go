/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the CredentialInbound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialInbound{}

// CredentialInbound struct for CredentialInbound
type CredentialInbound struct {
	// This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.
	AniNumberFormat *string `json:"ani_number_format,omitempty"`
	DnisNumberFormat *string `json:"dnis_number_format,omitempty"`
	// Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.
	Codecs []string `json:"codecs,omitempty"`
	// When set, this will limit the total number of inbound calls to phone numbers associated with this connection.
	ChannelLimit *int32 `json:"channel_limit,omitempty"`
	// Generate ringback tone through 183 session progress message with early media.
	GenerateRingbackTone *bool `json:"generate_ringback_tone,omitempty"`
	// When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)
	IsupHeadersEnabled *bool `json:"isup_headers_enabled,omitempty"`
	// Enable PRACK messages as defined in RFC3262.
	PrackEnabled *bool `json:"prack_enabled,omitempty"`
	// Defaults to true.
	SipCompactHeadersEnabled *bool `json:"sip_compact_headers_enabled,omitempty"`
	// Time(sec) before aborting if connection is not made.
	Timeout1xxSecs *int32 `json:"timeout_1xx_secs,omitempty"`
	// Time(sec) before aborting if call is unanswered (min: 1, max: 600).
	Timeout2xxSecs *int32 `json:"timeout_2xx_secs,omitempty"`
	// When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.
	ShakenStirEnabled *bool `json:"shaken_stir_enabled,omitempty"`
}

// NewCredentialInbound instantiates a new CredentialInbound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialInbound() *CredentialInbound {
	this := CredentialInbound{}
	var aniNumberFormat string = "E.164-national"
	this.AniNumberFormat = &aniNumberFormat
	var dnisNumberFormat string = "e164"
	this.DnisNumberFormat = &dnisNumberFormat
	var generateRingbackTone bool = false
	this.GenerateRingbackTone = &generateRingbackTone
	var isupHeadersEnabled bool = false
	this.IsupHeadersEnabled = &isupHeadersEnabled
	var prackEnabled bool = false
	this.PrackEnabled = &prackEnabled
	var sipCompactHeadersEnabled bool = true
	this.SipCompactHeadersEnabled = &sipCompactHeadersEnabled
	var timeout1xxSecs int32 = 3
	this.Timeout1xxSecs = &timeout1xxSecs
	var timeout2xxSecs int32 = 90
	this.Timeout2xxSecs = &timeout2xxSecs
	var shakenStirEnabled bool = false
	this.ShakenStirEnabled = &shakenStirEnabled
	return &this
}

// NewCredentialInboundWithDefaults instantiates a new CredentialInbound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialInboundWithDefaults() *CredentialInbound {
	this := CredentialInbound{}
	var aniNumberFormat string = "E.164-national"
	this.AniNumberFormat = &aniNumberFormat
	var dnisNumberFormat string = "e164"
	this.DnisNumberFormat = &dnisNumberFormat
	var generateRingbackTone bool = false
	this.GenerateRingbackTone = &generateRingbackTone
	var isupHeadersEnabled bool = false
	this.IsupHeadersEnabled = &isupHeadersEnabled
	var prackEnabled bool = false
	this.PrackEnabled = &prackEnabled
	var sipCompactHeadersEnabled bool = true
	this.SipCompactHeadersEnabled = &sipCompactHeadersEnabled
	var timeout1xxSecs int32 = 3
	this.Timeout1xxSecs = &timeout1xxSecs
	var timeout2xxSecs int32 = 90
	this.Timeout2xxSecs = &timeout2xxSecs
	var shakenStirEnabled bool = false
	this.ShakenStirEnabled = &shakenStirEnabled
	return &this
}

// GetAniNumberFormat returns the AniNumberFormat field value if set, zero value otherwise.
func (o *CredentialInbound) GetAniNumberFormat() string {
	if o == nil || IsNil(o.AniNumberFormat) {
		var ret string
		return ret
	}
	return *o.AniNumberFormat
}

// GetAniNumberFormatOk returns a tuple with the AniNumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetAniNumberFormatOk() (*string, bool) {
	if o == nil || IsNil(o.AniNumberFormat) {
		return nil, false
	}
	return o.AniNumberFormat, true
}

// HasAniNumberFormat returns a boolean if a field has been set.
func (o *CredentialInbound) HasAniNumberFormat() bool {
	if o != nil && !IsNil(o.AniNumberFormat) {
		return true
	}

	return false
}

// SetAniNumberFormat gets a reference to the given string and assigns it to the AniNumberFormat field.
func (o *CredentialInbound) SetAniNumberFormat(v string) {
	o.AniNumberFormat = &v
}

// GetDnisNumberFormat returns the DnisNumberFormat field value if set, zero value otherwise.
func (o *CredentialInbound) GetDnisNumberFormat() string {
	if o == nil || IsNil(o.DnisNumberFormat) {
		var ret string
		return ret
	}
	return *o.DnisNumberFormat
}

// GetDnisNumberFormatOk returns a tuple with the DnisNumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetDnisNumberFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DnisNumberFormat) {
		return nil, false
	}
	return o.DnisNumberFormat, true
}

// HasDnisNumberFormat returns a boolean if a field has been set.
func (o *CredentialInbound) HasDnisNumberFormat() bool {
	if o != nil && !IsNil(o.DnisNumberFormat) {
		return true
	}

	return false
}

// SetDnisNumberFormat gets a reference to the given string and assigns it to the DnisNumberFormat field.
func (o *CredentialInbound) SetDnisNumberFormat(v string) {
	o.DnisNumberFormat = &v
}

// GetCodecs returns the Codecs field value if set, zero value otherwise.
func (o *CredentialInbound) GetCodecs() []string {
	if o == nil || IsNil(o.Codecs) {
		var ret []string
		return ret
	}
	return o.Codecs
}

// GetCodecsOk returns a tuple with the Codecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetCodecsOk() ([]string, bool) {
	if o == nil || IsNil(o.Codecs) {
		return nil, false
	}
	return o.Codecs, true
}

// HasCodecs returns a boolean if a field has been set.
func (o *CredentialInbound) HasCodecs() bool {
	if o != nil && !IsNil(o.Codecs) {
		return true
	}

	return false
}

// SetCodecs gets a reference to the given []string and assigns it to the Codecs field.
func (o *CredentialInbound) SetCodecs(v []string) {
	o.Codecs = v
}

// GetChannelLimit returns the ChannelLimit field value if set, zero value otherwise.
func (o *CredentialInbound) GetChannelLimit() int32 {
	if o == nil || IsNil(o.ChannelLimit) {
		var ret int32
		return ret
	}
	return *o.ChannelLimit
}

// GetChannelLimitOk returns a tuple with the ChannelLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetChannelLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ChannelLimit) {
		return nil, false
	}
	return o.ChannelLimit, true
}

// HasChannelLimit returns a boolean if a field has been set.
func (o *CredentialInbound) HasChannelLimit() bool {
	if o != nil && !IsNil(o.ChannelLimit) {
		return true
	}

	return false
}

// SetChannelLimit gets a reference to the given int32 and assigns it to the ChannelLimit field.
func (o *CredentialInbound) SetChannelLimit(v int32) {
	o.ChannelLimit = &v
}

// GetGenerateRingbackTone returns the GenerateRingbackTone field value if set, zero value otherwise.
func (o *CredentialInbound) GetGenerateRingbackTone() bool {
	if o == nil || IsNil(o.GenerateRingbackTone) {
		var ret bool
		return ret
	}
	return *o.GenerateRingbackTone
}

// GetGenerateRingbackToneOk returns a tuple with the GenerateRingbackTone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetGenerateRingbackToneOk() (*bool, bool) {
	if o == nil || IsNil(o.GenerateRingbackTone) {
		return nil, false
	}
	return o.GenerateRingbackTone, true
}

// HasGenerateRingbackTone returns a boolean if a field has been set.
func (o *CredentialInbound) HasGenerateRingbackTone() bool {
	if o != nil && !IsNil(o.GenerateRingbackTone) {
		return true
	}

	return false
}

// SetGenerateRingbackTone gets a reference to the given bool and assigns it to the GenerateRingbackTone field.
func (o *CredentialInbound) SetGenerateRingbackTone(v bool) {
	o.GenerateRingbackTone = &v
}

// GetIsupHeadersEnabled returns the IsupHeadersEnabled field value if set, zero value otherwise.
func (o *CredentialInbound) GetIsupHeadersEnabled() bool {
	if o == nil || IsNil(o.IsupHeadersEnabled) {
		var ret bool
		return ret
	}
	return *o.IsupHeadersEnabled
}

// GetIsupHeadersEnabledOk returns a tuple with the IsupHeadersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetIsupHeadersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsupHeadersEnabled) {
		return nil, false
	}
	return o.IsupHeadersEnabled, true
}

// HasIsupHeadersEnabled returns a boolean if a field has been set.
func (o *CredentialInbound) HasIsupHeadersEnabled() bool {
	if o != nil && !IsNil(o.IsupHeadersEnabled) {
		return true
	}

	return false
}

// SetIsupHeadersEnabled gets a reference to the given bool and assigns it to the IsupHeadersEnabled field.
func (o *CredentialInbound) SetIsupHeadersEnabled(v bool) {
	o.IsupHeadersEnabled = &v
}

// GetPrackEnabled returns the PrackEnabled field value if set, zero value otherwise.
func (o *CredentialInbound) GetPrackEnabled() bool {
	if o == nil || IsNil(o.PrackEnabled) {
		var ret bool
		return ret
	}
	return *o.PrackEnabled
}

// GetPrackEnabledOk returns a tuple with the PrackEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetPrackEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PrackEnabled) {
		return nil, false
	}
	return o.PrackEnabled, true
}

// HasPrackEnabled returns a boolean if a field has been set.
func (o *CredentialInbound) HasPrackEnabled() bool {
	if o != nil && !IsNil(o.PrackEnabled) {
		return true
	}

	return false
}

// SetPrackEnabled gets a reference to the given bool and assigns it to the PrackEnabled field.
func (o *CredentialInbound) SetPrackEnabled(v bool) {
	o.PrackEnabled = &v
}

// GetSipCompactHeadersEnabled returns the SipCompactHeadersEnabled field value if set, zero value otherwise.
func (o *CredentialInbound) GetSipCompactHeadersEnabled() bool {
	if o == nil || IsNil(o.SipCompactHeadersEnabled) {
		var ret bool
		return ret
	}
	return *o.SipCompactHeadersEnabled
}

// GetSipCompactHeadersEnabledOk returns a tuple with the SipCompactHeadersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetSipCompactHeadersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SipCompactHeadersEnabled) {
		return nil, false
	}
	return o.SipCompactHeadersEnabled, true
}

// HasSipCompactHeadersEnabled returns a boolean if a field has been set.
func (o *CredentialInbound) HasSipCompactHeadersEnabled() bool {
	if o != nil && !IsNil(o.SipCompactHeadersEnabled) {
		return true
	}

	return false
}

// SetSipCompactHeadersEnabled gets a reference to the given bool and assigns it to the SipCompactHeadersEnabled field.
func (o *CredentialInbound) SetSipCompactHeadersEnabled(v bool) {
	o.SipCompactHeadersEnabled = &v
}

// GetTimeout1xxSecs returns the Timeout1xxSecs field value if set, zero value otherwise.
func (o *CredentialInbound) GetTimeout1xxSecs() int32 {
	if o == nil || IsNil(o.Timeout1xxSecs) {
		var ret int32
		return ret
	}
	return *o.Timeout1xxSecs
}

// GetTimeout1xxSecsOk returns a tuple with the Timeout1xxSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetTimeout1xxSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout1xxSecs) {
		return nil, false
	}
	return o.Timeout1xxSecs, true
}

// HasTimeout1xxSecs returns a boolean if a field has been set.
func (o *CredentialInbound) HasTimeout1xxSecs() bool {
	if o != nil && !IsNil(o.Timeout1xxSecs) {
		return true
	}

	return false
}

// SetTimeout1xxSecs gets a reference to the given int32 and assigns it to the Timeout1xxSecs field.
func (o *CredentialInbound) SetTimeout1xxSecs(v int32) {
	o.Timeout1xxSecs = &v
}

// GetTimeout2xxSecs returns the Timeout2xxSecs field value if set, zero value otherwise.
func (o *CredentialInbound) GetTimeout2xxSecs() int32 {
	if o == nil || IsNil(o.Timeout2xxSecs) {
		var ret int32
		return ret
	}
	return *o.Timeout2xxSecs
}

// GetTimeout2xxSecsOk returns a tuple with the Timeout2xxSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetTimeout2xxSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout2xxSecs) {
		return nil, false
	}
	return o.Timeout2xxSecs, true
}

// HasTimeout2xxSecs returns a boolean if a field has been set.
func (o *CredentialInbound) HasTimeout2xxSecs() bool {
	if o != nil && !IsNil(o.Timeout2xxSecs) {
		return true
	}

	return false
}

// SetTimeout2xxSecs gets a reference to the given int32 and assigns it to the Timeout2xxSecs field.
func (o *CredentialInbound) SetTimeout2xxSecs(v int32) {
	o.Timeout2xxSecs = &v
}

// GetShakenStirEnabled returns the ShakenStirEnabled field value if set, zero value otherwise.
func (o *CredentialInbound) GetShakenStirEnabled() bool {
	if o == nil || IsNil(o.ShakenStirEnabled) {
		var ret bool
		return ret
	}
	return *o.ShakenStirEnabled
}

// GetShakenStirEnabledOk returns a tuple with the ShakenStirEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialInbound) GetShakenStirEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ShakenStirEnabled) {
		return nil, false
	}
	return o.ShakenStirEnabled, true
}

// HasShakenStirEnabled returns a boolean if a field has been set.
func (o *CredentialInbound) HasShakenStirEnabled() bool {
	if o != nil && !IsNil(o.ShakenStirEnabled) {
		return true
	}

	return false
}

// SetShakenStirEnabled gets a reference to the given bool and assigns it to the ShakenStirEnabled field.
func (o *CredentialInbound) SetShakenStirEnabled(v bool) {
	o.ShakenStirEnabled = &v
}

func (o CredentialInbound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialInbound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AniNumberFormat) {
		toSerialize["ani_number_format"] = o.AniNumberFormat
	}
	if !IsNil(o.DnisNumberFormat) {
		toSerialize["dnis_number_format"] = o.DnisNumberFormat
	}
	if !IsNil(o.Codecs) {
		toSerialize["codecs"] = o.Codecs
	}
	if !IsNil(o.ChannelLimit) {
		toSerialize["channel_limit"] = o.ChannelLimit
	}
	if !IsNil(o.GenerateRingbackTone) {
		toSerialize["generate_ringback_tone"] = o.GenerateRingbackTone
	}
	if !IsNil(o.IsupHeadersEnabled) {
		toSerialize["isup_headers_enabled"] = o.IsupHeadersEnabled
	}
	if !IsNil(o.PrackEnabled) {
		toSerialize["prack_enabled"] = o.PrackEnabled
	}
	if !IsNil(o.SipCompactHeadersEnabled) {
		toSerialize["sip_compact_headers_enabled"] = o.SipCompactHeadersEnabled
	}
	if !IsNil(o.Timeout1xxSecs) {
		toSerialize["timeout_1xx_secs"] = o.Timeout1xxSecs
	}
	if !IsNil(o.Timeout2xxSecs) {
		toSerialize["timeout_2xx_secs"] = o.Timeout2xxSecs
	}
	if !IsNil(o.ShakenStirEnabled) {
		toSerialize["shaken_stir_enabled"] = o.ShakenStirEnabled
	}
	return toSerialize, nil
}

type NullableCredentialInbound struct {
	value *CredentialInbound
	isSet bool
}

func (v NullableCredentialInbound) Get() *CredentialInbound {
	return v.value
}

func (v *NullableCredentialInbound) Set(val *CredentialInbound) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialInbound) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialInbound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialInbound(val *CredentialInbound) *NullableCredentialInbound {
	return &NullableCredentialInbound{value: val, isSet: true}
}

func (v NullableCredentialInbound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialInbound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


