/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PortoutEventPayload - struct for PortoutEventPayload
type PortoutEventPayload struct {
	WebhookPortoutFocDateChangedPayload *WebhookPortoutFocDateChangedPayload
	WebhookPortoutNewCommentPayload *WebhookPortoutNewCommentPayload
	WebhookPortoutStatusChangedPayload *WebhookPortoutStatusChangedPayload
}

// WebhookPortoutFocDateChangedPayloadAsPortoutEventPayload is a convenience function that returns WebhookPortoutFocDateChangedPayload wrapped in PortoutEventPayload
func WebhookPortoutFocDateChangedPayloadAsPortoutEventPayload(v *WebhookPortoutFocDateChangedPayload) PortoutEventPayload {
	return PortoutEventPayload{
		WebhookPortoutFocDateChangedPayload: v,
	}
}

// WebhookPortoutNewCommentPayloadAsPortoutEventPayload is a convenience function that returns WebhookPortoutNewCommentPayload wrapped in PortoutEventPayload
func WebhookPortoutNewCommentPayloadAsPortoutEventPayload(v *WebhookPortoutNewCommentPayload) PortoutEventPayload {
	return PortoutEventPayload{
		WebhookPortoutNewCommentPayload: v,
	}
}

// WebhookPortoutStatusChangedPayloadAsPortoutEventPayload is a convenience function that returns WebhookPortoutStatusChangedPayload wrapped in PortoutEventPayload
func WebhookPortoutStatusChangedPayloadAsPortoutEventPayload(v *WebhookPortoutStatusChangedPayload) PortoutEventPayload {
	return PortoutEventPayload{
		WebhookPortoutStatusChangedPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PortoutEventPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WebhookPortoutFocDateChangedPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortoutFocDateChangedPayload)
	if err == nil {
		jsonWebhookPortoutFocDateChangedPayload, _ := json.Marshal(dst.WebhookPortoutFocDateChangedPayload)
		if string(jsonWebhookPortoutFocDateChangedPayload) == "{}" { // empty struct
			dst.WebhookPortoutFocDateChangedPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortoutFocDateChangedPayload); err != nil {
				dst.WebhookPortoutFocDateChangedPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortoutFocDateChangedPayload = nil
	}

	// try to unmarshal data into WebhookPortoutNewCommentPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortoutNewCommentPayload)
	if err == nil {
		jsonWebhookPortoutNewCommentPayload, _ := json.Marshal(dst.WebhookPortoutNewCommentPayload)
		if string(jsonWebhookPortoutNewCommentPayload) == "{}" { // empty struct
			dst.WebhookPortoutNewCommentPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortoutNewCommentPayload); err != nil {
				dst.WebhookPortoutNewCommentPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortoutNewCommentPayload = nil
	}

	// try to unmarshal data into WebhookPortoutStatusChangedPayload
	err = newStrictDecoder(data).Decode(&dst.WebhookPortoutStatusChangedPayload)
	if err == nil {
		jsonWebhookPortoutStatusChangedPayload, _ := json.Marshal(dst.WebhookPortoutStatusChangedPayload)
		if string(jsonWebhookPortoutStatusChangedPayload) == "{}" { // empty struct
			dst.WebhookPortoutStatusChangedPayload = nil
		} else {
			if err = validator.Validate(dst.WebhookPortoutStatusChangedPayload); err != nil {
				dst.WebhookPortoutStatusChangedPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookPortoutStatusChangedPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WebhookPortoutFocDateChangedPayload = nil
		dst.WebhookPortoutNewCommentPayload = nil
		dst.WebhookPortoutStatusChangedPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PortoutEventPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PortoutEventPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PortoutEventPayload) MarshalJSON() ([]byte, error) {
	if src.WebhookPortoutFocDateChangedPayload != nil {
		return json.Marshal(&src.WebhookPortoutFocDateChangedPayload)
	}

	if src.WebhookPortoutNewCommentPayload != nil {
		return json.Marshal(&src.WebhookPortoutNewCommentPayload)
	}

	if src.WebhookPortoutStatusChangedPayload != nil {
		return json.Marshal(&src.WebhookPortoutStatusChangedPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PortoutEventPayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WebhookPortoutFocDateChangedPayload != nil {
		return obj.WebhookPortoutFocDateChangedPayload
	}

	if obj.WebhookPortoutNewCommentPayload != nil {
		return obj.WebhookPortoutNewCommentPayload
	}

	if obj.WebhookPortoutStatusChangedPayload != nil {
		return obj.WebhookPortoutStatusChangedPayload
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PortoutEventPayload) GetActualInstanceValue() (interface{}) {
	if obj.WebhookPortoutFocDateChangedPayload != nil {
		return *obj.WebhookPortoutFocDateChangedPayload
	}

	if obj.WebhookPortoutNewCommentPayload != nil {
		return *obj.WebhookPortoutNewCommentPayload
	}

	if obj.WebhookPortoutStatusChangedPayload != nil {
		return *obj.WebhookPortoutStatusChangedPayload
	}

	// all schemas are nil
	return nil
}

type NullablePortoutEventPayload struct {
	value *PortoutEventPayload
	isSet bool
}

func (v NullablePortoutEventPayload) Get() *PortoutEventPayload {
	return v.value
}

func (v *NullablePortoutEventPayload) Set(val *PortoutEventPayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePortoutEventPayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePortoutEventPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortoutEventPayload(val *PortoutEventPayload) *NullablePortoutEventPayload {
	return &NullablePortoutEventPayload{value: val, isSet: true}
}

func (v NullablePortoutEventPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortoutEventPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


