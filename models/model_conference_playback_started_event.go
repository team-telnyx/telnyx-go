/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the ConferencePlaybackStartedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferencePlaybackStartedEvent{}

// ConferencePlaybackStartedEvent struct for ConferencePlaybackStartedEvent
type ConferencePlaybackStartedEvent struct {
	Data *ConferencePlaybackStarted `json:"data,omitempty"`
}

// NewConferencePlaybackStartedEvent instantiates a new ConferencePlaybackStartedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferencePlaybackStartedEvent() *ConferencePlaybackStartedEvent {
	this := ConferencePlaybackStartedEvent{}
	return &this
}

// NewConferencePlaybackStartedEventWithDefaults instantiates a new ConferencePlaybackStartedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferencePlaybackStartedEventWithDefaults() *ConferencePlaybackStartedEvent {
	this := ConferencePlaybackStartedEvent{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConferencePlaybackStartedEvent) GetData() ConferencePlaybackStarted {
	if o == nil || IsNil(o.Data) {
		var ret ConferencePlaybackStarted
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferencePlaybackStartedEvent) GetDataOk() (*ConferencePlaybackStarted, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConferencePlaybackStartedEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ConferencePlaybackStarted and assigns it to the Data field.
func (o *ConferencePlaybackStartedEvent) SetData(v ConferencePlaybackStarted) {
	o.Data = &v
}

func (o ConferencePlaybackStartedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferencePlaybackStartedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableConferencePlaybackStartedEvent struct {
	value *ConferencePlaybackStartedEvent
	isSet bool
}

func (v NullableConferencePlaybackStartedEvent) Get() *ConferencePlaybackStartedEvent {
	return v.value
}

func (v *NullableConferencePlaybackStartedEvent) Set(val *ConferencePlaybackStartedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableConferencePlaybackStartedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableConferencePlaybackStartedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferencePlaybackStartedEvent(val *ConferencePlaybackStartedEvent) *NullableConferencePlaybackStartedEvent {
	return &NullableConferencePlaybackStartedEvent{value: val, isSet: true}
}

func (v NullableConferencePlaybackStartedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferencePlaybackStartedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


