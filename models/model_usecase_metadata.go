/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the UsecaseMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsecaseMetadata{}

// UsecaseMetadata struct for UsecaseMetadata
type UsecaseMetadata struct {
	// Campaign annual subscription fee
	AnnualFee *float32 `json:"annualFee,omitempty"`
	// Maximum number of sub-usecases declaration required.
	MaxSubUsecases *int32 `json:"maxSubUsecases,omitempty"`
	// Minimum number of sub-usecases declaration required.
	MinSubUsecases *int32 `json:"minSubUsecases,omitempty"`
	// Map of usecase metadata for each MNO. Key is the network ID of the MNO (e.g. 10017), Value is the mno metadata for the usecase.
	MnoMetadata map[string]interface{} `json:"mnoMetadata,omitempty"`
	// Campaign monthly subscription fee
	MonthlyFee *float32 `json:"monthlyFee,omitempty"`
	// Campaign quarterly subscription fee
	QuarterlyFee *float32 `json:"quarterlyFee,omitempty"`
	// Campaign usecase
	Usecase *string `json:"usecase,omitempty"`
}

// NewUsecaseMetadata instantiates a new UsecaseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsecaseMetadata() *UsecaseMetadata {
	this := UsecaseMetadata{}
	return &this
}

// NewUsecaseMetadataWithDefaults instantiates a new UsecaseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsecaseMetadataWithDefaults() *UsecaseMetadata {
	this := UsecaseMetadata{}
	return &this
}

// GetAnnualFee returns the AnnualFee field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetAnnualFee() float32 {
	if o == nil || IsNil(o.AnnualFee) {
		var ret float32
		return ret
	}
	return *o.AnnualFee
}

// GetAnnualFeeOk returns a tuple with the AnnualFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetAnnualFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.AnnualFee) {
		return nil, false
	}
	return o.AnnualFee, true
}

// HasAnnualFee returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasAnnualFee() bool {
	if o != nil && !IsNil(o.AnnualFee) {
		return true
	}

	return false
}

// SetAnnualFee gets a reference to the given float32 and assigns it to the AnnualFee field.
func (o *UsecaseMetadata) SetAnnualFee(v float32) {
	o.AnnualFee = &v
}

// GetMaxSubUsecases returns the MaxSubUsecases field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetMaxSubUsecases() int32 {
	if o == nil || IsNil(o.MaxSubUsecases) {
		var ret int32
		return ret
	}
	return *o.MaxSubUsecases
}

// GetMaxSubUsecasesOk returns a tuple with the MaxSubUsecases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetMaxSubUsecasesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSubUsecases) {
		return nil, false
	}
	return o.MaxSubUsecases, true
}

// HasMaxSubUsecases returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasMaxSubUsecases() bool {
	if o != nil && !IsNil(o.MaxSubUsecases) {
		return true
	}

	return false
}

// SetMaxSubUsecases gets a reference to the given int32 and assigns it to the MaxSubUsecases field.
func (o *UsecaseMetadata) SetMaxSubUsecases(v int32) {
	o.MaxSubUsecases = &v
}

// GetMinSubUsecases returns the MinSubUsecases field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetMinSubUsecases() int32 {
	if o == nil || IsNil(o.MinSubUsecases) {
		var ret int32
		return ret
	}
	return *o.MinSubUsecases
}

// GetMinSubUsecasesOk returns a tuple with the MinSubUsecases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetMinSubUsecasesOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSubUsecases) {
		return nil, false
	}
	return o.MinSubUsecases, true
}

// HasMinSubUsecases returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasMinSubUsecases() bool {
	if o != nil && !IsNil(o.MinSubUsecases) {
		return true
	}

	return false
}

// SetMinSubUsecases gets a reference to the given int32 and assigns it to the MinSubUsecases field.
func (o *UsecaseMetadata) SetMinSubUsecases(v int32) {
	o.MinSubUsecases = &v
}

// GetMnoMetadata returns the MnoMetadata field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetMnoMetadata() map[string]interface{} {
	if o == nil || IsNil(o.MnoMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.MnoMetadata
}

// GetMnoMetadataOk returns a tuple with the MnoMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetMnoMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MnoMetadata) {
		return map[string]interface{}{}, false
	}
	return o.MnoMetadata, true
}

// HasMnoMetadata returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasMnoMetadata() bool {
	if o != nil && !IsNil(o.MnoMetadata) {
		return true
	}

	return false
}

// SetMnoMetadata gets a reference to the given map[string]interface{} and assigns it to the MnoMetadata field.
func (o *UsecaseMetadata) SetMnoMetadata(v map[string]interface{}) {
	o.MnoMetadata = v
}

// GetMonthlyFee returns the MonthlyFee field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetMonthlyFee() float32 {
	if o == nil || IsNil(o.MonthlyFee) {
		var ret float32
		return ret
	}
	return *o.MonthlyFee
}

// GetMonthlyFeeOk returns a tuple with the MonthlyFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetMonthlyFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.MonthlyFee) {
		return nil, false
	}
	return o.MonthlyFee, true
}

// HasMonthlyFee returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasMonthlyFee() bool {
	if o != nil && !IsNil(o.MonthlyFee) {
		return true
	}

	return false
}

// SetMonthlyFee gets a reference to the given float32 and assigns it to the MonthlyFee field.
func (o *UsecaseMetadata) SetMonthlyFee(v float32) {
	o.MonthlyFee = &v
}

// GetQuarterlyFee returns the QuarterlyFee field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetQuarterlyFee() float32 {
	if o == nil || IsNil(o.QuarterlyFee) {
		var ret float32
		return ret
	}
	return *o.QuarterlyFee
}

// GetQuarterlyFeeOk returns a tuple with the QuarterlyFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetQuarterlyFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.QuarterlyFee) {
		return nil, false
	}
	return o.QuarterlyFee, true
}

// HasQuarterlyFee returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasQuarterlyFee() bool {
	if o != nil && !IsNil(o.QuarterlyFee) {
		return true
	}

	return false
}

// SetQuarterlyFee gets a reference to the given float32 and assigns it to the QuarterlyFee field.
func (o *UsecaseMetadata) SetQuarterlyFee(v float32) {
	o.QuarterlyFee = &v
}

// GetUsecase returns the Usecase field value if set, zero value otherwise.
func (o *UsecaseMetadata) GetUsecase() string {
	if o == nil || IsNil(o.Usecase) {
		var ret string
		return ret
	}
	return *o.Usecase
}

// GetUsecaseOk returns a tuple with the Usecase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsecaseMetadata) GetUsecaseOk() (*string, bool) {
	if o == nil || IsNil(o.Usecase) {
		return nil, false
	}
	return o.Usecase, true
}

// HasUsecase returns a boolean if a field has been set.
func (o *UsecaseMetadata) HasUsecase() bool {
	if o != nil && !IsNil(o.Usecase) {
		return true
	}

	return false
}

// SetUsecase gets a reference to the given string and assigns it to the Usecase field.
func (o *UsecaseMetadata) SetUsecase(v string) {
	o.Usecase = &v
}

func (o UsecaseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsecaseMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnnualFee) {
		toSerialize["annualFee"] = o.AnnualFee
	}
	if !IsNil(o.MaxSubUsecases) {
		toSerialize["maxSubUsecases"] = o.MaxSubUsecases
	}
	if !IsNil(o.MinSubUsecases) {
		toSerialize["minSubUsecases"] = o.MinSubUsecases
	}
	if !IsNil(o.MnoMetadata) {
		toSerialize["mnoMetadata"] = o.MnoMetadata
	}
	if !IsNil(o.MonthlyFee) {
		toSerialize["monthlyFee"] = o.MonthlyFee
	}
	if !IsNil(o.QuarterlyFee) {
		toSerialize["quarterlyFee"] = o.QuarterlyFee
	}
	if !IsNil(o.Usecase) {
		toSerialize["usecase"] = o.Usecase
	}
	return toSerialize, nil
}

type NullableUsecaseMetadata struct {
	value *UsecaseMetadata
	isSet bool
}

func (v NullableUsecaseMetadata) Get() *UsecaseMetadata {
	return v.value
}

func (v *NullableUsecaseMetadata) Set(val *UsecaseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableUsecaseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableUsecaseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsecaseMetadata(val *UsecaseMetadata) *NullableUsecaseMetadata {
	return &NullableUsecaseMetadata{value: val, isSet: true}
}

func (v NullableUsecaseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsecaseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


