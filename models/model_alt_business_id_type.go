/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
	"fmt"
)

// AltBusinessIdType An enumeration.
type AltBusinessIdType string

// List of AltBusinessIdType
const (
	NONE AltBusinessIdType = "NONE"
	DUNS AltBusinessIdType = "DUNS"
	GIIN AltBusinessIdType = "GIIN"
	LEI AltBusinessIdType = "LEI"
)

// All allowed values of AltBusinessIdType enum
var AllowedAltBusinessIdTypeEnumValues = []AltBusinessIdType{
	"NONE",
	"DUNS",
	"GIIN",
	"LEI",
}

func (v *AltBusinessIdType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AltBusinessIdType(value)
	for _, existing := range AllowedAltBusinessIdTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AltBusinessIdType", value)
}

// NewAltBusinessIdTypeFromValue returns a pointer to a valid AltBusinessIdType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAltBusinessIdTypeFromValue(v string) (*AltBusinessIdType, error) {
	ev := AltBusinessIdType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AltBusinessIdType: valid values are %v", v, AllowedAltBusinessIdTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AltBusinessIdType) IsValid() bool {
	for _, existing := range AllowedAltBusinessIdTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AltBusinessIdType value
func (v AltBusinessIdType) Ptr() *AltBusinessIdType {
	return &v
}

type NullableAltBusinessIdType struct {
	value *AltBusinessIdType
	isSet bool
}

func (v NullableAltBusinessIdType) Get() *AltBusinessIdType {
	return v.value
}

func (v *NullableAltBusinessIdType) Set(val *AltBusinessIdType) {
	v.value = val
	v.isSet = true
}

func (v NullableAltBusinessIdType) IsSet() bool {
	return v.isSet
}

func (v *NullableAltBusinessIdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAltBusinessIdType(val *AltBusinessIdType) *NullableAltBusinessIdType {
	return &NullableAltBusinessIdType{value: val, isSet: true}
}

func (v NullableAltBusinessIdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAltBusinessIdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

