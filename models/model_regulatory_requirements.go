/*
Telnyx API

SIP trunking, SMS, MMS, Call Control and Telephony Data Services.

API version: 2.0.0
Contact: support@telnyx.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package telnyx

import (
	"encoding/json"
)

// checks if the RegulatoryRequirements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegulatoryRequirements{}

// RegulatoryRequirements struct for RegulatoryRequirements
type RegulatoryRequirements struct {
	CountryCode *string `json:"country_code,omitempty"`
	PhoneNumberType *string `json:"phone_number_type,omitempty"`
	Action *string `json:"action,omitempty"`
	RegulatoryRequirements []RegulatoryRequirementsRegulatoryRequirementsInner `json:"regulatory_requirements,omitempty"`
}

// NewRegulatoryRequirements instantiates a new RegulatoryRequirements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegulatoryRequirements() *RegulatoryRequirements {
	this := RegulatoryRequirements{}
	return &this
}

// NewRegulatoryRequirementsWithDefaults instantiates a new RegulatoryRequirements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegulatoryRequirementsWithDefaults() *RegulatoryRequirements {
	this := RegulatoryRequirements{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *RegulatoryRequirements) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirements) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *RegulatoryRequirements) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *RegulatoryRequirements) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetPhoneNumberType returns the PhoneNumberType field value if set, zero value otherwise.
func (o *RegulatoryRequirements) GetPhoneNumberType() string {
	if o == nil || IsNil(o.PhoneNumberType) {
		var ret string
		return ret
	}
	return *o.PhoneNumberType
}

// GetPhoneNumberTypeOk returns a tuple with the PhoneNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirements) GetPhoneNumberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumberType) {
		return nil, false
	}
	return o.PhoneNumberType, true
}

// HasPhoneNumberType returns a boolean if a field has been set.
func (o *RegulatoryRequirements) HasPhoneNumberType() bool {
	if o != nil && !IsNil(o.PhoneNumberType) {
		return true
	}

	return false
}

// SetPhoneNumberType gets a reference to the given string and assigns it to the PhoneNumberType field.
func (o *RegulatoryRequirements) SetPhoneNumberType(v string) {
	o.PhoneNumberType = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RegulatoryRequirements) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirements) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RegulatoryRequirements) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *RegulatoryRequirements) SetAction(v string) {
	o.Action = &v
}

// GetRegulatoryRequirements returns the RegulatoryRequirements field value if set, zero value otherwise.
func (o *RegulatoryRequirements) GetRegulatoryRequirements() []RegulatoryRequirementsRegulatoryRequirementsInner {
	if o == nil || IsNil(o.RegulatoryRequirements) {
		var ret []RegulatoryRequirementsRegulatoryRequirementsInner
		return ret
	}
	return o.RegulatoryRequirements
}

// GetRegulatoryRequirementsOk returns a tuple with the RegulatoryRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulatoryRequirements) GetRegulatoryRequirementsOk() ([]RegulatoryRequirementsRegulatoryRequirementsInner, bool) {
	if o == nil || IsNil(o.RegulatoryRequirements) {
		return nil, false
	}
	return o.RegulatoryRequirements, true
}

// HasRegulatoryRequirements returns a boolean if a field has been set.
func (o *RegulatoryRequirements) HasRegulatoryRequirements() bool {
	if o != nil && !IsNil(o.RegulatoryRequirements) {
		return true
	}

	return false
}

// SetRegulatoryRequirements gets a reference to the given []RegulatoryRequirementsRegulatoryRequirementsInner and assigns it to the RegulatoryRequirements field.
func (o *RegulatoryRequirements) SetRegulatoryRequirements(v []RegulatoryRequirementsRegulatoryRequirementsInner) {
	o.RegulatoryRequirements = v
}

func (o RegulatoryRequirements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegulatoryRequirements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.PhoneNumberType) {
		toSerialize["phone_number_type"] = o.PhoneNumberType
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.RegulatoryRequirements) {
		toSerialize["regulatory_requirements"] = o.RegulatoryRequirements
	}
	return toSerialize, nil
}

type NullableRegulatoryRequirements struct {
	value *RegulatoryRequirements
	isSet bool
}

func (v NullableRegulatoryRequirements) Get() *RegulatoryRequirements {
	return v.value
}

func (v *NullableRegulatoryRequirements) Set(val *RegulatoryRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableRegulatoryRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableRegulatoryRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegulatoryRequirements(val *RegulatoryRequirements) *NullableRegulatoryRequirements {
	return &NullableRegulatoryRequirements{value: val, isSet: true}
}

func (v NullableRegulatoryRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegulatoryRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


