// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package telnyx

import (
	"context"
	"net/http"

	"github.com/stainless-sdks/telnyx-go/internal/apijson"
	"github.com/stainless-sdks/telnyx-go/internal/requestconfig"
	"github.com/stainless-sdks/telnyx-go/option"
	"github.com/stainless-sdks/telnyx-go/packages/param"
)

// CampaignBuilderService contains methods and other services that help with
// interacting with the telnyx API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewCampaignBuilderService] method instead.
type CampaignBuilderService struct {
	Options []option.RequestOption
	Brand   CampaignBuilderBrandService
}

// NewCampaignBuilderService generates a new service that applies the given options
// to each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewCampaignBuilderService(opts ...option.RequestOption) (r CampaignBuilderService) {
	r = CampaignBuilderService{}
	r.Options = opts
	r.Brand = NewCampaignBuilderBrandService(opts...)
	return
}

// Before creating a campaign, use the
// [Qualify By Usecase endpoint](https://developers.telnyx.com/api/messaging/10dlc/get-usecase-qualification)
// to ensure that the brand you want to assign a new campaign to is qualified for
// the desired use case of that campaign. **Please note:** After campaign creation,
// you'll only be able to edit the campaign's sample messages. Creating a campaign
// will entail an upfront, non-refundable three month's cost that will depend on
// the campaign's use case
// ([see 10DLC Costs section for details](https://developers.telnyx.com/docs/messaging/10dlc/concepts#10dlc-costs)).
func (r *CampaignBuilderService) New(ctx context.Context, body CampaignBuilderNewParams, opts ...option.RequestOption) (res *TelnyxCampaignCsp, err error) {
	opts = append(r.Options[:], opts...)
	path := "campaignBuilder"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

type CampaignBuilderNewParams struct {
	// Alphanumeric identifier of the brand associated with this campaign.
	BrandID string `json:"brandId,required"`
	// Summary description of this campaign.
	Description string `json:"description,required"`
	// Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
	// operation to retrieve usecases available for given brand.
	Usecase string `json:"usecase,required"`
	// Age gated message content in campaign.
	AgeGated param.Opt[bool] `json:"ageGated,omitzero"`
	// Campaign subscription auto-renewal option. If set to true, then campaign will
	// automatically renewal at end of billing cycle.
	AutoRenewal param.Opt[bool] `json:"autoRenewal,omitzero"`
	// Direct lending or loan arrangement
	DirectLending param.Opt[bool] `json:"directLending,omitzero"`
	// Does message generated by the campaign include URL link in SMS?
	EmbeddedLink param.Opt[bool] `json:"embeddedLink,omitzero"`
	// Sample of an embedded link that will be sent to subscribers.
	EmbeddedLinkSample param.Opt[string] `json:"embeddedLinkSample,omitzero"`
	// Does message generated by the campaign include phone number in SMS?
	EmbeddedPhone param.Opt[bool] `json:"embeddedPhone,omitzero"`
	// Subscriber help keywords. Multiple keywords are comma separated without space.
	HelpKeywords param.Opt[string] `json:"helpKeywords,omitzero"`
	// Help message of the campaign.
	HelpMessage param.Opt[string] `json:"helpMessage,omitzero"`
	// Message flow description.
	MessageFlow param.Opt[string] `json:"messageFlow,omitzero"`
	// Does campaign utilize pool of phone numbers?
	NumberPool param.Opt[bool] `json:"numberPool,omitzero"`
	// Subscriber opt-in keywords. Multiple keywords are comma separated without space.
	OptinKeywords param.Opt[string] `json:"optinKeywords,omitzero"`
	// Subscriber opt-in message.
	OptinMessage param.Opt[string] `json:"optinMessage,omitzero"`
	// Subscriber opt-out keywords. Multiple keywords are comma separated without
	// space.
	OptoutKeywords param.Opt[string] `json:"optoutKeywords,omitzero"`
	// Subscriber opt-out message.
	OptoutMessage param.Opt[string] `json:"optoutMessage,omitzero"`
	// Link to the campaign's privacy policy.
	PrivacyPolicyLink param.Opt[string] `json:"privacyPolicyLink,omitzero"`
	// Caller supplied campaign reference ID. If supplied, the value must be unique
	// across all submitted campaigns. Can be used to prevent duplicate campaign
	// registrations.
	ReferenceID param.Opt[string] `json:"referenceId,omitzero"`
	// Alphanumeric identifier of the reseller that you want to associate with this
	// campaign.
	ResellerID param.Opt[string] `json:"resellerId,omitzero"`
	// Message sample. Some campaign tiers require 1 or more message samples.
	Sample1 param.Opt[string] `json:"sample1,omitzero"`
	// Message sample. Some campaign tiers require 2 or more message samples.
	Sample2 param.Opt[string] `json:"sample2,omitzero"`
	// Message sample. Some campaign tiers require 3 or more message samples.
	Sample3 param.Opt[string] `json:"sample3,omitzero"`
	// Message sample. Some campaign tiers require 4 or more message samples.
	Sample4 param.Opt[string] `json:"sample4,omitzero"`
	// Message sample. Some campaign tiers require 5 or more message samples.
	Sample5 param.Opt[string] `json:"sample5,omitzero"`
	// Does campaign responds to help keyword(s)?
	SubscriberHelp param.Opt[bool] `json:"subscriberHelp,omitzero"`
	// Does campaign require subscriber to opt-in before SMS is sent to subscriber?
	SubscriberOptin param.Opt[bool] `json:"subscriberOptin,omitzero"`
	// Does campaign support subscriber opt-out keyword(s)?
	SubscriberOptout param.Opt[bool] `json:"subscriberOptout,omitzero"`
	// Is terms and conditions accepted?
	TermsAndConditions param.Opt[bool] `json:"termsAndConditions,omitzero"`
	// Link to the campaign's terms and conditions.
	TermsAndConditionsLink param.Opt[string] `json:"termsAndConditionsLink,omitzero"`
	// Failover webhook to which campaign status updates are sent.
	WebhookFailoverURL param.Opt[string] `json:"webhookFailoverURL,omitzero"`
	// Webhook to which campaign status updates are sent.
	WebhookURL param.Opt[string] `json:"webhookURL,omitzero"`
	// Submit campaign to given list of MNOs by MNO's network ID. Default is all MNOs
	// if no value provided.
	MnoIDs []int64 `json:"mnoIds,omitzero"`
	// Campaign sub-usecases. Must be of defined valid sub-usecase types. Use
	// `/registry/enum/usecase` operation to retrieve list of valid sub-usecases
	SubUsecases []string `json:"subUsecases,omitzero"`
	// Tags to be set on the Campaign.
	Tag []string `json:"tag,omitzero"`
	paramObj
}

func (r CampaignBuilderNewParams) MarshalJSON() (data []byte, err error) {
	type shadow CampaignBuilderNewParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *CampaignBuilderNewParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}
